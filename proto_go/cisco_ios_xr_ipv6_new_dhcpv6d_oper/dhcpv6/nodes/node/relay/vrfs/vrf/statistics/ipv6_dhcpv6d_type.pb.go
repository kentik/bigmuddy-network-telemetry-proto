// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_new_dhcpv6d_oper/dhcpv6/nodes/node/relay/vrfs/vrf/statistics/ipv6_dhcpv6d_type.proto

package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// DHCPv6 packets
type Ipv6Dhcpv6DType_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	VrfName  string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *Ipv6Dhcpv6DType_KEYS) Reset() {
	*x = Ipv6Dhcpv6DType_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DType_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DType_KEYS) ProtoMessage() {}

func (x *Ipv6Dhcpv6DType_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DType_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DType_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6Dhcpv6DType_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Ipv6Dhcpv6DType_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type Ipv6Dhcpv6DType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DHCPV6 solicit packets
	Solicit *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,50,opt,name=solicit,proto3" json:"solicit,omitempty"`
	// DHCPV6 advertise packets
	Advertise *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,51,opt,name=advertise,proto3" json:"advertise,omitempty"`
	// DHCPV6 request packets
	Request *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,52,opt,name=request,proto3" json:"request,omitempty"`
	// DHCPV6 reply packets
	Reply *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,53,opt,name=reply,proto3" json:"reply,omitempty"`
	// DHCPV6 confirm packets
	Confirm *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,54,opt,name=confirm,proto3" json:"confirm,omitempty"`
	// DHCPV6 decline packets
	Decline *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,55,opt,name=decline,proto3" json:"decline,omitempty"`
	// DHCPV6 renew packets
	Renew *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,56,opt,name=renew,proto3" json:"renew,omitempty"`
	// DHCPV6 rebind packets
	Rebind *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,57,opt,name=rebind,proto3" json:"rebind,omitempty"`
	// DHCPV6 release packets
	Release *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,58,opt,name=release,proto3" json:"release,omitempty"`
	// DHCPV6 reconfig packets
	Reconfig *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,59,opt,name=reconfig,proto3" json:"reconfig,omitempty"`
	// DHCPV6 inform packets
	Inform *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,60,opt,name=inform,proto3" json:"inform,omitempty"`
	// DHCPV6 relay forward packets
	RelayForward *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,61,opt,name=relay_forward,json=relayForward,proto3" json:"relay_forward,omitempty"`
	// DHCPV6 relay reply packets
	RelayReply *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,62,opt,name=relay_reply,json=relayReply,proto3" json:"relay_reply,omitempty"`
	// DHCPV6 lease query packets
	LeaseQuery *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,63,opt,name=lease_query,json=leaseQuery,proto3" json:"lease_query,omitempty"`
	// DHCPV6 lease query reply packets
	LeaseQueryReply *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,64,opt,name=lease_query_reply,json=leaseQueryReply,proto3" json:"lease_query_reply,omitempty"`
	// DHCPV6 lease query done packets
	LeaseQueryDone *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,65,opt,name=lease_query_done,json=leaseQueryDone,proto3" json:"lease_query_done,omitempty"`
	// DHCPV6 lease query data packets
	LeaseQueryData *Ipv6Dhcpv6DFilteredStats `protobuf:"bytes,66,opt,name=lease_query_data,json=leaseQueryData,proto3" json:"lease_query_data,omitempty"`
}

func (x *Ipv6Dhcpv6DType) Reset() {
	*x = Ipv6Dhcpv6DType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DType) ProtoMessage() {}

func (x *Ipv6Dhcpv6DType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DType.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6Dhcpv6DType) GetSolicit() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Solicit
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetAdvertise() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Advertise
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetRequest() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetReply() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetConfirm() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Confirm
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetDecline() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Decline
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetRenew() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Renew
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetRebind() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Rebind
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetRelease() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetReconfig() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Reconfig
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetInform() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.Inform
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetRelayForward() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.RelayForward
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetRelayReply() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.RelayReply
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetLeaseQuery() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.LeaseQuery
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetLeaseQueryReply() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.LeaseQueryReply
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetLeaseQueryDone() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.LeaseQueryDone
	}
	return nil
}

func (x *Ipv6Dhcpv6DType) GetLeaseQueryData() *Ipv6Dhcpv6DFilteredStats {
	if x != nil {
		return x.LeaseQueryData
	}
	return nil
}

// DHCPv6 filtered statistics
type Ipv6Dhcpv6DFilteredStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Received packets
	ReceivedPackets uint64 `protobuf:"varint,1,opt,name=received_packets,json=receivedPackets,proto3" json:"received_packets,omitempty"`
	// Transmitted packets
	TransmittedPackets uint64 `protobuf:"varint,2,opt,name=transmitted_packets,json=transmittedPackets,proto3" json:"transmitted_packets,omitempty"`
	// Dropped packets
	DroppedPackets uint64 `protobuf:"varint,3,opt,name=dropped_packets,json=droppedPackets,proto3" json:"dropped_packets,omitempty"`
}

func (x *Ipv6Dhcpv6DFilteredStats) Reset() {
	*x = Ipv6Dhcpv6DFilteredStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DFilteredStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DFilteredStats) ProtoMessage() {}

func (x *Ipv6Dhcpv6DFilteredStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DFilteredStats.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DFilteredStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv6Dhcpv6DFilteredStats) GetReceivedPackets() uint64 {
	if x != nil {
		return x.ReceivedPackets
	}
	return 0
}

func (x *Ipv6Dhcpv6DFilteredStats) GetTransmittedPackets() uint64 {
	if x != nil {
		return x.TransmittedPackets
	}
	return 0
}

func (x *Ipv6Dhcpv6DFilteredStats) GetDroppedPackets() uint64 {
	if x != nil {
		return x.DroppedPackets
	}
	return 0
}

var File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDesc = []byte{
	0x0a, 0x66, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x76, 0x72, 0x66,
	0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x12, 0x0a, 0x11, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x07, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x85, 0x01, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x64, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x81, 0x01, 0x0a, 0x05, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a,
	0x06, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x95, 0x01,
	0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01,
	0x0a, 0x1b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescData = file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_goTypes = []interface{}{
	(*Ipv6Dhcpv6DType_KEYS)(nil),     // 0: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type_KEYS
	(*Ipv6Dhcpv6DType)(nil),          // 1: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type
	(*Ipv6Dhcpv6DFilteredStats)(nil), // 2: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
}
var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_depIdxs = []int32{
	2,  // 0: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.solicit:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 1: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.advertise:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 2: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.request:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 3: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.reply:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 4: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.confirm:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 5: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.decline:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 6: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.renew:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 7: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.rebind:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 8: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.release:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 9: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.reconfig:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 10: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.inform:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 11: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.relay_forward:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 12: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.relay_reply:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 13: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.lease_query:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 14: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.lease_query_reply:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 15: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.lease_query_done:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	2,  // 16: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_type.lease_query_data:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.relay.vrfs.vrf.statistics.ipv6_dhcpv6d_filtered_stats
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_init()
}
func file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_init() {
	if File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DType_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DFilteredStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto = out.File
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_relay_vrfs_vrf_statistics_ipv6_dhcpv6d_type_proto_depIdxs = nil
}
