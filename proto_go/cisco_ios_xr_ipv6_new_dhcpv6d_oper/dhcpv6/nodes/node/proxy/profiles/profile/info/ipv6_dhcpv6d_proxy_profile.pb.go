// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_new_dhcpv6d_oper/dhcpv6/nodes/node/proxy/profiles/profile/info/ipv6_dhcpv6d_proxy_profile.proto

package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// DHCPv6 proxy profile parameters
type Ipv6Dhcpv6DProxyProfile_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName    string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProfileName string `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyProfile_KEYS) Reset() {
	*x = Ipv6Dhcpv6DProxyProfile_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyProfile_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyProfile_KEYS) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyProfile_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyProfile_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyProfile_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6Dhcpv6DProxyProfile_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyProfile_KEYS) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type Ipv6Dhcpv6DProxyProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proxy profile name
	ProfileName string `protobuf:"bytes,50,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	// Helper addresses
	ProfileHelperAddress []*IPV6AddressType `protobuf:"bytes,51,rep,name=profile_helper_address,json=profileHelperAddress,proto3" json:"profile_helper_address,omitempty"`
	// VRF names
	VrfName []*StringVrf `protobuf:"bytes,52,rep,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Interface names
	InterfaceName []*StringIfname `protobuf:"bytes,53,rep,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Remote id
	RemoteId string `protobuf:"bytes,54,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// Link address
	ProfileLinkAddress string `protobuf:"bytes,55,opt,name=profile_link_address,json=profileLinkAddress,proto3" json:"profile_link_address,omitempty"`
	// Interface id references
	InterfaceIdReferences *Ipv6Dhcpv6DProxyIidReference `protobuf:"bytes,56,opt,name=interface_id_references,json=interfaceIdReferences,proto3" json:"interface_id_references,omitempty"`
	// VRF references
	VrfReferences *Ipv6Dhcpv6DProxyVrfReference `protobuf:"bytes,57,opt,name=vrf_references,json=vrfReferences,proto3" json:"vrf_references,omitempty"`
	// Interface references
	InterfaceReferences *Ipv6Dhcpv6DProxyInterfaceReference `protobuf:"bytes,58,opt,name=interface_references,json=interfaceReferences,proto3" json:"interface_references,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyProfile) Reset() {
	*x = Ipv6Dhcpv6DProxyProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyProfile) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyProfile.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyProfile) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6Dhcpv6DProxyProfile) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyProfile) GetProfileHelperAddress() []*IPV6AddressType {
	if x != nil {
		return x.ProfileHelperAddress
	}
	return nil
}

func (x *Ipv6Dhcpv6DProxyProfile) GetVrfName() []*StringVrf {
	if x != nil {
		return x.VrfName
	}
	return nil
}

func (x *Ipv6Dhcpv6DProxyProfile) GetInterfaceName() []*StringIfname {
	if x != nil {
		return x.InterfaceName
	}
	return nil
}

func (x *Ipv6Dhcpv6DProxyProfile) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyProfile) GetProfileLinkAddress() string {
	if x != nil {
		return x.ProfileLinkAddress
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyProfile) GetInterfaceIdReferences() *Ipv6Dhcpv6DProxyIidReference {
	if x != nil {
		return x.InterfaceIdReferences
	}
	return nil
}

func (x *Ipv6Dhcpv6DProxyProfile) GetVrfReferences() *Ipv6Dhcpv6DProxyVrfReference {
	if x != nil {
		return x.VrfReferences
	}
	return nil
}

func (x *Ipv6Dhcpv6DProxyProfile) GetInterfaceReferences() *Ipv6Dhcpv6DProxyInterfaceReference {
	if x != nil {
		return x.InterfaceReferences
	}
	return nil
}

// IPV6 Address type
type IPV6AddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPV6AddressType) Reset() {
	*x = IPV6AddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPV6AddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPV6AddressType) ProtoMessage() {}

func (x *IPV6AddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPV6AddressType.ProtoReflect.Descriptor instead.
func (*IPV6AddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{2}
}

func (x *IPV6AddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StringVrf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringVrf) Reset() {
	*x = StringVrf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringVrf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringVrf) ProtoMessage() {}

func (x *StringVrf) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringVrf.ProtoReflect.Descriptor instead.
func (*StringVrf) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{3}
}

func (x *StringVrf) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StringIfname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringIfname) Reset() {
	*x = StringIfname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringIfname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringIfname) ProtoMessage() {}

func (x *StringIfname) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringIfname.ProtoReflect.Descriptor instead.
func (*StringIfname) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{4}
}

func (x *StringIfname) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// DHCPv6 proxy profile reference
type Ipv6Dhcpv6DProxyVrfReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next vrf reference information
	Ipv6Dhcpv6DProxyVrfReference []*Ipv6Dhcpv6DProxyVrfReferenceItem `protobuf:"bytes,1,rep,name=ipv6_dhcpv6d_proxy_vrf_reference,json=ipv6Dhcpv6dProxyVrfReference,proto3" json:"ipv6_dhcpv6d_proxy_vrf_reference,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyVrfReference) Reset() {
	*x = Ipv6Dhcpv6DProxyVrfReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyVrfReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyVrfReference) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyVrfReference) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyVrfReference.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyVrfReference) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{5}
}

func (x *Ipv6Dhcpv6DProxyVrfReference) GetIpv6Dhcpv6DProxyVrfReference() []*Ipv6Dhcpv6DProxyVrfReferenceItem {
	if x != nil {
		return x.Ipv6Dhcpv6DProxyVrfReference
	}
	return nil
}

type Ipv6Dhcpv6DProxyVrfReferenceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF name
	ProxyReferenceVrfName string `protobuf:"bytes,1,opt,name=proxy_reference_vrf_name,json=proxyReferenceVrfName,proto3" json:"proxy_reference_vrf_name,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyVrfReferenceItem) Reset() {
	*x = Ipv6Dhcpv6DProxyVrfReferenceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyVrfReferenceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyVrfReferenceItem) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyVrfReferenceItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyVrfReferenceItem.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyVrfReferenceItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{6}
}

func (x *Ipv6Dhcpv6DProxyVrfReferenceItem) GetProxyReferenceVrfName() string {
	if x != nil {
		return x.ProxyReferenceVrfName
	}
	return ""
}

// DHCPv6 proxy profile reference
type Ipv6Dhcpv6DProxyInterfaceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next interface reference information
	Ipv6Dhcpv6DProxyInterfaceReference []*Ipv6Dhcpv6DProxyInterfaceReferenceItem `protobuf:"bytes,1,rep,name=ipv6_dhcpv6d_proxy_interface_reference,json=ipv6Dhcpv6dProxyInterfaceReference,proto3" json:"ipv6_dhcpv6d_proxy_interface_reference,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyInterfaceReference) Reset() {
	*x = Ipv6Dhcpv6DProxyInterfaceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyInterfaceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyInterfaceReference) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyInterfaceReference) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyInterfaceReference.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyInterfaceReference) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{7}
}

func (x *Ipv6Dhcpv6DProxyInterfaceReference) GetIpv6Dhcpv6DProxyInterfaceReference() []*Ipv6Dhcpv6DProxyInterfaceReferenceItem {
	if x != nil {
		return x.Ipv6Dhcpv6DProxyInterfaceReference
	}
	return nil
}

type Ipv6Dhcpv6DProxyInterfaceReferenceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name
	ProxyReferenceInterfaceName string `protobuf:"bytes,1,opt,name=proxy_reference_interface_name,json=proxyReferenceInterfaceName,proto3" json:"proxy_reference_interface_name,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyInterfaceReferenceItem) Reset() {
	*x = Ipv6Dhcpv6DProxyInterfaceReferenceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyInterfaceReferenceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyInterfaceReferenceItem) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyInterfaceReferenceItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyInterfaceReferenceItem.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyInterfaceReferenceItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{8}
}

func (x *Ipv6Dhcpv6DProxyInterfaceReferenceItem) GetProxyReferenceInterfaceName() string {
	if x != nil {
		return x.ProxyReferenceInterfaceName
	}
	return ""
}

// DHCPv6 proxy profile iid reference
type Ipv6Dhcpv6DProxyIidReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next interface iid reference information
	Ipv6Dhcpv6DProxyIidReference []*Ipv6Dhcpv6DProxyIidReferenceItem `protobuf:"bytes,1,rep,name=ipv6_dhcpv6d_proxy_iid_reference,json=ipv6Dhcpv6dProxyIidReference,proto3" json:"ipv6_dhcpv6d_proxy_iid_reference,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyIidReference) Reset() {
	*x = Ipv6Dhcpv6DProxyIidReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyIidReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyIidReference) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyIidReference) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyIidReference.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyIidReference) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{9}
}

func (x *Ipv6Dhcpv6DProxyIidReference) GetIpv6Dhcpv6DProxyIidReference() []*Ipv6Dhcpv6DProxyIidReferenceItem {
	if x != nil {
		return x.Ipv6Dhcpv6DProxyIidReference
	}
	return nil
}

type Ipv6Dhcpv6DProxyIidReferenceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name for interface id
	ProxyIidInterfaceName string `protobuf:"bytes,1,opt,name=proxy_iid_interface_name,json=proxyIidInterfaceName,proto3" json:"proxy_iid_interface_name,omitempty"`
	// Interface id
	ProxyInterfaceId string `protobuf:"bytes,2,opt,name=proxy_interface_id,json=proxyInterfaceId,proto3" json:"proxy_interface_id,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyIidReferenceItem) Reset() {
	*x = Ipv6Dhcpv6DProxyIidReferenceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyIidReferenceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyIidReferenceItem) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyIidReferenceItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyIidReferenceItem.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyIidReferenceItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP(), []int{10}
}

func (x *Ipv6Dhcpv6DProxyIidReferenceItem) GetProxyIidInterfaceName() string {
	if x != nil {
		return x.ProxyIidInterfaceName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyIidReferenceItem) GetProxyInterfaceId() string {
	if x != nil {
		return x.ProxyInterfaceId
	}
	return ""
}

var File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDesc = []byte{
	0x0a, 0x71, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x50, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x1f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x08, 0x0a, 0x1a, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x49,
	0x50, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x72, 0x66, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x76, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x76, 0x72, 0x66, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xab,
	0x01, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x0f,
	0x49, 0x50, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x72, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x20, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x20, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x76, 0x72, 0x66,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x77, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x1c, 0x69, 0x70, 0x76, 0x36, 0x44,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x72, 0x66, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x76, 0x72,
	0x66, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x26, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x26, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x52, 0x22, 0x69, 0x70, 0x76, 0x36, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36,
	0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x72, 0x0a, 0x2b, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a,
	0x20, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0xbf, 0x01, 0x0a, 0x20, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x1c, 0x69, 0x70, 0x76, 0x36, 0x44, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x69, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescData = file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_goTypes = []interface{}{
	(*Ipv6Dhcpv6DProxyProfile_KEYS)(nil),           // 0: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile_KEYS
	(*Ipv6Dhcpv6DProxyProfile)(nil),                // 1: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile
	(*IPV6AddressType)(nil),                        // 2: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.IPV6AddressType
	(*StringVrf)(nil),                              // 3: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.string_vrf
	(*StringIfname)(nil),                           // 4: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.string_ifname
	(*Ipv6Dhcpv6DProxyVrfReference)(nil),           // 5: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_vrf_reference
	(*Ipv6Dhcpv6DProxyVrfReferenceItem)(nil),       // 6: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_vrf_reference_item
	(*Ipv6Dhcpv6DProxyInterfaceReference)(nil),     // 7: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_interface_reference
	(*Ipv6Dhcpv6DProxyInterfaceReferenceItem)(nil), // 8: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_interface_reference_item
	(*Ipv6Dhcpv6DProxyIidReference)(nil),           // 9: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_iid_reference
	(*Ipv6Dhcpv6DProxyIidReferenceItem)(nil),       // 10: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_iid_reference_item
}
var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_depIdxs = []int32{
	2,  // 0: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile.profile_helper_address:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.IPV6AddressType
	3,  // 1: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile.vrf_name:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.string_vrf
	4,  // 2: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile.interface_name:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.string_ifname
	9,  // 3: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile.interface_id_references:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_iid_reference
	5,  // 4: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile.vrf_references:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_vrf_reference
	7,  // 5: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_profile.interface_references:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_interface_reference
	6,  // 6: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_vrf_reference.ipv6_dhcpv6d_proxy_vrf_reference:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_vrf_reference_item
	8,  // 7: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_interface_reference.ipv6_dhcpv6d_proxy_interface_reference:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_interface_reference_item
	10, // 8: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_iid_reference.ipv6_dhcpv6d_proxy_iid_reference:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.profiles.profile.info.ipv6_dhcpv6d_proxy_iid_reference_item
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_init()
}
func file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_init() {
	if File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyProfile_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPV6AddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringVrf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringIfname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyVrfReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyVrfReferenceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyInterfaceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyInterfaceReferenceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyIidReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyIidReferenceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto = out.File
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_profiles_profile_info_ipv6_dhcpv6d_proxy_profile_proto_depIdxs = nil
}
