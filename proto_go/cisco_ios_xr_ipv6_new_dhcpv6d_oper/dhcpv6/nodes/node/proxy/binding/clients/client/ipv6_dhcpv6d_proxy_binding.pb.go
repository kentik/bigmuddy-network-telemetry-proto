// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_new_dhcpv6d_oper/dhcpv6/nodes/node/proxy/binding/clients/client/ipv6_dhcpv6d_proxy_binding.proto

package cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// DHCPv6 proxy binding entry
type Ipv6Dhcpv6DProxyBinding_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyBinding_KEYS) Reset() {
	*x = Ipv6Dhcpv6DProxyBinding_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyBinding_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyBinding_KEYS) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyBinding_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyBinding_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyBinding_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6Dhcpv6DProxyBinding_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding_KEYS) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type Ipv6Dhcpv6DProxyBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client DUID
	Duid string `protobuf:"bytes,50,opt,name=duid,proto3" json:"duid,omitempty"`
	// DHCPV6 client flag
	ClientFlag uint32 `protobuf:"varint,51,opt,name=client_flag,json=clientFlag,proto3" json:"client_flag,omitempty"`
	// DHCPV6 subscriber label
	SubscriberLabel uint32 `protobuf:"varint,52,opt,name=subscriber_label,json=subscriberLabel,proto3" json:"subscriber_label,omitempty"`
	// DHCPVV6 client/subscriber VRF name
	VrfName string `protobuf:"bytes,53,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Client MAC address
	MacAddress string `protobuf:"bytes,54,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Number of ia_id/pd
	IaIdPDs uint32 `protobuf:"varint,55,opt,name=ia_id_p_ds,json=iaIdPDs,proto3" json:"ia_id_p_ds,omitempty"`
	// List of DHCPv6 IA_ID/PDs
	IaIdPd *BagDhcpv6DIaIdPdInfo `protobuf:"bytes,56,opt,name=ia_id_pd,json=iaIdPd,proto3" json:"ia_id_pd,omitempty"`
	// DHCPV6 access interface to client
	InterfaceName string `protobuf:"bytes,57,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// DHCPV6 access VRF name to client
	AccessVrfName string `protobuf:"bytes,58,opt,name=access_vrf_name,json=accessVrfName,proto3" json:"access_vrf_name,omitempty"`
	// DHCPV6 VLAN tag count
	ProxyBindingTags uint32 `protobuf:"varint,59,opt,name=proxy_binding_tags,json=proxyBindingTags,proto3" json:"proxy_binding_tags,omitempty"`
	// DHCPV6 VLAN Outer VLAN
	ProxyBindingOuterTag uint32 `protobuf:"varint,60,opt,name=proxy_binding_outer_tag,json=proxyBindingOuterTag,proto3" json:"proxy_binding_outer_tag,omitempty"`
	// DHCPV6 VLAN Inner VLAN
	ProxyBindingInnerTag uint32 `protobuf:"varint,61,opt,name=proxy_binding_inner_tag,json=proxyBindingInnerTag,proto3" json:"proxy_binding_inner_tag,omitempty"`
	// DHCPV6 class name
	ClassName string `protobuf:"bytes,62,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	// DHCPV6 pool name
	PoolName string `protobuf:"bytes,63,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	// DHCPV6 received Remote ID
	RxRemoteId string `protobuf:"bytes,64,opt,name=rx_remote_id,json=rxRemoteId,proto3" json:"rx_remote_id,omitempty"`
	// DHCPV6 transmitted Remote ID
	TxRemoteId string `protobuf:"bytes,65,opt,name=tx_remote_id,json=txRemoteId,proto3" json:"tx_remote_id,omitempty"`
	// DHCPV6 received Interface ID
	RxInterfaceId string `protobuf:"bytes,66,opt,name=rx_interface_id,json=rxInterfaceId,proto3" json:"rx_interface_id,omitempty"`
	// DHCPV6 transmitted Interface ID
	TxInterfaceId string `protobuf:"bytes,67,opt,name=tx_interface_id,json=txInterfaceId,proto3" json:"tx_interface_id,omitempty"`
	// DHCPV6 server IPv6 address
	ServerIpv6Address string `protobuf:"bytes,68,opt,name=server_ipv6_address,json=serverIpv6Address,proto3" json:"server_ipv6_address,omitempty"`
	// DHCPV6 profile name
	ProfileName string `protobuf:"bytes,69,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	// DHCPV6 framed ipv6 addess used by ND
	FramedIpv6Prefix string `protobuf:"bytes,70,opt,name=framed_ipv6_prefix,json=framedIpv6Prefix,proto3" json:"framed_ipv6_prefix,omitempty"`
	// DHCPV6 framed ipv6 prefix length used by ND
	FramedPrefixLength uint32 `protobuf:"varint,71,opt,name=framed_prefix_length,json=framedPrefixLength,proto3" json:"framed_prefix_length,omitempty"`
	// Is true if DHCP next renew from client will be NAK'd
	IsNakNextRenew bool `protobuf:"varint,72,opt,name=is_nak_next_renew,json=isNakNextRenew,proto3" json:"is_nak_next_renew,omitempty"`
	// DHCPV6 SRG state
	SrgState uint32 `protobuf:"varint,73,opt,name=srg_state,json=srgState,proto3" json:"srg_state,omitempty"`
	// DHCPV6 SRG Intf Role
	SrgIntfRole uint32 `protobuf:"varint,74,opt,name=srg_intf_role,json=srgIntfRole,proto3" json:"srg_intf_role,omitempty"`
	// SRG P2P Status
	Srgp2P bool `protobuf:"varint,75,opt,name=srgp2_p,json=srgp2P,proto3" json:"srgp2_p,omitempty"`
	// DHCPV6 SRG VRF NAME
	SrgVrfName string `protobuf:"bytes,76,opt,name=srg_vrf_name,json=srgVrfName,proto3" json:"srg_vrf_name,omitempty"`
}

func (x *Ipv6Dhcpv6DProxyBinding) Reset() {
	*x = Ipv6Dhcpv6DProxyBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Dhcpv6DProxyBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Dhcpv6DProxyBinding) ProtoMessage() {}

func (x *Ipv6Dhcpv6DProxyBinding) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Dhcpv6DProxyBinding.ProtoReflect.Descriptor instead.
func (*Ipv6Dhcpv6DProxyBinding) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6Dhcpv6DProxyBinding) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetClientFlag() uint32 {
	if x != nil {
		return x.ClientFlag
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetSubscriberLabel() uint32 {
	if x != nil {
		return x.SubscriberLabel
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetIaIdPDs() uint32 {
	if x != nil {
		return x.IaIdPDs
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetIaIdPd() *BagDhcpv6DIaIdPdInfo {
	if x != nil {
		return x.IaIdPd
	}
	return nil
}

func (x *Ipv6Dhcpv6DProxyBinding) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetAccessVrfName() string {
	if x != nil {
		return x.AccessVrfName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetProxyBindingTags() uint32 {
	if x != nil {
		return x.ProxyBindingTags
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetProxyBindingOuterTag() uint32 {
	if x != nil {
		return x.ProxyBindingOuterTag
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetProxyBindingInnerTag() uint32 {
	if x != nil {
		return x.ProxyBindingInnerTag
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetRxRemoteId() string {
	if x != nil {
		return x.RxRemoteId
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetTxRemoteId() string {
	if x != nil {
		return x.TxRemoteId
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetRxInterfaceId() string {
	if x != nil {
		return x.RxInterfaceId
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetTxInterfaceId() string {
	if x != nil {
		return x.TxInterfaceId
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetServerIpv6Address() string {
	if x != nil {
		return x.ServerIpv6Address
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetFramedIpv6Prefix() string {
	if x != nil {
		return x.FramedIpv6Prefix
	}
	return ""
}

func (x *Ipv6Dhcpv6DProxyBinding) GetFramedPrefixLength() uint32 {
	if x != nil {
		return x.FramedPrefixLength
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetIsNakNextRenew() bool {
	if x != nil {
		return x.IsNakNextRenew
	}
	return false
}

func (x *Ipv6Dhcpv6DProxyBinding) GetSrgState() uint32 {
	if x != nil {
		return x.SrgState
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetSrgIntfRole() uint32 {
	if x != nil {
		return x.SrgIntfRole
	}
	return 0
}

func (x *Ipv6Dhcpv6DProxyBinding) GetSrgp2P() bool {
	if x != nil {
		return x.Srgp2P
	}
	return false
}

func (x *Ipv6Dhcpv6DProxyBinding) GetSrgVrfName() string {
	if x != nil {
		return x.SrgVrfName
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPV6AddressType) Reset() {
	*x = IPV6AddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPV6AddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPV6AddressType) ProtoMessage() {}

func (x *IPV6AddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPV6AddressType.ProtoReflect.Descriptor instead.
func (*IPV6AddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{2}
}

func (x *IPV6AddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Time in diffrent formats
type TimeBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DHCPV6 client lease in seconds
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Time in format HH:MM:SS
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TimeBag) Reset() {
	*x = TimeBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBag) ProtoMessage() {}

func (x *TimeBag) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBag.ProtoReflect.Descriptor instead.
func (*TimeBag) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{3}
}

func (x *TimeBag) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *TimeBag) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type BagDhcpv6DAddrAttrb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next address attribute information
	BagDhcpv6DAddrAttrb []*BagDhcpv6DAddrAttrbItem `protobuf:"bytes,1,rep,name=bag_dhcpv6d_addr_attrb,json=bagDhcpv6dAddrAttrb,proto3" json:"bag_dhcpv6d_addr_attrb,omitempty"`
}

func (x *BagDhcpv6DAddrAttrb) Reset() {
	*x = BagDhcpv6DAddrAttrb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagDhcpv6DAddrAttrb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagDhcpv6DAddrAttrb) ProtoMessage() {}

func (x *BagDhcpv6DAddrAttrb) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagDhcpv6DAddrAttrb.ProtoReflect.Descriptor instead.
func (*BagDhcpv6DAddrAttrb) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{4}
}

func (x *BagDhcpv6DAddrAttrb) GetBagDhcpv6DAddrAttrb() []*BagDhcpv6DAddrAttrbItem {
	if x != nil {
		return x.BagDhcpv6DAddrAttrb
	}
	return nil
}

type BagDhcpv6DAddrAttrbItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// Lease time in seconds
	LeaseTime uint32 `protobuf:"varint,3,opt,name=lease_time,json=leaseTime,proto3" json:"lease_time,omitempty"`
	// Remaining lease time in seconds
	RemainingLeaseTime uint32 `protobuf:"varint,4,opt,name=remaining_lease_time,json=remainingLeaseTime,proto3" json:"remaining_lease_time,omitempty"`
}

func (x *BagDhcpv6DAddrAttrbItem) Reset() {
	*x = BagDhcpv6DAddrAttrbItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagDhcpv6DAddrAttrbItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagDhcpv6DAddrAttrbItem) ProtoMessage() {}

func (x *BagDhcpv6DAddrAttrbItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagDhcpv6DAddrAttrbItem.ProtoReflect.Descriptor instead.
func (*BagDhcpv6DAddrAttrbItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{5}
}

func (x *BagDhcpv6DAddrAttrbItem) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BagDhcpv6DAddrAttrbItem) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *BagDhcpv6DAddrAttrbItem) GetLeaseTime() uint32 {
	if x != nil {
		return x.LeaseTime
	}
	return 0
}

func (x *BagDhcpv6DAddrAttrbItem) GetRemainingLeaseTime() uint32 {
	if x != nil {
		return x.RemainingLeaseTime
	}
	return 0
}

type BagDhcpv6DIaIdPdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ia_id_pd information
	BagDhcpv6DIaIdPdInfo []*BagDhcpv6DIaIdPdInfoItem `protobuf:"bytes,1,rep,name=bag_dhcpv6d_ia_id_pd_info,json=bagDhcpv6dIaIdPdInfo,proto3" json:"bag_dhcpv6d_ia_id_pd_info,omitempty"`
}

func (x *BagDhcpv6DIaIdPdInfo) Reset() {
	*x = BagDhcpv6DIaIdPdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagDhcpv6DIaIdPdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagDhcpv6DIaIdPdInfo) ProtoMessage() {}

func (x *BagDhcpv6DIaIdPdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagDhcpv6DIaIdPdInfo.ProtoReflect.Descriptor instead.
func (*BagDhcpv6DIaIdPdInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{6}
}

func (x *BagDhcpv6DIaIdPdInfo) GetBagDhcpv6DIaIdPdInfo() []*BagDhcpv6DIaIdPdInfoItem {
	if x != nil {
		return x.BagDhcpv6DIaIdPdInfo
	}
	return nil
}

type BagDhcpv6DIaIdPdInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IA type
	IaType string `protobuf:"bytes,1,opt,name=ia_type,json=iaType,proto3" json:"ia_type,omitempty"`
	// IA_ID of this IA
	IaId uint32 `protobuf:"varint,2,opt,name=ia_id,json=iaId,proto3" json:"ia_id,omitempty"`
	// FSM Flag for this IA
	Flags uint32 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
	// Total address in this IA
	TotalAddress uint32 `protobuf:"varint,4,opt,name=total_address,json=totalAddress,proto3" json:"total_address,omitempty"`
	// State
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// List of addresses in this IA
	Addresses *BagDhcpv6DAddrAttrb `protobuf:"bytes,6,opt,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *BagDhcpv6DIaIdPdInfoItem) Reset() {
	*x = BagDhcpv6DIaIdPdInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagDhcpv6DIaIdPdInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagDhcpv6DIaIdPdInfoItem) ProtoMessage() {}

func (x *BagDhcpv6DIaIdPdInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagDhcpv6DIaIdPdInfoItem.ProtoReflect.Descriptor instead.
func (*BagDhcpv6DIaIdPdInfoItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP(), []int{7}
}

func (x *BagDhcpv6DIaIdPdInfoItem) GetIaType() string {
	if x != nil {
		return x.IaType
	}
	return ""
}

func (x *BagDhcpv6DIaIdPdInfoItem) GetIaId() uint32 {
	if x != nil {
		return x.IaId
	}
	return 0
}

func (x *BagDhcpv6DIaIdPdInfoItem) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *BagDhcpv6DIaIdPdInfoItem) GetTotalAddress() uint32 {
	if x != nil {
		return x.TotalAddress
	}
	return 0
}

func (x *BagDhcpv6DIaIdPdInfoItem) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BagDhcpv6DIaIdPdInfoItem) GetAddresses() *BagDhcpv6DAddrAttrb {
	if x != nil {
		return x.Addresses
	}
	return nil
}

var File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDesc = []byte{
	0x0a, 0x72, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70,
	0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x1f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xf3, 0x08, 0x0a, 0x1a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x0a, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x5f, 0x64, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x61, 0x49, 0x64, 0x50, 0x44, 0x73, 0x12, 0x86, 0x01, 0x0a,
	0x08, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f,
	0x69, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69,
	0x61, 0x49, 0x64, 0x50, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x78, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x78, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x78, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x78, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x70, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6b, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x4e, 0x61, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x72, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x72, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x72, 0x67, 0x49, 0x6e, 0x74, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x72, 0x67, 0x70, 0x32, 0x5f, 0x70, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x72, 0x67, 0x70, 0x32, 0x50, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x72, 0x67, 0x5f,
	0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x72, 0x67, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x49, 0x50,
	0x56, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x01,
	0x0a, 0x16, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x62, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x62, 0x61, 0x67,
	0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x62, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x64,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x61,
	0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x62, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x62, 0x61, 0x67, 0x44, 0x68,
	0x63, 0x70, 0x76, 0x36, 0x64, 0x41, 0x64, 0x64, 0x72, 0x41, 0x74, 0x74, 0x72, 0x62, 0x22, 0xab,
	0x01, 0x0a, 0x1b, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x62, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a,
	0x19, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x69, 0x61, 0x5f,
	0x69, 0x64, 0x5f, 0x70, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xaa, 0x01, 0x0a, 0x19, 0x62,
	0x61, 0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x69, 0x61, 0x5f, 0x69, 0x64,
	0x5f, 0x70, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x69,
	0x61, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x52, 0x14, 0x62, 0x61, 0x67, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x49, 0x61, 0x49,
	0x64, 0x50, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x02, 0x0a, 0x1e, 0x62, 0x61, 0x67, 0x5f,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x69, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x62, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescData = file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_goTypes = []interface{}{
	(*Ipv6Dhcpv6DProxyBinding_KEYS)(nil), // 0: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.ipv6_dhcpv6d_proxy_binding_KEYS
	(*Ipv6Dhcpv6DProxyBinding)(nil),      // 1: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.ipv6_dhcpv6d_proxy_binding
	(*IPV6AddressType)(nil),              // 2: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.IPV6AddressType
	(*TimeBag)(nil),                      // 3: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.time_bag
	(*BagDhcpv6DAddrAttrb)(nil),          // 4: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_addr_attrb
	(*BagDhcpv6DAddrAttrbItem)(nil),      // 5: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_addr_attrb_item
	(*BagDhcpv6DIaIdPdInfo)(nil),         // 6: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_ia_id_pd_info
	(*BagDhcpv6DIaIdPdInfoItem)(nil),     // 7: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_ia_id_pd_info_item
}
var file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_depIdxs = []int32{
	6, // 0: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.ipv6_dhcpv6d_proxy_binding.ia_id_pd:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_ia_id_pd_info
	5, // 1: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_addr_attrb.bag_dhcpv6d_addr_attrb:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_addr_attrb_item
	7, // 2: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_ia_id_pd_info.bag_dhcpv6d_ia_id_pd_info:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_ia_id_pd_info_item
	4, // 3: cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_ia_id_pd_info_item.addresses:type_name -> cisco_ios_xr_ipv6_new_dhcpv6d_oper.dhcpv6.nodes.node.proxy.binding.clients.client.bag_dhcpv6d_addr_attrb
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_init()
}
func file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_init() {
	if File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyBinding_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Dhcpv6DProxyBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPV6AddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagDhcpv6DAddrAttrb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagDhcpv6DAddrAttrbItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagDhcpv6DIaIdPdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagDhcpv6DIaIdPdInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto = out.File
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_new_dhcpv6d_oper_dhcpv6_nodes_node_proxy_binding_clients_client_ipv6_dhcpv6d_proxy_binding_proto_depIdxs = nil
}
