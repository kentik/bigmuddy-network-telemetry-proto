// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: mdt_grpc_dialin/mdt_grpc_dialin.proto

// Package implements gRPC Model Driven Telemetry service

package IOSXRExtensibleManagabilityService

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CommitResult int32

const (
	CommitResult_CHANGE    CommitResult = 0
	CommitResult_NO_CHANGE CommitResult = 1
	CommitResult_FAIL      CommitResult = 2
)

// Enum value maps for CommitResult.
var (
	CommitResult_name = map[int32]string{
		0: "CHANGE",
		1: "NO_CHANGE",
		2: "FAIL",
	}
	CommitResult_value = map[string]int32{
		"CHANGE":    0,
		"NO_CHANGE": 1,
		"FAIL":      2,
	}
)

func (x CommitResult) Enum() *CommitResult {
	p := new(CommitResult)
	*p = x
	return p
}

func (x CommitResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitResult) Descriptor() protoreflect.EnumDescriptor {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_enumTypes[0].Descriptor()
}

func (CommitResult) Type() protoreflect.EnumType {
	return &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_enumTypes[0]
}

func (x CommitResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitResult.Descriptor instead.
func (CommitResult) EnumDescriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{0}
}

type ConfigGetArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson,proto3" json:"yangpathjson,omitempty"`
}

func (x *ConfigGetArgs) Reset() {
	*x = ConfigGetArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetArgs) ProtoMessage() {}

func (x *ConfigGetArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetArgs.ProtoReflect.Descriptor instead.
func (*ConfigGetArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigGetArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *ConfigGetArgs) GetYangpathjson() string {
	if x != nil {
		return x.Yangpathjson
	}
	return ""
}

type ConfigGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ConfigGetReply) Reset() {
	*x = ConfigGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetReply) ProtoMessage() {}

func (x *ConfigGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetReply.ProtoReflect.Descriptor instead.
func (*ConfigGetReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigGetReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ConfigGetReply) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

func (x *ConfigGetReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type GetOperArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson,proto3" json:"yangpathjson,omitempty"`
}

func (x *GetOperArgs) Reset() {
	*x = GetOperArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperArgs) ProtoMessage() {}

func (x *GetOperArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperArgs.ProtoReflect.Descriptor instead.
func (*GetOperArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{2}
}

func (x *GetOperArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *GetOperArgs) GetYangpathjson() string {
	if x != nil {
		return x.Yangpathjson
	}
	return ""
}

type GetOperReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetOperReply) Reset() {
	*x = GetOperReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperReply) ProtoMessage() {}

func (x *GetOperReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperReply.ProtoReflect.Descriptor instead.
func (*GetOperReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{3}
}

func (x *GetOperReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *GetOperReply) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

func (x *GetOperReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type ConfigArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId    int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
}

func (x *ConfigArgs) Reset() {
	*x = ConfigArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigArgs) ProtoMessage() {}

func (x *ConfigArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigArgs.ProtoReflect.Descriptor instead.
func (*ConfigArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *ConfigArgs) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

type ConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ConfigReply) Reset() {
	*x = ConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigReply) ProtoMessage() {}

func (x *ConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigReply.ProtoReflect.Descriptor instead.
func (*ConfigReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ConfigReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type CliConfigArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Cli   string `protobuf:"bytes,2,opt,name=cli,proto3" json:"cli,omitempty"`
}

func (x *CliConfigArgs) Reset() {
	*x = CliConfigArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliConfigArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliConfigArgs) ProtoMessage() {}

func (x *CliConfigArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliConfigArgs.ProtoReflect.Descriptor instead.
func (*CliConfigArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{6}
}

func (x *CliConfigArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CliConfigArgs) GetCli() string {
	if x != nil {
		return x.Cli
	}
	return ""
}

type CliConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CliConfigReply) Reset() {
	*x = CliConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliConfigReply) ProtoMessage() {}

func (x *CliConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliConfigReply.ProtoReflect.Descriptor instead.
func (*CliConfigReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{7}
}

func (x *CliConfigReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CliConfigReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type CommitReplaceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId    int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Cli      string `protobuf:"bytes,2,opt,name=cli,proto3" json:"cli,omitempty"`
	Yangjson string `protobuf:"bytes,3,opt,name=yangjson,proto3" json:"yangjson,omitempty"`
}

func (x *CommitReplaceArgs) Reset() {
	*x = CommitReplaceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReplaceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReplaceArgs) ProtoMessage() {}

func (x *CommitReplaceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReplaceArgs.ProtoReflect.Descriptor instead.
func (*CommitReplaceArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{8}
}

func (x *CommitReplaceArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CommitReplaceArgs) GetCli() string {
	if x != nil {
		return x.Cli
	}
	return ""
}

func (x *CommitReplaceArgs) GetYangjson() string {
	if x != nil {
		return x.Yangjson
	}
	return ""
}

type CommitReplaceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CommitReplaceReply) Reset() {
	*x = CommitReplaceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReplaceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReplaceReply) ProtoMessage() {}

func (x *CommitReplaceReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReplaceReply.ProtoReflect.Descriptor instead.
func (*CommitReplaceReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{9}
}

func (x *CommitReplaceReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CommitReplaceReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type CommitMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label   string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *CommitMsg) Reset() {
	*x = CommitMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMsg) ProtoMessage() {}

func (x *CommitMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMsg.ProtoReflect.Descriptor instead.
func (*CommitMsg) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{10}
}

func (x *CommitMsg) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CommitMsg) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CommitArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg   *CommitMsg `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	ReqId int64      `protobuf:"varint,2,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
}

func (x *CommitArgs) Reset() {
	*x = CommitArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitArgs) ProtoMessage() {}

func (x *CommitArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitArgs.ProtoReflect.Descriptor instead.
func (*CommitArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{11}
}

func (x *CommitArgs) GetMsg() *CommitMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *CommitArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

type CommitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   CommitResult `protobuf:"varint,1,opt,name=result,proto3,enum=IOSXRExtensibleManagabilityService.CommitResult" json:"result,omitempty"`
	ResReqId int64        `protobuf:"varint,2,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string       `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CommitReply) Reset() {
	*x = CommitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReply) ProtoMessage() {}

func (x *CommitReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReply.ProtoReflect.Descriptor instead.
func (*CommitReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{12}
}

func (x *CommitReply) GetResult() CommitResult {
	if x != nil {
		return x.Result
	}
	return CommitResult_CHANGE
}

func (x *CommitReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CommitReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type DiscardChangesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId int64 `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
}

func (x *DiscardChangesArgs) Reset() {
	*x = DiscardChangesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardChangesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardChangesArgs) ProtoMessage() {}

func (x *DiscardChangesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardChangesArgs.ProtoReflect.Descriptor instead.
func (*DiscardChangesArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{13}
}

func (x *DiscardChangesArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

type DiscardChangesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DiscardChangesReply) Reset() {
	*x = DiscardChangesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardChangesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardChangesReply) ProtoMessage() {}

func (x *DiscardChangesReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardChangesReply.ProtoReflect.Descriptor instead.
func (*DiscardChangesReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{14}
}

func (x *DiscardChangesReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *DiscardChangesReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type ShowCmdArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Cli   string `protobuf:"bytes,2,opt,name=cli,proto3" json:"cli,omitempty"`
}

func (x *ShowCmdArgs) Reset() {
	*x = ShowCmdArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCmdArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCmdArgs) ProtoMessage() {}

func (x *ShowCmdArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCmdArgs.ProtoReflect.Descriptor instead.
func (*ShowCmdArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{15}
}

func (x *ShowCmdArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *ShowCmdArgs) GetCli() string {
	if x != nil {
		return x.Cli
	}
	return ""
}

type ShowCmdTextReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Output   string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ShowCmdTextReply) Reset() {
	*x = ShowCmdTextReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCmdTextReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCmdTextReply) ProtoMessage() {}

func (x *ShowCmdTextReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCmdTextReply.ProtoReflect.Descriptor instead.
func (*ShowCmdTextReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{16}
}

func (x *ShowCmdTextReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ShowCmdTextReply) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ShowCmdTextReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type ShowCmdJSONReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId   int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Jsonoutput string `protobuf:"bytes,2,opt,name=jsonoutput,proto3" json:"jsonoutput,omitempty"`
	Errors     string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ShowCmdJSONReply) Reset() {
	*x = ShowCmdJSONReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCmdJSONReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCmdJSONReply) ProtoMessage() {}

func (x *ShowCmdJSONReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCmdJSONReply.ProtoReflect.Descriptor instead.
func (*ShowCmdJSONReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{17}
}

func (x *ShowCmdJSONReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *ShowCmdJSONReply) GetJsonoutput() string {
	if x != nil {
		return x.Jsonoutput
	}
	return ""
}

func (x *ShowCmdJSONReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

type CreateSubsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId    int64  `protobuf:"varint,1,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	Encode   int64  `protobuf:"varint,2,opt,name=encode,proto3" json:"encode,omitempty"`
	Subidstr string `protobuf:"bytes,3,opt,name=subidstr,proto3" json:"subidstr,omitempty"`
}

func (x *CreateSubsArgs) Reset() {
	*x = CreateSubsArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubsArgs) ProtoMessage() {}

func (x *CreateSubsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubsArgs.ProtoReflect.Descriptor instead.
func (*CreateSubsArgs) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{18}
}

func (x *CreateSubsArgs) GetReqId() int64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *CreateSubsArgs) GetEncode() int64 {
	if x != nil {
		return x.Encode
	}
	return 0
}

func (x *CreateSubsArgs) GetSubidstr() string {
	if x != nil {
		return x.Subidstr
	}
	return ""
}

type CreateSubsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId,proto3" json:"ResReqId,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CreateSubsReply) Reset() {
	*x = CreateSubsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubsReply) ProtoMessage() {}

func (x *CreateSubsReply) ProtoReflect() protoreflect.Message {
	mi := &file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubsReply.ProtoReflect.Descriptor instead.
func (*CreateSubsReply) Descriptor() ([]byte, []int) {
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP(), []int{19}
}

func (x *CreateSubsReply) GetResReqId() int64 {
	if x != nil {
		return x.ResReqId
	}
	return 0
}

func (x *CreateSubsReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateSubsReply) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

var File_mdt_grpc_dialin_mdt_grpc_dialin_proto protoreflect.FileDescriptor

var file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x64, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x69,
	0x6e, 0x2f, 0x6d, 0x64, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61,
	0x74, 0x68, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x79, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x68, 0x6a, 0x73, 0x6f,
	0x6e, 0x22, 0x5e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f,
	0x6e, 0x22, 0x41, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6c, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x22, 0x44, 0x0a,
	0x0e, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6c, 0x69,
	0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6e, 0x67, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x12,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x3f, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x2a, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x35, 0x0a,
	0x0b, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x6c, 0x69, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x4a,
	0x53, 0x4f, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x69, 0x64, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x69, 0x64, 0x73, 0x74, 0x72, 0x22, 0x59, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x2a, 0x33, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x32, 0xc6, 0x09, 0x0a, 0x0e, 0x67, 0x52, 0x50,
	0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x32, 0x2e, 0x49, 0x4f,
	0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58,
	0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58,
	0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x09,
	0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x58,
	0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x32, 0x2e, 0x49,
	0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x35, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x36, 0x2e, 0x49, 0x4f,
	0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x36, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x37, 0x2e, 0x49, 0x4f, 0x53, 0x58,
	0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x12,
	0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x30, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x12, 0x32, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x33, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x32, 0x8a, 0x02, 0x0a, 0x08, 0x67, 0x52, 0x50, 0x43, 0x45, 0x78, 0x65, 0x63, 0x12, 0x7e,
	0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x34, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7e,
	0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x2f, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x34, 0x2e, 0x49, 0x4f, 0x53, 0x58, 0x52, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d,
	0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescOnce sync.Once
	file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescData = file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDesc
)

func file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescGZIP() []byte {
	file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescOnce.Do(func() {
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescData = protoimpl.X.CompressGZIP(file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescData)
	})
	return file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDescData
}

var file_mdt_grpc_dialin_mdt_grpc_dialin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_mdt_grpc_dialin_mdt_grpc_dialin_proto_goTypes = []interface{}{
	(CommitResult)(0),           // 0: IOSXRExtensibleManagabilityService.CommitResult
	(*ConfigGetArgs)(nil),       // 1: IOSXRExtensibleManagabilityService.ConfigGetArgs
	(*ConfigGetReply)(nil),      // 2: IOSXRExtensibleManagabilityService.ConfigGetReply
	(*GetOperArgs)(nil),         // 3: IOSXRExtensibleManagabilityService.GetOperArgs
	(*GetOperReply)(nil),        // 4: IOSXRExtensibleManagabilityService.GetOperReply
	(*ConfigArgs)(nil),          // 5: IOSXRExtensibleManagabilityService.ConfigArgs
	(*ConfigReply)(nil),         // 6: IOSXRExtensibleManagabilityService.ConfigReply
	(*CliConfigArgs)(nil),       // 7: IOSXRExtensibleManagabilityService.CliConfigArgs
	(*CliConfigReply)(nil),      // 8: IOSXRExtensibleManagabilityService.CliConfigReply
	(*CommitReplaceArgs)(nil),   // 9: IOSXRExtensibleManagabilityService.CommitReplaceArgs
	(*CommitReplaceReply)(nil),  // 10: IOSXRExtensibleManagabilityService.CommitReplaceReply
	(*CommitMsg)(nil),           // 11: IOSXRExtensibleManagabilityService.CommitMsg
	(*CommitArgs)(nil),          // 12: IOSXRExtensibleManagabilityService.CommitArgs
	(*CommitReply)(nil),         // 13: IOSXRExtensibleManagabilityService.CommitReply
	(*DiscardChangesArgs)(nil),  // 14: IOSXRExtensibleManagabilityService.DiscardChangesArgs
	(*DiscardChangesReply)(nil), // 15: IOSXRExtensibleManagabilityService.DiscardChangesReply
	(*ShowCmdArgs)(nil),         // 16: IOSXRExtensibleManagabilityService.ShowCmdArgs
	(*ShowCmdTextReply)(nil),    // 17: IOSXRExtensibleManagabilityService.ShowCmdTextReply
	(*ShowCmdJSONReply)(nil),    // 18: IOSXRExtensibleManagabilityService.ShowCmdJSONReply
	(*CreateSubsArgs)(nil),      // 19: IOSXRExtensibleManagabilityService.CreateSubsArgs
	(*CreateSubsReply)(nil),     // 20: IOSXRExtensibleManagabilityService.CreateSubsReply
}
var file_mdt_grpc_dialin_mdt_grpc_dialin_proto_depIdxs = []int32{
	11, // 0: IOSXRExtensibleManagabilityService.CommitArgs.msg:type_name -> IOSXRExtensibleManagabilityService.CommitMsg
	0,  // 1: IOSXRExtensibleManagabilityService.CommitReply.result:type_name -> IOSXRExtensibleManagabilityService.CommitResult
	1,  // 2: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigGetArgs
	5,  // 3: IOSXRExtensibleManagabilityService.gRPCConfigOper.MergeConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigArgs
	5,  // 4: IOSXRExtensibleManagabilityService.gRPCConfigOper.DeleteConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigArgs
	5,  // 5: IOSXRExtensibleManagabilityService.gRPCConfigOper.ReplaceConfig:input_type -> IOSXRExtensibleManagabilityService.ConfigArgs
	7,  // 6: IOSXRExtensibleManagabilityService.gRPCConfigOper.CliConfig:input_type -> IOSXRExtensibleManagabilityService.CliConfigArgs
	9,  // 7: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitReplace:input_type -> IOSXRExtensibleManagabilityService.CommitReplaceArgs
	12, // 8: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitConfig:input_type -> IOSXRExtensibleManagabilityService.CommitArgs
	14, // 9: IOSXRExtensibleManagabilityService.gRPCConfigOper.ConfigDiscardChanges:input_type -> IOSXRExtensibleManagabilityService.DiscardChangesArgs
	3,  // 10: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetOper:input_type -> IOSXRExtensibleManagabilityService.GetOperArgs
	19, // 11: IOSXRExtensibleManagabilityService.gRPCConfigOper.CreateSubs:input_type -> IOSXRExtensibleManagabilityService.CreateSubsArgs
	16, // 12: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdTextOutput:input_type -> IOSXRExtensibleManagabilityService.ShowCmdArgs
	16, // 13: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdJSONOutput:input_type -> IOSXRExtensibleManagabilityService.ShowCmdArgs
	2,  // 14: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigGetReply
	6,  // 15: IOSXRExtensibleManagabilityService.gRPCConfigOper.MergeConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigReply
	6,  // 16: IOSXRExtensibleManagabilityService.gRPCConfigOper.DeleteConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigReply
	6,  // 17: IOSXRExtensibleManagabilityService.gRPCConfigOper.ReplaceConfig:output_type -> IOSXRExtensibleManagabilityService.ConfigReply
	8,  // 18: IOSXRExtensibleManagabilityService.gRPCConfigOper.CliConfig:output_type -> IOSXRExtensibleManagabilityService.CliConfigReply
	10, // 19: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitReplace:output_type -> IOSXRExtensibleManagabilityService.CommitReplaceReply
	13, // 20: IOSXRExtensibleManagabilityService.gRPCConfigOper.CommitConfig:output_type -> IOSXRExtensibleManagabilityService.CommitReply
	15, // 21: IOSXRExtensibleManagabilityService.gRPCConfigOper.ConfigDiscardChanges:output_type -> IOSXRExtensibleManagabilityService.DiscardChangesReply
	4,  // 22: IOSXRExtensibleManagabilityService.gRPCConfigOper.GetOper:output_type -> IOSXRExtensibleManagabilityService.GetOperReply
	20, // 23: IOSXRExtensibleManagabilityService.gRPCConfigOper.CreateSubs:output_type -> IOSXRExtensibleManagabilityService.CreateSubsReply
	17, // 24: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdTextOutput:output_type -> IOSXRExtensibleManagabilityService.ShowCmdTextReply
	18, // 25: IOSXRExtensibleManagabilityService.gRPCExec.ShowCmdJSONOutput:output_type -> IOSXRExtensibleManagabilityService.ShowCmdJSONReply
	14, // [14:26] is the sub-list for method output_type
	2,  // [2:14] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_mdt_grpc_dialin_mdt_grpc_dialin_proto_init() }
func file_mdt_grpc_dialin_mdt_grpc_dialin_proto_init() {
	if File_mdt_grpc_dialin_mdt_grpc_dialin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliConfigArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReplaceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReplaceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardChangesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardChangesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCmdArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCmdTextReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCmdJSONReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubsArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_mdt_grpc_dialin_mdt_grpc_dialin_proto_goTypes,
		DependencyIndexes: file_mdt_grpc_dialin_mdt_grpc_dialin_proto_depIdxs,
		EnumInfos:         file_mdt_grpc_dialin_mdt_grpc_dialin_proto_enumTypes,
		MessageInfos:      file_mdt_grpc_dialin_mdt_grpc_dialin_proto_msgTypes,
	}.Build()
	File_mdt_grpc_dialin_mdt_grpc_dialin_proto = out.File
	file_mdt_grpc_dialin_mdt_grpc_dialin_proto_rawDesc = nil
	file_mdt_grpc_dialin_mdt_grpc_dialin_proto_goTypes = nil
	file_mdt_grpc_dialin_mdt_grpc_dialin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GRPCConfigOperClient is the client API for GRPCConfigOper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCConfigOperClient interface {
	GetConfig(ctx context.Context, in *ConfigGetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error)
	MergeConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	DeleteConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	ReplaceConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	CliConfig(ctx context.Context, in *CliConfigArgs, opts ...grpc.CallOption) (*CliConfigReply, error)
	CommitReplace(ctx context.Context, in *CommitReplaceArgs, opts ...grpc.CallOption) (*CommitReplaceReply, error)
	// Do we need implicit or explicit commit
	//
	CommitConfig(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error)
	ConfigDiscardChanges(ctx context.Context, in *DiscardChangesArgs, opts ...grpc.CallOption) (*DiscardChangesReply, error)
	// Get only returns oper data
	//
	GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error)
	// Get Telemetry Data
	CreateSubs(ctx context.Context, in *CreateSubsArgs, opts ...grpc.CallOption) (GRPCConfigOper_CreateSubsClient, error)
}

type gRPCConfigOperClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCConfigOperClient(cc grpc.ClientConnInterface) GRPCConfigOperClient {
	return &gRPCConfigOperClient{cc}
}

func (c *gRPCConfigOperClient) GetConfig(ctx context.Context, in *ConfigGetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[0], "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetConfigClient interface {
	Recv() (*ConfigGetReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetConfigClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetConfigClient) Recv() (*ConfigGetReply, error) {
	m := new(ConfigGetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) MergeConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) DeleteConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) ReplaceConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CliConfig(ctx context.Context, in *CliConfigArgs, opts ...grpc.CallOption) (*CliConfigReply, error) {
	out := new(CliConfigReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CommitReplace(ctx context.Context, in *CommitReplaceArgs, opts ...grpc.CallOption) (*CommitReplaceReply, error) {
	out := new(CommitReplaceReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CommitConfig(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) ConfigDiscardChanges(ctx context.Context, in *DiscardChangesArgs, opts ...grpc.CallOption) (*DiscardChangesReply, error) {
	out := new(DiscardChangesReply)
	err := c.cc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[1], "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetOper", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetOperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetOperClient interface {
	Recv() (*GetOperReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetOperClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetOperClient) Recv() (*GetOperReply, error) {
	m := new(GetOperReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) CreateSubs(ctx context.Context, in *CreateSubsArgs, opts ...grpc.CallOption) (GRPCConfigOper_CreateSubsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[2], "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CreateSubs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperCreateSubsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_CreateSubsClient interface {
	Recv() (*CreateSubsReply, error)
	grpc.ClientStream
}

type gRPCConfigOperCreateSubsClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperCreateSubsClient) Recv() (*CreateSubsReply, error) {
	m := new(CreateSubsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCConfigOperServer is the server API for GRPCConfigOper service.
type GRPCConfigOperServer interface {
	GetConfig(*ConfigGetArgs, GRPCConfigOper_GetConfigServer) error
	MergeConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	DeleteConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	ReplaceConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	CliConfig(context.Context, *CliConfigArgs) (*CliConfigReply, error)
	CommitReplace(context.Context, *CommitReplaceArgs) (*CommitReplaceReply, error)
	// Do we need implicit or explicit commit
	//
	CommitConfig(context.Context, *CommitArgs) (*CommitReply, error)
	ConfigDiscardChanges(context.Context, *DiscardChangesArgs) (*DiscardChangesReply, error)
	// Get only returns oper data
	//
	GetOper(*GetOperArgs, GRPCConfigOper_GetOperServer) error
	// Get Telemetry Data
	CreateSubs(*CreateSubsArgs, GRPCConfigOper_CreateSubsServer) error
}

// UnimplementedGRPCConfigOperServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCConfigOperServer struct {
}

func (*UnimplementedGRPCConfigOperServer) GetConfig(*ConfigGetArgs, GRPCConfigOper_GetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) MergeConfig(context.Context, *ConfigArgs) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) DeleteConfig(context.Context, *ConfigArgs) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) ReplaceConfig(context.Context, *ConfigArgs) (*ConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CliConfig(context.Context, *CliConfigArgs) (*CliConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CliConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CommitReplace(context.Context, *CommitReplaceArgs) (*CommitReplaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitReplace not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CommitConfig(context.Context, *CommitArgs) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitConfig not implemented")
}
func (*UnimplementedGRPCConfigOperServer) ConfigDiscardChanges(context.Context, *DiscardChangesArgs) (*DiscardChangesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigDiscardChanges not implemented")
}
func (*UnimplementedGRPCConfigOperServer) GetOper(*GetOperArgs, GRPCConfigOper_GetOperServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOper not implemented")
}
func (*UnimplementedGRPCConfigOperServer) CreateSubs(*CreateSubsArgs, GRPCConfigOper_CreateSubsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateSubs not implemented")
}

func RegisterGRPCConfigOperServer(s *grpc.Server, srv GRPCConfigOperServer) {
	s.RegisterService(&_GRPCConfigOper_serviceDesc, srv)
}

func _GRPCConfigOper_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigGetArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetConfig(m, &gRPCConfigOperGetConfigServer{stream})
}

type GRPCConfigOper_GetConfigServer interface {
	Send(*ConfigGetReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetConfigServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetConfigServer) Send(m *ConfigGetReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_MergeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).MergeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).MergeConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_ReplaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).ReplaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).ReplaceConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CliConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CliConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CliConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CliConfig(ctx, req.(*CliConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CommitReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReplaceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CommitReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CommitReplace(ctx, req.(*CommitReplaceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CommitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CommitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CommitConfig(ctx, req.(*CommitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_ConfigDiscardChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardChangesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).ConfigDiscardChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).ConfigDiscardChanges(ctx, req.(*DiscardChangesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_GetOper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOperArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetOper(m, &gRPCConfigOperGetOperServer{stream})
}

type GRPCConfigOper_GetOperServer interface {
	Send(*GetOperReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetOperServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetOperServer) Send(m *GetOperReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_CreateSubs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateSubsArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).CreateSubs(m, &gRPCConfigOperCreateSubsServer{stream})
}

type GRPCConfigOper_CreateSubsServer interface {
	Send(*CreateSubsReply) error
	grpc.ServerStream
}

type gRPCConfigOperCreateSubsServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperCreateSubsServer) Send(m *CreateSubsReply) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCConfigOper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.gRPCConfigOper",
	HandlerType: (*GRPCConfigOperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeConfig",
			Handler:    _GRPCConfigOper_MergeConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _GRPCConfigOper_DeleteConfig_Handler,
		},
		{
			MethodName: "ReplaceConfig",
			Handler:    _GRPCConfigOper_ReplaceConfig_Handler,
		},
		{
			MethodName: "CliConfig",
			Handler:    _GRPCConfigOper_CliConfig_Handler,
		},
		{
			MethodName: "CommitReplace",
			Handler:    _GRPCConfigOper_CommitReplace_Handler,
		},
		{
			MethodName: "CommitConfig",
			Handler:    _GRPCConfigOper_CommitConfig_Handler,
		},
		{
			MethodName: "ConfigDiscardChanges",
			Handler:    _GRPCConfigOper_ConfigDiscardChanges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConfig",
			Handler:       _GRPCConfigOper_GetConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOper",
			Handler:       _GRPCConfigOper_GetOper_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateSubs",
			Handler:       _GRPCConfigOper_CreateSubs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mdt_grpc_dialin/mdt_grpc_dialin.proto",
}

// GRPCExecClient is the client API for GRPCExec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCExecClient interface {
	// Exec commands
	ShowCmdTextOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdTextOutputClient, error)
	ShowCmdJSONOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdJSONOutputClient, error)
}

type gRPCExecClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCExecClient(cc grpc.ClientConnInterface) GRPCExecClient {
	return &gRPCExecClient{cc}
}

func (c *gRPCExecClient) ShowCmdTextOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdTextOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCExec_serviceDesc.Streams[0], "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdTextOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecShowCmdTextOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ShowCmdTextOutputClient interface {
	Recv() (*ShowCmdTextReply, error)
	grpc.ClientStream
}

type gRPCExecShowCmdTextOutputClient struct {
	grpc.ClientStream
}

func (x *gRPCExecShowCmdTextOutputClient) Recv() (*ShowCmdTextReply, error) {
	m := new(ShowCmdTextReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCExecClient) ShowCmdJSONOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdJSONOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCExec_serviceDesc.Streams[1], "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdJSONOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecShowCmdJSONOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ShowCmdJSONOutputClient interface {
	Recv() (*ShowCmdJSONReply, error)
	grpc.ClientStream
}

type gRPCExecShowCmdJSONOutputClient struct {
	grpc.ClientStream
}

func (x *gRPCExecShowCmdJSONOutputClient) Recv() (*ShowCmdJSONReply, error) {
	m := new(ShowCmdJSONReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCExecServer is the server API for GRPCExec service.
type GRPCExecServer interface {
	// Exec commands
	ShowCmdTextOutput(*ShowCmdArgs, GRPCExec_ShowCmdTextOutputServer) error
	ShowCmdJSONOutput(*ShowCmdArgs, GRPCExec_ShowCmdJSONOutputServer) error
}

// UnimplementedGRPCExecServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCExecServer struct {
}

func (*UnimplementedGRPCExecServer) ShowCmdTextOutput(*ShowCmdArgs, GRPCExec_ShowCmdTextOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowCmdTextOutput not implemented")
}
func (*UnimplementedGRPCExecServer) ShowCmdJSONOutput(*ShowCmdArgs, GRPCExec_ShowCmdJSONOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowCmdJSONOutput not implemented")
}

func RegisterGRPCExecServer(s *grpc.Server, srv GRPCExecServer) {
	s.RegisterService(&_GRPCExec_serviceDesc, srv)
}

func _GRPCExec_ShowCmdTextOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShowCmdArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ShowCmdTextOutput(m, &gRPCExecShowCmdTextOutputServer{stream})
}

type GRPCExec_ShowCmdTextOutputServer interface {
	Send(*ShowCmdTextReply) error
	grpc.ServerStream
}

type gRPCExecShowCmdTextOutputServer struct {
	grpc.ServerStream
}

func (x *gRPCExecShowCmdTextOutputServer) Send(m *ShowCmdTextReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCExec_ShowCmdJSONOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShowCmdArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ShowCmdJSONOutput(m, &gRPCExecShowCmdJSONOutputServer{stream})
}

type GRPCExec_ShowCmdJSONOutputServer interface {
	Send(*ShowCmdJSONReply) error
	grpc.ServerStream
}

type gRPCExecShowCmdJSONOutputServer struct {
	grpc.ServerStream
}

func (x *gRPCExecShowCmdJSONOutputServer) Send(m *ShowCmdJSONReply) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCExec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.gRPCExec",
	HandlerType: (*GRPCExecServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCmdTextOutput",
			Handler:       _GRPCExec_ShowCmdTextOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCmdJSONOutput",
			Handler:       _GRPCExec_ShowCmdJSONOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mdt_grpc_dialin/mdt_grpc_dialin.proto",
}
