// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/bundle_interfaces/bundle_interface/ipv6_nd_if_entry.proto

package cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Detailed Info of ND IPv6 Interface entry
type Ipv6NdIfEntry_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *Ipv6NdIfEntry_KEYS) Reset() {
	*x = Ipv6NdIfEntry_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdIfEntry_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdIfEntry_KEYS) ProtoMessage() {}

func (x *Ipv6NdIfEntry_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdIfEntry_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6NdIfEntry_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6NdIfEntry_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Ipv6NdIfEntry_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type Ipv6NdIfEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent interface name
	ParentInterfaceName string `protobuf:"bytes,50,opt,name=parent_interface_name,json=parentInterfaceName,proto3" json:"parent_interface_name,omitempty"`
	// Interface type
	Iftype uint32 `protobuf:"varint,51,opt,name=iftype,proto3" json:"iftype,omitempty"`
	// MTU
	Mtu uint32 `protobuf:"varint,52,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// etype
	Etype uint32 `protobuf:"varint,53,opt,name=etype,proto3" json:"etype,omitempty"`
	// vlan tag/id/ucv
	VlanTag uint32 `protobuf:"varint,54,opt,name=vlan_tag,json=vlanTag,proto3" json:"vlan_tag,omitempty"`
	// mac address size
	MacAddrSize uint32 `protobuf:"varint,55,opt,name=mac_addr_size,json=macAddrSize,proto3" json:"mac_addr_size,omitempty"`
	// mac address
	MacAddr string `protobuf:"bytes,56,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	// If true, interface is enabled
	IsInterfaceEnabled bool `protobuf:"varint,57,opt,name=is_interface_enabled,json=isInterfaceEnabled,proto3" json:"is_interface_enabled,omitempty"`
	// If true, IPv6 is enabled
	IsIpv6Enabled bool `protobuf:"varint,58,opt,name=is_ipv6_enabled,json=isIpv6Enabled,proto3" json:"is_ipv6_enabled,omitempty"`
	// If true, MPLS is enabled
	IsMplsEnabled bool `protobuf:"varint,59,opt,name=is_mpls_enabled,json=isMplsEnabled,proto3" json:"is_mpls_enabled,omitempty"`
	// ND interface parameters
	NdParameters *Ipv6NdIfParams `protobuf:"bytes,60,opt,name=nd_parameters,json=ndParameters,proto3" json:"nd_parameters,omitempty"`
	// List of ND global addresses
	GlobalAddressList []*Ipv6NdAddr `protobuf:"bytes,61,rep,name=global_address_list,json=globalAddressList,proto3" json:"global_address_list,omitempty"`
	// Link local address
	LocalAddress *Ipv6NdAddr `protobuf:"bytes,62,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	// List of member links
	MemberLinkList []uint32 `protobuf:"varint,63,rep,packed,name=member_link_list,json=memberLinkList,proto3" json:"member_link_list,omitempty"`
	// List of member nodes
	MemberNodeList []*Ipv6NdGspnode `protobuf:"bytes,64,rep,name=member_node_list,json=memberNodeList,proto3" json:"member_node_list,omitempty"`
}

func (x *Ipv6NdIfEntry) Reset() {
	*x = Ipv6NdIfEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdIfEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdIfEntry) ProtoMessage() {}

func (x *Ipv6NdIfEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdIfEntry.ProtoReflect.Descriptor instead.
func (*Ipv6NdIfEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6NdIfEntry) GetParentInterfaceName() string {
	if x != nil {
		return x.ParentInterfaceName
	}
	return ""
}

func (x *Ipv6NdIfEntry) GetIftype() uint32 {
	if x != nil {
		return x.Iftype
	}
	return 0
}

func (x *Ipv6NdIfEntry) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Ipv6NdIfEntry) GetEtype() uint32 {
	if x != nil {
		return x.Etype
	}
	return 0
}

func (x *Ipv6NdIfEntry) GetVlanTag() uint32 {
	if x != nil {
		return x.VlanTag
	}
	return 0
}

func (x *Ipv6NdIfEntry) GetMacAddrSize() uint32 {
	if x != nil {
		return x.MacAddrSize
	}
	return 0
}

func (x *Ipv6NdIfEntry) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *Ipv6NdIfEntry) GetIsInterfaceEnabled() bool {
	if x != nil {
		return x.IsInterfaceEnabled
	}
	return false
}

func (x *Ipv6NdIfEntry) GetIsIpv6Enabled() bool {
	if x != nil {
		return x.IsIpv6Enabled
	}
	return false
}

func (x *Ipv6NdIfEntry) GetIsMplsEnabled() bool {
	if x != nil {
		return x.IsMplsEnabled
	}
	return false
}

func (x *Ipv6NdIfEntry) GetNdParameters() *Ipv6NdIfParams {
	if x != nil {
		return x.NdParameters
	}
	return nil
}

func (x *Ipv6NdIfEntry) GetGlobalAddressList() []*Ipv6NdAddr {
	if x != nil {
		return x.GlobalAddressList
	}
	return nil
}

func (x *Ipv6NdIfEntry) GetLocalAddress() *Ipv6NdAddr {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *Ipv6NdIfEntry) GetMemberLinkList() []uint32 {
	if x != nil {
		return x.MemberLinkList
	}
	return nil
}

func (x *Ipv6NdIfEntry) GetMemberNodeList() []*Ipv6NdGspnode {
	if x != nil {
		return x.MemberNodeList
	}
	return nil
}

// Detailed Info of ND IPv6 Interface
type Ipv6NdIfParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, DAD (D.. A.. D..) is enabled otherwise it is disabled
	IsDadEnabled bool `protobuf:"varint,1,opt,name=is_dad_enabled,json=isDadEnabled,proto3" json:"is_dad_enabled,omitempty"`
	// DAD attempt count
	DadAttempts uint32 `protobuf:"varint,2,opt,name=dad_attempts,json=dadAttempts,proto3" json:"dad_attempts,omitempty"`
	// ICMP redirect flag
	IsIcmPv6Redirect bool `protobuf:"varint,3,opt,name=is_icm_pv6_redirect,json=isIcmPv6Redirect,proto3" json:"is_icm_pv6_redirect,omitempty"`
	// Flag used for utilising DHCP
	IsDhcpManaged bool `protobuf:"varint,4,opt,name=is_dhcp_managed,json=isDhcpManaged,proto3" json:"is_dhcp_managed,omitempty"`
	// Flag used to manage routable address
	IsRouteAddressManaged bool `protobuf:"varint,5,opt,name=is_route_address_managed,json=isRouteAddressManaged,proto3" json:"is_route_address_managed,omitempty"`
	// Suppress flag
	IsSuppressed bool `protobuf:"varint,6,opt,name=is_suppressed,json=isSuppressed,proto3" json:"is_suppressed,omitempty"`
	// ND retransmit interval in msec
	NdRetransmitInterval uint32 `protobuf:"varint,7,opt,name=nd_retransmit_interval,json=ndRetransmitInterval,proto3" json:"nd_retransmit_interval,omitempty"`
	// ND router advertisement minimum transmit interval in sec
	NdMinTransmitInterval uint32 `protobuf:"varint,8,opt,name=nd_min_transmit_interval,json=ndMinTransmitInterval,proto3" json:"nd_min_transmit_interval,omitempty"`
	// ND router advertisement maximum transmit interval in sec
	NdMaxTransmitInterval uint32 `protobuf:"varint,9,opt,name=nd_max_transmit_interval,json=ndMaxTransmitInterval,proto3" json:"nd_max_transmit_interval,omitempty"`
	// ND router advertisement life time in sec
	NdAdvertisementLifetime uint32 `protobuf:"varint,10,opt,name=nd_advertisement_lifetime,json=ndAdvertisementLifetime,proto3" json:"nd_advertisement_lifetime,omitempty"`
	// Time to reach ND in msec
	NdReachableTime uint32 `protobuf:"varint,11,opt,name=nd_reachable_time,json=ndReachableTime,proto3" json:"nd_reachable_time,omitempty"`
	// Completed adjacency limit per interface
	NdCacheLimit uint32 `protobuf:"varint,12,opt,name=nd_cache_limit,json=ndCacheLimit,proto3" json:"nd_cache_limit,omitempty"`
	// Completed PROTO entry Count
	CompleteProtocolCount uint32 `protobuf:"varint,13,opt,name=complete_protocol_count,json=completeProtocolCount,proto3" json:"complete_protocol_count,omitempty"`
	// Completed GLEAN entry count
	CompleteGleanCount uint32 `protobuf:"varint,14,opt,name=complete_glean_count,json=completeGleanCount,proto3" json:"complete_glean_count,omitempty"`
	// Incomplete PROTO entry count
	IncompleteProtocolCount uint32 `protobuf:"varint,15,opt,name=incomplete_protocol_count,json=incompleteProtocolCount,proto3" json:"incomplete_protocol_count,omitempty"`
	// Incomplete GLEAN entry count
	IncompleteGleanCount uint32 `protobuf:"varint,16,opt,name=incomplete_glean_count,json=incompleteGleanCount,proto3" json:"incomplete_glean_count,omitempty"`
	// Dropped PROTO entry request count
	DroppedProtocolReqCount uint32 `protobuf:"varint,17,opt,name=dropped_protocol_req_count,json=droppedProtocolReqCount,proto3" json:"dropped_protocol_req_count,omitempty"`
	// Dropped GLEAN entry lequest count
	DroppedGleanReqCount uint32 `protobuf:"varint,18,opt,name=dropped_glean_req_count,json=droppedGleanReqCount,proto3" json:"dropped_glean_req_count,omitempty"`
}

func (x *Ipv6NdIfParams) Reset() {
	*x = Ipv6NdIfParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdIfParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdIfParams) ProtoMessage() {}

func (x *Ipv6NdIfParams) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdIfParams.ProtoReflect.Descriptor instead.
func (*Ipv6NdIfParams) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv6NdIfParams) GetIsDadEnabled() bool {
	if x != nil {
		return x.IsDadEnabled
	}
	return false
}

func (x *Ipv6NdIfParams) GetDadAttempts() uint32 {
	if x != nil {
		return x.DadAttempts
	}
	return 0
}

func (x *Ipv6NdIfParams) GetIsIcmPv6Redirect() bool {
	if x != nil {
		return x.IsIcmPv6Redirect
	}
	return false
}

func (x *Ipv6NdIfParams) GetIsDhcpManaged() bool {
	if x != nil {
		return x.IsDhcpManaged
	}
	return false
}

func (x *Ipv6NdIfParams) GetIsRouteAddressManaged() bool {
	if x != nil {
		return x.IsRouteAddressManaged
	}
	return false
}

func (x *Ipv6NdIfParams) GetIsSuppressed() bool {
	if x != nil {
		return x.IsSuppressed
	}
	return false
}

func (x *Ipv6NdIfParams) GetNdRetransmitInterval() uint32 {
	if x != nil {
		return x.NdRetransmitInterval
	}
	return 0
}

func (x *Ipv6NdIfParams) GetNdMinTransmitInterval() uint32 {
	if x != nil {
		return x.NdMinTransmitInterval
	}
	return 0
}

func (x *Ipv6NdIfParams) GetNdMaxTransmitInterval() uint32 {
	if x != nil {
		return x.NdMaxTransmitInterval
	}
	return 0
}

func (x *Ipv6NdIfParams) GetNdAdvertisementLifetime() uint32 {
	if x != nil {
		return x.NdAdvertisementLifetime
	}
	return 0
}

func (x *Ipv6NdIfParams) GetNdReachableTime() uint32 {
	if x != nil {
		return x.NdReachableTime
	}
	return 0
}

func (x *Ipv6NdIfParams) GetNdCacheLimit() uint32 {
	if x != nil {
		return x.NdCacheLimit
	}
	return 0
}

func (x *Ipv6NdIfParams) GetCompleteProtocolCount() uint32 {
	if x != nil {
		return x.CompleteProtocolCount
	}
	return 0
}

func (x *Ipv6NdIfParams) GetCompleteGleanCount() uint32 {
	if x != nil {
		return x.CompleteGleanCount
	}
	return 0
}

func (x *Ipv6NdIfParams) GetIncompleteProtocolCount() uint32 {
	if x != nil {
		return x.IncompleteProtocolCount
	}
	return 0
}

func (x *Ipv6NdIfParams) GetIncompleteGleanCount() uint32 {
	if x != nil {
		return x.IncompleteGleanCount
	}
	return 0
}

func (x *Ipv6NdIfParams) GetDroppedProtocolReqCount() uint32 {
	if x != nil {
		return x.DroppedProtocolReqCount
	}
	return 0
}

func (x *Ipv6NdIfParams) GetDroppedGleanReqCount() uint32 {
	if x != nil {
		return x.DroppedGleanReqCount
	}
	return 0
}

// List of IPv6 ND Addresses
type Ipv6NdAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 address
	Ipv6Address string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *Ipv6NdAddr) Reset() {
	*x = Ipv6NdAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdAddr) ProtoMessage() {}

func (x *Ipv6NdAddr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdAddr.ProtoReflect.Descriptor instead.
func (*Ipv6NdAddr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv6NdAddr) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

// GSP node info
type Ipv6NdGspnode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node Name
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Number of links on the node
	TotalLinks uint32 `protobuf:"varint,2,opt,name=total_links,json=totalLinks,proto3" json:"total_links,omitempty"`
}

func (x *Ipv6NdGspnode) Reset() {
	*x = Ipv6NdGspnode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdGspnode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdGspnode) ProtoMessage() {}

func (x *Ipv6NdGspnode) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdGspnode.ProtoReflect.Descriptor instead.
func (*Ipv6NdGspnode) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescGZIP(), []int{4}
}

func (x *Ipv6NdGspnode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Ipv6NdGspnode) GetTotalLinks() uint32 {
	if x != nil {
		return x.TotalLinks
	}
	return 0
}

var File_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDesc = []byte{
	0x0a, 0x72, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5b, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x22, 0x5b, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8,
	0x07, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x66, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x54,
	0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x64, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x13, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x96, 0x01, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x64, 0x5f, 0x67, 0x73, 0x70, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x97, 0x07, 0x0a, 0x11, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x61, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x64,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69,
	0x63, 0x6d, 0x5f, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x63, 0x6d, 0x50, 0x76, 0x36, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x44, 0x68, 0x63, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e,
	0x64, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x18,
	0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6e, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x64, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x67, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x64, 0x5f, 0x67, 0x73, 0x70, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescData = file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_goTypes = []interface{}{
	(*Ipv6NdIfEntry_KEYS)(nil), // 0: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry_KEYS
	(*Ipv6NdIfEntry)(nil),      // 1: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry
	(*Ipv6NdIfParams)(nil),     // 2: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params
	(*Ipv6NdAddr)(nil),         // 3: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr
	(*Ipv6NdGspnode)(nil),      // 4: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode
}
var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.nd_parameters:type_name -> cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_params
	3, // 1: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.global_address_list:type_name -> cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr
	3, // 2: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.local_address:type_name -> cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_addr
	4, // 3: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_if_entry.member_node_list:type_name -> cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.bundle_interfaces.bundle_interface.ipv6_nd_gspnode
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_init()
}
func file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_init() {
	if File_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdIfEntry_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdIfEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdIfParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdGspnode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto = out.File
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_bundle_interfaces_bundle_interface_ipv6_nd_if_entry_proto_depIdxs = nil
}
