// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_nd_oper/ipv6_node_discovery/nodes/node/neighbor_summary/ipv6_nd_neighbor_entry_summary.proto

package cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IPv6 ND neighbor entry summary
type Ipv6NdNeighborEntrySummary_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *Ipv6NdNeighborEntrySummary_KEYS) Reset() {
	*x = Ipv6NdNeighborEntrySummary_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdNeighborEntrySummary_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdNeighborEntrySummary_KEYS) ProtoMessage() {}

func (x *Ipv6NdNeighborEntrySummary_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdNeighborEntrySummary_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6NdNeighborEntrySummary_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6NdNeighborEntrySummary_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type Ipv6NdNeighborEntrySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast neighbor summary
	Multicast *BagNbrEntrySum `protobuf:"bytes,50,opt,name=multicast,proto3" json:"multicast,omitempty"`
	// Static neighbor summary
	Static *BagNbrEntrySum `protobuf:"bytes,51,opt,name=static,proto3" json:"static,omitempty"`
	// Dynamic neighbor summary
	Dynamic *BagNbrEntrySum `protobuf:"bytes,52,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	// Total number of entries
	TotalNeighborEntries uint32 `protobuf:"varint,53,opt,name=total_neighbor_entries,json=totalNeighborEntries,proto3" json:"total_neighbor_entries,omitempty"`
}

func (x *Ipv6NdNeighborEntrySummary) Reset() {
	*x = Ipv6NdNeighborEntrySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdNeighborEntrySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdNeighborEntrySummary) ProtoMessage() {}

func (x *Ipv6NdNeighborEntrySummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdNeighborEntrySummary.ProtoReflect.Descriptor instead.
func (*Ipv6NdNeighborEntrySummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6NdNeighborEntrySummary) GetMulticast() *BagNbrEntrySum {
	if x != nil {
		return x.Multicast
	}
	return nil
}

func (x *Ipv6NdNeighborEntrySummary) GetStatic() *BagNbrEntrySum {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *Ipv6NdNeighborEntrySummary) GetDynamic() *BagNbrEntrySum {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *Ipv6NdNeighborEntrySummary) GetTotalNeighborEntries() uint32 {
	if x != nil {
		return x.TotalNeighborEntries
	}
	return 0
}

// IPv6 ND summary information
type BagNbrEntrySum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total incomplete entries
	IncompleteEntries uint32 `protobuf:"varint,1,opt,name=incomplete_entries,json=incompleteEntries,proto3" json:"incomplete_entries,omitempty"`
	// Total reachable entries
	ReachableEntries uint32 `protobuf:"varint,2,opt,name=reachable_entries,json=reachableEntries,proto3" json:"reachable_entries,omitempty"`
	// Total stale entries
	StaleEntries uint32 `protobuf:"varint,3,opt,name=stale_entries,json=staleEntries,proto3" json:"stale_entries,omitempty"`
	// Total delayed entries
	DelayedEntries uint32 `protobuf:"varint,4,opt,name=delayed_entries,json=delayedEntries,proto3" json:"delayed_entries,omitempty"`
	// Total probe entries
	ProbeEntries uint32 `protobuf:"varint,5,opt,name=probe_entries,json=probeEntries,proto3" json:"probe_entries,omitempty"`
	// Total deleted entries
	DeletedEntries uint32 `protobuf:"varint,6,opt,name=deleted_entries,json=deletedEntries,proto3" json:"deleted_entries,omitempty"`
	// Total number of entries
	SubtotalNeighborEntries uint32 `protobuf:"varint,7,opt,name=subtotal_neighbor_entries,json=subtotalNeighborEntries,proto3" json:"subtotal_neighbor_entries,omitempty"`
}

func (x *BagNbrEntrySum) Reset() {
	*x = BagNbrEntrySum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagNbrEntrySum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagNbrEntrySum) ProtoMessage() {}

func (x *BagNbrEntrySum) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagNbrEntrySum.ProtoReflect.Descriptor instead.
func (*BagNbrEntrySum) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescGZIP(), []int{2}
}

func (x *BagNbrEntrySum) GetIncompleteEntries() uint32 {
	if x != nil {
		return x.IncompleteEntries
	}
	return 0
}

func (x *BagNbrEntrySum) GetReachableEntries() uint32 {
	if x != nil {
		return x.ReachableEntries
	}
	return 0
}

func (x *BagNbrEntrySum) GetStaleEntries() uint32 {
	if x != nil {
		return x.StaleEntries
	}
	return 0
}

func (x *BagNbrEntrySum) GetDelayedEntries() uint32 {
	if x != nil {
		return x.DelayedEntries
	}
	return 0
}

func (x *BagNbrEntrySum) GetProbeEntries() uint32 {
	if x != nil {
		return x.ProbeEntries
	}
	return 0
}

func (x *BagNbrEntrySum) GetDeletedEntries() uint32 {
	if x != nil {
		return x.DeletedEntries
	}
	return 0
}

func (x *BagNbrEntrySum) GetSubtotalNeighborEntries() uint32 {
	if x != nil {
		return x.SubtotalNeighborEntries
	}
	return 0
}

var File_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDesc = []byte{
	0x0a, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x49, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x42, 0x0a, 0x23, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xc0, 0x03, 0x0a, 0x1e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x7a, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x62, 0x61, 0x67, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x75, 0x6d, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x74,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x62, 0x61, 0x67, 0x5f, 0x6e,
	0x62, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x76, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x62, 0x61, 0x67, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x75, 0x6d, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x16,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x11, 0x62, 0x61, 0x67, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescData = file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_goTypes = []interface{}{
	(*Ipv6NdNeighborEntrySummary_KEYS)(nil), // 0: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary_KEYS
	(*Ipv6NdNeighborEntrySummary)(nil),      // 1: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary
	(*BagNbrEntrySum)(nil),                  // 2: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum
}
var file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary.multicast:type_name -> cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum
	2, // 1: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary.static:type_name -> cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum
	2, // 2: cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.ipv6_nd_neighbor_entry_summary.dynamic:type_name -> cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.neighbor_summary.bag_nbr_entry_sum
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_init()
}
func file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_init() {
	if File_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdNeighborEntrySummary_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdNeighborEntrySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagNbrEntrySum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto = out.File
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_neighbor_summary_ipv6_nd_neighbor_entry_summary_proto_depIdxs = nil
}
