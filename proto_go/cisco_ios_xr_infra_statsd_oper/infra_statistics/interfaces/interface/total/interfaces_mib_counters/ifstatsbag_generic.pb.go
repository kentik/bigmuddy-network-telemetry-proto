// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_infra_statsd_oper/infra_statistics/interfaces/interface/total/interfaces_mib_counters/ifstatsbag_generic.proto

package cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Generic set of interface counters
type IfstatsbagGeneric_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *IfstatsbagGeneric_KEYS) Reset() {
	*x = IfstatsbagGeneric_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfstatsbagGeneric_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfstatsbagGeneric_KEYS) ProtoMessage() {}

func (x *IfstatsbagGeneric_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfstatsbagGeneric_KEYS.ProtoReflect.Descriptor instead.
func (*IfstatsbagGeneric_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescGZIP(), []int{0}
}

func (x *IfstatsbagGeneric_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type IfstatsbagGeneric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Packets received
	PacketsReceived uint64 `protobuf:"varint,50,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	// Bytes received
	BytesReceived uint64 `protobuf:"varint,51,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	// Packets sent
	PacketsSent uint64 `protobuf:"varint,52,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	// Bytes sent
	BytesSent uint64 `protobuf:"varint,53,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// Multicast packets received
	MulticastPacketsReceived uint64 `protobuf:"varint,54,opt,name=multicast_packets_received,json=multicastPacketsReceived,proto3" json:"multicast_packets_received,omitempty"`
	// Broadcast packets received
	BroadcastPacketsReceived uint64 `protobuf:"varint,55,opt,name=broadcast_packets_received,json=broadcastPacketsReceived,proto3" json:"broadcast_packets_received,omitempty"`
	// Multicast packets sent
	MulticastPacketsSent uint64 `protobuf:"varint,56,opt,name=multicast_packets_sent,json=multicastPacketsSent,proto3" json:"multicast_packets_sent,omitempty"`
	// Broadcast packets sent
	BroadcastPacketsSent uint64 `protobuf:"varint,57,opt,name=broadcast_packets_sent,json=broadcastPacketsSent,proto3" json:"broadcast_packets_sent,omitempty"`
	// Total output drops
	OutputDrops uint32 `protobuf:"varint,58,opt,name=output_drops,json=outputDrops,proto3" json:"output_drops,omitempty"`
	// Output queue drops
	OutputQueueDrops uint32 `protobuf:"varint,59,opt,name=output_queue_drops,json=outputQueueDrops,proto3" json:"output_queue_drops,omitempty"`
	// Total input drops
	InputDrops uint32 `protobuf:"varint,60,opt,name=input_drops,json=inputDrops,proto3" json:"input_drops,omitempty"`
	// Input queue drops
	InputQueueDrops uint32 `protobuf:"varint,61,opt,name=input_queue_drops,json=inputQueueDrops,proto3" json:"input_queue_drops,omitempty"`
	// Received runt packets
	RuntPacketsReceived uint32 `protobuf:"varint,62,opt,name=runt_packets_received,json=runtPacketsReceived,proto3" json:"runt_packets_received,omitempty"`
	// Received giant packets
	GiantPacketsReceived uint32 `protobuf:"varint,63,opt,name=giant_packets_received,json=giantPacketsReceived,proto3" json:"giant_packets_received,omitempty"`
	// Received throttled packets
	ThrottledPacketsReceived uint32 `protobuf:"varint,64,opt,name=throttled_packets_received,json=throttledPacketsReceived,proto3" json:"throttled_packets_received,omitempty"`
	// Received parity packets
	ParityPacketsReceived uint32 `protobuf:"varint,65,opt,name=parity_packets_received,json=parityPacketsReceived,proto3" json:"parity_packets_received,omitempty"`
	// Unknown protocol packets received
	UnknownProtocolPacketsReceived uint32 `protobuf:"varint,66,opt,name=unknown_protocol_packets_received,json=unknownProtocolPacketsReceived,proto3" json:"unknown_protocol_packets_received,omitempty"`
	// Total input errors
	InputErrors uint32 `protobuf:"varint,67,opt,name=input_errors,json=inputErrors,proto3" json:"input_errors,omitempty"`
	// Input CRC errors
	CrcErrors uint32 `protobuf:"varint,68,opt,name=crc_errors,json=crcErrors,proto3" json:"crc_errors,omitempty"`
	// Input overruns
	InputOverruns uint32 `protobuf:"varint,69,opt,name=input_overruns,json=inputOverruns,proto3" json:"input_overruns,omitempty"`
	// Framing-errors received
	FramingErrorsReceived uint32 `protobuf:"varint,70,opt,name=framing_errors_received,json=framingErrorsReceived,proto3" json:"framing_errors_received,omitempty"`
	// Input ignored packets
	InputIgnoredPackets uint32 `protobuf:"varint,71,opt,name=input_ignored_packets,json=inputIgnoredPackets,proto3" json:"input_ignored_packets,omitempty"`
	// Input aborts
	InputAborts uint32 `protobuf:"varint,72,opt,name=input_aborts,json=inputAborts,proto3" json:"input_aborts,omitempty"`
	// Total output errors
	OutputErrors uint32 `protobuf:"varint,73,opt,name=output_errors,json=outputErrors,proto3" json:"output_errors,omitempty"`
	// Output underruns
	OutputUnderruns uint32 `protobuf:"varint,74,opt,name=output_underruns,json=outputUnderruns,proto3" json:"output_underruns,omitempty"`
	// Output buffer failures
	OutputBufferFailures uint32 `protobuf:"varint,75,opt,name=output_buffer_failures,json=outputBufferFailures,proto3" json:"output_buffer_failures,omitempty"`
	// Output buffers swapped out
	OutputBuffersSwappedOut uint32 `protobuf:"varint,76,opt,name=output_buffers_swapped_out,json=outputBuffersSwappedOut,proto3" json:"output_buffers_swapped_out,omitempty"`
	// Applique
	Applique uint32 `protobuf:"varint,77,opt,name=applique,proto3" json:"applique,omitempty"`
	// Number of board resets
	Resets uint32 `protobuf:"varint,78,opt,name=resets,proto3" json:"resets,omitempty"`
	// Carrier transitions
	CarrierTransitions uint32 `protobuf:"varint,79,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"`
	// Availability bit mask
	AvailabilityFlag uint32 `protobuf:"varint,80,opt,name=availability_flag,json=availabilityFlag,proto3" json:"availability_flag,omitempty"`
	// Time when counters were last written (in seconds)
	LastDataTime uint32 `protobuf:"varint,81,opt,name=last_data_time,json=lastDataTime,proto3" json:"last_data_time,omitempty"`
	// Number of seconds since last clear counters
	SecondsSinceLastClearCounters uint32 `protobuf:"varint,82,opt,name=seconds_since_last_clear_counters,json=secondsSinceLastClearCounters,proto3" json:"seconds_since_last_clear_counters,omitempty"`
	// SysUpTime when counters were last reset (in seconds)
	LastDiscontinuityTime uint32 `protobuf:"varint,83,opt,name=last_discontinuity_time,json=lastDiscontinuityTime,proto3" json:"last_discontinuity_time,omitempty"`
	// Seconds since packet received
	SecondsSincePacketReceived uint32 `protobuf:"varint,84,opt,name=seconds_since_packet_received,json=secondsSincePacketReceived,proto3" json:"seconds_since_packet_received,omitempty"`
	// Seconds since packet sent
	SecondsSincePacketSent uint32 `protobuf:"varint,85,opt,name=seconds_since_packet_sent,json=secondsSincePacketSent,proto3" json:"seconds_since_packet_sent,omitempty"`
}

func (x *IfstatsbagGeneric) Reset() {
	*x = IfstatsbagGeneric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfstatsbagGeneric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfstatsbagGeneric) ProtoMessage() {}

func (x *IfstatsbagGeneric) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfstatsbagGeneric.ProtoReflect.Descriptor instead.
func (*IfstatsbagGeneric) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescGZIP(), []int{1}
}

func (x *IfstatsbagGeneric) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetMulticastPacketsReceived() uint64 {
	if x != nil {
		return x.MulticastPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBroadcastPacketsReceived() uint64 {
	if x != nil {
		return x.BroadcastPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetMulticastPacketsSent() uint64 {
	if x != nil {
		return x.MulticastPacketsSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBroadcastPacketsSent() uint64 {
	if x != nil {
		return x.BroadcastPacketsSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputDrops() uint32 {
	if x != nil {
		return x.OutputDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputQueueDrops() uint32 {
	if x != nil {
		return x.OutputQueueDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputDrops() uint32 {
	if x != nil {
		return x.InputDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputQueueDrops() uint32 {
	if x != nil {
		return x.InputQueueDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetRuntPacketsReceived() uint32 {
	if x != nil {
		return x.RuntPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetGiantPacketsReceived() uint32 {
	if x != nil {
		return x.GiantPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetThrottledPacketsReceived() uint32 {
	if x != nil {
		return x.ThrottledPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetParityPacketsReceived() uint32 {
	if x != nil {
		return x.ParityPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetUnknownProtocolPacketsReceived() uint32 {
	if x != nil {
		return x.UnknownProtocolPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputErrors() uint32 {
	if x != nil {
		return x.InputErrors
	}
	return 0
}

func (x *IfstatsbagGeneric) GetCrcErrors() uint32 {
	if x != nil {
		return x.CrcErrors
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputOverruns() uint32 {
	if x != nil {
		return x.InputOverruns
	}
	return 0
}

func (x *IfstatsbagGeneric) GetFramingErrorsReceived() uint32 {
	if x != nil {
		return x.FramingErrorsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputIgnoredPackets() uint32 {
	if x != nil {
		return x.InputIgnoredPackets
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputAborts() uint32 {
	if x != nil {
		return x.InputAborts
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputErrors() uint32 {
	if x != nil {
		return x.OutputErrors
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputUnderruns() uint32 {
	if x != nil {
		return x.OutputUnderruns
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputBufferFailures() uint32 {
	if x != nil {
		return x.OutputBufferFailures
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputBuffersSwappedOut() uint32 {
	if x != nil {
		return x.OutputBuffersSwappedOut
	}
	return 0
}

func (x *IfstatsbagGeneric) GetApplique() uint32 {
	if x != nil {
		return x.Applique
	}
	return 0
}

func (x *IfstatsbagGeneric) GetResets() uint32 {
	if x != nil {
		return x.Resets
	}
	return 0
}

func (x *IfstatsbagGeneric) GetCarrierTransitions() uint32 {
	if x != nil {
		return x.CarrierTransitions
	}
	return 0
}

func (x *IfstatsbagGeneric) GetAvailabilityFlag() uint32 {
	if x != nil {
		return x.AvailabilityFlag
	}
	return 0
}

func (x *IfstatsbagGeneric) GetLastDataTime() uint32 {
	if x != nil {
		return x.LastDataTime
	}
	return 0
}

func (x *IfstatsbagGeneric) GetSecondsSinceLastClearCounters() uint32 {
	if x != nil {
		return x.SecondsSinceLastClearCounters
	}
	return 0
}

func (x *IfstatsbagGeneric) GetLastDiscontinuityTime() uint32 {
	if x != nil {
		return x.LastDiscontinuityTime
	}
	return 0
}

func (x *IfstatsbagGeneric) GetSecondsSincePacketReceived() uint32 {
	if x != nil {
		return x.SecondsSincePacketReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetSecondsSincePacketSent() uint32 {
	if x != nil {
		return x.SecondsSincePacketSent
	}
	return 0
}

var File_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDesc = []byte{
	0x0a, 0x7b, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x61, 0x67, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x62, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x40, 0x0a, 0x17, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x61, 0x67, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xcc, 0x0d, 0x0a, 0x12, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62,
	0x61, 0x67, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x1a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x75, 0x6e, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x72, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x72, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescData = file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDesc
)

func file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescData)
	})
	return file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDescData
}

var file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_goTypes = []interface{}{
	(*IfstatsbagGeneric_KEYS)(nil), // 0: cisco_ios_xr_infra_statsd_oper.infra_statistics.interfaces.interface.total.interfaces_mib_counters.ifstatsbag_generic_KEYS
	(*IfstatsbagGeneric)(nil),      // 1: cisco_ios_xr_infra_statsd_oper.infra_statistics.interfaces.interface.total.interfaces_mib_counters.ifstatsbag_generic
}
var file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_init()
}
func file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_init() {
	if File_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfstatsbagGeneric_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfstatsbagGeneric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto = out.File
	file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_rawDesc = nil
	file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_goTypes = nil
	file_cisco_ios_xr_infra_statsd_oper_infra_statistics_interfaces_interface_total_interfaces_mib_counters_ifstatsbag_generic_proto_depIdxs = nil
}
