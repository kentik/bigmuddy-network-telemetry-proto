// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_telemetry_model_driven_oper/telemetry_model_driven/destinations/destination/mdt_destination_group_detail.proto

//Path: Cisco-IOS-XR-telemetry-model-driven-oper:telemetry-model-driven/destinations/destination

package cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Per Destination Group detail information
type MdtDestinationGroupDetail_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *MdtDestinationGroupDetail_KEYS) Reset() {
	*x = MdtDestinationGroupDetail_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtDestinationGroupDetail_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtDestinationGroupDetail_KEYS) ProtoMessage() {}

func (x *MdtDestinationGroupDetail_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtDestinationGroupDetail_KEYS.ProtoReflect.Descriptor instead.
func (*MdtDestinationGroupDetail_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{0}
}

func (x *MdtDestinationGroupDetail_KEYS) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type MdtDestinationGroupDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination Group name
	Id string `protobuf:"bytes,50,opt,name=id,proto3" json:"id,omitempty"`
	// Set if this is configured destination group
	Configured uint32 `protobuf:"varint,51,opt,name=configured,proto3" json:"configured,omitempty"`
	// list of destinations defined in this group
	Destinations []*MdtDestinationDetail `protobuf:"bytes,52,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *MdtDestinationGroupDetail) Reset() {
	*x = MdtDestinationGroupDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtDestinationGroupDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtDestinationGroupDetail) ProtoMessage() {}

func (x *MdtDestinationGroupDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtDestinationGroupDetail.ProtoReflect.Descriptor instead.
func (*MdtDestinationGroupDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{1}
}

func (x *MdtDestinationGroupDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MdtDestinationGroupDetail) GetConfigured() uint32 {
	if x != nil {
		return x.Configured
	}
	return 0
}

func (x *MdtDestinationGroupDetail) GetDestinations() []*MdtDestinationDetail {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type MdtIn6AddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MdtIn6AddrT) Reset() {
	*x = MdtIn6AddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtIn6AddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtIn6AddrT) ProtoMessage() {}

func (x *MdtIn6AddrT) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtIn6AddrT.ProtoReflect.Descriptor instead.
func (*MdtIn6AddrT) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{2}
}

func (x *MdtIn6AddrT) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MdtDestinationIPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpType string `protobuf:"bytes,1,opt,name=ip_type,json=ipType,proto3" json:"ip_type,omitempty"`
	// IPV4 Address
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// IPV6 Address
	Ipv6Address *MdtIn6AddrT `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *MdtDestinationIPAddress) Reset() {
	*x = MdtDestinationIPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtDestinationIPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtDestinationIPAddress) ProtoMessage() {}

func (x *MdtDestinationIPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtDestinationIPAddress.ProtoReflect.Descriptor instead.
func (*MdtDestinationIPAddress) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{3}
}

func (x *MdtDestinationIPAddress) GetIpType() string {
	if x != nil {
		return x.IpType
	}
	return ""
}

func (x *MdtDestinationIPAddress) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *MdtDestinationIPAddress) GetIpv6Address() *MdtIn6AddrT {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

// Sensor Path information
type MdtSensorPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sensor Path
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// State, if sensor path is resolved or not
	State uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// Error str, if there are any errors resolving the sensor path
	StatusStr string `protobuf:"bytes,3,opt,name=status_str,json=statusStr,proto3" json:"status_str,omitempty"`
}

func (x *MdtSensorPaths) Reset() {
	*x = MdtSensorPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtSensorPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtSensorPaths) ProtoMessage() {}

func (x *MdtSensorPaths) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtSensorPaths.ProtoReflect.Descriptor instead.
func (*MdtSensorPaths) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{4}
}

func (x *MdtSensorPaths) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MdtSensorPaths) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *MdtSensorPaths) GetStatusStr() string {
	if x != nil {
		return x.StatusStr
	}
	return ""
}

// Per collection group sysdb information
type MdtCollectionSysdbGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sysdb Path
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Period of the collections (ms)
	Cadence uint64 `protobuf:"varint,2,opt,name=cadence,proto3" json:"cadence,omitempty"`
	// Total number of gets
	TotalGetCount uint64 `protobuf:"varint,3,opt,name=total_get_count,json=totalGetCount,proto3" json:"total_get_count,omitempty"`
	// Total number of lists
	TotalListCount uint64 `protobuf:"varint,4,opt,name=total_list_count,json=totalListCount,proto3" json:"total_list_count,omitempty"`
	// Total number of datalists
	TotalDatalistCount uint64 `protobuf:"varint,5,opt,name=total_datalist_count,json=totalDatalistCount,proto3" json:"total_datalist_count,omitempty"`
	// Total number of finddata
	TotalFinddataCount uint64 `protobuf:"varint,6,opt,name=total_finddata_count,json=totalFinddataCount,proto3" json:"total_finddata_count,omitempty"`
	// Total number of get bulk
	TotalGetBulkCount uint64 `protobuf:"varint,7,opt,name=total_get_bulk_count,json=totalGetBulkCount,proto3" json:"total_get_bulk_count,omitempty"`
	// Total number of items retrived from sysdb
	TotalItemCount uint64 `protobuf:"varint,8,opt,name=total_item_count,json=totalItemCount,proto3" json:"total_item_count,omitempty"`
	// Total number of get errors
	TotalGetErrors uint64 `protobuf:"varint,9,opt,name=total_get_errors,json=totalGetErrors,proto3" json:"total_get_errors,omitempty"`
	// Total number of list errors
	TotalListErrors uint64 `protobuf:"varint,10,opt,name=total_list_errors,json=totalListErrors,proto3" json:"total_list_errors,omitempty"`
	// Total number of datalist errors
	TotalDatalistErrors uint64 `protobuf:"varint,11,opt,name=total_datalist_errors,json=totalDatalistErrors,proto3" json:"total_datalist_errors,omitempty"`
	// Total number of finddata errors
	TotalFinddataErrors uint64 `protobuf:"varint,12,opt,name=total_finddata_errors,json=totalFinddataErrors,proto3" json:"total_finddata_errors,omitempty"`
	// Total number of get bulk errors
	TotalGetBulkErrors uint64 `protobuf:"varint,13,opt,name=total_get_bulk_errors,json=totalGetBulkErrors,proto3" json:"total_get_bulk_errors,omitempty"`
	// Total number of encode errors
	TotalEncodeErrors uint64 `protobuf:"varint,14,opt,name=total_encode_errors,json=totalEncodeErrors,proto3" json:"total_encode_errors,omitempty"`
	// Total number of encode deferred
	TotalEncodeNotready uint64 `protobuf:"varint,15,opt,name=total_encode_notready,json=totalEncodeNotready,proto3" json:"total_encode_notready,omitempty"`
	// Total number of send errors
	TotalSendErrors uint64 `protobuf:"varint,16,opt,name=total_send_errors,json=totalSendErrors,proto3" json:"total_send_errors,omitempty"`
	// Total number of send channel full
	TotalSendDrops uint64 `protobuf:"varint,17,opt,name=total_send_drops,json=totalSendDrops,proto3" json:"total_send_drops,omitempty"`
	// Total number of bytes sent
	TotalSentBytes uint64 `protobuf:"varint,18,opt,name=total_sent_bytes,json=totalSentBytes,proto3" json:"total_sent_bytes,omitempty"`
	// Total number of packets sent
	TotalSendPackets uint64 `protobuf:"varint,19,opt,name=total_send_packets,json=totalSendPackets,proto3" json:"total_send_packets,omitempty"`
	// Total number of send bytes dropped
	TotalSendBytesDropped uint64 `protobuf:"varint,20,opt,name=total_send_bytes_dropped,json=totalSendBytesDropped,proto3" json:"total_send_bytes_dropped,omitempty"`
	// Completed collections count
	TotalCollections uint64 `protobuf:"varint,21,opt,name=total_collections,json=totalCollections,proto3" json:"total_collections,omitempty"`
	// Total number of collections missed
	TotalCollectionsMissed uint64 `protobuf:"varint,22,opt,name=total_collections_missed,json=totalCollectionsMissed,proto3" json:"total_collections_missed,omitempty"`
	// Maximum time for a collection (ms)
	MaxCollectionTime uint64 `protobuf:"varint,23,opt,name=max_collection_time,json=maxCollectionTime,proto3" json:"max_collection_time,omitempty"`
	// Minimum time for a collection (ms)
	MinCollectionTime uint64 `protobuf:"varint,24,opt,name=min_collection_time,json=minCollectionTime,proto3" json:"min_collection_time,omitempty"`
	// Average time for a collection (ms)
	AvgCollectionTime uint64 `protobuf:"varint,25,opt,name=avg_collection_time,json=avgCollectionTime,proto3" json:"avg_collection_time,omitempty"`
	// Collection method in use
	CollectionMethod uint64 `protobuf:"varint,26,opt,name=collection_method,json=collectionMethod,proto3" json:"collection_method,omitempty"`
	// Status of collection path
	Status string `protobuf:"bytes,27,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MdtCollectionSysdbGroup) Reset() {
	*x = MdtCollectionSysdbGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtCollectionSysdbGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtCollectionSysdbGroup) ProtoMessage() {}

func (x *MdtCollectionSysdbGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtCollectionSysdbGroup.ProtoReflect.Descriptor instead.
func (*MdtCollectionSysdbGroup) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{5}
}

func (x *MdtCollectionSysdbGroup) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MdtCollectionSysdbGroup) GetCadence() uint64 {
	if x != nil {
		return x.Cadence
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalGetCount() uint64 {
	if x != nil {
		return x.TotalGetCount
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalListCount() uint64 {
	if x != nil {
		return x.TotalListCount
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalDatalistCount() uint64 {
	if x != nil {
		return x.TotalDatalistCount
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalFinddataCount() uint64 {
	if x != nil {
		return x.TotalFinddataCount
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalGetBulkCount() uint64 {
	if x != nil {
		return x.TotalGetBulkCount
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalItemCount() uint64 {
	if x != nil {
		return x.TotalItemCount
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalGetErrors() uint64 {
	if x != nil {
		return x.TotalGetErrors
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalListErrors() uint64 {
	if x != nil {
		return x.TotalListErrors
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalDatalistErrors() uint64 {
	if x != nil {
		return x.TotalDatalistErrors
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalFinddataErrors() uint64 {
	if x != nil {
		return x.TotalFinddataErrors
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalGetBulkErrors() uint64 {
	if x != nil {
		return x.TotalGetBulkErrors
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalEncodeErrors() uint64 {
	if x != nil {
		return x.TotalEncodeErrors
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalEncodeNotready() uint64 {
	if x != nil {
		return x.TotalEncodeNotready
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalSendErrors() uint64 {
	if x != nil {
		return x.TotalSendErrors
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalSendDrops() uint64 {
	if x != nil {
		return x.TotalSendDrops
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalSentBytes() uint64 {
	if x != nil {
		return x.TotalSentBytes
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalSendPackets() uint64 {
	if x != nil {
		return x.TotalSendPackets
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalSendBytesDropped() uint64 {
	if x != nil {
		return x.TotalSendBytesDropped
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalCollections() uint64 {
	if x != nil {
		return x.TotalCollections
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetTotalCollectionsMissed() uint64 {
	if x != nil {
		return x.TotalCollectionsMissed
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetMaxCollectionTime() uint64 {
	if x != nil {
		return x.MaxCollectionTime
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetMinCollectionTime() uint64 {
	if x != nil {
		return x.MinCollectionTime
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetAvgCollectionTime() uint64 {
	if x != nil {
		return x.AvgCollectionTime
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetCollectionMethod() uint64 {
	if x != nil {
		return x.CollectionMethod
	}
	return 0
}

func (x *MdtCollectionSysdbGroup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Per collection group information
type MdtCollectionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection Group id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Period of the collections (ms)
	Cadence uint32 `protobuf:"varint,2,opt,name=cadence,proto3" json:"cadence,omitempty"`
	// Completed collections count
	TotalCollections uint32 `protobuf:"varint,3,opt,name=total_collections,json=totalCollections,proto3" json:"total_collections,omitempty"`
	// Destination group encoding
	Encoding string `protobuf:"bytes,4,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Timestamp of the start of last collection
	LastCollectionStartTime uint64 `protobuf:"varint,5,opt,name=last_collection_start_time,json=lastCollectionStartTime,proto3" json:"last_collection_start_time,omitempty"`
	// Timestamp of the end of last collection
	LastCollectionEndTime uint64 `protobuf:"varint,6,opt,name=last_collection_end_time,json=lastCollectionEndTime,proto3" json:"last_collection_end_time,omitempty"`
	// Maximum time for a collection (ms)
	MaxCollectionTime uint32 `protobuf:"varint,7,opt,name=max_collection_time,json=maxCollectionTime,proto3" json:"max_collection_time,omitempty"`
	// Minimum time for a collection (ms)
	MinCollectionTime uint32 `protobuf:"varint,8,opt,name=min_collection_time,json=minCollectionTime,proto3" json:"min_collection_time,omitempty"`
	// Minimum time for all processing (ms)
	MinTotalTime uint32 `protobuf:"varint,9,opt,name=min_total_time,json=minTotalTime,proto3" json:"min_total_time,omitempty"`
	// Maximum time for all processing (ms)
	MaxTotalTime uint32 `protobuf:"varint,10,opt,name=max_total_time,json=maxTotalTime,proto3" json:"max_total_time,omitempty"`
	// Average time for all processing (ms)
	AvgTotalTime uint32 `protobuf:"varint,11,opt,name=avg_total_time,json=avgTotalTime,proto3" json:"avg_total_time,omitempty"`
	// Total number of errors
	TotalOtherErrors uint32 `protobuf:"varint,12,opt,name=total_other_errors,json=totalOtherErrors,proto3" json:"total_other_errors,omitempty"`
	// Total number skipped (not ready)
	TotalNotReady uint32 `protobuf:"varint,13,opt,name=total_not_ready,json=totalNotReady,proto3" json:"total_not_ready,omitempty"`
	// Total number of send errors
	TotalSendErrors uint32 `protobuf:"varint,14,opt,name=total_send_errors,json=totalSendErrors,proto3" json:"total_send_errors,omitempty"`
	// Total number of send drops
	TotalSendDrops uint32 `protobuf:"varint,15,opt,name=total_send_drops,json=totalSendDrops,proto3" json:"total_send_drops,omitempty"`
	// Array of information for sensor paths within collection group
	CollectionPaths []*MdtSensorPaths `protobuf:"bytes,16,rep,name=collection_paths,json=collectionPaths,proto3" json:"collection_paths,omitempty"`
	// Array of information for sysdb paths within collection group
	InternalCollectionGroup []*MdtCollectionSysdbGroup `protobuf:"bytes,17,rep,name=internal_collection_group,json=internalCollectionGroup,proto3" json:"internal_collection_group,omitempty"`
}

func (x *MdtCollectionGroup) Reset() {
	*x = MdtCollectionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtCollectionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtCollectionGroup) ProtoMessage() {}

func (x *MdtCollectionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtCollectionGroup.ProtoReflect.Descriptor instead.
func (*MdtCollectionGroup) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{6}
}

func (x *MdtCollectionGroup) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MdtCollectionGroup) GetCadence() uint32 {
	if x != nil {
		return x.Cadence
	}
	return 0
}

func (x *MdtCollectionGroup) GetTotalCollections() uint32 {
	if x != nil {
		return x.TotalCollections
	}
	return 0
}

func (x *MdtCollectionGroup) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *MdtCollectionGroup) GetLastCollectionStartTime() uint64 {
	if x != nil {
		return x.LastCollectionStartTime
	}
	return 0
}

func (x *MdtCollectionGroup) GetLastCollectionEndTime() uint64 {
	if x != nil {
		return x.LastCollectionEndTime
	}
	return 0
}

func (x *MdtCollectionGroup) GetMaxCollectionTime() uint32 {
	if x != nil {
		return x.MaxCollectionTime
	}
	return 0
}

func (x *MdtCollectionGroup) GetMinCollectionTime() uint32 {
	if x != nil {
		return x.MinCollectionTime
	}
	return 0
}

func (x *MdtCollectionGroup) GetMinTotalTime() uint32 {
	if x != nil {
		return x.MinTotalTime
	}
	return 0
}

func (x *MdtCollectionGroup) GetMaxTotalTime() uint32 {
	if x != nil {
		return x.MaxTotalTime
	}
	return 0
}

func (x *MdtCollectionGroup) GetAvgTotalTime() uint32 {
	if x != nil {
		return x.AvgTotalTime
	}
	return 0
}

func (x *MdtCollectionGroup) GetTotalOtherErrors() uint32 {
	if x != nil {
		return x.TotalOtherErrors
	}
	return 0
}

func (x *MdtCollectionGroup) GetTotalNotReady() uint32 {
	if x != nil {
		return x.TotalNotReady
	}
	return 0
}

func (x *MdtCollectionGroup) GetTotalSendErrors() uint32 {
	if x != nil {
		return x.TotalSendErrors
	}
	return 0
}

func (x *MdtCollectionGroup) GetTotalSendDrops() uint32 {
	if x != nil {
		return x.TotalSendDrops
	}
	return 0
}

func (x *MdtCollectionGroup) GetCollectionPaths() []*MdtSensorPaths {
	if x != nil {
		return x.CollectionPaths
	}
	return nil
}

func (x *MdtCollectionGroup) GetInternalCollectionGroup() []*MdtCollectionSysdbGroup {
	if x != nil {
		return x.InternalCollectionGroup
	}
	return nil
}

// Per Destination information
type MdtDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Sub Idstr
	SubIdStr string `protobuf:"bytes,2,opt,name=sub_id_str,json=subIdStr,proto3" json:"sub_id_str,omitempty"`
	// Sub Id
	SubId []uint64 `protobuf:"varint,3,rep,packed,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	// Destination IP Address
	DestIpAddress *MdtDestinationIPAddress `protobuf:"bytes,4,opt,name=dest_ip_address,json=destIpAddress,proto3" json:"dest_ip_address,omitempty"`
	// Destination Port number
	DestPort uint32 `protobuf:"varint,5,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
	// Destination group encoding
	Encoding string `protobuf:"bytes,6,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Destination group transport
	Transport string `protobuf:"bytes,7,opt,name=transport,proto3" json:"transport,omitempty"`
	// Destination group vrf
	Vrf string `protobuf:"bytes,8,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Destination group vrf id
	VrfId uint32 `protobuf:"varint,9,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// State of streaming on this destination
	State uint32 `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
	// UDP MTU if this destination is UDP
	UdpMtu uint32 `protobuf:"varint,11,opt,name=udp_mtu,json=udpMtu,proto3" json:"udp_mtu,omitempty"`
	// TLS connection to this destination
	Tls uint32 `protobuf:"varint,12,opt,name=tls,proto3" json:"tls,omitempty"`
	// TLS Hostname of this destination
	TlsHost string `protobuf:"bytes,13,opt,name=tls_host,json=tlsHost,proto3" json:"tls_host,omitempty"`
	// Total number of packets sent for this destination
	TotalNumOfPacketsSent uint64 `protobuf:"varint,14,opt,name=total_num_of_packets_sent,json=totalNumOfPacketsSent,proto3" json:"total_num_of_packets_sent,omitempty"`
	// Total number of bytes sent for this destination
	TotalNumOfBytesSent uint64 `protobuf:"varint,15,opt,name=total_num_of_bytes_sent,json=totalNumOfBytesSent,proto3" json:"total_num_of_bytes_sent,omitempty"`
	// Timestamp of the last collection
	LastCollectionTime uint64 `protobuf:"varint,16,opt,name=last_collection_time,json=lastCollectionTime,proto3" json:"last_collection_time,omitempty"`
}

func (x *MdtDestination) Reset() {
	*x = MdtDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtDestination) ProtoMessage() {}

func (x *MdtDestination) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtDestination.ProtoReflect.Descriptor instead.
func (*MdtDestination) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{7}
}

func (x *MdtDestination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MdtDestination) GetSubIdStr() string {
	if x != nil {
		return x.SubIdStr
	}
	return ""
}

func (x *MdtDestination) GetSubId() []uint64 {
	if x != nil {
		return x.SubId
	}
	return nil
}

func (x *MdtDestination) GetDestIpAddress() *MdtDestinationIPAddress {
	if x != nil {
		return x.DestIpAddress
	}
	return nil
}

func (x *MdtDestination) GetDestPort() uint32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

func (x *MdtDestination) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *MdtDestination) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *MdtDestination) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *MdtDestination) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *MdtDestination) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *MdtDestination) GetUdpMtu() uint32 {
	if x != nil {
		return x.UdpMtu
	}
	return 0
}

func (x *MdtDestination) GetTls() uint32 {
	if x != nil {
		return x.Tls
	}
	return 0
}

func (x *MdtDestination) GetTlsHost() string {
	if x != nil {
		return x.TlsHost
	}
	return ""
}

func (x *MdtDestination) GetTotalNumOfPacketsSent() uint64 {
	if x != nil {
		return x.TotalNumOfPacketsSent
	}
	return 0
}

func (x *MdtDestination) GetTotalNumOfBytesSent() uint64 {
	if x != nil {
		return x.TotalNumOfBytesSent
	}
	return 0
}

func (x *MdtDestination) GetLastCollectionTime() uint64 {
	if x != nil {
		return x.LastCollectionTime
	}
	return 0
}

// Per Destination detail information
type MdtDestinationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination
	Destination *MdtDestination `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// List of collection groups for this destination group
	CollectionGroups []*MdtCollectionGroup `protobuf:"bytes,2,rep,name=collection_groups,json=collectionGroups,proto3" json:"collection_groups,omitempty"`
}

func (x *MdtDestinationDetail) Reset() {
	*x = MdtDestinationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdtDestinationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdtDestinationDetail) ProtoMessage() {}

func (x *MdtDestinationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdtDestinationDetail.ProtoReflect.Descriptor instead.
func (*MdtDestinationDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP(), []int{8}
}

func (x *MdtDestinationDetail) GetDestination() *MdtDestination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MdtDestinationDetail) GetCollectionGroups() []*MdtCollectionGroup {
	if x != nil {
		return x.CollectionGroups
	}
	return nil
}

var File_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDesc = []byte{
	0x0a, 0x7b, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x6e, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x64, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x58, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x2e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x21, 0x6d, 0x64, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x1c, 0x6d, 0x64, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x2e, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x64, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x6d,
	0x64, 0x74, 0x5f, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x4d, 0x64, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0c,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x68, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x6e, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x64,
	0x74, 0x5f, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x69, 0x70,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5b, 0x0a, 0x10, 0x6d, 0x64, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x22, 0xd3, 0x09, 0x0a, 0x1a, 0x6d, 0x64, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x64, 0x62, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x61, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x6c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x64,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x4e, 0x6f, 0x74, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x67, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc8, 0x07, 0x0a,
	0x14, 0x6d, 0x64, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76,
	0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x95, 0x01, 0x0a,
	0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x64, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x64, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x64, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x17,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xf0, 0x04, 0x0a, 0x0f, 0x6d, 0x64, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x12, 0x99, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x2e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x64, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x64,
	0x65, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x70, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x64, 0x70, 0x4d, 0x74, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x6c, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x16, 0x6d,
	0x64, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x2e, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x64, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x6e, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x64, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescData = file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDesc
)

func file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescData)
	})
	return file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDescData
}

var file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_goTypes = []interface{}{
	(*MdtDestinationGroupDetail_KEYS)(nil), // 0: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination_group_detail_KEYS
	(*MdtDestinationGroupDetail)(nil),      // 1: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination_group_detail
	(*MdtIn6AddrT)(nil),                    // 2: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_in6_addr_t
	(*MdtDestinationIPAddress)(nil),        // 3: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.MdtDestinationIPAddress
	(*MdtSensorPaths)(nil),                 // 4: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_sensor_paths
	(*MdtCollectionSysdbGroup)(nil),        // 5: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_collection_sysdb_group
	(*MdtCollectionGroup)(nil),             // 6: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_collection_group
	(*MdtDestination)(nil),                 // 7: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination
	(*MdtDestinationDetail)(nil),           // 8: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination_detail
}
var file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_depIdxs = []int32{
	8, // 0: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination_group_detail.destinations:type_name -> cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination_detail
	2, // 1: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.MdtDestinationIPAddress.ipv6_address:type_name -> cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_in6_addr_t
	4, // 2: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_collection_group.collection_paths:type_name -> cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_sensor_paths
	5, // 3: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_collection_group.internal_collection_group:type_name -> cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_collection_sysdb_group
	3, // 4: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination.dest_ip_address:type_name -> cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.MdtDestinationIPAddress
	7, // 5: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination_detail.destination:type_name -> cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination
	6, // 6: cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_destination_detail.collection_groups:type_name -> cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.destinations.destination.mdt_collection_group
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_init()
}
func file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_init() {
	if File_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtDestinationGroupDetail_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtDestinationGroupDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtIn6AddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtDestinationIPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtSensorPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtCollectionSysdbGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtCollectionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdtDestinationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto = out.File
	file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_rawDesc = nil
	file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_goTypes = nil
	file_cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_destinations_destination_mdt_destination_group_detail_proto_depIdxs = nil
}
