// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_pfi_im_cmd_oper/interfaces/interface_xr/interface/im_cmd_info.proto

package cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Full interface information
type ImCmdInfo_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *ImCmdInfo_KEYS) Reset() {
	*x = ImCmdInfo_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdInfo_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdInfo_KEYS) ProtoMessage() {}

func (x *ImCmdInfo_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdInfo_KEYS.ProtoReflect.Descriptor instead.
func (*ImCmdInfo_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{0}
}

func (x *ImCmdInfo_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type ImCmdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface
	InterfaceHandle string `protobuf:"bytes,50,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	// Interface type
	InterfaceType string `protobuf:"bytes,51,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	// Hardware type description string
	HardwareTypeString string `protobuf:"bytes,52,opt,name=hardware_type_string,json=hardwareTypeString,proto3" json:"hardware_type_string,omitempty"`
	// Interface state
	State string `protobuf:"bytes,53,opt,name=state,proto3" json:"state,omitempty"`
	// Line protocol state
	LineState string `protobuf:"bytes,54,opt,name=line_state,json=lineState,proto3" json:"line_state,omitempty"`
	// Interface encapsulation
	Encapsulation string `protobuf:"bytes,55,opt,name=encapsulation,proto3" json:"encapsulation,omitempty"`
	// Interface encapsulation description string
	EncapsulationTypeString string `protobuf:"bytes,56,opt,name=encapsulation_type_string,json=encapsulationTypeString,proto3" json:"encapsulation_type_string,omitempty"`
	// MTU in bytes
	Mtu uint32 `protobuf:"varint,57,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// L2 transport flag
	IsL2TransportEnabled bool `protobuf:"varint,58,opt,name=is_l2_transport_enabled,json=isL2TransportEnabled,proto3" json:"is_l2_transport_enabled,omitempty"`
	// The number of times the state has changed
	StateTransitionCount uint32 `protobuf:"varint,59,opt,name=state_transition_count,json=stateTransitionCount,proto3" json:"state_transition_count,omitempty"`
	// The time elasped after the last state transition
	LastStateTransitionTime uint32 `protobuf:"varint,60,opt,name=last_state_transition_time,json=lastStateTransitionTime,proto3" json:"last_state_transition_time,omitempty"`
	// Dampening enabled flag
	IsDampeningEnabled bool `protobuf:"varint,61,opt,name=is_dampening_enabled,json=isDampeningEnabled,proto3" json:"is_dampening_enabled,omitempty"`
	// State dampening information
	DampeningInformation *ImCmdDampSt `protobuf:"bytes,62,opt,name=dampening_information,json=dampeningInformation,proto3" json:"dampening_information,omitempty"`
	// Interface speed (Kb/s)
	Speed uint32 `protobuf:"varint,63,opt,name=speed,proto3" json:"speed,omitempty"`
	// Cyclic Redundancy Check length
	CrcLength uint32 `protobuf:"varint,64,opt,name=crc_length,json=crcLength,proto3" json:"crc_length,omitempty"`
	// Interface scramble config
	IsScrambleEnabled bool `protobuf:"varint,65,opt,name=is_scramble_enabled,json=isScrambleEnabled,proto3" json:"is_scramble_enabled,omitempty"`
	// Interface duplexity
	Duplexity string `protobuf:"bytes,66,opt,name=duplexity,proto3" json:"duplexity,omitempty"`
	// Interface media type
	MediaType string `protobuf:"bytes,67,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// Interface link type
	LinkType string `protobuf:"bytes,68,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	// Input flow control configuration
	InFlowControl string `protobuf:"bytes,69,opt,name=in_flow_control,json=inFlowControl,proto3" json:"in_flow_control,omitempty"`
	// Output flow control configuration
	OutFlowControl string `protobuf:"bytes,70,opt,name=out_flow_control,json=outFlowControl,proto3" json:"out_flow_control,omitempty"`
	// Interface MAC address
	MacAddress *ImCmdMacAddrSt `protobuf:"bytes,71,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Interface burned in address
	BurnedInAddress *ImCmdMacAddrSt `protobuf:"bytes,72,opt,name=burned_in_address,json=burnedInAddress,proto3" json:"burned_in_address,omitempty"`
	// Carrier Delay
	CarrierDelay *ImCmdCarrierDelaySt `protobuf:"bytes,73,opt,name=carrier_delay,json=carrierDelay,proto3" json:"carrier_delay,omitempty"`
	// Interface bandwidth (Kb/s)
	Bandwidth uint32 `protobuf:"varint,74,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Maximum Interface bandwidth (Kb/s)
	MaxBandwidth uint32 `protobuf:"varint,75,opt,name=max_bandwidth,json=maxBandwidth,proto3" json:"max_bandwidth,omitempty"`
	// Interface keepalive time (s)
	Keepalive uint32 `protobuf:"varint,76,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	// Loopback detected by layer 2
	IsL2Looped bool `protobuf:"varint,77,opt,name=is_l2_looped,json=isL2Looped,proto3" json:"is_l2_looped,omitempty"`
	// Parent interface
	ParentInterfaceName string `protobuf:"bytes,78,opt,name=parent_interface_name,json=parentInterfaceName,proto3" json:"parent_interface_name,omitempty"`
	// Interface loopback configuration
	LoopbackConfiguration string `protobuf:"bytes,79,opt,name=loopback_configuration,json=loopbackConfiguration,proto3" json:"loopback_configuration,omitempty"`
	// Interface description string
	Description string `protobuf:"bytes,80,opt,name=description,proto3" json:"description,omitempty"`
	// Interface ARP type and timeout
	ArpInformation *ImCmdArpInfoSt `protobuf:"bytes,81,opt,name=arp_information,json=arpInformation,proto3" json:"arp_information,omitempty"`
	// Interface IP address info
	IpInformation *ImCmdIpInfoSt `protobuf:"bytes,82,opt,name=ip_information,json=ipInformation,proto3" json:"ip_information,omitempty"`
	// Maintenance embargo flag
	IsMaintenanceEnabled bool `protobuf:"varint,83,opt,name=is_maintenance_enabled,json=isMaintenanceEnabled,proto3" json:"is_maintenance_enabled,omitempty"`
	// Data invert flag
	IsDataInverted bool `protobuf:"varint,84,opt,name=is_data_inverted,json=isDataInverted,proto3" json:"is_data_inverted,omitempty"`
	// Interface transport mode
	TransportMode string `protobuf:"bytes,85,opt,name=transport_mode,json=transportMode,proto3" json:"transport_mode,omitempty"`
	// Information specific to the encapsulation
	EncapsulationInformation *ImCmdEncapsInfo `protobuf:"bytes,86,opt,name=encapsulation_information,json=encapsulationInformation,proto3" json:"encapsulation_information,omitempty"`
	// Information specific to the interface type
	InterfaceTypeInformation *ImCmdIntfTypeInfo `protobuf:"bytes,87,opt,name=interface_type_information,json=interfaceTypeInformation,proto3" json:"interface_type_information,omitempty"`
	// Packet and byte rates
	DataRates *StatsdbagDatarate `protobuf:"bytes,88,opt,name=data_rates,json=dataRates,proto3" json:"data_rates,omitempty"`
	// Packet, byte and error counters
	InterfaceStatistics *ImCmdIfStats `protobuf:"bytes,89,opt,name=interface_statistics,json=interfaceStatistics,proto3" json:"interface_statistics,omitempty"`
	// L2 Protocol Statistics
	L2InterfaceStatistics *StatsData `protobuf:"bytes,90,opt,name=l2_interface_statistics,json=l2InterfaceStatistics,proto3" json:"l2_interface_statistics,omitempty"`
	// nV Optical Controller Information
	NvOptical *NvOpticalInterfaceInfo `protobuf:"bytes,91,opt,name=nv_optical,json=nvOptical,proto3" json:"nv_optical,omitempty"`
	// This is not supposed to be used. It is a dummy attribute to support ifindex for OC model
	IfIndex uint32 `protobuf:"varint,92,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
}

func (x *ImCmdInfo) Reset() {
	*x = ImCmdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdInfo) ProtoMessage() {}

func (x *ImCmdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdInfo.ProtoReflect.Descriptor instead.
func (*ImCmdInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{1}
}

func (x *ImCmdInfo) GetInterfaceHandle() string {
	if x != nil {
		return x.InterfaceHandle
	}
	return ""
}

func (x *ImCmdInfo) GetInterfaceType() string {
	if x != nil {
		return x.InterfaceType
	}
	return ""
}

func (x *ImCmdInfo) GetHardwareTypeString() string {
	if x != nil {
		return x.HardwareTypeString
	}
	return ""
}

func (x *ImCmdInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ImCmdInfo) GetLineState() string {
	if x != nil {
		return x.LineState
	}
	return ""
}

func (x *ImCmdInfo) GetEncapsulation() string {
	if x != nil {
		return x.Encapsulation
	}
	return ""
}

func (x *ImCmdInfo) GetEncapsulationTypeString() string {
	if x != nil {
		return x.EncapsulationTypeString
	}
	return ""
}

func (x *ImCmdInfo) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *ImCmdInfo) GetIsL2TransportEnabled() bool {
	if x != nil {
		return x.IsL2TransportEnabled
	}
	return false
}

func (x *ImCmdInfo) GetStateTransitionCount() uint32 {
	if x != nil {
		return x.StateTransitionCount
	}
	return 0
}

func (x *ImCmdInfo) GetLastStateTransitionTime() uint32 {
	if x != nil {
		return x.LastStateTransitionTime
	}
	return 0
}

func (x *ImCmdInfo) GetIsDampeningEnabled() bool {
	if x != nil {
		return x.IsDampeningEnabled
	}
	return false
}

func (x *ImCmdInfo) GetDampeningInformation() *ImCmdDampSt {
	if x != nil {
		return x.DampeningInformation
	}
	return nil
}

func (x *ImCmdInfo) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *ImCmdInfo) GetCrcLength() uint32 {
	if x != nil {
		return x.CrcLength
	}
	return 0
}

func (x *ImCmdInfo) GetIsScrambleEnabled() bool {
	if x != nil {
		return x.IsScrambleEnabled
	}
	return false
}

func (x *ImCmdInfo) GetDuplexity() string {
	if x != nil {
		return x.Duplexity
	}
	return ""
}

func (x *ImCmdInfo) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *ImCmdInfo) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *ImCmdInfo) GetInFlowControl() string {
	if x != nil {
		return x.InFlowControl
	}
	return ""
}

func (x *ImCmdInfo) GetOutFlowControl() string {
	if x != nil {
		return x.OutFlowControl
	}
	return ""
}

func (x *ImCmdInfo) GetMacAddress() *ImCmdMacAddrSt {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *ImCmdInfo) GetBurnedInAddress() *ImCmdMacAddrSt {
	if x != nil {
		return x.BurnedInAddress
	}
	return nil
}

func (x *ImCmdInfo) GetCarrierDelay() *ImCmdCarrierDelaySt {
	if x != nil {
		return x.CarrierDelay
	}
	return nil
}

func (x *ImCmdInfo) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *ImCmdInfo) GetMaxBandwidth() uint32 {
	if x != nil {
		return x.MaxBandwidth
	}
	return 0
}

func (x *ImCmdInfo) GetKeepalive() uint32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *ImCmdInfo) GetIsL2Looped() bool {
	if x != nil {
		return x.IsL2Looped
	}
	return false
}

func (x *ImCmdInfo) GetParentInterfaceName() string {
	if x != nil {
		return x.ParentInterfaceName
	}
	return ""
}

func (x *ImCmdInfo) GetLoopbackConfiguration() string {
	if x != nil {
		return x.LoopbackConfiguration
	}
	return ""
}

func (x *ImCmdInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImCmdInfo) GetArpInformation() *ImCmdArpInfoSt {
	if x != nil {
		return x.ArpInformation
	}
	return nil
}

func (x *ImCmdInfo) GetIpInformation() *ImCmdIpInfoSt {
	if x != nil {
		return x.IpInformation
	}
	return nil
}

func (x *ImCmdInfo) GetIsMaintenanceEnabled() bool {
	if x != nil {
		return x.IsMaintenanceEnabled
	}
	return false
}

func (x *ImCmdInfo) GetIsDataInverted() bool {
	if x != nil {
		return x.IsDataInverted
	}
	return false
}

func (x *ImCmdInfo) GetTransportMode() string {
	if x != nil {
		return x.TransportMode
	}
	return ""
}

func (x *ImCmdInfo) GetEncapsulationInformation() *ImCmdEncapsInfo {
	if x != nil {
		return x.EncapsulationInformation
	}
	return nil
}

func (x *ImCmdInfo) GetInterfaceTypeInformation() *ImCmdIntfTypeInfo {
	if x != nil {
		return x.InterfaceTypeInformation
	}
	return nil
}

func (x *ImCmdInfo) GetDataRates() *StatsdbagDatarate {
	if x != nil {
		return x.DataRates
	}
	return nil
}

func (x *ImCmdInfo) GetInterfaceStatistics() *ImCmdIfStats {
	if x != nil {
		return x.InterfaceStatistics
	}
	return nil
}

func (x *ImCmdInfo) GetL2InterfaceStatistics() *StatsData {
	if x != nil {
		return x.L2InterfaceStatistics
	}
	return nil
}

func (x *ImCmdInfo) GetNvOptical() *NvOpticalInterfaceInfo {
	if x != nil {
		return x.NvOptical
	}
	return nil
}

func (x *ImCmdInfo) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

// Generic set of interface counters
type IfstatsbagGeneric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Packets received
	PacketsReceived uint64 `protobuf:"varint,1,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	// Bytes received
	BytesReceived uint64 `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	// Packets sent
	PacketsSent uint64 `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	// Bytes sent
	BytesSent uint64 `protobuf:"varint,4,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// Multicast packets received
	MulticastPacketsReceived uint64 `protobuf:"varint,5,opt,name=multicast_packets_received,json=multicastPacketsReceived,proto3" json:"multicast_packets_received,omitempty"`
	// Broadcast packets received
	BroadcastPacketsReceived uint64 `protobuf:"varint,6,opt,name=broadcast_packets_received,json=broadcastPacketsReceived,proto3" json:"broadcast_packets_received,omitempty"`
	// Multicast packets sent
	MulticastPacketsSent uint64 `protobuf:"varint,7,opt,name=multicast_packets_sent,json=multicastPacketsSent,proto3" json:"multicast_packets_sent,omitempty"`
	// Broadcast packets sent
	BroadcastPacketsSent uint64 `protobuf:"varint,8,opt,name=broadcast_packets_sent,json=broadcastPacketsSent,proto3" json:"broadcast_packets_sent,omitempty"`
	// Total output drops
	OutputDrops uint32 `protobuf:"varint,9,opt,name=output_drops,json=outputDrops,proto3" json:"output_drops,omitempty"`
	// Output queue drops
	OutputQueueDrops uint32 `protobuf:"varint,10,opt,name=output_queue_drops,json=outputQueueDrops,proto3" json:"output_queue_drops,omitempty"`
	// Total input drops
	InputDrops uint32 `protobuf:"varint,11,opt,name=input_drops,json=inputDrops,proto3" json:"input_drops,omitempty"`
	// Input queue drops
	InputQueueDrops uint32 `protobuf:"varint,12,opt,name=input_queue_drops,json=inputQueueDrops,proto3" json:"input_queue_drops,omitempty"`
	// Received runt packets
	RuntPacketsReceived uint32 `protobuf:"varint,13,opt,name=runt_packets_received,json=runtPacketsReceived,proto3" json:"runt_packets_received,omitempty"`
	// Received giant packets
	GiantPacketsReceived uint32 `protobuf:"varint,14,opt,name=giant_packets_received,json=giantPacketsReceived,proto3" json:"giant_packets_received,omitempty"`
	// Received throttled packets
	ThrottledPacketsReceived uint32 `protobuf:"varint,15,opt,name=throttled_packets_received,json=throttledPacketsReceived,proto3" json:"throttled_packets_received,omitempty"`
	// Received parity packets
	ParityPacketsReceived uint32 `protobuf:"varint,16,opt,name=parity_packets_received,json=parityPacketsReceived,proto3" json:"parity_packets_received,omitempty"`
	// Unknown protocol packets received
	UnknownProtocolPacketsReceived uint32 `protobuf:"varint,17,opt,name=unknown_protocol_packets_received,json=unknownProtocolPacketsReceived,proto3" json:"unknown_protocol_packets_received,omitempty"`
	// Total input errors
	InputErrors uint32 `protobuf:"varint,18,opt,name=input_errors,json=inputErrors,proto3" json:"input_errors,omitempty"`
	// Input CRC errors
	CrcErrors uint32 `protobuf:"varint,19,opt,name=crc_errors,json=crcErrors,proto3" json:"crc_errors,omitempty"`
	// Input overruns
	InputOverruns uint32 `protobuf:"varint,20,opt,name=input_overruns,json=inputOverruns,proto3" json:"input_overruns,omitempty"`
	// Framing-errors received
	FramingErrorsReceived uint32 `protobuf:"varint,21,opt,name=framing_errors_received,json=framingErrorsReceived,proto3" json:"framing_errors_received,omitempty"`
	// Input ignored packets
	InputIgnoredPackets uint32 `protobuf:"varint,22,opt,name=input_ignored_packets,json=inputIgnoredPackets,proto3" json:"input_ignored_packets,omitempty"`
	// Input aborts
	InputAborts uint32 `protobuf:"varint,23,opt,name=input_aborts,json=inputAborts,proto3" json:"input_aborts,omitempty"`
	// Total output errors
	OutputErrors uint32 `protobuf:"varint,24,opt,name=output_errors,json=outputErrors,proto3" json:"output_errors,omitempty"`
	// Output underruns
	OutputUnderruns uint32 `protobuf:"varint,25,opt,name=output_underruns,json=outputUnderruns,proto3" json:"output_underruns,omitempty"`
	// Output buffer failures
	OutputBufferFailures uint32 `protobuf:"varint,26,opt,name=output_buffer_failures,json=outputBufferFailures,proto3" json:"output_buffer_failures,omitempty"`
	// Output buffers swapped out
	OutputBuffersSwappedOut uint32 `protobuf:"varint,27,opt,name=output_buffers_swapped_out,json=outputBuffersSwappedOut,proto3" json:"output_buffers_swapped_out,omitempty"`
	// Applique
	Applique uint32 `protobuf:"varint,28,opt,name=applique,proto3" json:"applique,omitempty"`
	// Number of board resets
	Resets uint32 `protobuf:"varint,29,opt,name=resets,proto3" json:"resets,omitempty"`
	// Carrier transitions
	CarrierTransitions uint32 `protobuf:"varint,30,opt,name=carrier_transitions,json=carrierTransitions,proto3" json:"carrier_transitions,omitempty"`
	// Availability bit mask
	AvailabilityFlag uint32 `protobuf:"varint,31,opt,name=availability_flag,json=availabilityFlag,proto3" json:"availability_flag,omitempty"`
	// Time when counters were last written (in seconds)
	LastDataTime uint32 `protobuf:"varint,32,opt,name=last_data_time,json=lastDataTime,proto3" json:"last_data_time,omitempty"`
	// Number of seconds since last clear counters
	SecondsSinceLastClearCounters uint32 `protobuf:"varint,33,opt,name=seconds_since_last_clear_counters,json=secondsSinceLastClearCounters,proto3" json:"seconds_since_last_clear_counters,omitempty"`
	// SysUpTime when counters were last reset (in seconds)
	LastDiscontinuityTime uint32 `protobuf:"varint,34,opt,name=last_discontinuity_time,json=lastDiscontinuityTime,proto3" json:"last_discontinuity_time,omitempty"`
	// Seconds since packet received
	SecondsSincePacketReceived uint32 `protobuf:"varint,35,opt,name=seconds_since_packet_received,json=secondsSincePacketReceived,proto3" json:"seconds_since_packet_received,omitempty"`
	// Seconds since packet sent
	SecondsSincePacketSent uint32 `protobuf:"varint,36,opt,name=seconds_since_packet_sent,json=secondsSincePacketSent,proto3" json:"seconds_since_packet_sent,omitempty"`
}

func (x *IfstatsbagGeneric) Reset() {
	*x = IfstatsbagGeneric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfstatsbagGeneric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfstatsbagGeneric) ProtoMessage() {}

func (x *IfstatsbagGeneric) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfstatsbagGeneric.ProtoReflect.Descriptor instead.
func (*IfstatsbagGeneric) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{2}
}

func (x *IfstatsbagGeneric) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetMulticastPacketsReceived() uint64 {
	if x != nil {
		return x.MulticastPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBroadcastPacketsReceived() uint64 {
	if x != nil {
		return x.BroadcastPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetMulticastPacketsSent() uint64 {
	if x != nil {
		return x.MulticastPacketsSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetBroadcastPacketsSent() uint64 {
	if x != nil {
		return x.BroadcastPacketsSent
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputDrops() uint32 {
	if x != nil {
		return x.OutputDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputQueueDrops() uint32 {
	if x != nil {
		return x.OutputQueueDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputDrops() uint32 {
	if x != nil {
		return x.InputDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputQueueDrops() uint32 {
	if x != nil {
		return x.InputQueueDrops
	}
	return 0
}

func (x *IfstatsbagGeneric) GetRuntPacketsReceived() uint32 {
	if x != nil {
		return x.RuntPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetGiantPacketsReceived() uint32 {
	if x != nil {
		return x.GiantPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetThrottledPacketsReceived() uint32 {
	if x != nil {
		return x.ThrottledPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetParityPacketsReceived() uint32 {
	if x != nil {
		return x.ParityPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetUnknownProtocolPacketsReceived() uint32 {
	if x != nil {
		return x.UnknownProtocolPacketsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputErrors() uint32 {
	if x != nil {
		return x.InputErrors
	}
	return 0
}

func (x *IfstatsbagGeneric) GetCrcErrors() uint32 {
	if x != nil {
		return x.CrcErrors
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputOverruns() uint32 {
	if x != nil {
		return x.InputOverruns
	}
	return 0
}

func (x *IfstatsbagGeneric) GetFramingErrorsReceived() uint32 {
	if x != nil {
		return x.FramingErrorsReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputIgnoredPackets() uint32 {
	if x != nil {
		return x.InputIgnoredPackets
	}
	return 0
}

func (x *IfstatsbagGeneric) GetInputAborts() uint32 {
	if x != nil {
		return x.InputAborts
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputErrors() uint32 {
	if x != nil {
		return x.OutputErrors
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputUnderruns() uint32 {
	if x != nil {
		return x.OutputUnderruns
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputBufferFailures() uint32 {
	if x != nil {
		return x.OutputBufferFailures
	}
	return 0
}

func (x *IfstatsbagGeneric) GetOutputBuffersSwappedOut() uint32 {
	if x != nil {
		return x.OutputBuffersSwappedOut
	}
	return 0
}

func (x *IfstatsbagGeneric) GetApplique() uint32 {
	if x != nil {
		return x.Applique
	}
	return 0
}

func (x *IfstatsbagGeneric) GetResets() uint32 {
	if x != nil {
		return x.Resets
	}
	return 0
}

func (x *IfstatsbagGeneric) GetCarrierTransitions() uint32 {
	if x != nil {
		return x.CarrierTransitions
	}
	return 0
}

func (x *IfstatsbagGeneric) GetAvailabilityFlag() uint32 {
	if x != nil {
		return x.AvailabilityFlag
	}
	return 0
}

func (x *IfstatsbagGeneric) GetLastDataTime() uint32 {
	if x != nil {
		return x.LastDataTime
	}
	return 0
}

func (x *IfstatsbagGeneric) GetSecondsSinceLastClearCounters() uint32 {
	if x != nil {
		return x.SecondsSinceLastClearCounters
	}
	return 0
}

func (x *IfstatsbagGeneric) GetLastDiscontinuityTime() uint32 {
	if x != nil {
		return x.LastDiscontinuityTime
	}
	return 0
}

func (x *IfstatsbagGeneric) GetSecondsSincePacketReceived() uint32 {
	if x != nil {
		return x.SecondsSincePacketReceived
	}
	return 0
}

func (x *IfstatsbagGeneric) GetSecondsSincePacketSent() uint32 {
	if x != nil {
		return x.SecondsSincePacketSent
	}
	return 0
}

// Basic set of interface counters
type IfstatsbagBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Packets received
	PacketsReceived uint64 `protobuf:"varint,1,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	// Bytes received
	BytesReceived uint64 `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	// Packets sent
	PacketsSent uint64 `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	// Bytes sent
	BytesSent uint64 `protobuf:"varint,4,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	// Total input drops
	InputDrops uint32 `protobuf:"varint,5,opt,name=input_drops,json=inputDrops,proto3" json:"input_drops,omitempty"`
	// Input queue drops
	InputQueueDrops uint32 `protobuf:"varint,6,opt,name=input_queue_drops,json=inputQueueDrops,proto3" json:"input_queue_drops,omitempty"`
	// Total input errors
	InputErrors uint32 `protobuf:"varint,7,opt,name=input_errors,json=inputErrors,proto3" json:"input_errors,omitempty"`
	// Unknown protocol packets received
	UnknownProtocolPacketsReceived uint32 `protobuf:"varint,8,opt,name=unknown_protocol_packets_received,json=unknownProtocolPacketsReceived,proto3" json:"unknown_protocol_packets_received,omitempty"`
	// Total output drops
	OutputDrops uint32 `protobuf:"varint,9,opt,name=output_drops,json=outputDrops,proto3" json:"output_drops,omitempty"`
	// Output queue drops
	OutputQueueDrops uint32 `protobuf:"varint,10,opt,name=output_queue_drops,json=outputQueueDrops,proto3" json:"output_queue_drops,omitempty"`
	// Total output errors
	OutputErrors uint32 `protobuf:"varint,11,opt,name=output_errors,json=outputErrors,proto3" json:"output_errors,omitempty"`
	// Time when counters were last written (in seconds)
	LastDataTime uint32 `protobuf:"varint,12,opt,name=last_data_time,json=lastDataTime,proto3" json:"last_data_time,omitempty"`
	// Number of seconds since last clear counters
	SecondsSinceLastClearCounters uint32 `protobuf:"varint,13,opt,name=seconds_since_last_clear_counters,json=secondsSinceLastClearCounters,proto3" json:"seconds_since_last_clear_counters,omitempty"`
	// SysUpTime when counters were last reset (in seconds)
	LastDiscontinuityTime uint32 `protobuf:"varint,14,opt,name=last_discontinuity_time,json=lastDiscontinuityTime,proto3" json:"last_discontinuity_time,omitempty"`
	// Seconds since packet received
	SecondsSincePacketReceived uint32 `protobuf:"varint,15,opt,name=seconds_since_packet_received,json=secondsSincePacketReceived,proto3" json:"seconds_since_packet_received,omitempty"`
	// Seconds since packet sent
	SecondsSincePacketSent uint32 `protobuf:"varint,16,opt,name=seconds_since_packet_sent,json=secondsSincePacketSent,proto3" json:"seconds_since_packet_sent,omitempty"`
}

func (x *IfstatsbagBasic) Reset() {
	*x = IfstatsbagBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfstatsbagBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfstatsbagBasic) ProtoMessage() {}

func (x *IfstatsbagBasic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfstatsbagBasic.ProtoReflect.Descriptor instead.
func (*IfstatsbagBasic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{3}
}

func (x *IfstatsbagBasic) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *IfstatsbagBasic) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *IfstatsbagBasic) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *IfstatsbagBasic) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *IfstatsbagBasic) GetInputDrops() uint32 {
	if x != nil {
		return x.InputDrops
	}
	return 0
}

func (x *IfstatsbagBasic) GetInputQueueDrops() uint32 {
	if x != nil {
		return x.InputQueueDrops
	}
	return 0
}

func (x *IfstatsbagBasic) GetInputErrors() uint32 {
	if x != nil {
		return x.InputErrors
	}
	return 0
}

func (x *IfstatsbagBasic) GetUnknownProtocolPacketsReceived() uint32 {
	if x != nil {
		return x.UnknownProtocolPacketsReceived
	}
	return 0
}

func (x *IfstatsbagBasic) GetOutputDrops() uint32 {
	if x != nil {
		return x.OutputDrops
	}
	return 0
}

func (x *IfstatsbagBasic) GetOutputQueueDrops() uint32 {
	if x != nil {
		return x.OutputQueueDrops
	}
	return 0
}

func (x *IfstatsbagBasic) GetOutputErrors() uint32 {
	if x != nil {
		return x.OutputErrors
	}
	return 0
}

func (x *IfstatsbagBasic) GetLastDataTime() uint32 {
	if x != nil {
		return x.LastDataTime
	}
	return 0
}

func (x *IfstatsbagBasic) GetSecondsSinceLastClearCounters() uint32 {
	if x != nil {
		return x.SecondsSinceLastClearCounters
	}
	return 0
}

func (x *IfstatsbagBasic) GetLastDiscontinuityTime() uint32 {
	if x != nil {
		return x.LastDiscontinuityTime
	}
	return 0
}

func (x *IfstatsbagBasic) GetSecondsSincePacketReceived() uint32 {
	if x != nil {
		return x.SecondsSincePacketReceived
	}
	return 0
}

func (x *IfstatsbagBasic) GetSecondsSincePacketSent() uint32 {
	if x != nil {
		return x.SecondsSincePacketSent
	}
	return 0
}

// Datarate information
type StatsdbagDatarate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input data rate in 1000's of bps
	InputDataRate uint64 `protobuf:"varint,1,opt,name=input_data_rate,json=inputDataRate,proto3" json:"input_data_rate,omitempty"`
	// Input packets per second
	InputPacketRate uint64 `protobuf:"varint,2,opt,name=input_packet_rate,json=inputPacketRate,proto3" json:"input_packet_rate,omitempty"`
	// Output data rate in 1000's of bps
	OutputDataRate uint64 `protobuf:"varint,3,opt,name=output_data_rate,json=outputDataRate,proto3" json:"output_data_rate,omitempty"`
	// Output packets per second
	OutputPacketRate uint64 `protobuf:"varint,4,opt,name=output_packet_rate,json=outputPacketRate,proto3" json:"output_packet_rate,omitempty"`
	// Peak input data rate
	PeakInputDataRate uint64 `protobuf:"varint,5,opt,name=peak_input_data_rate,json=peakInputDataRate,proto3" json:"peak_input_data_rate,omitempty"`
	// Peak input packet rate
	PeakInputPacketRate uint64 `protobuf:"varint,6,opt,name=peak_input_packet_rate,json=peakInputPacketRate,proto3" json:"peak_input_packet_rate,omitempty"`
	// Peak output data rate
	PeakOutputDataRate uint64 `protobuf:"varint,7,opt,name=peak_output_data_rate,json=peakOutputDataRate,proto3" json:"peak_output_data_rate,omitempty"`
	// Peak output packet rate
	PeakOutputPacketRate uint64 `protobuf:"varint,8,opt,name=peak_output_packet_rate,json=peakOutputPacketRate,proto3" json:"peak_output_packet_rate,omitempty"`
	// Bandwidth (in kbps)
	Bandwidth uint32 `protobuf:"varint,9,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Number of 30-sec intervals less one
	LoadInterval uint32 `protobuf:"varint,10,opt,name=load_interval,json=loadInterval,proto3" json:"load_interval,omitempty"`
	// Output load as fraction of 255
	OutputLoad uint32 `protobuf:"varint,11,opt,name=output_load,json=outputLoad,proto3" json:"output_load,omitempty"`
	// Input load as fraction of 255
	InputLoad uint32 `protobuf:"varint,12,opt,name=input_load,json=inputLoad,proto3" json:"input_load,omitempty"`
	// Reliability coefficient
	Reliability uint32 `protobuf:"varint,13,opt,name=reliability,proto3" json:"reliability,omitempty"`
}

func (x *StatsdbagDatarate) Reset() {
	*x = StatsdbagDatarate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsdbagDatarate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsdbagDatarate) ProtoMessage() {}

func (x *StatsdbagDatarate) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsdbagDatarate.ProtoReflect.Descriptor instead.
func (*StatsdbagDatarate) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{4}
}

func (x *StatsdbagDatarate) GetInputDataRate() uint64 {
	if x != nil {
		return x.InputDataRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetInputPacketRate() uint64 {
	if x != nil {
		return x.InputPacketRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetOutputDataRate() uint64 {
	if x != nil {
		return x.OutputDataRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetOutputPacketRate() uint64 {
	if x != nil {
		return x.OutputPacketRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetPeakInputDataRate() uint64 {
	if x != nil {
		return x.PeakInputDataRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetPeakInputPacketRate() uint64 {
	if x != nil {
		return x.PeakInputPacketRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetPeakOutputDataRate() uint64 {
	if x != nil {
		return x.PeakOutputDataRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetPeakOutputPacketRate() uint64 {
	if x != nil {
		return x.PeakOutputPacketRate
	}
	return 0
}

func (x *StatsdbagDatarate) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *StatsdbagDatarate) GetLoadInterval() uint32 {
	if x != nil {
		return x.LoadInterval
	}
	return 0
}

func (x *StatsdbagDatarate) GetOutputLoad() uint32 {
	if x != nil {
		return x.OutputLoad
	}
	return 0
}

func (x *StatsdbagDatarate) GetInputLoad() uint32 {
	if x != nil {
		return x.InputLoad
	}
	return 0
}

func (x *StatsdbagDatarate) GetReliability() uint32 {
	if x != nil {
		return x.Reliability
	}
	return 0
}

type IfstatsSrpPerSideErrorsSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error packets received
	ErrorPacketsReceived uint32 `protobuf:"varint,1,opt,name=error_packets_received,json=errorPacketsReceived,proto3" json:"error_packets_received,omitempty"`
	// Input CRC errors
	CrcErrors uint32 `protobuf:"varint,2,opt,name=crc_errors,json=crcErrors,proto3" json:"crc_errors,omitempty"`
	// Input insufficient resources events
	InputInsufficientResourceEvents uint32 `protobuf:"varint,3,opt,name=input_insufficient_resource_events,json=inputInsufficientResourceEvents,proto3" json:"input_insufficient_resource_events,omitempty"`
	// Aborts received at MAC/RAC
	MacAbortsReceived uint32 `protobuf:"varint,4,opt,name=mac_aborts_received,json=macAbortsReceived,proto3" json:"mac_aborts_received,omitempty"`
	// Too small packets received at MAC/RAC
	MacRuntPacketsReceived uint32 `protobuf:"varint,5,opt,name=mac_runt_packets_received,json=macRuntPacketsReceived,proto3" json:"mac_runt_packets_received,omitempty"`
	// Too large packets received at MAC/RAC
	MacGiantPacketsReceived uint32 `protobuf:"varint,6,opt,name=mac_giant_packets_received,json=macGiantPacketsReceived,proto3" json:"mac_giant_packets_received,omitempty"`
	// Too small packets received at framer
	FramerRuntPacketsReceived uint32 `protobuf:"varint,7,opt,name=framer_runt_packets_received,json=framerRuntPacketsReceived,proto3" json:"framer_runt_packets_received,omitempty"`
	// Too large packets received at framer
	FramerGiantPacketsReceived uint32 `protobuf:"varint,8,opt,name=framer_giant_packets_received,json=framerGiantPacketsReceived,proto3" json:"framer_giant_packets_received,omitempty"`
	// Aborts received at framer
	FramerAbortsReceived uint32 `protobuf:"varint,9,opt,name=framer_aborts_received,json=framerAbortsReceived,proto3" json:"framer_aborts_received,omitempty"`
}

func (x *IfstatsSrpPerSideErrorsSt) Reset() {
	*x = IfstatsSrpPerSideErrorsSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfstatsSrpPerSideErrorsSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfstatsSrpPerSideErrorsSt) ProtoMessage() {}

func (x *IfstatsSrpPerSideErrorsSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfstatsSrpPerSideErrorsSt.ProtoReflect.Descriptor instead.
func (*IfstatsSrpPerSideErrorsSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{5}
}

func (x *IfstatsSrpPerSideErrorsSt) GetErrorPacketsReceived() uint32 {
	if x != nil {
		return x.ErrorPacketsReceived
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetCrcErrors() uint32 {
	if x != nil {
		return x.CrcErrors
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetInputInsufficientResourceEvents() uint32 {
	if x != nil {
		return x.InputInsufficientResourceEvents
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetMacAbortsReceived() uint32 {
	if x != nil {
		return x.MacAbortsReceived
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetMacRuntPacketsReceived() uint32 {
	if x != nil {
		return x.MacRuntPacketsReceived
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetMacGiantPacketsReceived() uint32 {
	if x != nil {
		return x.MacGiantPacketsReceived
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetFramerRuntPacketsReceived() uint32 {
	if x != nil {
		return x.FramerRuntPacketsReceived
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetFramerGiantPacketsReceived() uint32 {
	if x != nil {
		return x.FramerGiantPacketsReceived
	}
	return 0
}

func (x *IfstatsSrpPerSideErrorsSt) GetFramerAbortsReceived() uint32 {
	if x != nil {
		return x.FramerAbortsReceived
	}
	return 0
}

type IfstatsSrpPerSideDataRateSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sent bit rate
	BitRateSent uint32 `protobuf:"varint,1,opt,name=bit_rate_sent,json=bitRateSent,proto3" json:"bit_rate_sent,omitempty"`
	// Sent packet rate
	PacketRateSent uint32 `protobuf:"varint,2,opt,name=packet_rate_sent,json=packetRateSent,proto3" json:"packet_rate_sent,omitempty"`
	// Received bit rate
	BitRateReceived uint32 `protobuf:"varint,3,opt,name=bit_rate_received,json=bitRateReceived,proto3" json:"bit_rate_received,omitempty"`
	// Received packet rate
	PacketRateReceived uint32 `protobuf:"varint,4,opt,name=packet_rate_received,json=packetRateReceived,proto3" json:"packet_rate_received,omitempty"`
}

func (x *IfstatsSrpPerSideDataRateSt) Reset() {
	*x = IfstatsSrpPerSideDataRateSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfstatsSrpPerSideDataRateSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfstatsSrpPerSideDataRateSt) ProtoMessage() {}

func (x *IfstatsSrpPerSideDataRateSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfstatsSrpPerSideDataRateSt.ProtoReflect.Descriptor instead.
func (*IfstatsSrpPerSideDataRateSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{6}
}

func (x *IfstatsSrpPerSideDataRateSt) GetBitRateSent() uint32 {
	if x != nil {
		return x.BitRateSent
	}
	return 0
}

func (x *IfstatsSrpPerSideDataRateSt) GetPacketRateSent() uint32 {
	if x != nil {
		return x.PacketRateSent
	}
	return 0
}

func (x *IfstatsSrpPerSideDataRateSt) GetBitRateReceived() uint32 {
	if x != nil {
		return x.BitRateReceived
	}
	return 0
}

func (x *IfstatsSrpPerSideDataRateSt) GetPacketRateReceived() uint32 {
	if x != nil {
		return x.PacketRateReceived
	}
	return 0
}

// SRP interface statistics
type IfstatsbagSrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data rate interval (5 mins or 30 seconds)
	DataRateInterval uint32 `protobuf:"varint,1,opt,name=data_rate_interval,json=dataRateInterval,proto3" json:"data_rate_interval,omitempty"`
	// Data rates for side A interface
	SideADataRate *IfstatsSrpPerSideDataRateSt `protobuf:"bytes,2,opt,name=side_a_data_rate,json=sideADataRate,proto3" json:"side_a_data_rate,omitempty"`
	// Data rates for side B interface
	SideBDataRate *IfstatsSrpPerSideDataRateSt `protobuf:"bytes,3,opt,name=side_b_data_rate,json=sideBDataRate,proto3" json:"side_b_data_rate,omitempty"`
	// Errors for side A interface
	SideAErrors *IfstatsSrpPerSideErrorsSt `protobuf:"bytes,4,opt,name=side_a_errors,json=sideAErrors,proto3" json:"side_a_errors,omitempty"`
	// Errors for side B interface
	SideBErrors *IfstatsSrpPerSideErrorsSt `protobuf:"bytes,5,opt,name=side_b_errors,json=sideBErrors,proto3" json:"side_b_errors,omitempty"`
}

func (x *IfstatsbagSrp) Reset() {
	*x = IfstatsbagSrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfstatsbagSrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfstatsbagSrp) ProtoMessage() {}

func (x *IfstatsbagSrp) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfstatsbagSrp.ProtoReflect.Descriptor instead.
func (*IfstatsbagSrp) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{7}
}

func (x *IfstatsbagSrp) GetDataRateInterval() uint32 {
	if x != nil {
		return x.DataRateInterval
	}
	return 0
}

func (x *IfstatsbagSrp) GetSideADataRate() *IfstatsSrpPerSideDataRateSt {
	if x != nil {
		return x.SideADataRate
	}
	return nil
}

func (x *IfstatsbagSrp) GetSideBDataRate() *IfstatsSrpPerSideDataRateSt {
	if x != nil {
		return x.SideBDataRate
	}
	return nil
}

func (x *IfstatsbagSrp) GetSideAErrors() *IfstatsSrpPerSideErrorsSt {
	if x != nil {
		return x.SideAErrors
	}
	return nil
}

func (x *IfstatsbagSrp) GetSideBErrors() *IfstatsSrpPerSideErrorsSt {
	if x != nil {
		return x.SideBErrors
	}
	return nil
}

type StatsBagIdTd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdType string `protobuf:"bytes,1,opt,name=id_type,json=idType,proto3" json:"id_type,omitempty"`
	// Unused
	Unused uint32 `protobuf:"varint,2,opt,name=unused,proto3" json:"unused,omitempty"`
	// Interface Handle
	InterfaceHandle string `protobuf:"bytes,3,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	// Node ID
	NodeId string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Feature ID
	FeatureId uint32 `protobuf:"varint,5,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// ID
	Id uint32 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StatsBagIdTd) Reset() {
	*x = StatsBagIdTd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsBagIdTd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsBagIdTd) ProtoMessage() {}

func (x *StatsBagIdTd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsBagIdTd.ProtoReflect.Descriptor instead.
func (*StatsBagIdTd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{8}
}

func (x *StatsBagIdTd) GetIdType() string {
	if x != nil {
		return x.IdType
	}
	return ""
}

func (x *StatsBagIdTd) GetUnused() uint32 {
	if x != nil {
		return x.Unused
	}
	return 0
}

func (x *StatsBagIdTd) GetInterfaceHandle() string {
	if x != nil {
		return x.InterfaceHandle
	}
	return ""
}

func (x *StatsBagIdTd) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *StatsBagIdTd) GetFeatureId() uint32 {
	if x != nil {
		return x.FeatureId
	}
	return 0
}

func (x *StatsBagIdTd) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StatsBagBlockSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StatsBagBlockSt) Reset() {
	*x = StatsBagBlockSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsBagBlockSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsBagBlockSt) ProtoMessage() {}

func (x *StatsBagBlockSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsBagBlockSt.ProtoReflect.Descriptor instead.
func (*StatsBagBlockSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{9}
}

func (x *StatsBagBlockSt) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StatsBagBlockSt) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StatsBagBlockSt) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type StatsBagElementSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        []byte             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	BlockArray []*StatsBagBlockSt `protobuf:"bytes,2,rep,name=block_array,json=blockArray,proto3" json:"block_array,omitempty"`
}

func (x *StatsBagElementSt) Reset() {
	*x = StatsBagElementSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsBagElementSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsBagElementSt) ProtoMessage() {}

func (x *StatsBagElementSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsBagElementSt.ProtoReflect.Descriptor instead.
func (*StatsBagElementSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{10}
}

func (x *StatsBagElementSt) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StatsBagElementSt) GetBlockArray() []*StatsBagBlockSt {
	if x != nil {
		return x.BlockArray
	}
	return nil
}

// Stats Data
type StatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stats type value
	StatsType uint32 `protobuf:"varint,1,opt,name=stats_type,json=statsType,proto3" json:"stats_type,omitempty"`
	// Identifier
	StatsId *StatsBagIdTd `protobuf:"bytes,2,opt,name=stats_id,json=statsId,proto3" json:"stats_id,omitempty"`
	// Bag contents
	Contents string `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	// Block Array
	BlockArray []*StatsBagBlockSt `protobuf:"bytes,4,rep,name=block_array,json=blockArray,proto3" json:"block_array,omitempty"`
	// Element Array
	ElementArray []*StatsBagElementSt `protobuf:"bytes,5,rep,name=element_array,json=elementArray,proto3" json:"element_array,omitempty"`
}

func (x *StatsData) Reset() {
	*x = StatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsData) ProtoMessage() {}

func (x *StatsData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsData.ProtoReflect.Descriptor instead.
func (*StatsData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{11}
}

func (x *StatsData) GetStatsType() uint32 {
	if x != nil {
		return x.StatsType
	}
	return 0
}

func (x *StatsData) GetStatsId() *StatsBagIdTd {
	if x != nil {
		return x.StatsId
	}
	return nil
}

func (x *StatsData) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *StatsData) GetBlockArray() []*StatsBagBlockSt {
	if x != nil {
		return x.BlockArray
	}
	return nil
}

func (x *StatsData) GetElementArray() []*StatsBagElementSt {
	if x != nil {
		return x.ElementArray
	}
	return nil
}

// NCP state information
type PppShowIntNcpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCP state value
	NcpState string `protobuf:"bytes,1,opt,name=ncp_state,json=ncpState,proto3" json:"ncp_state,omitempty"`
	// NCP state identifier
	NcpIdentifier string `protobuf:"bytes,2,opt,name=ncp_identifier,json=ncpIdentifier,proto3" json:"ncp_identifier,omitempty"`
}

func (x *PppShowIntNcpInfo) Reset() {
	*x = PppShowIntNcpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PppShowIntNcpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PppShowIntNcpInfo) ProtoMessage() {}

func (x *PppShowIntNcpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PppShowIntNcpInfo.ProtoReflect.Descriptor instead.
func (*PppShowIntNcpInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{12}
}

func (x *PppShowIntNcpInfo) GetNcpState() string {
	if x != nil {
		return x.NcpState
	}
	return ""
}

func (x *PppShowIntNcpInfo) GetNcpIdentifier() string {
	if x != nil {
		return x.NcpIdentifier
	}
	return ""
}

// PPP state information
type PppShowIntInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LCP State
	LcpState string `protobuf:"bytes,1,opt,name=lcp_state,json=lcpState,proto3" json:"lcp_state,omitempty"`
	// Loopback detected
	IsLoopbackDetected int32 `protobuf:"zigzag32,2,opt,name=is_loopback_detected,json=isLoopbackDetected,proto3" json:"is_loopback_detected,omitempty"`
	// Keepalive value
	KeepalivePeriod uint32 `protobuf:"varint,3,opt,name=keepalive_period,json=keepalivePeriod,proto3" json:"keepalive_period,omitempty"`
	// MP Bundle Member
	IsMpBundleMember int32 `protobuf:"zigzag32,4,opt,name=is_mp_bundle_member,json=isMpBundleMember,proto3" json:"is_mp_bundle_member,omitempty"`
	// Is Multilink Open
	IsMultilinkOpen int32 `protobuf:"zigzag32,5,opt,name=is_multilink_open,json=isMultilinkOpen,proto3" json:"is_multilink_open,omitempty"`
	// Array of per-NCP data
	NcpInfoArray []*PppShowIntNcpInfo `protobuf:"bytes,6,rep,name=ncp_info_array,json=ncpInfoArray,proto3" json:"ncp_info_array,omitempty"`
}

func (x *PppShowIntInfo) Reset() {
	*x = PppShowIntInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PppShowIntInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PppShowIntInfo) ProtoMessage() {}

func (x *PppShowIntInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PppShowIntInfo.ProtoReflect.Descriptor instead.
func (*PppShowIntInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{13}
}

func (x *PppShowIntInfo) GetLcpState() string {
	if x != nil {
		return x.LcpState
	}
	return ""
}

func (x *PppShowIntInfo) GetIsLoopbackDetected() int32 {
	if x != nil {
		return x.IsLoopbackDetected
	}
	return 0
}

func (x *PppShowIntInfo) GetKeepalivePeriod() uint32 {
	if x != nil {
		return x.KeepalivePeriod
	}
	return 0
}

func (x *PppShowIntInfo) GetIsMpBundleMember() int32 {
	if x != nil {
		return x.IsMpBundleMember
	}
	return 0
}

func (x *PppShowIntInfo) GetIsMultilinkOpen() int32 {
	if x != nil {
		return x.IsMultilinkOpen
	}
	return 0
}

func (x *PppShowIntInfo) GetNcpInfoArray() []*PppShowIntNcpInfo {
	if x != nil {
		return x.NcpInfoArray
	}
	return nil
}

// Additional member state reason data
type BmMbrStateReasonDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The item the reason applies to
	ReasonType string `protobuf:"bytes,1,opt,name=reason_type,json=reasonType,proto3" json:"reason_type,omitempty"`
	// The severity of the reason
	Severity string `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
}

func (x *BmMbrStateReasonDataType) Reset() {
	*x = BmMbrStateReasonDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmMbrStateReasonDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmMbrStateReasonDataType) ProtoMessage() {}

func (x *BmMbrStateReasonDataType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmMbrStateReasonDataType.ProtoReflect.Descriptor instead.
func (*BmMbrStateReasonDataType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{14}
}

func (x *BmMbrStateReasonDataType) GetReasonType() string {
	if x != nil {
		return x.ReasonType
	}
	return ""
}

func (x *BmMbrStateReasonDataType) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

type BmMacAddrSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *BmMacAddrSt) Reset() {
	*x = BmMacAddrSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmMacAddrSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmMacAddrSt) ProtoMessage() {}

func (x *BmMacAddrSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmMacAddrSt.ProtoReflect.Descriptor instead.
func (*BmMacAddrSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{15}
}

func (x *BmMacAddrSt) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BmMuxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current state of this bundle member
	MuxState string `protobuf:"bytes,1,opt,name=mux_state,json=muxState,proto3" json:"mux_state,omitempty"`
	// Internal value indicating if an error occurred trying to put a link into the desired state
	Error uint32 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	// Reason for last Mux state change
	MemberMuxStateReason string `protobuf:"bytes,3,opt,name=member_mux_state_reason,json=memberMuxStateReason,proto3" json:"member_mux_state_reason,omitempty"`
	// Data regarding the reason for last Mux state change
	MemberMuxStateReasonData *BmMbrStateReasonDataType `protobuf:"bytes,4,opt,name=member_mux_state_reason_data,json=memberMuxStateReasonData,proto3" json:"member_mux_state_reason_data,omitempty"`
	// Current internal state of this bundle member
	MemberState string `protobuf:"bytes,5,opt,name=member_state,json=memberState,proto3" json:"member_state,omitempty"`
	// Reason for last Mux state change (Deprecated)
	MuxStateReason string `protobuf:"bytes,6,opt,name=mux_state_reason,json=muxStateReason,proto3" json:"mux_state_reason,omitempty"`
}

func (x *BmMuxData) Reset() {
	*x = BmMuxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmMuxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmMuxData) ProtoMessage() {}

func (x *BmMuxData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmMuxData.ProtoReflect.Descriptor instead.
func (*BmMuxData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{16}
}

func (x *BmMuxData) GetMuxState() string {
	if x != nil {
		return x.MuxState
	}
	return ""
}

func (x *BmMuxData) GetError() uint32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *BmMuxData) GetMemberMuxStateReason() string {
	if x != nil {
		return x.MemberMuxStateReason
	}
	return ""
}

func (x *BmMuxData) GetMemberMuxStateReasonData() *BmMbrStateReasonDataType {
	if x != nil {
		return x.MemberMuxStateReasonData
	}
	return nil
}

func (x *BmMuxData) GetMemberState() string {
	if x != nil {
		return x.MemberState
	}
	return ""
}

func (x *BmMuxData) GetMuxStateReason() string {
	if x != nil {
		return x.MuxStateReason
	}
	return ""
}

// Statistics for a port using using LACP
type BmLacpCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LACPDUs received
	LacpdUsReceived uint32 `protobuf:"varint,1,opt,name=lacpd_us_received,json=lacpdUsReceived,proto3" json:"lacpd_us_received,omitempty"`
	// LACPDUs transmitted
	LacpdUsTransmitted uint32 `protobuf:"varint,2,opt,name=lacpd_us_transmitted,json=lacpdUsTransmitted,proto3" json:"lacpd_us_transmitted,omitempty"`
	// Marker packets received
	MarkerPacketsReceived uint32 `protobuf:"varint,3,opt,name=marker_packets_received,json=markerPacketsReceived,proto3" json:"marker_packets_received,omitempty"`
	// Marker response packets transmitted
	MarkerResponsesTransmitted uint32 `protobuf:"varint,4,opt,name=marker_responses_transmitted,json=markerResponsesTransmitted,proto3" json:"marker_responses_transmitted,omitempty"`
	// Illegal and unknown packets received
	IllegalPacketsReceived uint32 `protobuf:"varint,5,opt,name=illegal_packets_received,json=illegalPacketsReceived,proto3" json:"illegal_packets_received,omitempty"`
	// LACPDUs received that exceed the rate limit
	ExcessLacpdUsReceived uint32 `protobuf:"varint,6,opt,name=excess_lacpd_us_received,json=excessLacpdUsReceived,proto3" json:"excess_lacpd_us_received,omitempty"`
	// Marker packets received that exceed the rate limit
	ExcessMarkerPacketsReceived uint32 `protobuf:"varint,7,opt,name=excess_marker_packets_received,json=excessMarkerPacketsReceived,proto3" json:"excess_marker_packets_received,omitempty"`
	// State flag set to Defaulted
	Defaulted uint32 `protobuf:"varint,8,opt,name=defaulted,proto3" json:"defaulted,omitempty"`
	// State flag set to Expired
	Expired uint32 `protobuf:"varint,9,opt,name=expired,proto3" json:"expired,omitempty"`
	// Last time counters cleared (s) (deprecated)
	LastClearedSec uint32 `protobuf:"varint,10,opt,name=last_cleared_sec,json=lastClearedSec,proto3" json:"last_cleared_sec,omitempty"`
	// Last time counters cleared (nsec) (deprecated)
	LastClearedNsec uint32 `protobuf:"varint,11,opt,name=last_cleared_nsec,json=lastClearedNsec,proto3" json:"last_cleared_nsec,omitempty"`
}

func (x *BmLacpCounters) Reset() {
	*x = BmLacpCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmLacpCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmLacpCounters) ProtoMessage() {}

func (x *BmLacpCounters) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmLacpCounters.ProtoReflect.Descriptor instead.
func (*BmLacpCounters) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{17}
}

func (x *BmLacpCounters) GetLacpdUsReceived() uint32 {
	if x != nil {
		return x.LacpdUsReceived
	}
	return 0
}

func (x *BmLacpCounters) GetLacpdUsTransmitted() uint32 {
	if x != nil {
		return x.LacpdUsTransmitted
	}
	return 0
}

func (x *BmLacpCounters) GetMarkerPacketsReceived() uint32 {
	if x != nil {
		return x.MarkerPacketsReceived
	}
	return 0
}

func (x *BmLacpCounters) GetMarkerResponsesTransmitted() uint32 {
	if x != nil {
		return x.MarkerResponsesTransmitted
	}
	return 0
}

func (x *BmLacpCounters) GetIllegalPacketsReceived() uint32 {
	if x != nil {
		return x.IllegalPacketsReceived
	}
	return 0
}

func (x *BmLacpCounters) GetExcessLacpdUsReceived() uint32 {
	if x != nil {
		return x.ExcessLacpdUsReceived
	}
	return 0
}

func (x *BmLacpCounters) GetExcessMarkerPacketsReceived() uint32 {
	if x != nil {
		return x.ExcessMarkerPacketsReceived
	}
	return 0
}

func (x *BmLacpCounters) GetDefaulted() uint32 {
	if x != nil {
		return x.Defaulted
	}
	return 0
}

func (x *BmLacpCounters) GetExpired() uint32 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *BmLacpCounters) GetLastClearedSec() uint32 {
	if x != nil {
		return x.LastClearedSec
	}
	return 0
}

func (x *BmLacpCounters) GetLastClearedNsec() uint32 {
	if x != nil {
		return x.LastClearedNsec
	}
	return 0
}

// Link properties for a port using LACP (Deprecated)
type BmLacpLinkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Member's interface handle
	InterfaceHandle string `protobuf:"bytes,1,opt,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	// System priority of actor system
	ActorSystemPriority uint32 `protobuf:"varint,2,opt,name=actor_system_priority,json=actorSystemPriority,proto3" json:"actor_system_priority,omitempty"`
	// MAC Address of the actor system
	ActorSystemMacAddress string `protobuf:"bytes,3,opt,name=actor_system_mac_address,json=actorSystemMacAddress,proto3" json:"actor_system_mac_address,omitempty"`
	// Operational key for this port
	ActorOperationalKey uint32 `protobuf:"varint,4,opt,name=actor_operational_key,json=actorOperationalKey,proto3" json:"actor_operational_key,omitempty"`
	// System priority of partner system
	PartnerSystemPriority uint32 `protobuf:"varint,5,opt,name=partner_system_priority,json=partnerSystemPriority,proto3" json:"partner_system_priority,omitempty"`
	// MAC Address used to identify the partner system
	PartnerSystemMacAddress string `protobuf:"bytes,6,opt,name=partner_system_mac_address,json=partnerSystemMacAddress,proto3" json:"partner_system_mac_address,omitempty"`
	// Operational key for partner port
	PartnerOperationalKey uint32 `protobuf:"varint,7,opt,name=partner_operational_key,json=partnerOperationalKey,proto3" json:"partner_operational_key,omitempty"`
	// MIB ifindex of selected bundle
	SelectedAggregatorId uint32 `protobuf:"varint,8,opt,name=selected_aggregator_id,json=selectedAggregatorId,proto3" json:"selected_aggregator_id,omitempty"`
	// MIB ifindex of attached bundle
	AttachedAggregatorId uint32 `protobuf:"varint,9,opt,name=attached_aggregator_id,json=attachedAggregatorId,proto3" json:"attached_aggregator_id,omitempty"`
	// Port number of this port
	ActorPortId uint32 `protobuf:"varint,10,opt,name=actor_port_id,json=actorPortId,proto3" json:"actor_port_id,omitempty"`
	// Priority of this port
	ActorPortPriority uint32 `protobuf:"varint,11,opt,name=actor_port_priority,json=actorPortPriority,proto3" json:"actor_port_priority,omitempty"`
	// Port number of the partner's port
	PartnerPortId uint32 `protobuf:"varint,12,opt,name=partner_port_id,json=partnerPortId,proto3" json:"partner_port_id,omitempty"`
	// Priority of the partner's port
	PartnerPortPriority uint32 `protobuf:"varint,13,opt,name=partner_port_priority,json=partnerPortPriority,proto3" json:"partner_port_priority,omitempty"`
	// LACP state of this port
	ActorPortState uint32 `protobuf:"varint,14,opt,name=actor_port_state,json=actorPortState,proto3" json:"actor_port_state,omitempty"`
	// LACP state of the partner's port
	PartnerPortState uint32 `protobuf:"varint,15,opt,name=partner_port_state,json=partnerPortState,proto3" json:"partner_port_state,omitempty"`
}

func (x *BmLacpLinkData) Reset() {
	*x = BmLacpLinkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmLacpLinkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmLacpLinkData) ProtoMessage() {}

func (x *BmLacpLinkData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmLacpLinkData.ProtoReflect.Descriptor instead.
func (*BmLacpLinkData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{18}
}

func (x *BmLacpLinkData) GetInterfaceHandle() string {
	if x != nil {
		return x.InterfaceHandle
	}
	return ""
}

func (x *BmLacpLinkData) GetActorSystemPriority() uint32 {
	if x != nil {
		return x.ActorSystemPriority
	}
	return 0
}

func (x *BmLacpLinkData) GetActorSystemMacAddress() string {
	if x != nil {
		return x.ActorSystemMacAddress
	}
	return ""
}

func (x *BmLacpLinkData) GetActorOperationalKey() uint32 {
	if x != nil {
		return x.ActorOperationalKey
	}
	return 0
}

func (x *BmLacpLinkData) GetPartnerSystemPriority() uint32 {
	if x != nil {
		return x.PartnerSystemPriority
	}
	return 0
}

func (x *BmLacpLinkData) GetPartnerSystemMacAddress() string {
	if x != nil {
		return x.PartnerSystemMacAddress
	}
	return ""
}

func (x *BmLacpLinkData) GetPartnerOperationalKey() uint32 {
	if x != nil {
		return x.PartnerOperationalKey
	}
	return 0
}

func (x *BmLacpLinkData) GetSelectedAggregatorId() uint32 {
	if x != nil {
		return x.SelectedAggregatorId
	}
	return 0
}

func (x *BmLacpLinkData) GetAttachedAggregatorId() uint32 {
	if x != nil {
		return x.AttachedAggregatorId
	}
	return 0
}

func (x *BmLacpLinkData) GetActorPortId() uint32 {
	if x != nil {
		return x.ActorPortId
	}
	return 0
}

func (x *BmLacpLinkData) GetActorPortPriority() uint32 {
	if x != nil {
		return x.ActorPortPriority
	}
	return 0
}

func (x *BmLacpLinkData) GetPartnerPortId() uint32 {
	if x != nil {
		return x.PartnerPortId
	}
	return 0
}

func (x *BmLacpLinkData) GetPartnerPortPriority() uint32 {
	if x != nil {
		return x.PartnerPortPriority
	}
	return 0
}

func (x *BmLacpLinkData) GetActorPortState() uint32 {
	if x != nil {
		return x.ActorPortState
	}
	return 0
}

func (x *BmLacpLinkData) GetPartnerPortState() uint32 {
	if x != nil {
		return x.PartnerPortState
	}
	return 0
}

// Bundle member data for any member
type BmMemberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bandwidth of this member (kbps)
	Bandwidth uint32 `protobuf:"varint,1,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Counters data about member link
	Counters *BmLacpCounters `protobuf:"bytes,2,opt,name=counters,proto3" json:"counters,omitempty"`
	// Lacp data about member link
	LinkData *BmLacpLinkData `protobuf:"bytes,3,opt,name=link_data,json=linkData,proto3" json:"link_data,omitempty"`
	// Mux state machine data
	MemberMuxData *BmMuxData `protobuf:"bytes,4,opt,name=member_mux_data,json=memberMuxData,proto3" json:"member_mux_data,omitempty"`
	// The priority of this member
	PortPriority uint32 `protobuf:"varint,5,opt,name=port_priority,json=portPriority,proto3" json:"port_priority,omitempty"`
	// Member's link number
	PortNumber uint32 `protobuf:"varint,6,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	// Member's underlying link ID
	UnderlyingLinkId uint32 `protobuf:"varint,7,opt,name=underlying_link_id,json=underlyingLinkId,proto3" json:"underlying_link_id,omitempty"`
	// Member's link order number
	LinkOrderNumber uint32 `protobuf:"varint,8,opt,name=link_order_number,json=linkOrderNumber,proto3" json:"link_order_number,omitempty"`
	// Member's interface name
	InterfaceName string `protobuf:"bytes,9,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Location of member
	IccpNode uint32 `protobuf:"varint,10,opt,name=iccp_node,json=iccpNode,proto3" json:"iccp_node,omitempty"`
	// Member's type (local/foreign)
	MemberType string `protobuf:"bytes,11,opt,name=member_type,json=memberType,proto3" json:"member_type,omitempty"`
	// Member's (short form) name
	MemberName string `protobuf:"bytes,12,opt,name=member_name,json=memberName,proto3" json:"member_name,omitempty"`
	// MAC address of this member (deprecated)
	MacAddress *BmMacAddrSt `protobuf:"bytes,13,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *BmMemberData) Reset() {
	*x = BmMemberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmMemberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmMemberData) ProtoMessage() {}

func (x *BmMemberData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmMemberData.ProtoReflect.Descriptor instead.
func (*BmMemberData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{19}
}

func (x *BmMemberData) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *BmMemberData) GetCounters() *BmLacpCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *BmMemberData) GetLinkData() *BmLacpLinkData {
	if x != nil {
		return x.LinkData
	}
	return nil
}

func (x *BmMemberData) GetMemberMuxData() *BmMuxData {
	if x != nil {
		return x.MemberMuxData
	}
	return nil
}

func (x *BmMemberData) GetPortPriority() uint32 {
	if x != nil {
		return x.PortPriority
	}
	return 0
}

func (x *BmMemberData) GetPortNumber() uint32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *BmMemberData) GetUnderlyingLinkId() uint32 {
	if x != nil {
		return x.UnderlyingLinkId
	}
	return 0
}

func (x *BmMemberData) GetLinkOrderNumber() uint32 {
	if x != nil {
		return x.LinkOrderNumber
	}
	return 0
}

func (x *BmMemberData) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *BmMemberData) GetIccpNode() uint32 {
	if x != nil {
		return x.IccpNode
	}
	return 0
}

func (x *BmMemberData) GetMemberType() string {
	if x != nil {
		return x.MemberType
	}
	return ""
}

func (x *BmMemberData) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *BmMemberData) GetMacAddress() *BmMacAddrSt {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

// VLAN double tag stack
type VlanDoubleTagStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Outer tag value
	OuterTag uint32 `protobuf:"varint,1,opt,name=outer_tag,json=outerTag,proto3" json:"outer_tag,omitempty"`
	// Second tag value
	SecondTag uint32 `protobuf:"varint,2,opt,name=second_tag,json=secondTag,proto3" json:"second_tag,omitempty"`
}

func (x *VlanDoubleTagStack) Reset() {
	*x = VlanDoubleTagStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanDoubleTagStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanDoubleTagStack) ProtoMessage() {}

func (x *VlanDoubleTagStack) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanDoubleTagStack.ProtoReflect.Descriptor instead.
func (*VlanDoubleTagStack) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{20}
}

func (x *VlanDoubleTagStack) GetOuterTag() uint32 {
	if x != nil {
		return x.OuterTag
	}
	return 0
}

func (x *VlanDoubleTagStack) GetSecondTag() uint32 {
	if x != nil {
		return x.SecondTag
	}
	return 0
}

type EfpRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanIdLow  uint32 `protobuf:"varint,1,opt,name=vlan_id_low,json=vlanIdLow,proto3" json:"vlan_id_low,omitempty"`
	VlanIdHigh uint32 `protobuf:"varint,2,opt,name=vlan_id_high,json=vlanIdHigh,proto3" json:"vlan_id_high,omitempty"`
}

func (x *EfpRange) Reset() {
	*x = EfpRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfpRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfpRange) ProtoMessage() {}

func (x *EfpRange) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfpRange.ProtoReflect.Descriptor instead.
func (*EfpRange) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{21}
}

func (x *EfpRange) GetVlanIdLow() uint32 {
	if x != nil {
		return x.VlanIdLow
	}
	return 0
}

func (x *EfpRange) GetVlanIdHigh() uint32 {
	if x != nil {
		return x.VlanIdHigh
	}
	return 0
}

type EfpTagMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ethertype  string      `protobuf:"bytes,1,opt,name=ethertype,proto3" json:"ethertype,omitempty"`
	VlanRanges []*EfpRange `protobuf:"bytes,2,rep,name=vlan_ranges,json=vlanRanges,proto3" json:"vlan_ranges,omitempty"`
	Priority   string      `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *EfpTagMatch) Reset() {
	*x = EfpTagMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfpTagMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfpTagMatch) ProtoMessage() {}

func (x *EfpTagMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfpTagMatch.ProtoReflect.Descriptor instead.
func (*EfpTagMatch) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{22}
}

func (x *EfpTagMatch) GetEthertype() string {
	if x != nil {
		return x.Ethertype
	}
	return ""
}

func (x *EfpTagMatch) GetVlanRanges() []*EfpRange {
	if x != nil {
		return x.VlanRanges
	}
	return nil
}

func (x *EfpTagMatch) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

type EfpVlanTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ethertype string `protobuf:"bytes,1,opt,name=ethertype,proto3" json:"ethertype,omitempty"`
	VlanId    uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *EfpVlanTag) Reset() {
	*x = EfpVlanTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfpVlanTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfpVlanTag) ProtoMessage() {}

func (x *EfpVlanTag) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfpVlanTag.ProtoReflect.Descriptor instead.
func (*EfpVlanTag) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{23}
}

func (x *EfpVlanTag) GetEthertype() string {
	if x != nil {
		return x.Ethertype
	}
	return ""
}

func (x *EfpVlanTag) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type EfpTagLocalTrafficStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTrafficTags []*EfpVlanTag `protobuf:"bytes,1,rep,name=local_traffic_tags,json=localTrafficTags,proto3" json:"local_traffic_tags,omitempty"`
}

func (x *EfpTagLocalTrafficStack) Reset() {
	*x = EfpTagLocalTrafficStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfpTagLocalTrafficStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfpTagLocalTrafficStack) ProtoMessage() {}

func (x *EfpTagLocalTrafficStack) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfpTagLocalTrafficStack.ProtoReflect.Descriptor instead.
func (*EfpTagLocalTrafficStack) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{24}
}

func (x *EfpTagLocalTrafficStack) GetLocalTrafficTags() []*EfpVlanTag {
	if x != nil {
		return x.LocalTrafficTags
	}
	return nil
}

type MacAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MacAddressType) Reset() {
	*x = MacAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAddressType) ProtoMessage() {}

func (x *MacAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAddressType.ProtoReflect.Descriptor instead.
func (*MacAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{25}
}

func (x *MacAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EfpDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagsToMatch         []*EfpTagMatch           `protobuf:"bytes,1,rep,name=tags_to_match,json=tagsToMatch,proto3" json:"tags_to_match,omitempty"`
	PayloadEthertype    string                   `protobuf:"bytes,2,opt,name=payload_ethertype,json=payloadEthertype,proto3" json:"payload_ethertype,omitempty"`
	TagsPopped          uint32                   `protobuf:"varint,3,opt,name=tags_popped,json=tagsPopped,proto3" json:"tags_popped,omitempty"`
	Pushes              []*EfpVlanTag            `protobuf:"bytes,4,rep,name=pushes,proto3" json:"pushes,omitempty"`
	LocalTrafficStack   *EfpTagLocalTrafficStack `protobuf:"bytes,5,opt,name=local_traffic_stack,json=localTrafficStack,proto3" json:"local_traffic_stack,omitempty"`
	IsExactMatch        int32                    `protobuf:"zigzag32,6,opt,name=is_exact_match,json=isExactMatch,proto3" json:"is_exact_match,omitempty"`
	IsNativeVlan        int32                    `protobuf:"zigzag32,7,opt,name=is_native_vlan,json=isNativeVlan,proto3" json:"is_native_vlan,omitempty"`
	IsNativePreserving  int32                    `protobuf:"zigzag32,8,opt,name=is_native_preserving,json=isNativePreserving,proto3" json:"is_native_preserving,omitempty"`
	SourceMacMatch      *MacAddressType          `protobuf:"bytes,9,opt,name=source_mac_match,json=sourceMacMatch,proto3" json:"source_mac_match,omitempty"`
	DestinationMacMatch *MacAddressType          `protobuf:"bytes,10,opt,name=destination_mac_match,json=destinationMacMatch,proto3" json:"destination_mac_match,omitempty"`
}

func (x *EfpDescription) Reset() {
	*x = EfpDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfpDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfpDescription) ProtoMessage() {}

func (x *EfpDescription) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfpDescription.ProtoReflect.Descriptor instead.
func (*EfpDescription) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{26}
}

func (x *EfpDescription) GetTagsToMatch() []*EfpTagMatch {
	if x != nil {
		return x.TagsToMatch
	}
	return nil
}

func (x *EfpDescription) GetPayloadEthertype() string {
	if x != nil {
		return x.PayloadEthertype
	}
	return ""
}

func (x *EfpDescription) GetTagsPopped() uint32 {
	if x != nil {
		return x.TagsPopped
	}
	return 0
}

func (x *EfpDescription) GetPushes() []*EfpVlanTag {
	if x != nil {
		return x.Pushes
	}
	return nil
}

func (x *EfpDescription) GetLocalTrafficStack() *EfpTagLocalTrafficStack {
	if x != nil {
		return x.LocalTrafficStack
	}
	return nil
}

func (x *EfpDescription) GetIsExactMatch() int32 {
	if x != nil {
		return x.IsExactMatch
	}
	return 0
}

func (x *EfpDescription) GetIsNativeVlan() int32 {
	if x != nil {
		return x.IsNativeVlan
	}
	return 0
}

func (x *EfpDescription) GetIsNativePreserving() int32 {
	if x != nil {
		return x.IsNativePreserving
	}
	return 0
}

func (x *EfpDescription) GetSourceMacMatch() *MacAddressType {
	if x != nil {
		return x.SourceMacMatch
	}
	return nil
}

func (x *EfpDescription) GetDestinationMacMatch() *MacAddressType {
	if x != nil {
		return x.DestinationMacMatch
	}
	return nil
}

type EfpDescriptionPType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *EfpDescription `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EfpDescriptionPType) Reset() {
	*x = EfpDescriptionPType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfpDescriptionPType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfpDescriptionPType) ProtoMessage() {}

func (x *EfpDescriptionPType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfpDescriptionPType.ProtoReflect.Descriptor instead.
func (*EfpDescriptionPType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{27}
}

func (x *EfpDescriptionPType) GetValue() *EfpDescription {
	if x != nil {
		return x.Value
	}
	return nil
}

// VLAN encapsulation and tag stack
type VlanTagStackType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanEncapsulation string `protobuf:"bytes,1,opt,name=vlan_encapsulation,json=vlanEncapsulation,proto3" json:"vlan_encapsulation,omitempty"`
	// Tag value
	Tag uint32 `protobuf:"varint,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// Stack value
	Stack *VlanDoubleTagStack `protobuf:"bytes,3,opt,name=stack,proto3" json:"stack,omitempty"`
	// Outer tag value
	OuterTag uint32 `protobuf:"varint,4,opt,name=outer_tag,json=outerTag,proto3" json:"outer_tag,omitempty"`
	// Native tag value
	NativeTag uint32 `protobuf:"varint,5,opt,name=native_tag,json=nativeTag,proto3" json:"native_tag,omitempty"`
	// 802.1ad tag value
	Dot1AdTag uint32 `protobuf:"varint,6,opt,name=dot1ad_tag,json=dot1adTag,proto3" json:"dot1ad_tag,omitempty"`
	// 802.1ad native tag value
	Dot1AdNativeTag uint32 `protobuf:"varint,7,opt,name=dot1ad_native_tag,json=dot1adNativeTag,proto3" json:"dot1ad_native_tag,omitempty"`
	// Service Instance encapsulation
	ServiceInstanceDetails *EfpDescriptionPType `protobuf:"bytes,8,opt,name=service_instance_details,json=serviceInstanceDetails,proto3" json:"service_instance_details,omitempty"`
	// 802.1ad 802.1Q stack value
	Dot1AdDot1QStack *VlanDoubleTagStack `protobuf:"bytes,9,opt,name=dot1ad_dot1q_stack,json=dot1adDot1qStack,proto3" json:"dot1ad_dot1q_stack,omitempty"`
	// 802.1ad Outer tag value
	Dot1AdOuterTag uint32 `protobuf:"varint,10,opt,name=dot1ad_outer_tag,json=dot1adOuterTag,proto3" json:"dot1ad_outer_tag,omitempty"`
}

func (x *VlanTagStackType) Reset() {
	*x = VlanTagStackType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanTagStackType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanTagStackType) ProtoMessage() {}

func (x *VlanTagStackType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanTagStackType.ProtoReflect.Descriptor instead.
func (*VlanTagStackType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{28}
}

func (x *VlanTagStackType) GetVlanEncapsulation() string {
	if x != nil {
		return x.VlanEncapsulation
	}
	return ""
}

func (x *VlanTagStackType) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *VlanTagStackType) GetStack() *VlanDoubleTagStack {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *VlanTagStackType) GetOuterTag() uint32 {
	if x != nil {
		return x.OuterTag
	}
	return 0
}

func (x *VlanTagStackType) GetNativeTag() uint32 {
	if x != nil {
		return x.NativeTag
	}
	return 0
}

func (x *VlanTagStackType) GetDot1AdTag() uint32 {
	if x != nil {
		return x.Dot1AdTag
	}
	return 0
}

func (x *VlanTagStackType) GetDot1AdNativeTag() uint32 {
	if x != nil {
		return x.Dot1AdNativeTag
	}
	return 0
}

func (x *VlanTagStackType) GetServiceInstanceDetails() *EfpDescriptionPType {
	if x != nil {
		return x.ServiceInstanceDetails
	}
	return nil
}

func (x *VlanTagStackType) GetDot1AdDot1QStack() *VlanDoubleTagStack {
	if x != nil {
		return x.Dot1AdDot1QStack
	}
	return nil
}

func (x *VlanTagStackType) GetDot1AdOuterTag() uint32 {
	if x != nil {
		return x.Dot1AdOuterTag
	}
	return 0
}

type VlanIntfGeneric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encapsulation type and tag stack
	EncapsulationDetails *VlanTagStackType `protobuf:"bytes,1,opt,name=encapsulation_details,json=encapsulationDetails,proto3" json:"encapsulation_details,omitempty"`
}

func (x *VlanIntfGeneric) Reset() {
	*x = VlanIntfGeneric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanIntfGeneric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanIntfGeneric) ProtoMessage() {}

func (x *VlanIntfGeneric) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanIntfGeneric.ProtoReflect.Descriptor instead.
func (*VlanIntfGeneric) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{29}
}

func (x *VlanIntfGeneric) GetEncapsulationDetails() *VlanTagStackType {
	if x != nil {
		return x.EncapsulationDetails
	}
	return nil
}

type SrpTopologyNodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Outer-ring hops to reach this node
	HopCount uint32 `protobuf:"varint,1,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	// MAC address
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// IPv4 address
	Ipv4Address string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// Wrap state
	IsWrapped int32 `protobuf:"zigzag32,4,opt,name=is_wrapped,json=isWrapped,proto3" json:"is_wrapped,omitempty"`
	// SRR protocol supported
	IsSrrSupported int32 `protobuf:"zigzag32,5,opt,name=is_srr_supported,json=isSrrSupported,proto3" json:"is_srr_supported,omitempty"`
	// Node name
	NodeName string `protobuf:"bytes,6,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *SrpTopologyNodeData) Reset() {
	*x = SrpTopologyNodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpTopologyNodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpTopologyNodeData) ProtoMessage() {}

func (x *SrpTopologyNodeData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpTopologyNodeData.ProtoReflect.Descriptor instead.
func (*SrpTopologyNodeData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{30}
}

func (x *SrpTopologyNodeData) GetHopCount() uint32 {
	if x != nil {
		return x.HopCount
	}
	return 0
}

func (x *SrpTopologyNodeData) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *SrpTopologyNodeData) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *SrpTopologyNodeData) GetIsWrapped() int32 {
	if x != nil {
		return x.IsWrapped
	}
	return 0
}

func (x *SrpTopologyNodeData) GetIsSrrSupported() int32 {
	if x != nil {
		return x.IsSrrSupported
	}
	return 0
}

func (x *SrpTopologyNodeData) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type SrpTopologyMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How often a topology pkt is sent
	TopologyTimer uint32 `protobuf:"varint,1,opt,name=topology_timer,json=topologyTimer,proto3" json:"topology_timer,omitempty"`
	// Time remaining until next topo pkt sent
	NextTopologyPacketDelay uint32 `protobuf:"varint,2,opt,name=next_topology_packet_delay,json=nextTopologyPacketDelay,proto3" json:"next_topology_packet_delay,omitempty"`
	// Time since last topo pkt was received
	TimeSinceLastTopologyPacketReceived uint32 `protobuf:"varint,3,opt,name=time_since_last_topology_packet_received,json=timeSinceLastTopologyPacketReceived,proto3" json:"time_since_last_topology_packet_received,omitempty"`
	// Time since last topology change
	TimeSinceLastTopologyChange uint32 `protobuf:"varint,4,opt,name=time_since_last_topology_change,json=timeSinceLastTopologyChange,proto3" json:"time_since_last_topology_change,omitempty"`
	// Number of nodes on ring
	NumberOfNodesOnRing uint32 `protobuf:"varint,5,opt,name=number_of_nodes_on_ring,json=numberOfNodesOnRing,proto3" json:"number_of_nodes_on_ring,omitempty"`
	// List of nodes on the ring info
	RingNodeList []*SrpTopologyNodeData `protobuf:"bytes,6,rep,name=ring_node_list,json=ringNodeList,proto3" json:"ring_node_list,omitempty"`
}

func (x *SrpTopologyMap) Reset() {
	*x = SrpTopologyMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpTopologyMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpTopologyMap) ProtoMessage() {}

func (x *SrpTopologyMap) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpTopologyMap.ProtoReflect.Descriptor instead.
func (*SrpTopologyMap) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{31}
}

func (x *SrpTopologyMap) GetTopologyTimer() uint32 {
	if x != nil {
		return x.TopologyTimer
	}
	return 0
}

func (x *SrpTopologyMap) GetNextTopologyPacketDelay() uint32 {
	if x != nil {
		return x.NextTopologyPacketDelay
	}
	return 0
}

func (x *SrpTopologyMap) GetTimeSinceLastTopologyPacketReceived() uint32 {
	if x != nil {
		return x.TimeSinceLastTopologyPacketReceived
	}
	return 0
}

func (x *SrpTopologyMap) GetTimeSinceLastTopologyChange() uint32 {
	if x != nil {
		return x.TimeSinceLastTopologyChange
	}
	return 0
}

func (x *SrpTopologyMap) GetNumberOfNodesOnRing() uint32 {
	if x != nil {
		return x.NumberOfNodesOnRing
	}
	return 0
}

func (x *SrpTopologyMap) GetRingNodeList() []*SrpTopologyNodeData {
	if x != nil {
		return x.RingNodeList
	}
	return nil
}

type SrpTopologyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown,proto3" json:"is_admin_down,omitempty"`
	// Detailed SRP topology information
	LocalInformation []*SrpTopologyMap `protobuf:"bytes,2,rep,name=local_information,json=localInformation,proto3" json:"local_information,omitempty"`
}

func (x *SrpTopologyInfo) Reset() {
	*x = SrpTopologyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpTopologyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpTopologyInfo) ProtoMessage() {}

func (x *SrpTopologyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpTopologyInfo.ProtoReflect.Descriptor instead.
func (*SrpTopologyInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{32}
}

func (x *SrpTopologyInfo) GetIsAdminDown() int32 {
	if x != nil {
		return x.IsAdminDown
	}
	return 0
}

func (x *SrpTopologyInfo) GetLocalInformation() []*SrpTopologyMap {
	if x != nil {
		return x.LocalInformation
	}
	return nil
}

// SRP failure info
type SrpFailureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Failure type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Reported state
	ReportedState string `protobuf:"bytes,2,opt,name=reported_state,json=reportedState,proto3" json:"reported_state,omitempty"`
	// Debounced state
	DebouncedState string `protobuf:"bytes,3,opt,name=debounced_state,json=debouncedState,proto3" json:"debounced_state,omitempty"`
	// Current state
	CurrentState string `protobuf:"bytes,4,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	// Stable time
	StableTime uint64 `protobuf:"varint,5,opt,name=stable_time,json=stableTime,proto3" json:"stable_time,omitempty"`
	// Debounce delay
	DebouncedDelay uint32 `protobuf:"varint,6,opt,name=debounced_delay,json=debouncedDelay,proto3" json:"debounced_delay,omitempty"`
}

func (x *SrpFailureInfo) Reset() {
	*x = SrpFailureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpFailureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpFailureInfo) ProtoMessage() {}

func (x *SrpFailureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpFailureInfo.ProtoReflect.Descriptor instead.
func (*SrpFailureInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{33}
}

func (x *SrpFailureInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SrpFailureInfo) GetReportedState() string {
	if x != nil {
		return x.ReportedState
	}
	return ""
}

func (x *SrpFailureInfo) GetDebouncedState() string {
	if x != nil {
		return x.DebouncedState
	}
	return ""
}

func (x *SrpFailureInfo) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *SrpFailureInfo) GetStableTime() uint64 {
	if x != nil {
		return x.StableTime
	}
	return 0
}

func (x *SrpFailureInfo) GetDebouncedDelay() uint32 {
	if x != nil {
		return x.DebouncedDelay
	}
	return 0
}

type SrpIpsSideDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Wrap state
	WrapState string `protobuf:"bytes,2,opt,name=wrap_state,json=wrapState,proto3" json:"wrap_state,omitempty"`
	// SRP IPS packet send interval in seconds
	PacketSentTimer uint32 `protobuf:"varint,3,opt,name=packet_sent_timer,json=packetSentTimer,proto3" json:"packet_sent_timer,omitempty"`
	// Time in seconds remaining until next send of an IPS request
	SendTimerTimeRemaining uint32 `protobuf:"varint,4,opt,name=send_timer_time_remaining,json=sendTimerTimeRemaining,proto3" json:"send_timer_time_remaining,omitempty"`
	// Time in seconds until wrap removal
	WtrTimerRemaining uint32 `protobuf:"varint,5,opt,name=wtr_timer_remaining,json=wtrTimerRemaining,proto3" json:"wtr_timer_remaining,omitempty"`
	// Self Detected Requests
	SelfDetectedRequest string `protobuf:"bytes,6,opt,name=self_detected_request,json=selfDetectedRequest,proto3" json:"self_detected_request,omitempty"`
	// Remote Requests
	RemoteRequest string `protobuf:"bytes,7,opt,name=remote_request,json=remoteRequest,proto3" json:"remote_request,omitempty"`
	// Failures presently asserted
	AssertedFailures []*SrpFailureInfo `protobuf:"bytes,8,rep,name=asserted_failures,json=assertedFailures,proto3" json:"asserted_failures,omitempty"`
	// Neighbour mac address for received message
	RxNeighborMacAddress string `protobuf:"bytes,9,opt,name=rx_neighbor_mac_address,json=rxNeighborMacAddress,proto3" json:"rx_neighbor_mac_address,omitempty"`
	// Type of message received
	RxMessageType string `protobuf:"bytes,10,opt,name=rx_message_type,json=rxMessageType,proto3" json:"rx_message_type,omitempty"`
	// Short/long path for received message
	RxPathType string `protobuf:"bytes,11,opt,name=rx_path_type,json=rxPathType,proto3" json:"rx_path_type,omitempty"`
	// Time to live for received message
	RxTtl uint32 `protobuf:"varint,12,opt,name=rx_ttl,json=rxTtl,proto3" json:"rx_ttl,omitempty"`
	// Test for existence of an RX packet
	RxPacketTest int32 `protobuf:"zigzag32,13,opt,name=rx_packet_test,json=rxPacketTest,proto3" json:"rx_packet_test,omitempty"`
	// Mac address of node receiving TXed messages
	TxNeighborMacAddress string `protobuf:"bytes,14,opt,name=tx_neighbor_mac_address,json=txNeighborMacAddress,proto3" json:"tx_neighbor_mac_address,omitempty"`
	// Type of message transmitted
	TxMessageType string `protobuf:"bytes,15,opt,name=tx_message_type,json=txMessageType,proto3" json:"tx_message_type,omitempty"`
	// Short/long path of transmitted message
	TxPathType string `protobuf:"bytes,16,opt,name=tx_path_type,json=txPathType,proto3" json:"tx_path_type,omitempty"`
	// Time to live for transmitted message
	TxTtl uint32 `protobuf:"varint,17,opt,name=tx_ttl,json=txTtl,proto3" json:"tx_ttl,omitempty"`
	// Test for existence of a TX packet
	TxPacketTest int32 `protobuf:"zigzag32,18,opt,name=tx_packet_test,json=txPacketTest,proto3" json:"tx_packet_test,omitempty"`
	// Number of milliseconds to wait after an L1 failure is detected before triggering an L2 wrap
	DelayKeepAliveTrigger uint32 `protobuf:"varint,19,opt,name=delay_keep_alive_trigger,json=delayKeepAliveTrigger,proto3" json:"delay_keep_alive_trigger,omitempty"`
}

func (x *SrpIpsSideDetail) Reset() {
	*x = SrpIpsSideDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpIpsSideDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpIpsSideDetail) ProtoMessage() {}

func (x *SrpIpsSideDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpIpsSideDetail.ProtoReflect.Descriptor instead.
func (*SrpIpsSideDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{34}
}

func (x *SrpIpsSideDetail) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *SrpIpsSideDetail) GetWrapState() string {
	if x != nil {
		return x.WrapState
	}
	return ""
}

func (x *SrpIpsSideDetail) GetPacketSentTimer() uint32 {
	if x != nil {
		return x.PacketSentTimer
	}
	return 0
}

func (x *SrpIpsSideDetail) GetSendTimerTimeRemaining() uint32 {
	if x != nil {
		return x.SendTimerTimeRemaining
	}
	return 0
}

func (x *SrpIpsSideDetail) GetWtrTimerRemaining() uint32 {
	if x != nil {
		return x.WtrTimerRemaining
	}
	return 0
}

func (x *SrpIpsSideDetail) GetSelfDetectedRequest() string {
	if x != nil {
		return x.SelfDetectedRequest
	}
	return ""
}

func (x *SrpIpsSideDetail) GetRemoteRequest() string {
	if x != nil {
		return x.RemoteRequest
	}
	return ""
}

func (x *SrpIpsSideDetail) GetAssertedFailures() []*SrpFailureInfo {
	if x != nil {
		return x.AssertedFailures
	}
	return nil
}

func (x *SrpIpsSideDetail) GetRxNeighborMacAddress() string {
	if x != nil {
		return x.RxNeighborMacAddress
	}
	return ""
}

func (x *SrpIpsSideDetail) GetRxMessageType() string {
	if x != nil {
		return x.RxMessageType
	}
	return ""
}

func (x *SrpIpsSideDetail) GetRxPathType() string {
	if x != nil {
		return x.RxPathType
	}
	return ""
}

func (x *SrpIpsSideDetail) GetRxTtl() uint32 {
	if x != nil {
		return x.RxTtl
	}
	return 0
}

func (x *SrpIpsSideDetail) GetRxPacketTest() int32 {
	if x != nil {
		return x.RxPacketTest
	}
	return 0
}

func (x *SrpIpsSideDetail) GetTxNeighborMacAddress() string {
	if x != nil {
		return x.TxNeighborMacAddress
	}
	return ""
}

func (x *SrpIpsSideDetail) GetTxMessageType() string {
	if x != nil {
		return x.TxMessageType
	}
	return ""
}

func (x *SrpIpsSideDetail) GetTxPathType() string {
	if x != nil {
		return x.TxPathType
	}
	return ""
}

func (x *SrpIpsSideDetail) GetTxTtl() uint32 {
	if x != nil {
		return x.TxTtl
	}
	return 0
}

func (x *SrpIpsSideDetail) GetTxPacketTest() int32 {
	if x != nil {
		return x.TxPacketTest
	}
	return 0
}

func (x *SrpIpsSideDetail) GetDelayKeepAliveTrigger() uint32 {
	if x != nil {
		return x.DelayKeepAliveTrigger
	}
	return 0
}

type SrpIpsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address for node
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Inter card bus enabled
	IsInterCardBusEnabled int32 `protobuf:"zigzag32,2,opt,name=is_inter_card_bus_enabled,json=isInterCardBusEnabled,proto3" json:"is_inter_card_bus_enabled,omitempty"`
	// IPS Wait To Restore period in seconds
	WtrTimerPeriod uint32 `protobuf:"varint,3,opt,name=wtr_timer_period,json=wtrTimerPeriod,proto3" json:"wtr_timer_period,omitempty"`
	// Side A IPS details
	SideA *SrpIpsSideDetail `protobuf:"bytes,4,opt,name=side_a,json=sideA,proto3" json:"side_a,omitempty"`
	// Side B IPS details
	SideB *SrpIpsSideDetail `protobuf:"bytes,5,opt,name=side_b,json=sideB,proto3" json:"side_b,omitempty"`
}

func (x *SrpIpsDetail) Reset() {
	*x = SrpIpsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpIpsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpIpsDetail) ProtoMessage() {}

func (x *SrpIpsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpIpsDetail.ProtoReflect.Descriptor instead.
func (*SrpIpsDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{35}
}

func (x *SrpIpsDetail) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *SrpIpsDetail) GetIsInterCardBusEnabled() int32 {
	if x != nil {
		return x.IsInterCardBusEnabled
	}
	return 0
}

func (x *SrpIpsDetail) GetWtrTimerPeriod() uint32 {
	if x != nil {
		return x.WtrTimerPeriod
	}
	return 0
}

func (x *SrpIpsDetail) GetSideA() *SrpIpsSideDetail {
	if x != nil {
		return x.SideA
	}
	return nil
}

func (x *SrpIpsDetail) GetSideB() *SrpIpsSideDetail {
	if x != nil {
		return x.SideB
	}
	return nil
}

type SrpIpsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown,proto3" json:"is_admin_down,omitempty"`
	// IPS information
	LocalInformation []*SrpIpsDetail `protobuf:"bytes,2,rep,name=local_information,json=localInformation,proto3" json:"local_information,omitempty"`
}

func (x *SrpIpsInfo) Reset() {
	*x = SrpIpsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpIpsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpIpsInfo) ProtoMessage() {}

func (x *SrpIpsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpIpsInfo.ProtoReflect.Descriptor instead.
func (*SrpIpsInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{36}
}

func (x *SrpIpsInfo) GetIsAdminDown() int32 {
	if x != nil {
		return x.IsAdminDown
	}
	return 0
}

func (x *SrpIpsInfo) GetLocalInformation() []*SrpIpsDetail {
	if x != nil {
		return x.LocalInformation
	}
	return nil
}

type SrrNodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node name
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Does the SRR information exist for this node
	SrrEntryExits int32 `protobuf:"zigzag32,2,opt,name=srr_entry_exits,json=srrEntryExits,proto3" json:"srr_entry_exits,omitempty"`
	// node mac address
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Outer failure
	OuterFailure string `protobuf:"bytes,4,opt,name=outer_failure,json=outerFailure,proto3" json:"outer_failure,omitempty"`
	// Inner failure
	InnerFailure string `protobuf:"bytes,5,opt,name=inner_failure,json=innerFailure,proto3" json:"inner_failure,omitempty"`
	// Announce last received ?
	IsLastAnnounceReceived int32 `protobuf:"zigzag32,6,opt,name=is_last_announce_received,json=isLastAnnounceReceived,proto3" json:"is_last_announce_received,omitempty"`
	// Announce last received
	LastAnnounceReceivedTime uint32 `protobuf:"varint,7,opt,name=last_announce_received_time,json=lastAnnounceReceivedTime,proto3" json:"last_announce_received_time,omitempty"`
}

func (x *SrrNodeData) Reset() {
	*x = SrrNodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrrNodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrrNodeData) ProtoMessage() {}

func (x *SrrNodeData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrrNodeData.ProtoReflect.Descriptor instead.
func (*SrrNodeData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{37}
}

func (x *SrrNodeData) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SrrNodeData) GetSrrEntryExits() int32 {
	if x != nil {
		return x.SrrEntryExits
	}
	return 0
}

func (x *SrrNodeData) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *SrrNodeData) GetOuterFailure() string {
	if x != nil {
		return x.OuterFailure
	}
	return ""
}

func (x *SrrNodeData) GetInnerFailure() string {
	if x != nil {
		return x.InnerFailure
	}
	return ""
}

func (x *SrrNodeData) GetIsLastAnnounceReceived() int32 {
	if x != nil {
		return x.IsLastAnnounceReceived
	}
	return 0
}

func (x *SrrNodeData) GetLastAnnounceReceivedTime() uint32 {
	if x != nil {
		return x.LastAnnounceReceivedTime
	}
	return 0
}

type SrpSrrDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version number
	VersionNumber uint32 `protobuf:"varint,1,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	// Wrong version recieved
	IsWrongVersionReceived int32 `protobuf:"zigzag32,2,opt,name=is_wrong_version_received,json=isWrongVersionReceived,proto3" json:"is_wrong_version_received,omitempty"`
	// Time that last wrong version message recieved
	LastWrongVersionReceiveTime uint32 `protobuf:"varint,3,opt,name=last_wrong_version_receive_time,json=lastWrongVersionReceiveTime,proto3" json:"last_wrong_version_receive_time,omitempty"`
	// SRR node mac address
	MacAddress string `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// SRR node state
	NodeState string `protobuf:"bytes,5,opt,name=node_state,json=nodeState,proto3" json:"node_state,omitempty"`
	// Is the outer ring in use
	IsOuterRingInUse int32 `protobuf:"zigzag32,6,opt,name=is_outer_ring_in_use,json=isOuterRingInUse,proto3" json:"is_outer_ring_in_use,omitempty"`
	//  Is the inner ring in use
	IsInnerRingInUse int32 `protobuf:"zigzag32,7,opt,name=is_inner_ring_in_use,json=isInnerRingInUse,proto3" json:"is_inner_ring_in_use,omitempty"`
	// Is announcing enabled
	IsAnnounce int32 `protobuf:"zigzag32,8,opt,name=is_announce,json=isAnnounce,proto3" json:"is_announce,omitempty"`
	// Outer fail type
	OuterFailType string `protobuf:"bytes,9,opt,name=outer_fail_type,json=outerFailType,proto3" json:"outer_fail_type,omitempty"`
	// Inner fail type
	InnerFailType string `protobuf:"bytes,10,opt,name=inner_fail_type,json=innerFailType,proto3" json:"inner_fail_type,omitempty"`
	// SRR packet send timer interval in seconds
	PacketSendTimer uint32 `protobuf:"varint,11,opt,name=packet_send_timer,json=packetSendTimer,proto3" json:"packet_send_timer,omitempty"`
	// Time remaining in seconds to next SRR packet send
	NextSrrPacketSendTime uint32 `protobuf:"varint,12,opt,name=next_srr_packet_send_time,json=nextSrrPacketSendTime,proto3" json:"next_srr_packet_send_time,omitempty"`
	// Single ring bandwidth Mbps
	SingleRingBw uint32 `protobuf:"varint,13,opt,name=single_ring_bw,json=singleRingBw,proto3" json:"single_ring_bw,omitempty"`
	// SRR Wait To Restore interval delay in seconds
	WtrTime uint32 `protobuf:"varint,14,opt,name=wtr_time,json=wtrTime,proto3" json:"wtr_time,omitempty"`
	// Time remaining in seconds until next outer ring wrap removal
	WtrTimerRemainingOuterRing uint32 `protobuf:"varint,15,opt,name=wtr_timer_remaining_outer_ring,json=wtrTimerRemainingOuterRing,proto3" json:"wtr_timer_remaining_outer_ring,omitempty"`
	// Time remaining in seconds until next inner ring wrap removal
	WtrTimerRemainingInnerRing uint32 `protobuf:"varint,16,opt,name=wtr_timer_remaining_inner_ring,json=wtrTimerRemainingInnerRing,proto3" json:"wtr_timer_remaining_inner_ring,omitempty"`
	// List of nodes on the ring info
	NodesOnRing []*SrrNodeData `protobuf:"bytes,17,rep,name=nodes_on_ring,json=nodesOnRing,proto3" json:"nodes_on_ring,omitempty"`
	// nodes not in topology map
	NodesNotOnRing []*SrrNodeData `protobuf:"bytes,18,rep,name=nodes_not_on_ring,json=nodesNotOnRing,proto3" json:"nodes_not_on_ring,omitempty"`
}

func (x *SrpSrrDetail) Reset() {
	*x = SrpSrrDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpSrrDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpSrrDetail) ProtoMessage() {}

func (x *SrpSrrDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpSrrDetail.ProtoReflect.Descriptor instead.
func (*SrpSrrDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{38}
}

func (x *SrpSrrDetail) GetVersionNumber() uint32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

func (x *SrpSrrDetail) GetIsWrongVersionReceived() int32 {
	if x != nil {
		return x.IsWrongVersionReceived
	}
	return 0
}

func (x *SrpSrrDetail) GetLastWrongVersionReceiveTime() uint32 {
	if x != nil {
		return x.LastWrongVersionReceiveTime
	}
	return 0
}

func (x *SrpSrrDetail) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *SrpSrrDetail) GetNodeState() string {
	if x != nil {
		return x.NodeState
	}
	return ""
}

func (x *SrpSrrDetail) GetIsOuterRingInUse() int32 {
	if x != nil {
		return x.IsOuterRingInUse
	}
	return 0
}

func (x *SrpSrrDetail) GetIsInnerRingInUse() int32 {
	if x != nil {
		return x.IsInnerRingInUse
	}
	return 0
}

func (x *SrpSrrDetail) GetIsAnnounce() int32 {
	if x != nil {
		return x.IsAnnounce
	}
	return 0
}

func (x *SrpSrrDetail) GetOuterFailType() string {
	if x != nil {
		return x.OuterFailType
	}
	return ""
}

func (x *SrpSrrDetail) GetInnerFailType() string {
	if x != nil {
		return x.InnerFailType
	}
	return ""
}

func (x *SrpSrrDetail) GetPacketSendTimer() uint32 {
	if x != nil {
		return x.PacketSendTimer
	}
	return 0
}

func (x *SrpSrrDetail) GetNextSrrPacketSendTime() uint32 {
	if x != nil {
		return x.NextSrrPacketSendTime
	}
	return 0
}

func (x *SrpSrrDetail) GetSingleRingBw() uint32 {
	if x != nil {
		return x.SingleRingBw
	}
	return 0
}

func (x *SrpSrrDetail) GetWtrTime() uint32 {
	if x != nil {
		return x.WtrTime
	}
	return 0
}

func (x *SrpSrrDetail) GetWtrTimerRemainingOuterRing() uint32 {
	if x != nil {
		return x.WtrTimerRemainingOuterRing
	}
	return 0
}

func (x *SrpSrrDetail) GetWtrTimerRemainingInnerRing() uint32 {
	if x != nil {
		return x.WtrTimerRemainingInnerRing
	}
	return 0
}

func (x *SrpSrrDetail) GetNodesOnRing() []*SrrNodeData {
	if x != nil {
		return x.NodesOnRing
	}
	return nil
}

func (x *SrpSrrDetail) GetNodesNotOnRing() []*SrrNodeData {
	if x != nil {
		return x.NodesNotOnRing
	}
	return nil
}

type SrpSrrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown,proto3" json:"is_admin_down,omitempty"`
	// SRR enabled
	IsSrrEnabled int32 `protobuf:"zigzag32,2,opt,name=is_srr_enabled,json=isSrrEnabled,proto3" json:"is_srr_enabled,omitempty"`
	// SRP information
	SrrDetailedInfo []*SrpSrrDetail `protobuf:"bytes,3,rep,name=srr_detailed_info,json=srrDetailedInfo,proto3" json:"srr_detailed_info,omitempty"`
}

func (x *SrpSrrInfo) Reset() {
	*x = SrpSrrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpSrrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpSrrInfo) ProtoMessage() {}

func (x *SrpSrrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpSrrInfo.ProtoReflect.Descriptor instead.
func (*SrpSrrInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{39}
}

func (x *SrpSrrInfo) GetIsAdminDown() int32 {
	if x != nil {
		return x.IsAdminDown
	}
	return 0
}

func (x *SrpSrrInfo) GetIsSrrEnabled() int32 {
	if x != nil {
		return x.IsSrrEnabled
	}
	return 0
}

func (x *SrpSrrInfo) GetSrrDetailedInfo() []*SrpSrrDetail {
	if x != nil {
		return x.SrrDetailedInfo
	}
	return nil
}

// Detailed SRP rate limit information
type SrpRateLimitDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum SRP priority for high-priority transmit queue
	MinPriorityValue uint32 `protobuf:"varint,1,opt,name=min_priority_value,json=minPriorityValue,proto3" json:"min_priority_value,omitempty"`
}

func (x *SrpRateLimitDetail) Reset() {
	*x = SrpRateLimitDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpRateLimitDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpRateLimitDetail) ProtoMessage() {}

func (x *SrpRateLimitDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpRateLimitDetail.ProtoReflect.Descriptor instead.
func (*SrpRateLimitDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{40}
}

func (x *SrpRateLimitDetail) GetMinPriorityValue() uint32 {
	if x != nil {
		return x.MinPriorityValue
	}
	return 0
}

// SRP rate limit information
type SrpRateLimitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is the interfaceadministratively down
	IsAdminDown int32 `protobuf:"zigzag32,1,opt,name=is_admin_down,json=isAdminDown,proto3" json:"is_admin_down,omitempty"`
	// SRP rate limit information
	RateLimitDetailedInfo []*SrpRateLimitDetail `protobuf:"bytes,2,rep,name=rate_limit_detailed_info,json=rateLimitDetailedInfo,proto3" json:"rate_limit_detailed_info,omitempty"`
}

func (x *SrpRateLimitInfo) Reset() {
	*x = SrpRateLimitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpRateLimitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpRateLimitInfo) ProtoMessage() {}

func (x *SrpRateLimitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpRateLimitInfo.ProtoReflect.Descriptor instead.
func (*SrpRateLimitInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{41}
}

func (x *SrpRateLimitInfo) GetIsAdminDown() int32 {
	if x != nil {
		return x.IsAdminDown
	}
	return 0
}

func (x *SrpRateLimitInfo) GetRateLimitDetailedInfo() []*SrpRateLimitDetail {
	if x != nil {
		return x.RateLimitDetailedInfo
	}
	return nil
}

// Complete SRP information
type SrpAllInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SRP IPS information
	IpsInfo *SrpIpsInfo `protobuf:"bytes,1,opt,name=ips_info,json=ipsInfo,proto3" json:"ips_info,omitempty"`
	// SRP topology information
	TopologyInfo *SrpTopologyInfo `protobuf:"bytes,2,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
	// SRP SRR information
	SrrInfo *SrpSrrInfo `protobuf:"bytes,3,opt,name=srr_info,json=srrInfo,proto3" json:"srr_info,omitempty"`
	// SRP rate limit information
	RateLimitInfo *SrpRateLimitInfo `protobuf:"bytes,4,opt,name=rate_limit_info,json=rateLimitInfo,proto3" json:"rate_limit_info,omitempty"`
}

func (x *SrpAllInfo) Reset() {
	*x = SrpAllInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrpAllInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrpAllInfo) ProtoMessage() {}

func (x *SrpAllInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrpAllInfo.ProtoReflect.Descriptor instead.
func (*SrpAllInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{42}
}

func (x *SrpAllInfo) GetIpsInfo() *SrpIpsInfo {
	if x != nil {
		return x.IpsInfo
	}
	return nil
}

func (x *SrpAllInfo) GetTopologyInfo() *SrpTopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

func (x *SrpAllInfo) GetSrrInfo() *SrpSrrInfo {
	if x != nil {
		return x.SrrInfo
	}
	return nil
}

func (x *SrpAllInfo) GetRateLimitInfo() *SrpRateLimitInfo {
	if x != nil {
		return x.RateLimitInfo
	}
	return nil
}

type TunlPfiIn6AddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TunlPfiIn6AddrT) Reset() {
	*x = TunlPfiIn6AddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunlPfiIn6AddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunlPfiIn6AddrT) ProtoMessage() {}

func (x *TunlPfiIn6AddrT) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunlPfiIn6AddrT.ProtoReflect.Descriptor instead.
func (*TunlPfiIn6AddrT) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{43}
}

func (x *TunlPfiIn6AddrT) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PfiIpAddrUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Afi string `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	// IPv4 address type
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPv6 address type
	Ipv6 *TunlPfiIn6AddrT `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *PfiIpAddrUnion) Reset() {
	*x = PfiIpAddrUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PfiIpAddrUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PfiIpAddrUnion) ProtoMessage() {}

func (x *PfiIpAddrUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PfiIpAddrUnion.ProtoReflect.Descriptor instead.
func (*PfiIpAddrUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{44}
}

func (x *PfiIpAddrUnion) GetAfi() string {
	if x != nil {
		return x.Afi
	}
	return ""
}

func (x *PfiIpAddrUnion) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *PfiIpAddrUnion) GetIpv6() *TunlPfiIn6AddrT {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

// Tunnel info
type ImCmdTunlGreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tunnel source name
	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	// Tunnel source IP address
	SourceIpAddress *PfiIpAddrUnion `protobuf:"bytes,2,opt,name=source_ip_address,json=sourceIpAddress,proto3" json:"source_ip_address,omitempty"`
	// Tunnel destination IP address
	DestinationIpAddress *PfiIpAddrUnion `protobuf:"bytes,3,opt,name=destination_ip_address,json=destinationIpAddress,proto3" json:"destination_ip_address,omitempty"`
	// GRE tunnel TOS
	TunnelTos uint32 `protobuf:"varint,4,opt,name=tunnel_tos,json=tunnelTos,proto3" json:"tunnel_tos,omitempty"`
	// GRE tunnel TTL
	TunnelTtl uint32 `protobuf:"varint,5,opt,name=tunnel_ttl,json=tunnelTtl,proto3" json:"tunnel_ttl,omitempty"`
	// Key value for GRE Packet
	Key uint32 `protobuf:"varint,6,opt,name=key,proto3" json:"key,omitempty"`
	// Keepalive period in seconds
	KeepalivePeriod uint32 `protobuf:"varint,7,opt,name=keepalive_period,json=keepalivePeriod,proto3" json:"keepalive_period,omitempty"`
	// Keepalive retry
	KeepaliveMaximumRetry uint32 `protobuf:"varint,8,opt,name=keepalive_maximum_retry,json=keepaliveMaximumRetry,proto3" json:"keepalive_maximum_retry,omitempty"`
	// Tunnel GRE Mode
	TunnelMode string `protobuf:"bytes,9,opt,name=tunnel_mode,json=tunnelMode,proto3" json:"tunnel_mode,omitempty"`
	// Keepalive State
	KeepaliveState string `protobuf:"bytes,10,opt,name=keepalive_state,json=keepaliveState,proto3" json:"keepalive_state,omitempty"`
	// DF Bit State
	DfBitState string `protobuf:"bytes,11,opt,name=df_bit_state,json=dfBitState,proto3" json:"df_bit_state,omitempty"`
	// Key Config State
	KeyBitState string `protobuf:"bytes,12,opt,name=key_bit_state,json=keyBitState,proto3" json:"key_bit_state,omitempty"`
}

func (x *ImCmdTunlGreInfo) Reset() {
	*x = ImCmdTunlGreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdTunlGreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdTunlGreInfo) ProtoMessage() {}

func (x *ImCmdTunlGreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdTunlGreInfo.ProtoReflect.Descriptor instead.
func (*ImCmdTunlGreInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{45}
}

func (x *ImCmdTunlGreInfo) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *ImCmdTunlGreInfo) GetSourceIpAddress() *PfiIpAddrUnion {
	if x != nil {
		return x.SourceIpAddress
	}
	return nil
}

func (x *ImCmdTunlGreInfo) GetDestinationIpAddress() *PfiIpAddrUnion {
	if x != nil {
		return x.DestinationIpAddress
	}
	return nil
}

func (x *ImCmdTunlGreInfo) GetTunnelTos() uint32 {
	if x != nil {
		return x.TunnelTos
	}
	return 0
}

func (x *ImCmdTunlGreInfo) GetTunnelTtl() uint32 {
	if x != nil {
		return x.TunnelTtl
	}
	return 0
}

func (x *ImCmdTunlGreInfo) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ImCmdTunlGreInfo) GetKeepalivePeriod() uint32 {
	if x != nil {
		return x.KeepalivePeriod
	}
	return 0
}

func (x *ImCmdTunlGreInfo) GetKeepaliveMaximumRetry() uint32 {
	if x != nil {
		return x.KeepaliveMaximumRetry
	}
	return 0
}

func (x *ImCmdTunlGreInfo) GetTunnelMode() string {
	if x != nil {
		return x.TunnelMode
	}
	return ""
}

func (x *ImCmdTunlGreInfo) GetKeepaliveState() string {
	if x != nil {
		return x.KeepaliveState
	}
	return ""
}

func (x *ImCmdTunlGreInfo) GetDfBitState() string {
	if x != nil {
		return x.DfBitState
	}
	return ""
}

func (x *ImCmdTunlGreInfo) GetKeyBitState() string {
	if x != nil {
		return x.KeyBitState
	}
	return ""
}

// Serial interface information
type SerialInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeslots separated by : or - from 1 to 31. : indicates individual timeslot and - represents a range. E.g. 1-3:5 represents timeslots 1, 2, 3, and 5.
	Timeslots string `protobuf:"bytes,1,opt,name=timeslots,proto3" json:"timeslots,omitempty"`
}

func (x *SerialInterface) Reset() {
	*x = SerialInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialInterface) ProtoMessage() {}

func (x *SerialInterface) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialInterface.ProtoReflect.Descriptor instead.
func (*SerialInterface) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{46}
}

func (x *SerialInterface) GetTimeslots() string {
	if x != nil {
		return x.Timeslots
	}
	return ""
}

// SONET POS interface information
type ImSonetPosInfoInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APS state
	ApsState string `protobuf:"bytes,1,opt,name=aps_state,json=apsState,proto3" json:"aps_state,omitempty"`
}

func (x *ImSonetPosInfoInterface) Reset() {
	*x = ImSonetPosInfoInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImSonetPosInfoInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImSonetPosInfoInterface) ProtoMessage() {}

func (x *ImSonetPosInfoInterface) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImSonetPosInfoInterface.ProtoReflect.Descriptor instead.
func (*ImSonetPosInfoInterface) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{47}
}

func (x *ImSonetPosInfoInterface) GetApsState() string {
	if x != nil {
		return x.ApsState
	}
	return ""
}

type PwheEtherInterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface list Name
	InterfaceListName string `protobuf:"bytes,1,opt,name=interface_list_name,json=interfaceListName,proto3" json:"interface_list_name,omitempty"`
	// L2 Overhead
	L2Overhead uint32 `protobuf:"varint,2,opt,name=l2_overhead,json=l2Overhead,proto3" json:"l2_overhead,omitempty"`
	// Internal Label
	InternalLabel uint32 `protobuf:"varint,3,opt,name=internal_label,json=internalLabel,proto3" json:"internal_label,omitempty"`
}

func (x *PwheEtherInterfaceInfo) Reset() {
	*x = PwheEtherInterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PwheEtherInterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PwheEtherInterfaceInfo) ProtoMessage() {}

func (x *PwheEtherInterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PwheEtherInterfaceInfo.ProtoReflect.Descriptor instead.
func (*PwheEtherInterfaceInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{48}
}

func (x *PwheEtherInterfaceInfo) GetInterfaceListName() string {
	if x != nil {
		return x.InterfaceListName
	}
	return ""
}

func (x *PwheEtherInterfaceInfo) GetL2Overhead() uint32 {
	if x != nil {
		return x.L2Overhead
	}
	return 0
}

func (x *PwheEtherInterfaceInfo) GetInternalLabel() uint32 {
	if x != nil {
		return x.InternalLabel
	}
	return 0
}

// CEM interface information
type CemInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeslots separated by : or - from 1 to 32. : indicates individual timeslot and - represents a range. E.g. 1-3:5 represents timeslots 1, 2, 3, and 5.
	Timeslots string `protobuf:"bytes,1,opt,name=timeslots,proto3" json:"timeslots,omitempty"`
	// Payload size in bytes configured on CEM interface
	Payload uint32 `protobuf:"varint,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Dejitter buffer length configuredin milliseconds
	DejitterBuffer uint32 `protobuf:"varint,3,opt,name=dejitter_buffer,json=dejitterBuffer,proto3" json:"dejitter_buffer,omitempty"`
	//  If framing is TRUE then the CEM  interface is structure aware ; otherwise it is structure agnostic
	Framing int32 `protobuf:"zigzag32,4,opt,name=framing,proto3" json:"framing,omitempty"`
}

func (x *CemInterface) Reset() {
	*x = CemInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CemInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CemInterface) ProtoMessage() {}

func (x *CemInterface) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CemInterface.ProtoReflect.Descriptor instead.
func (*CemInterface) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{49}
}

func (x *CemInterface) GetTimeslots() string {
	if x != nil {
		return x.Timeslots
	}
	return ""
}

func (x *CemInterface) GetPayload() uint32 {
	if x != nil {
		return x.Payload
	}
	return 0
}

func (x *CemInterface) GetDejitterBuffer() uint32 {
	if x != nil {
		return x.DejitterBuffer
	}
	return 0
}

func (x *CemInterface) GetFraming() int32 {
	if x != nil {
		return x.Framing
	}
	return 0
}

// nV Optical Controller information
type NvOpticalInterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controller that nV controller maps to
	Controller string `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *NvOpticalInterfaceInfo) Reset() {
	*x = NvOpticalInterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvOpticalInterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvOpticalInterfaceInfo) ProtoMessage() {}

func (x *NvOpticalInterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvOpticalInterfaceInfo.ProtoReflect.Descriptor instead.
func (*NvOpticalInterfaceInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{50}
}

func (x *NvOpticalInterfaceInfo) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

// GCC
type ImCmdGccPerPortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Derived State
	DerivedMode string `protobuf:"bytes,1,opt,name=derived_mode,json=derivedMode,proto3" json:"derived_mode,omitempty"`
	// Sec State
	SecState string `protobuf:"bytes,2,opt,name=sec_state,json=secState,proto3" json:"sec_state,omitempty"`
}

func (x *ImCmdGccPerPortInfo) Reset() {
	*x = ImCmdGccPerPortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdGccPerPortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdGccPerPortInfo) ProtoMessage() {}

func (x *ImCmdGccPerPortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdGccPerPortInfo.ProtoReflect.Descriptor instead.
func (*ImCmdGccPerPortInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{51}
}

func (x *ImCmdGccPerPortInfo) GetDerivedMode() string {
	if x != nil {
		return x.DerivedMode
	}
	return ""
}

func (x *ImCmdGccPerPortInfo) GetSecState() string {
	if x != nil {
		return x.SecState
	}
	return ""
}

type ImCmdDampSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dampening penalty of the interface
	Penalty uint32 `protobuf:"varint,1,opt,name=penalty,proto3" json:"penalty,omitempty"`
	// Flag showing if state is suppressed
	IsSuppressedEnabled bool `protobuf:"varint,2,opt,name=is_suppressed_enabled,json=isSuppressedEnabled,proto3" json:"is_suppressed_enabled,omitempty"`
	// Remaining period of suppression in secs
	SecondsRemaining uint32 `protobuf:"varint,3,opt,name=seconds_remaining,json=secondsRemaining,proto3" json:"seconds_remaining,omitempty"`
	// Configured decay half life in mins
	HalfLife uint32 `protobuf:"varint,4,opt,name=half_life,json=halfLife,proto3" json:"half_life,omitempty"`
	// Configured reuse threshold
	ReuseThreshold uint32 `protobuf:"varint,5,opt,name=reuse_threshold,json=reuseThreshold,proto3" json:"reuse_threshold,omitempty"`
	// Value of suppress threshold
	SuppressThreshold uint32 `protobuf:"varint,6,opt,name=suppress_threshold,json=suppressThreshold,proto3" json:"suppress_threshold,omitempty"`
	// Maximum suppress time in mins
	MaximumSuppressTime uint32 `protobuf:"varint,7,opt,name=maximum_suppress_time,json=maximumSuppressTime,proto3" json:"maximum_suppress_time,omitempty"`
	// Configured restart penalty
	RestartPenalty uint32 `protobuf:"varint,8,opt,name=restart_penalty,json=restartPenalty,proto3" json:"restart_penalty,omitempty"`
}

func (x *ImCmdDampSt) Reset() {
	*x = ImCmdDampSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdDampSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdDampSt) ProtoMessage() {}

func (x *ImCmdDampSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdDampSt.ProtoReflect.Descriptor instead.
func (*ImCmdDampSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{52}
}

func (x *ImCmdDampSt) GetPenalty() uint32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *ImCmdDampSt) GetIsSuppressedEnabled() bool {
	if x != nil {
		return x.IsSuppressedEnabled
	}
	return false
}

func (x *ImCmdDampSt) GetSecondsRemaining() uint32 {
	if x != nil {
		return x.SecondsRemaining
	}
	return 0
}

func (x *ImCmdDampSt) GetHalfLife() uint32 {
	if x != nil {
		return x.HalfLife
	}
	return 0
}

func (x *ImCmdDampSt) GetReuseThreshold() uint32 {
	if x != nil {
		return x.ReuseThreshold
	}
	return 0
}

func (x *ImCmdDampSt) GetSuppressThreshold() uint32 {
	if x != nil {
		return x.SuppressThreshold
	}
	return 0
}

func (x *ImCmdDampSt) GetMaximumSuppressTime() uint32 {
	if x != nil {
		return x.MaximumSuppressTime
	}
	return 0
}

func (x *ImCmdDampSt) GetRestartPenalty() uint32 {
	if x != nil {
		return x.RestartPenalty
	}
	return 0
}

type ImCmdArpInfoSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ARP timeout in seconds. Only valid if 'ARPIsLearningDisabled' is 'false'
	ArpTimeout uint32 `protobuf:"varint,1,opt,name=arp_timeout,json=arpTimeout,proto3" json:"arp_timeout,omitempty"`
	// ARP type name
	ArpTypeName string `protobuf:"bytes,2,opt,name=arp_type_name,json=arpTypeName,proto3" json:"arp_type_name,omitempty"`
	// Whether the interface has dynamic learning disabled
	ArpIsLearningDisabled bool `protobuf:"varint,3,opt,name=arp_is_learning_disabled,json=arpIsLearningDisabled,proto3" json:"arp_is_learning_disabled,omitempty"`
}

func (x *ImCmdArpInfoSt) Reset() {
	*x = ImCmdArpInfoSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdArpInfoSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdArpInfoSt) ProtoMessage() {}

func (x *ImCmdArpInfoSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdArpInfoSt.ProtoReflect.Descriptor instead.
func (*ImCmdArpInfoSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{53}
}

func (x *ImCmdArpInfoSt) GetArpTimeout() uint32 {
	if x != nil {
		return x.ArpTimeout
	}
	return 0
}

func (x *ImCmdArpInfoSt) GetArpTypeName() string {
	if x != nil {
		return x.ArpTypeName
	}
	return ""
}

func (x *ImCmdArpInfoSt) GetArpIsLearningDisabled() bool {
	if x != nil {
		return x.ArpIsLearningDisabled
	}
	return false
}

type ImCmdIpInfoSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface IPv4 address
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Interface subnet mask length
	SubnetMaskLength uint32 `protobuf:"varint,2,opt,name=subnet_mask_length,json=subnetMaskLength,proto3" json:"subnet_mask_length,omitempty"`
}

func (x *ImCmdIpInfoSt) Reset() {
	*x = ImCmdIpInfoSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdIpInfoSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdIpInfoSt) ProtoMessage() {}

func (x *ImCmdIpInfoSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdIpInfoSt.ProtoReflect.Descriptor instead.
func (*ImCmdIpInfoSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{54}
}

func (x *ImCmdIpInfoSt) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ImCmdIpInfoSt) GetSubnetMaskLength() uint32 {
	if x != nil {
		return x.SubnetMaskLength
	}
	return 0
}

type ImCmdMacAddrSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC Address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ImCmdMacAddrSt) Reset() {
	*x = ImCmdMacAddrSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdMacAddrSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdMacAddrSt) ProtoMessage() {}

func (x *ImCmdMacAddrSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdMacAddrSt.ProtoReflect.Descriptor instead.
func (*ImCmdMacAddrSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{55}
}

func (x *ImCmdMacAddrSt) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ImCmdIfStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatsType string `protobuf:"bytes,1,opt,name=stats_type,json=statsType,proto3" json:"stats_type,omitempty"`
	// Packet, byte and all error counters
	FullInterfaceStats *IfstatsbagGeneric `protobuf:"bytes,2,opt,name=full_interface_stats,json=fullInterfaceStats,proto3" json:"full_interface_stats,omitempty"`
	// Packet, byte and selected error counters
	BasicInterfaceStats *IfstatsbagBasic `protobuf:"bytes,3,opt,name=basic_interface_stats,json=basicInterfaceStats,proto3" json:"basic_interface_stats,omitempty"`
}

func (x *ImCmdIfStats) Reset() {
	*x = ImCmdIfStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdIfStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdIfStats) ProtoMessage() {}

func (x *ImCmdIfStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdIfStats.ProtoReflect.Descriptor instead.
func (*ImCmdIfStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{56}
}

func (x *ImCmdIfStats) GetStatsType() string {
	if x != nil {
		return x.StatsType
	}
	return ""
}

func (x *ImCmdIfStats) GetFullInterfaceStats() *IfstatsbagGeneric {
	if x != nil {
		return x.FullInterfaceStats
	}
	return nil
}

func (x *ImCmdIfStats) GetBasicInterfaceStats() *IfstatsbagBasic {
	if x != nil {
		return x.BasicInterfaceStats
	}
	return nil
}

type ImCmdCarrierDelaySt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Carrier delay on state up (ms)
	CarrierDelayUp uint32 `protobuf:"varint,1,opt,name=carrier_delay_up,json=carrierDelayUp,proto3" json:"carrier_delay_up,omitempty"`
	// Carrier delay on state down (ms)
	CarrierDelayDown uint32 `protobuf:"varint,2,opt,name=carrier_delay_down,json=carrierDelayDown,proto3" json:"carrier_delay_down,omitempty"`
}

func (x *ImCmdCarrierDelaySt) Reset() {
	*x = ImCmdCarrierDelaySt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdCarrierDelaySt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdCarrierDelaySt) ProtoMessage() {}

func (x *ImCmdCarrierDelaySt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdCarrierDelaySt.ProtoReflect.Descriptor instead.
func (*ImCmdCarrierDelaySt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{57}
}

func (x *ImCmdCarrierDelaySt) GetCarrierDelayUp() uint32 {
	if x != nil {
		return x.CarrierDelayUp
	}
	return 0
}

func (x *ImCmdCarrierDelaySt) GetCarrierDelayDown() uint32 {
	if x != nil {
		return x.CarrierDelayDown
	}
	return 0
}

type ImCmdFrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frame Relay encapsulation type
	FrEncapsulationType string `protobuf:"bytes,1,opt,name=fr_encapsulation_type,json=frEncapsulationType,proto3" json:"fr_encapsulation_type,omitempty"`
	// The LMI type: Autosense, ANSI, CCITT or CISCO
	LmiType string `protobuf:"bytes,2,opt,name=lmi_type,json=lmiType,proto3" json:"lmi_type,omitempty"`
	// LMI DLCI
	Lmidlci uint32 `protobuf:"varint,3,opt,name=lmidlci,proto3" json:"lmidlci,omitempty"`
	// The NNI LMI interface type
	IsNni bool `protobuf:"varint,4,opt,name=is_nni,json=isNni,proto3" json:"is_nni,omitempty"`
	// The DTE/DCE LMI interface type
	IsDte bool `protobuf:"varint,5,opt,name=is_dte,json=isDte,proto3" json:"is_dte,omitempty"`
	// Flag indicating whether the LMI  DTE/DCE/NNI-DTE state is UP
	IsLmiUp bool `protobuf:"varint,6,opt,name=is_lmi_up,json=isLmiUp,proto3" json:"is_lmi_up,omitempty"`
	// Flag indicating whether the LMI  NNI-DCE state is UP
	IsLmiNniDceUp bool `protobuf:"varint,7,opt,name=is_lmi_nni_dce_up,json=isLmiNniDceUp,proto3" json:"is_lmi_nni_dce_up,omitempty"`
	// The status of FR LMI for an interface
	IsLmiEnabled bool `protobuf:"varint,8,opt,name=is_lmi_enabled,json=isLmiEnabled,proto3" json:"is_lmi_enabled,omitempty"`
	// Number of enquiry messages received
	EnquiriesReceived uint32 `protobuf:"varint,9,opt,name=enquiries_received,json=enquiriesReceived,proto3" json:"enquiries_received,omitempty"`
	// Number of enquiry messages sent
	EnquiriesSent uint32 `protobuf:"varint,10,opt,name=enquiries_sent,json=enquiriesSent,proto3" json:"enquiries_sent,omitempty"`
	// Number of status messages received
	StatusReceived uint32 `protobuf:"varint,11,opt,name=status_received,json=statusReceived,proto3" json:"status_received,omitempty"`
	// Number of status messages sent
	StatusSent uint32 `protobuf:"varint,12,opt,name=status_sent,json=statusSent,proto3" json:"status_sent,omitempty"`
	// Number of update status messages received
	UpdateStatusReceived uint32 `protobuf:"varint,13,opt,name=update_status_received,json=updateStatusReceived,proto3" json:"update_status_received,omitempty"`
	// Number of update status messages sent
	UpdateStatusSent uint32 `protobuf:"varint,14,opt,name=update_status_sent,json=updateStatusSent,proto3" json:"update_status_sent,omitempty"`
}

func (x *ImCmdFrInfo) Reset() {
	*x = ImCmdFrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdFrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdFrInfo) ProtoMessage() {}

func (x *ImCmdFrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdFrInfo.ProtoReflect.Descriptor instead.
func (*ImCmdFrInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{58}
}

func (x *ImCmdFrInfo) GetFrEncapsulationType() string {
	if x != nil {
		return x.FrEncapsulationType
	}
	return ""
}

func (x *ImCmdFrInfo) GetLmiType() string {
	if x != nil {
		return x.LmiType
	}
	return ""
}

func (x *ImCmdFrInfo) GetLmidlci() uint32 {
	if x != nil {
		return x.Lmidlci
	}
	return 0
}

func (x *ImCmdFrInfo) GetIsNni() bool {
	if x != nil {
		return x.IsNni
	}
	return false
}

func (x *ImCmdFrInfo) GetIsDte() bool {
	if x != nil {
		return x.IsDte
	}
	return false
}

func (x *ImCmdFrInfo) GetIsLmiUp() bool {
	if x != nil {
		return x.IsLmiUp
	}
	return false
}

func (x *ImCmdFrInfo) GetIsLmiNniDceUp() bool {
	if x != nil {
		return x.IsLmiNniDceUp
	}
	return false
}

func (x *ImCmdFrInfo) GetIsLmiEnabled() bool {
	if x != nil {
		return x.IsLmiEnabled
	}
	return false
}

func (x *ImCmdFrInfo) GetEnquiriesReceived() uint32 {
	if x != nil {
		return x.EnquiriesReceived
	}
	return 0
}

func (x *ImCmdFrInfo) GetEnquiriesSent() uint32 {
	if x != nil {
		return x.EnquiriesSent
	}
	return 0
}

func (x *ImCmdFrInfo) GetStatusReceived() uint32 {
	if x != nil {
		return x.StatusReceived
	}
	return 0
}

func (x *ImCmdFrInfo) GetStatusSent() uint32 {
	if x != nil {
		return x.StatusSent
	}
	return 0
}

func (x *ImCmdFrInfo) GetUpdateStatusReceived() uint32 {
	if x != nil {
		return x.UpdateStatusReceived
	}
	return 0
}

func (x *ImCmdFrInfo) GetUpdateStatusSent() uint32 {
	if x != nil {
		return x.UpdateStatusSent
	}
	return 0
}

// Encapsulation-specific information
type ImCmdEncapsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncapsulationType string `protobuf:"bytes,1,opt,name=encapsulation_type,json=encapsulationType,proto3" json:"encapsulation_type,omitempty"`
	// Frame Relay information
	FrameRelayInformation *ImCmdFrInfo `protobuf:"bytes,2,opt,name=frame_relay_information,json=frameRelayInformation,proto3" json:"frame_relay_information,omitempty"`
	// VLAN 802.1q information
	Dot1QInformation *VlanIntfGeneric `protobuf:"bytes,3,opt,name=dot1_q_information,json=dot1QInformation,proto3" json:"dot1_q_information,omitempty"`
	// PPP information
	PppInformation *PppShowIntInfo `protobuf:"bytes,4,opt,name=ppp_information,json=pppInformation,proto3" json:"ppp_information,omitempty"`
}

func (x *ImCmdEncapsInfo) Reset() {
	*x = ImCmdEncapsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdEncapsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdEncapsInfo) ProtoMessage() {}

func (x *ImCmdEncapsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdEncapsInfo.ProtoReflect.Descriptor instead.
func (*ImCmdEncapsInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{59}
}

func (x *ImCmdEncapsInfo) GetEncapsulationType() string {
	if x != nil {
		return x.EncapsulationType
	}
	return ""
}

func (x *ImCmdEncapsInfo) GetFrameRelayInformation() *ImCmdFrInfo {
	if x != nil {
		return x.FrameRelayInformation
	}
	return nil
}

func (x *ImCmdEncapsInfo) GetDot1QInformation() *VlanIntfGeneric {
	if x != nil {
		return x.Dot1QInformation
	}
	return nil
}

func (x *ImCmdEncapsInfo) GetPppInformation() *PppShowIntInfo {
	if x != nil {
		return x.PppInformation
	}
	return nil
}

type ImCmdSrpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SRP-specific data
	SrpInformation *SrpAllInfo `protobuf:"bytes,1,opt,name=srp_information,json=srpInformation,proto3" json:"srp_information,omitempty"`
	// SRP-specific packet and byte counters
	SrpStatistics *IfstatsbagSrp `protobuf:"bytes,2,opt,name=srp_statistics,json=srpStatistics,proto3" json:"srp_statistics,omitempty"`
}

func (x *ImCmdSrpInfo) Reset() {
	*x = ImCmdSrpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdSrpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdSrpInfo) ProtoMessage() {}

func (x *ImCmdSrpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdSrpInfo.ProtoReflect.Descriptor instead.
func (*ImCmdSrpInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{60}
}

func (x *ImCmdSrpInfo) GetSrpInformation() *SrpAllInfo {
	if x != nil {
		return x.SrpInformation
	}
	return nil
}

func (x *ImCmdSrpInfo) GetSrpStatistics() *IfstatsbagSrp {
	if x != nil {
		return x.SrpStatistics
	}
	return nil
}

type ImCmdTunnelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tunnel source name
	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	// Tunnel source IP address
	SourceIpv4Address string `protobuf:"bytes,2,opt,name=source_ipv4_address,json=sourceIpv4Address,proto3" json:"source_ipv4_address,omitempty"`
	// Tunnel destination IP address
	DestinationIpv4Address string `protobuf:"bytes,3,opt,name=destination_ipv4_address,json=destinationIpv4Address,proto3" json:"destination_ipv4_address,omitempty"`
	// Tunnel protocol/transport
	TunnelType string `protobuf:"bytes,4,opt,name=tunnel_type,json=tunnelType,proto3" json:"tunnel_type,omitempty"`
	// GRE tunnel key
	Key uint32 `protobuf:"varint,5,opt,name=key,proto3" json:"key,omitempty"`
	// GRE tunnel TTL
	Ttl uint32 `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *ImCmdTunnelInfo) Reset() {
	*x = ImCmdTunnelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdTunnelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdTunnelInfo) ProtoMessage() {}

func (x *ImCmdTunnelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdTunnelInfo.ProtoReflect.Descriptor instead.
func (*ImCmdTunnelInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{61}
}

func (x *ImCmdTunnelInfo) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *ImCmdTunnelInfo) GetSourceIpv4Address() string {
	if x != nil {
		return x.SourceIpv4Address
	}
	return ""
}

func (x *ImCmdTunnelInfo) GetDestinationIpv4Address() string {
	if x != nil {
		return x.DestinationIpv4Address
	}
	return ""
}

func (x *ImCmdTunnelInfo) GetTunnelType() string {
	if x != nil {
		return x.TunnelType
	}
	return ""
}

func (x *ImCmdTunnelInfo) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ImCmdTunnelInfo) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type ImCmdBundleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of bundle members and their properties
	MemberList []*BmMemberData `protobuf:"bytes,1,rep,name=member_list,json=memberList,proto3" json:"member_list,omitempty"`
}

func (x *ImCmdBundleInfo) Reset() {
	*x = ImCmdBundleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdBundleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdBundleInfo) ProtoMessage() {}

func (x *ImCmdBundleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdBundleInfo.ProtoReflect.Descriptor instead.
func (*ImCmdBundleInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{62}
}

func (x *ImCmdBundleInfo) GetMemberList() []*BmMemberData {
	if x != nil {
		return x.MemberList
	}
	return nil
}

// Interface-specific information
type ImCmdIntfTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceTypeInfo string `protobuf:"bytes,1,opt,name=interface_type_info,json=interfaceTypeInfo,proto3" json:"interface_type_info,omitempty"`
	// SRP interface information
	SrpInformation *ImCmdSrpInfo `protobuf:"bytes,2,opt,name=srp_information,json=srpInformation,proto3" json:"srp_information,omitempty"`
	// Tunnel interface information
	TunnelInformation *ImCmdTunnelInfo `protobuf:"bytes,3,opt,name=tunnel_information,json=tunnelInformation,proto3" json:"tunnel_information,omitempty"`
	// Bundle interface information
	BundleInformation *ImCmdBundleInfo `protobuf:"bytes,4,opt,name=bundle_information,json=bundleInformation,proto3" json:"bundle_information,omitempty"`
	// Serial interface information
	SerialInformation *SerialInterface `protobuf:"bytes,5,opt,name=serial_information,json=serialInformation,proto3" json:"serial_information,omitempty"`
	// SONET POS interface information
	SonetPosInformation *ImSonetPosInfoInterface `protobuf:"bytes,6,opt,name=sonet_pos_information,json=sonetPosInformation,proto3" json:"sonet_pos_information,omitempty"`
	// Tunnel GRE interface information
	TunnelGreInformation *ImCmdTunlGreInfo `protobuf:"bytes,7,opt,name=tunnel_gre_information,json=tunnelGreInformation,proto3" json:"tunnel_gre_information,omitempty"`
	// PseudowireHeadEnd interface information
	PseudowireHeadEndInformation *PwheEtherInterfaceInfo `protobuf:"bytes,8,opt,name=pseudowire_head_end_information,json=pseudowireHeadEndInformation,proto3" json:"pseudowire_head_end_information,omitempty"`
	// Cem interface information
	CemInformation *CemInterface `protobuf:"bytes,9,opt,name=cem_information,json=cemInformation,proto3" json:"cem_information,omitempty"`
	// GCC interface information
	GccInformation *ImCmdGccPerPortInfo `protobuf:"bytes,10,opt,name=gcc_information,json=gccInformation,proto3" json:"gcc_information,omitempty"`
}

func (x *ImCmdIntfTypeInfo) Reset() {
	*x = ImCmdIntfTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImCmdIntfTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImCmdIntfTypeInfo) ProtoMessage() {}

func (x *ImCmdIntfTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImCmdIntfTypeInfo.ProtoReflect.Descriptor instead.
func (*ImCmdIntfTypeInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP(), []int{63}
}

func (x *ImCmdIntfTypeInfo) GetInterfaceTypeInfo() string {
	if x != nil {
		return x.InterfaceTypeInfo
	}
	return ""
}

func (x *ImCmdIntfTypeInfo) GetSrpInformation() *ImCmdSrpInfo {
	if x != nil {
		return x.SrpInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetTunnelInformation() *ImCmdTunnelInfo {
	if x != nil {
		return x.TunnelInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetBundleInformation() *ImCmdBundleInfo {
	if x != nil {
		return x.BundleInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetSerialInformation() *SerialInterface {
	if x != nil {
		return x.SerialInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetSonetPosInformation() *ImSonetPosInfoInterface {
	if x != nil {
		return x.SonetPosInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetTunnelGreInformation() *ImCmdTunlGreInfo {
	if x != nil {
		return x.TunnelGreInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetPseudowireHeadEndInformation() *PwheEtherInterfaceInfo {
	if x != nil {
		return x.PseudowireHeadEndInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetCemInformation() *CemInterface {
	if x != nil {
		return x.CemInformation
	}
	return nil
}

func (x *ImCmdIntfTypeInfo) GetGccInformation() *ImCmdGccPerPortInfo {
	if x != nil {
		return x.GccInformation
	}
	return nil
}

var File_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDesc = []byte{
	0x0a, 0x50, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70,
	0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x3e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x22, 0x39, 0x0a, 0x10, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x15,
	0x0a, 0x0b, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73,
	0x5f, 0x6c, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4c,
	0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x44, 0x61, 0x6d, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x15, 0x64, 0x61, 0x6d, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x64,
	0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x52, 0x14, 0x64, 0x61, 0x6d, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x63, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x73, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x7e, 0x0a, 0x11, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69,
	0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73,
	0x74, 0x52, 0x0f, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x7c, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f,
	0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6c, 0x32, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x65,
	0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x32, 0x4c, 0x6f, 0x6f,
	0x70, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x7b, 0x0a, 0x0f, 0x61, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f,
	0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d,
	0x64, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x52, 0x0e, 0x61,
	0x72, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a,
	0x0e, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x52, 0x0d, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x18, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x93, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x18, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d,
	0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x64, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63,
	0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x69, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x17, 0x6c, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x15, 0x6c, 0x32,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x78, 0x0a, 0x0a, 0x6e, 0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d,
	0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6e, 0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6e, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x69, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcc, 0x0d, 0x0a, 0x12, 0x69, 0x66, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x62, 0x61, 0x67, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x67,
	0x69, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x22, 0xfd, 0x05, 0x0a, 0x10, 0x69, 0x66, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x62, 0x61, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x22, 0xb5, 0x04, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x64, 0x62, 0x61, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x65,
	0x61, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x65, 0x61,
	0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x70, 0x65, 0x61, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x65, 0x61, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0xa4, 0x04, 0x0a, 0x1e, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x72, 0x70, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x63, 0x52, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x63, 0x5f, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x63, 0x47, 0x69, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x1d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x47, 0x69, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x21, 0x69, 0x66, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x73, 0x72, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0xe2, 0x04, 0x0a, 0x0e, 0x69, 0x66, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x62, 0x61, 0x67, 0x5f, 0x73, 0x72, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x72,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x41, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x72, 0x70, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x42, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69,
	0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x66, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x72, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x69, 0x64,
	0x65, 0x41, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x72, 0x70, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x74,
	0x52, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x42, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xb5, 0x01,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x74,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62,
	0x61, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x73, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f,
	0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x62, 0x61, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x52, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xa3, 0x03, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f,
	0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x62, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x64, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x73, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x79, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69,
	0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22,
	0x5b, 0x0a, 0x15, 0x70, 0x70, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x5f,
	0x6e, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x63, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x63, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x63, 0x70, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x63, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xe5, 0x02, 0x0a,
	0x11, 0x70, 0x70, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x69,
	0x73, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x6d, 0x70, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x69, 0x73, 0x4d, 0x70, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x7b, 0x0a, 0x0e, 0x6e, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70,
	0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x70, 0x70, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x22, 0x5c, 0x0a, 0x1d, 0x62, 0x6d, 0x5f, 0x6d, 0x62, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x2a, 0x0a, 0x0e, 0x62, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe4,
	0x02, 0x0a, 0x0b, 0x62, 0x6d, 0x5f, 0x6d, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x75, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70,
	0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x62, 0x6d, 0x5f, 0x6d, 0x62, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x18,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x75, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb0, 0x04, 0x0a, 0x10, 0x62, 0x6d, 0x5f, 0x6c, 0x61, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x63, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x55, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x5f,
	0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x55, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x1c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x5f, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x63, 0x70, 0x64, 0x55, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x73, 0x65,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x65, 0x64, 0x4e, 0x73, 0x65, 0x63, 0x22, 0x80, 0x06, 0x0a, 0x11, 0x62, 0x6d, 0x5f,
	0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x98, 0x06, 0x0a, 0x0e,
	0x62, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x6c, 0x0a, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66,
	0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x62, 0x6d, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69,
	0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x62,
	0x6d, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x73, 0x0a, 0x0f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x62, 0x6d, 0x5f, 0x6d, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x63, 0x70, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x63, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d,
	0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x62, 0x6d, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x22, 0x4d, 0x0a, 0x09, 0x65,
	0x66, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x48, 0x69, 0x67, 0x68, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x65,
	0x66, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70,
	0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x65, 0x66, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x45, 0x0a, 0x0c, 0x65, 0x66, 0x70, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x65, 0x66,
	0x70, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x7a, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x66, 0x70, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x74, 0x61, 0x67, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x54, 0x61, 0x67, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x06,
	0x0a, 0x0f, 0x65, 0x66, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x71, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63,
	0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x66, 0x70, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x73, 0x50, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x64, 0x0a, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x65, 0x66, 0x70, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x66, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c,
	0x69, 0x73, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x12, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66,
	0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x82,
	0x01, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66,
	0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x22, 0x7f, 0x0a, 0x16, 0x65, 0x66, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x66,
	0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x05, 0x0a, 0x13, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x6b, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x74, 0x31, 0x61, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x6f, 0x74, 0x31,
	0x61, 0x64, 0x54, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x6f, 0x74, 0x31, 0x61, 0x64, 0x5f,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x64, 0x6f, 0x74, 0x31, 0x61, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x66, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x16, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x64, 0x6f, 0x74, 0x31, 0x61, 0x64, 0x5f,
	0x64, 0x6f, 0x74, 0x31, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x10, 0x64, 0x6f, 0x74, 0x31, 0x61, 0x64,
	0x44, 0x6f, 0x74, 0x31, 0x71, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x6f,
	0x74, 0x31, 0x61, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x6f, 0x74, 0x31, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d,
	0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x14, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x16, 0x73, 0x72, 0x70, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x69, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x72,
	0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x10, 0x73, 0x72, 0x70, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x55, 0x0a, 0x28, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x23, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4f, 0x6e, 0x52,
	0x69, 0x6e, 0x67, 0x12, 0x7c, 0x0a, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69,
	0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x73, 0x72, 0x70, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b,
	0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x7d, 0x0a, 0x11, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x73,
	0x72, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x22, 0xfb, 0x06, 0x0a, 0x13, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x70, 0x73, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x72, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x72, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x74, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x77, 0x74, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x11,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d,
	0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x72,
	0x78, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x78,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x78,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x78, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x78, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78,
	0x54, 0x74, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x72, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x78, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x78, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x78, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78,
	0x5f, 0x74, 0x74, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x78, 0x54, 0x74,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x22, 0xed, 0x02, 0x0a, 0x0e, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x70, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x42, 0x75, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x77, 0x74, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x74, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x6a, 0x0a, 0x06, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63,
	0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x70,
	0x73, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x73,
	0x69, 0x64, 0x65, 0x41, 0x12, 0x6a, 0x0a, 0x06, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x70, 0x73, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x73, 0x69, 0x64, 0x65, 0x42,
	0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x7b, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x70, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb9, 0x02, 0x0a, 0x0d, 0x73, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x73, 0x72, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x45, 0x78, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x16, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5,
	0x07, 0x0a, 0x0e, 0x73, 0x72, 0x70, 0x5f, 0x73, 0x72, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x77,
	0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x16, 0x69, 0x73, 0x57,
	0x72, 0x6f, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x6f, 0x6e,
	0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6c, 0x61,
	0x73, 0x74, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x72, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x72, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x69, 0x6e, 0x67, 0x42, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x74, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x74, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x1e, 0x77, 0x74, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x74, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x1e, 0x77, 0x74, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77,
	0x74, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x73, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4f, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x11,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d,
	0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x6f, 0x74,
	0x4f, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x73, 0x72, 0x70, 0x5f, 0x73,
	0x72, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b,
	0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x73, 0x72, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x72, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x7a, 0x0a, 0x11, 0x73, 0x72, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72,
	0x70, 0x5f, 0x73, 0x72, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x73, 0x72,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a,
	0x15, 0x73, 0x72, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x13, 0x73, 0x72, 0x70, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e,
	0x12, 0x8e, 0x01, 0x0a, 0x18, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x15, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xd5, 0x03, 0x0a, 0x0c, 0x73, 0x72, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x67, 0x0a, 0x08, 0x69, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x70, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x76, 0x0a, 0x0d, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x67, 0x0a, 0x08, 0x73, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x73, 0x72, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x72, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7b, 0x0a, 0x0f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x13, 0x74, 0x75, 0x6e,
	0x6c, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x70, 0x66, 0x69, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x66, 0x69, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70,
	0x76, 0x34, 0x12, 0x67, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x74, 0x75, 0x6e, 0x6c, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6e, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x22, 0x83, 0x05, 0x0a, 0x14,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x75, 0x6e, 0x6c, 0x5f, 0x67, 0x72, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64,
	0x66, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x66, 0x42, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x42, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x30, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x69, 0x6d, 0x5f, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x19, 0x70, 0x77, 0x68, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x32, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x32, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x63, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x22, 0x3b, 0x0a, 0x19, 0x6e, 0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22,
	0x5a, 0x0a, 0x18, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x63, 0x63, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x0e,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x6c,
	0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61,
	0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x75, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x12,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x72, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x72, 0x70, 0x5f, 0x69,
	0x73, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x72, 0x70, 0x49, 0x73,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x60, 0x0a, 0x11, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x2e, 0x0a, 0x12, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x0f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x66,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x61, 0x67,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a,
	0x15, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x66,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x61, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x13,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x17, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x55, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x97, 0x04, 0x0a, 0x0e, 0x69, 0x6d, 0x5f, 0x63, 0x6d,
	0x64, 0x5f, 0x66, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x72, 0x5f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x72, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6d, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6d, 0x69, 0x64,
	0x6c, 0x63, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6d, 0x69, 0x64, 0x6c,
	0x63, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x6e, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x6e, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x64, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6d, 0x69, 0x5f, 0x75, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6d, 0x69, 0x55, 0x70, 0x12, 0x28, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x6c, 0x6d, 0x69, 0x5f, 0x6e, 0x6e, 0x69, 0x5f, 0x64, 0x63, 0x65, 0x5f, 0x75,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x6d, 0x69, 0x4e, 0x6e,
	0x69, 0x44, 0x63, 0x65, 0x55, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x6d, 0x69,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x4c, 0x6d, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x22, 0xc9, 0x03, 0x0a, 0x12, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63,
	0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x66, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7f, 0x0a, 0x12, 0x64, 0x6f, 0x74, 0x31, 0x5f, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69,
	0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x10,
	0x64, 0x6f, 0x74, 0x31, 0x51, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x7a, 0x0a, 0x0f, 0x70, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f,
	0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x70, 0x70, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xff, 0x01, 0x0a,
	0x0f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x75, 0x0a, 0x0f, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f,
	0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x72, 0x70, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x72, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0e, 0x73, 0x72, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70,
	0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x61, 0x67, 0x5f, 0x73, 0x72, 0x70, 0x52,
	0x0d, 0x73, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xe4,
	0x01, 0x0a, 0x12, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x62, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x88, 0x0a,
	0x0a, 0x15, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x78, 0x0a, 0x0f, 0x73, 0x72, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x73, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x73, 0x72, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66,
	0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d,
	0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78,
	0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6d, 0x5f, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x13, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01, 0x0a,
	0x16, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69,
	0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x75, 0x6e, 0x6c, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x14, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x1f, 0x70, 0x73,
	0x65, 0x75, 0x64, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x77, 0x68, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x1c,
	0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x77, 0x69, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x0f,
	0x63, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x67, 0x63, 0x63, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x70, 0x66,
	0x69, 0x5f, 0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x78, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x69, 0x6d, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x67, 0x63, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x67, 0x63, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescData = file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDesc
)

func file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescData)
	})
	return file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDescData
}

var file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_goTypes = []interface{}{
	(*ImCmdInfo_KEYS)(nil),              // 0: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info_KEYS
	(*ImCmdInfo)(nil),                   // 1: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info
	(*IfstatsbagGeneric)(nil),           // 2: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_generic
	(*IfstatsbagBasic)(nil),             // 3: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_basic
	(*StatsdbagDatarate)(nil),           // 4: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.statsdbag_datarate
	(*IfstatsSrpPerSideErrorsSt)(nil),   // 5: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_errors_st
	(*IfstatsSrpPerSideDataRateSt)(nil), // 6: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_data_rate_st
	(*IfstatsbagSrp)(nil),               // 7: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_srp
	(*StatsBagIdTd)(nil),                // 8: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_id_td
	(*StatsBagBlockSt)(nil),             // 9: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_block_st
	(*StatsBagElementSt)(nil),           // 10: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_element_st
	(*StatsData)(nil),                   // 11: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_data
	(*PppShowIntNcpInfo)(nil),           // 12: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ppp_show_int_ncp_info
	(*PppShowIntInfo)(nil),              // 13: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ppp_show_int_info
	(*BmMbrStateReasonDataType)(nil),    // 14: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mbr_state_reason_data_type
	(*BmMacAddrSt)(nil),                 // 15: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mac_addr_st
	(*BmMuxData)(nil),                   // 16: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mux_data
	(*BmLacpCounters)(nil),              // 17: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_lacp_counters
	(*BmLacpLinkData)(nil),              // 18: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_lacp_link_data
	(*BmMemberData)(nil),                // 19: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_member_data
	(*VlanDoubleTagStack)(nil),          // 20: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_double_tag_stack
	(*EfpRange)(nil),                    // 21: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_range
	(*EfpTagMatch)(nil),                 // 22: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_match
	(*EfpVlanTag)(nil),                  // 23: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_vlan_tag
	(*EfpTagLocalTrafficStack)(nil),     // 24: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_local_traffic_stack
	(*MacAddressType)(nil),              // 25: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.MacAddressType
	(*EfpDescription)(nil),              // 26: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description
	(*EfpDescriptionPType)(nil),         // 27: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description_p_type
	(*VlanTagStackType)(nil),            // 28: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_tag_stack_type
	(*VlanIntfGeneric)(nil),             // 29: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_intf_generic
	(*SrpTopologyNodeData)(nil),         // 30: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_node_data
	(*SrpTopologyMap)(nil),              // 31: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_map
	(*SrpTopologyInfo)(nil),             // 32: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_info
	(*SrpFailureInfo)(nil),              // 33: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_failure_info
	(*SrpIpsSideDetail)(nil),            // 34: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_side_detail
	(*SrpIpsDetail)(nil),                // 35: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_detail
	(*SrpIpsInfo)(nil),                  // 36: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_info
	(*SrrNodeData)(nil),                 // 37: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srr_node_data
	(*SrpSrrDetail)(nil),                // 38: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_detail
	(*SrpSrrInfo)(nil),                  // 39: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_info
	(*SrpRateLimitDetail)(nil),          // 40: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_rate_limit_detail
	(*SrpRateLimitInfo)(nil),            // 41: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_rate_limit_info
	(*SrpAllInfo)(nil),                  // 42: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_all_info
	(*TunlPfiIn6AddrT)(nil),             // 43: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.tunl_pfi_in6_addr_t
	(*PfiIpAddrUnion)(nil),              // 44: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pfi_ip_addr_union
	(*ImCmdTunlGreInfo)(nil),            // 45: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunl_gre_info
	(*SerialInterface)(nil),             // 46: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.serial_interface
	(*ImSonetPosInfoInterface)(nil),     // 47: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_sonet_pos_info_interface
	(*PwheEtherInterfaceInfo)(nil),      // 48: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pwhe_ether_interface_info
	(*CemInterface)(nil),                // 49: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.cem_interface
	(*NvOpticalInterfaceInfo)(nil),      // 50: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.nv_optical_interface_info
	(*ImCmdGccPerPortInfo)(nil),         // 51: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_gcc_per_port_info
	(*ImCmdDampSt)(nil),                 // 52: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_damp_st
	(*ImCmdArpInfoSt)(nil),              // 53: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_arp_info_st
	(*ImCmdIpInfoSt)(nil),               // 54: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_ip_info_st
	(*ImCmdMacAddrSt)(nil),              // 55: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_mac_addr_st
	(*ImCmdIfStats)(nil),                // 56: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_if_stats
	(*ImCmdCarrierDelaySt)(nil),         // 57: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_carrier_delay_st
	(*ImCmdFrInfo)(nil),                 // 58: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_fr_info
	(*ImCmdEncapsInfo)(nil),             // 59: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_encaps_info
	(*ImCmdSrpInfo)(nil),                // 60: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_srp_info
	(*ImCmdTunnelInfo)(nil),             // 61: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunnel_info
	(*ImCmdBundleInfo)(nil),             // 62: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_bundle_info
	(*ImCmdIntfTypeInfo)(nil),           // 63: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info
}
var file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_depIdxs = []int32{
	52, // 0: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.dampening_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_damp_st
	55, // 1: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.mac_address:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_mac_addr_st
	55, // 2: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.burned_in_address:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_mac_addr_st
	57, // 3: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.carrier_delay:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_carrier_delay_st
	53, // 4: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.arp_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_arp_info_st
	54, // 5: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.ip_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_ip_info_st
	59, // 6: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.encapsulation_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_encaps_info
	63, // 7: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.interface_type_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info
	4,  // 8: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.data_rates:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.statsdbag_datarate
	56, // 9: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.interface_statistics:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_if_stats
	11, // 10: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.l2_interface_statistics:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_data
	50, // 11: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_info.nv_optical:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.nv_optical_interface_info
	6,  // 12: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_srp.side_a_data_rate:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_data_rate_st
	6,  // 13: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_srp.side_b_data_rate:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_data_rate_st
	5,  // 14: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_srp.side_a_errors:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_errors_st
	5,  // 15: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_srp.side_b_errors:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstats_srp_per_side_errors_st
	9,  // 16: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_element_st.block_array:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_block_st
	8,  // 17: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_data.stats_id:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_id_td
	9,  // 18: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_data.block_array:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_block_st
	10, // 19: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_data.element_array:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.stats_bag_element_st
	12, // 20: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ppp_show_int_info.ncp_info_array:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ppp_show_int_ncp_info
	14, // 21: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mux_data.member_mux_state_reason_data:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mbr_state_reason_data_type
	17, // 22: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_member_data.counters:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_lacp_counters
	18, // 23: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_member_data.link_data:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_lacp_link_data
	16, // 24: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_member_data.member_mux_data:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mux_data
	15, // 25: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_member_data.mac_address:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_mac_addr_st
	21, // 26: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_match.vlan_ranges:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_range
	23, // 27: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_local_traffic_stack.local_traffic_tags:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_vlan_tag
	22, // 28: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description.tags_to_match:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_match
	23, // 29: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description.pushes:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_vlan_tag
	24, // 30: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description.local_traffic_stack:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_tag_local_traffic_stack
	25, // 31: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description.source_mac_match:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.MacAddressType
	25, // 32: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description.destination_mac_match:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.MacAddressType
	26, // 33: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description_p_type.value:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description
	20, // 34: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_tag_stack_type.stack:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_double_tag_stack
	27, // 35: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_tag_stack_type.service_instance_details:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.efp_description_p_type
	20, // 36: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_tag_stack_type.dot1ad_dot1q_stack:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_double_tag_stack
	28, // 37: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_intf_generic.encapsulation_details:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_tag_stack_type
	30, // 38: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_map.ring_node_list:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_node_data
	31, // 39: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_info.local_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_map
	33, // 40: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_side_detail.asserted_failures:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_failure_info
	34, // 41: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_detail.side_a:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_side_detail
	34, // 42: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_detail.side_b:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_side_detail
	35, // 43: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_info.local_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_detail
	37, // 44: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_detail.nodes_on_ring:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srr_node_data
	37, // 45: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_detail.nodes_not_on_ring:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srr_node_data
	38, // 46: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_info.srr_detailed_info:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_detail
	40, // 47: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_rate_limit_info.rate_limit_detailed_info:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_rate_limit_detail
	36, // 48: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_all_info.ips_info:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_ips_info
	32, // 49: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_all_info.topology_info:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_topology_info
	39, // 50: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_all_info.srr_info:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_srr_info
	41, // 51: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_all_info.rate_limit_info:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_rate_limit_info
	43, // 52: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pfi_ip_addr_union.ipv6:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.tunl_pfi_in6_addr_t
	44, // 53: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunl_gre_info.source_ip_address:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pfi_ip_addr_union
	44, // 54: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunl_gre_info.destination_ip_address:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pfi_ip_addr_union
	2,  // 55: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_if_stats.full_interface_stats:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_generic
	3,  // 56: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_if_stats.basic_interface_stats:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_basic
	58, // 57: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_encaps_info.frame_relay_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_fr_info
	29, // 58: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_encaps_info.dot1_q_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.vlan_intf_generic
	13, // 59: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_encaps_info.ppp_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ppp_show_int_info
	42, // 60: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_srp_info.srp_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.srp_all_info
	7,  // 61: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_srp_info.srp_statistics:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.ifstatsbag_srp
	19, // 62: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_bundle_info.member_list:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.bm_member_data
	60, // 63: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.srp_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_srp_info
	61, // 64: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.tunnel_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunnel_info
	62, // 65: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.bundle_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_bundle_info
	46, // 66: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.serial_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.serial_interface
	47, // 67: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.sonet_pos_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_sonet_pos_info_interface
	45, // 68: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.tunnel_gre_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_tunl_gre_info
	48, // 69: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.pseudowire_head_end_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.pwhe_ether_interface_info
	49, // 70: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.cem_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.cem_interface
	51, // 71: cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_intf_type_info.gcc_information:type_name -> cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface.im_cmd_gcc_per_port_info
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_init()
}
func file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_init() {
	if File_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdInfo_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfstatsbagGeneric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfstatsbagBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsdbagDatarate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfstatsSrpPerSideErrorsSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfstatsSrpPerSideDataRateSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfstatsbagSrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsBagIdTd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsBagBlockSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsBagElementSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PppShowIntNcpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PppShowIntInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmMbrStateReasonDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmMacAddrSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmMuxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmLacpCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmLacpLinkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmMemberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanDoubleTagStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfpRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfpTagMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfpVlanTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfpTagLocalTrafficStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfpDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfpDescriptionPType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanTagStackType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanIntfGeneric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpTopologyNodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpTopologyMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpTopologyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpFailureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpIpsSideDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpIpsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpIpsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrrNodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpSrrDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpSrrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpRateLimitDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpRateLimitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrpAllInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunlPfiIn6AddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PfiIpAddrUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdTunlGreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImSonetPosInfoInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PwheEtherInterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CemInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvOpticalInterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdGccPerPortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdDampSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdArpInfoSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdIpInfoSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdMacAddrSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdIfStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdCarrierDelaySt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdFrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdEncapsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdSrpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdTunnelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdBundleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImCmdIntfTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto = out.File
	file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_rawDesc = nil
	file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_goTypes = nil
	file_cisco_ios_xr_pfi_im_cmd_oper_interfaces_interface_xr_interface_im_cmd_info_proto_depIdxs = nil
}
