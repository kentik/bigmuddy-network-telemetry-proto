// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_arp_oper/arp/nodes/node/traffic_interfaces/traffic_interface/ip_arp_statistics.proto

package cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IP ARP Statistics information
type IpArpStatistics_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *IpArpStatistics_KEYS) Reset() {
	*x = IpArpStatistics_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpArpStatistics_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpArpStatistics_KEYS) ProtoMessage() {}

func (x *IpArpStatistics_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpArpStatistics_KEYS.ProtoReflect.Descriptor instead.
func (*IpArpStatistics_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescGZIP(), []int{0}
}

func (x *IpArpStatistics_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *IpArpStatistics_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type IpArpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total ARP requests received
	RequestsReceived uint32 `protobuf:"varint,50,opt,name=requests_received,json=requestsReceived,proto3" json:"requests_received,omitempty"`
	// Total ARP replies received
	RepliesReceived uint32 `protobuf:"varint,51,opt,name=replies_received,json=repliesReceived,proto3" json:"replies_received,omitempty"`
	// Total ARP requests sent
	RequestsSent uint32 `protobuf:"varint,52,opt,name=requests_sent,json=requestsSent,proto3" json:"requests_sent,omitempty"`
	// Total ARP replies sent
	RepliesSent uint32 `protobuf:"varint,53,opt,name=replies_sent,json=repliesSent,proto3" json:"replies_sent,omitempty"`
	// Total Proxy ARP replies sent
	ProxyRepliesSent uint32 `protobuf:"varint,54,opt,name=proxy_replies_sent,json=proxyRepliesSent,proto3" json:"proxy_replies_sent,omitempty"`
	// Total ARP requests received over subscriber interface
	SubscrRequestsReceived uint32 `protobuf:"varint,55,opt,name=subscr_requests_received,json=subscrRequestsReceived,proto3" json:"subscr_requests_received,omitempty"`
	// Total ARP replies sent over subscriber interface
	SubscrRepliesSent uint32 `protobuf:"varint,56,opt,name=subscr_replies_sent,json=subscrRepliesSent,proto3" json:"subscr_replies_sent,omitempty"`
	// Total ARP grat replies sent over subscriber interface
	SubscrRepliesGratgSent uint32 `protobuf:"varint,57,opt,name=subscr_replies_gratg_sent,json=subscrRepliesGratgSent,proto3" json:"subscr_replies_gratg_sent,omitempty"`
	// Total Local Proxy ARP replies sent
	LocalProxyRepliesSent uint32 `protobuf:"varint,58,opt,name=local_proxy_replies_sent,json=localProxyRepliesSent,proto3" json:"local_proxy_replies_sent,omitempty"`
	// Total Gratuituous ARP replies sent
	GratuitousRepliesSent uint32 `protobuf:"varint,59,opt,name=gratuitous_replies_sent,json=gratuitousRepliesSent,proto3" json:"gratuitous_replies_sent,omitempty"`
	// Total ARP resolution requests received
	ResolutionRequestsReceived uint32 `protobuf:"varint,60,opt,name=resolution_requests_received,json=resolutionRequestsReceived,proto3" json:"resolution_requests_received,omitempty"`
	// Total ARP resolution replies received
	ResolutionRepliesReceived uint32 `protobuf:"varint,61,opt,name=resolution_replies_received,json=resolutionRepliesReceived,proto3" json:"resolution_replies_received,omitempty"`
	// total ARP resolution requests dropped
	ResolutionRequestsDropped uint32 `protobuf:"varint,62,opt,name=resolution_requests_dropped,json=resolutionRequestsDropped,proto3" json:"resolution_requests_dropped,omitempty"`
	// Total errors for out of memory
	OutOfMemoryErrors uint32 `protobuf:"varint,63,opt,name=out_of_memory_errors,json=outOfMemoryErrors,proto3" json:"out_of_memory_errors,omitempty"`
	// Total errors for no buffer
	NoBufferErrors uint32 `protobuf:"varint,64,opt,name=no_buffer_errors,json=noBufferErrors,proto3" json:"no_buffer_errors,omitempty"`
	// Total ARP entries in the cache
	TotalEntries uint32 `protobuf:"varint,65,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty"`
	// Total dynamic entries in the cache
	DynamicEntries uint32 `protobuf:"varint,66,opt,name=dynamic_entries,json=dynamicEntries,proto3" json:"dynamic_entries,omitempty"`
	// Total static entries in the cache
	StaticEntries uint32 `protobuf:"varint,67,opt,name=static_entries,json=staticEntries,proto3" json:"static_entries,omitempty"`
	// Total alias entries in the cache
	AliasEntries uint32 `protobuf:"varint,68,opt,name=alias_entries,json=aliasEntries,proto3" json:"alias_entries,omitempty"`
	// Total interface entries in the cache
	InterfaceEntries uint32 `protobuf:"varint,69,opt,name=interface_entries,json=interfaceEntries,proto3" json:"interface_entries,omitempty"`
	// Total standby entries in the cache
	StandbyEntries uint32 `protobuf:"varint,70,opt,name=standby_entries,json=standbyEntries,proto3" json:"standby_entries,omitempty"`
	// Total DHCP entries in the cache
	DhcpEntries uint32 `protobuf:"varint,71,opt,name=dhcp_entries,json=dhcpEntries,proto3" json:"dhcp_entries,omitempty"`
	// Total VXLAN entries in the cache
	VxlanEntries uint32 `protobuf:"varint,72,opt,name=vxlan_entries,json=vxlanEntries,proto3" json:"vxlan_entries,omitempty"`
	// Total ip packets droped on this node
	IpPacketsDroppedNode uint32 `protobuf:"varint,73,opt,name=ip_packets_dropped_node,json=ipPacketsDroppedNode,proto3" json:"ip_packets_dropped_node,omitempty"`
	// Total ARP packets on node due to out of subnet
	ArpPacketNodeOutOfSubnet uint32 `protobuf:"varint,74,opt,name=arp_packet_node_out_of_subnet,json=arpPacketNodeOutOfSubnet,proto3" json:"arp_packet_node_out_of_subnet,omitempty"`
	// Total ip packets droped on this interface
	IpPacketsDroppedInterface uint32 `protobuf:"varint,75,opt,name=ip_packets_dropped_interface,json=ipPacketsDroppedInterface,proto3" json:"ip_packets_dropped_interface,omitempty"`
	// Total arp packets on interface due to out of subnet
	ArpPacketInterfaceOutOfSubnet uint32 `protobuf:"varint,76,opt,name=arp_packet_interface_out_of_subnet,json=arpPacketInterfaceOutOfSubnet,proto3" json:"arp_packet_interface_out_of_subnet,omitempty"`
	// Total idb structures on this node
	IdbStructures uint32 `protobuf:"varint,77,opt,name=idb_structures,json=idbStructures,proto3" json:"idb_structures,omitempty"`
}

func (x *IpArpStatistics) Reset() {
	*x = IpArpStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpArpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpArpStatistics) ProtoMessage() {}

func (x *IpArpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpArpStatistics.ProtoReflect.Descriptor instead.
func (*IpArpStatistics) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescGZIP(), []int{1}
}

func (x *IpArpStatistics) GetRequestsReceived() uint32 {
	if x != nil {
		return x.RequestsReceived
	}
	return 0
}

func (x *IpArpStatistics) GetRepliesReceived() uint32 {
	if x != nil {
		return x.RepliesReceived
	}
	return 0
}

func (x *IpArpStatistics) GetRequestsSent() uint32 {
	if x != nil {
		return x.RequestsSent
	}
	return 0
}

func (x *IpArpStatistics) GetRepliesSent() uint32 {
	if x != nil {
		return x.RepliesSent
	}
	return 0
}

func (x *IpArpStatistics) GetProxyRepliesSent() uint32 {
	if x != nil {
		return x.ProxyRepliesSent
	}
	return 0
}

func (x *IpArpStatistics) GetSubscrRequestsReceived() uint32 {
	if x != nil {
		return x.SubscrRequestsReceived
	}
	return 0
}

func (x *IpArpStatistics) GetSubscrRepliesSent() uint32 {
	if x != nil {
		return x.SubscrRepliesSent
	}
	return 0
}

func (x *IpArpStatistics) GetSubscrRepliesGratgSent() uint32 {
	if x != nil {
		return x.SubscrRepliesGratgSent
	}
	return 0
}

func (x *IpArpStatistics) GetLocalProxyRepliesSent() uint32 {
	if x != nil {
		return x.LocalProxyRepliesSent
	}
	return 0
}

func (x *IpArpStatistics) GetGratuitousRepliesSent() uint32 {
	if x != nil {
		return x.GratuitousRepliesSent
	}
	return 0
}

func (x *IpArpStatistics) GetResolutionRequestsReceived() uint32 {
	if x != nil {
		return x.ResolutionRequestsReceived
	}
	return 0
}

func (x *IpArpStatistics) GetResolutionRepliesReceived() uint32 {
	if x != nil {
		return x.ResolutionRepliesReceived
	}
	return 0
}

func (x *IpArpStatistics) GetResolutionRequestsDropped() uint32 {
	if x != nil {
		return x.ResolutionRequestsDropped
	}
	return 0
}

func (x *IpArpStatistics) GetOutOfMemoryErrors() uint32 {
	if x != nil {
		return x.OutOfMemoryErrors
	}
	return 0
}

func (x *IpArpStatistics) GetNoBufferErrors() uint32 {
	if x != nil {
		return x.NoBufferErrors
	}
	return 0
}

func (x *IpArpStatistics) GetTotalEntries() uint32 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *IpArpStatistics) GetDynamicEntries() uint32 {
	if x != nil {
		return x.DynamicEntries
	}
	return 0
}

func (x *IpArpStatistics) GetStaticEntries() uint32 {
	if x != nil {
		return x.StaticEntries
	}
	return 0
}

func (x *IpArpStatistics) GetAliasEntries() uint32 {
	if x != nil {
		return x.AliasEntries
	}
	return 0
}

func (x *IpArpStatistics) GetInterfaceEntries() uint32 {
	if x != nil {
		return x.InterfaceEntries
	}
	return 0
}

func (x *IpArpStatistics) GetStandbyEntries() uint32 {
	if x != nil {
		return x.StandbyEntries
	}
	return 0
}

func (x *IpArpStatistics) GetDhcpEntries() uint32 {
	if x != nil {
		return x.DhcpEntries
	}
	return 0
}

func (x *IpArpStatistics) GetVxlanEntries() uint32 {
	if x != nil {
		return x.VxlanEntries
	}
	return 0
}

func (x *IpArpStatistics) GetIpPacketsDroppedNode() uint32 {
	if x != nil {
		return x.IpPacketsDroppedNode
	}
	return 0
}

func (x *IpArpStatistics) GetArpPacketNodeOutOfSubnet() uint32 {
	if x != nil {
		return x.ArpPacketNodeOutOfSubnet
	}
	return 0
}

func (x *IpArpStatistics) GetIpPacketsDroppedInterface() uint32 {
	if x != nil {
		return x.IpPacketsDroppedInterface
	}
	return 0
}

func (x *IpArpStatistics) GetArpPacketInterfaceOutOfSubnet() uint32 {
	if x != nil {
		return x.ArpPacketInterfaceOutOfSubnet
	}
	return 0
}

func (x *IpArpStatistics) GetIdbStructures() uint32 {
	if x != nil {
		return x.IdbStructures
	}
	return 0
}

var File_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDesc = []byte{
	0x0a, 0x66, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x61, 0x72, 0x70,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x69, 0x70, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x72, 0x70, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x61, 0x72, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x69, 0x70, 0x5f, 0x61,
	0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x0a, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x61, 0x72,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x74, 0x67, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x47, 0x72, 0x61, 0x74, 0x67, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x74,
	0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x72, 0x61, 0x74, 0x75,
	0x69, 0x74, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e,
	0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1d,
	0x61, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x72, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x22, 0x61, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x61, 0x72, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x62,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x69, 0x64, 0x62, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescData = file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_goTypes = []interface{}{
	(*IpArpStatistics_KEYS)(nil), // 0: cisco_ios_xr_ipv4_arp_oper.arp.nodes.node.traffic_interfaces.traffic_interface.ip_arp_statistics_KEYS
	(*IpArpStatistics)(nil),      // 1: cisco_ios_xr_ipv4_arp_oper.arp.nodes.node.traffic_interfaces.traffic_interface.ip_arp_statistics
}
var file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_init()
}
func file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_init() {
	if File_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpArpStatistics_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpArpStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto = out.File
	file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_arp_oper_arp_nodes_node_traffic_interfaces_traffic_interface_ip_arp_statistics_proto_depIdxs = nil
}
