// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_drivers_media_eth_oper/ethernet_interface/interfaces/interface/ethernet_controller_driver_bag_v2_type.proto

package cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Ethernet bag for driver state for the show controllers command
type EthernetControllerDriverBagV2Type_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *EthernetControllerDriverBagV2Type_KEYS) Reset() {
	*x = EthernetControllerDriverBagV2Type_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetControllerDriverBagV2Type_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetControllerDriverBagV2Type_KEYS) ProtoMessage() {}

func (x *EthernetControllerDriverBagV2Type_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetControllerDriverBagV2Type_KEYS.ProtoReflect.Descriptor instead.
func (*EthernetControllerDriverBagV2Type_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{0}
}

func (x *EthernetControllerDriverBagV2Type_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type EthernetControllerDriverBagV2Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port Administrative State
	AdminState string `protobuf:"bytes,50,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	// Port Operational state - TRUE if up
	OperStateUp uint32 `protobuf:"varint,51,opt,name=oper_state_up,json=operStateUp,proto3" json:"oper_state_up,omitempty"`
	// PHY information
	PhyInfo *EthCtrlrPhyInfo `protobuf:"bytes,52,opt,name=phy_info,json=phyInfo,proto3" json:"phy_info,omitempty"`
	// Layer 1 information
	Layer1Info *EthCtrlrL1Info `protobuf:"bytes,53,opt,name=layer1_info,json=layer1Info,proto3" json:"layer1_info,omitempty"`
	// MAC Layer information
	MacInfo *EthCtrlrMacInfo `protobuf:"bytes,54,opt,name=mac_info,json=macInfo,proto3" json:"mac_info,omitempty"`
	// Transport state information
	TransportInfo *EthCtlrTransportInfo `protobuf:"bytes,55,opt,name=transport_info,json=transportInfo,proto3" json:"transport_info,omitempty"`
}

func (x *EthernetControllerDriverBagV2Type) Reset() {
	*x = EthernetControllerDriverBagV2Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetControllerDriverBagV2Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetControllerDriverBagV2Type) ProtoMessage() {}

func (x *EthernetControllerDriverBagV2Type) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetControllerDriverBagV2Type.ProtoReflect.Descriptor instead.
func (*EthernetControllerDriverBagV2Type) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{1}
}

func (x *EthernetControllerDriverBagV2Type) GetAdminState() string {
	if x != nil {
		return x.AdminState
	}
	return ""
}

func (x *EthernetControllerDriverBagV2Type) GetOperStateUp() uint32 {
	if x != nil {
		return x.OperStateUp
	}
	return 0
}

func (x *EthernetControllerDriverBagV2Type) GetPhyInfo() *EthCtrlrPhyInfo {
	if x != nil {
		return x.PhyInfo
	}
	return nil
}

func (x *EthernetControllerDriverBagV2Type) GetLayer1Info() *EthCtrlrL1Info {
	if x != nil {
		return x.Layer1Info
	}
	return nil
}

func (x *EthernetControllerDriverBagV2Type) GetMacInfo() *EthCtrlrMacInfo {
	if x != nil {
		return x.MacInfo
	}
	return nil
}

func (x *EthernetControllerDriverBagV2Type) GetTransportInfo() *EthCtlrTransportInfo {
	if x != nil {
		return x.TransportInfo
	}
	return nil
}

type EtherAutoneg_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TRUE if autonegotiation is enabled
	AutonegEnabled int32 `protobuf:"zigzag32,1,opt,name=autoneg_enabled,json=autonegEnabled,proto3" json:"autoneg_enabled,omitempty"`
	// Validity mask: 0x1 speed, 0x2 duplex, 0x4 flowcontrol, 0x8 fec
	Mask uint32 `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	// Restricted speed (if relevant bit is set in mask)
	Speed string `protobuf:"bytes,3,opt,name=speed,proto3" json:"speed,omitempty"`
	// Restricted duplex (if relevant bit is set in mask)
	Duplex string `protobuf:"bytes,4,opt,name=duplex,proto3" json:"duplex,omitempty"`
	// Restricted flowcontrol (if relevant bit is set in mask)
	Flowcontrol string `protobuf:"bytes,5,opt,name=flowcontrol,proto3" json:"flowcontrol,omitempty"`
	// If true, configuration overrides negotiated settings.  If false, negotiated settings in effect
	ConfigOverride int32 `protobuf:"zigzag32,6,opt,name=config_override,json=configOverride,proto3" json:"config_override,omitempty"`
	// Restricted FEC (if revelevant bit is set in mask)
	Fec string `protobuf:"bytes,7,opt,name=fec,proto3" json:"fec,omitempty"`
}

func (x *EtherAutoneg_) Reset() {
	*x = EtherAutoneg_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtherAutoneg_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtherAutoneg_) ProtoMessage() {}

func (x *EtherAutoneg_) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtherAutoneg_.ProtoReflect.Descriptor instead.
func (*EtherAutoneg_) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{2}
}

func (x *EtherAutoneg_) GetAutonegEnabled() int32 {
	if x != nil {
		return x.AutonegEnabled
	}
	return 0
}

func (x *EtherAutoneg_) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *EtherAutoneg_) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

func (x *EtherAutoneg_) GetDuplex() string {
	if x != nil {
		return x.Duplex
	}
	return ""
}

func (x *EtherAutoneg_) GetFlowcontrol() string {
	if x != nil {
		return x.Flowcontrol
	}
	return ""
}

func (x *EtherAutoneg_) GetConfigOverride() int32 {
	if x != nil {
		return x.ConfigOverride
	}
	return 0
}

func (x *EtherAutoneg_) GetFec() string {
	if x != nil {
		return x.Fec
	}
	return ""
}

type MacAddrType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MacAddrType) Reset() {
	*x = MacAddrType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAddrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAddrType) ProtoMessage() {}

func (x *MacAddrType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAddrType.ProtoReflect.Descriptor instead.
func (*MacAddrType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{3}
}

func (x *MacAddrType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EtherMcastMacType_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address
	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Mask for this MAC address
	Mask string `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *EtherMcastMacType_) Reset() {
	*x = EtherMcastMacType_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtherMcastMacType_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtherMcastMacType_) ProtoMessage() {}

func (x *EtherMcastMacType_) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtherMcastMacType_.ProtoReflect.Descriptor instead.
func (*EtherMcastMacType_) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{4}
}

func (x *EtherMcastMacType_) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EtherMcastMacType_) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type EthCtrlrPhyDomLaneAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transmit Laser Power Alarm
	TransmitLaserPower string `protobuf:"bytes,1,opt,name=transmit_laser_power,json=transmitLaserPower,proto3" json:"transmit_laser_power,omitempty"`
	// Received Optical Power Alarm
	ReceivedLaserPower string `protobuf:"bytes,2,opt,name=received_laser_power,json=receivedLaserPower,proto3" json:"received_laser_power,omitempty"`
	// Laser Bias Current Alarm
	LaserBiasCurrent string `protobuf:"bytes,3,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
}

func (x *EthCtrlrPhyDomLaneAlarms) Reset() {
	*x = EthCtrlrPhyDomLaneAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrPhyDomLaneAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrPhyDomLaneAlarms) ProtoMessage() {}

func (x *EthCtrlrPhyDomLaneAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrPhyDomLaneAlarms.ProtoReflect.Descriptor instead.
func (*EthCtrlrPhyDomLaneAlarms) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{5}
}

func (x *EthCtrlrPhyDomLaneAlarms) GetTransmitLaserPower() string {
	if x != nil {
		return x.TransmitLaserPower
	}
	return ""
}

func (x *EthCtrlrPhyDomLaneAlarms) GetReceivedLaserPower() string {
	if x != nil {
		return x.ReceivedLaserPower
	}
	return ""
}

func (x *EthCtrlrPhyDomLaneAlarms) GetLaserBiasCurrent() string {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return ""
}

type EthCtrlrPhyLaneOptMonValidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wavelength 'per lane' field is valid
	WavelengthValid int32 `protobuf:"zigzag32,1,opt,name=wavelength_valid,json=wavelengthValid,proto3" json:"wavelength_valid,omitempty"`
	// The transmit power 'per lane' field is valid
	TransmitPowerValid int32 `protobuf:"zigzag32,2,opt,name=transmit_power_valid,json=transmitPowerValid,proto3" json:"transmit_power_valid,omitempty"`
	// The receive power 'per lane' field is valid
	ReceivePowerValid int32 `protobuf:"zigzag32,3,opt,name=receive_power_valid,json=receivePowerValid,proto3" json:"receive_power_valid,omitempty"`
	// The laser bias 'per lane' field is valid
	LaserBiasValid int32 `protobuf:"zigzag32,4,opt,name=laser_bias_valid,json=laserBiasValid,proto3" json:"laser_bias_valid,omitempty"`
}

func (x *EthCtrlrPhyLaneOptMonValidity) Reset() {
	*x = EthCtrlrPhyLaneOptMonValidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrPhyLaneOptMonValidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrPhyLaneOptMonValidity) ProtoMessage() {}

func (x *EthCtrlrPhyLaneOptMonValidity) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrPhyLaneOptMonValidity.ProtoReflect.Descriptor instead.
func (*EthCtrlrPhyLaneOptMonValidity) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{6}
}

func (x *EthCtrlrPhyLaneOptMonValidity) GetWavelengthValid() int32 {
	if x != nil {
		return x.WavelengthValid
	}
	return 0
}

func (x *EthCtrlrPhyLaneOptMonValidity) GetTransmitPowerValid() int32 {
	if x != nil {
		return x.TransmitPowerValid
	}
	return 0
}

func (x *EthCtrlrPhyLaneOptMonValidity) GetReceivePowerValid() int32 {
	if x != nil {
		return x.ReceivePowerValid
	}
	return 0
}

func (x *EthCtrlrPhyLaneOptMonValidity) GetLaserBiasValid() int32 {
	if x != nil {
		return x.LaserBiasValid
	}
	return 0
}

type EthCtrlrPhyLaneOptMon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Center Wavelength (nm*1000)
	CenterWavelength uint32 `protobuf:"varint,1,opt,name=center_wavelength,json=centerWavelength,proto3" json:"center_wavelength,omitempty"`
	// Transmit Laser Power (dBm*1000)
	TransmitLaserPower int32 `protobuf:"zigzag32,2,opt,name=transmit_laser_power,json=transmitLaserPower,proto3" json:"transmit_laser_power,omitempty"`
	// Received Optical Power (dBm*1000)
	ReceivedLaserPower int32 `protobuf:"zigzag32,3,opt,name=received_laser_power,json=receivedLaserPower,proto3" json:"received_laser_power,omitempty"`
	// Laser Bias Current (uAmps)
	LaserBiasCurrent uint32 `protobuf:"varint,4,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
	// Digital Optical Monitoring alarms
	DigOptMonAlarm *EthCtrlrPhyDomLaneAlarms `protobuf:"bytes,5,opt,name=dig_opt_mon_alarm,json=digOptMonAlarm,proto3" json:"dig_opt_mon_alarm,omitempty"`
}

func (x *EthCtrlrPhyLaneOptMon) Reset() {
	*x = EthCtrlrPhyLaneOptMon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrPhyLaneOptMon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrPhyLaneOptMon) ProtoMessage() {}

func (x *EthCtrlrPhyLaneOptMon) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrPhyLaneOptMon.ProtoReflect.Descriptor instead.
func (*EthCtrlrPhyLaneOptMon) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{7}
}

func (x *EthCtrlrPhyLaneOptMon) GetCenterWavelength() uint32 {
	if x != nil {
		return x.CenterWavelength
	}
	return 0
}

func (x *EthCtrlrPhyLaneOptMon) GetTransmitLaserPower() int32 {
	if x != nil {
		return x.TransmitLaserPower
	}
	return 0
}

func (x *EthCtrlrPhyLaneOptMon) GetReceivedLaserPower() int32 {
	if x != nil {
		return x.ReceivedLaserPower
	}
	return 0
}

func (x *EthCtrlrPhyLaneOptMon) GetLaserBiasCurrent() uint32 {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return 0
}

func (x *EthCtrlrPhyLaneOptMon) GetDigOptMonAlarm() *EthCtrlrPhyDomLaneAlarms {
	if x != nil {
		return x.DigOptMonAlarm
	}
	return nil
}

type EthCtrlrPhyDomAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transceiver Temperature Alarm
	TransceiverTemperature string `protobuf:"bytes,1,opt,name=transceiver_temperature,json=transceiverTemperature,proto3" json:"transceiver_temperature,omitempty"`
	// Transceiver Voltage Alarm
	TransceiverVoltage string `protobuf:"bytes,2,opt,name=transceiver_voltage,json=transceiverVoltage,proto3" json:"transceiver_voltage,omitempty"`
	// Transmit Laser Power Alarm
	TransmitLaserPower string `protobuf:"bytes,3,opt,name=transmit_laser_power,json=transmitLaserPower,proto3" json:"transmit_laser_power,omitempty"`
	// Received Optical Power Alarm
	ReceivedLaserPower string `protobuf:"bytes,4,opt,name=received_laser_power,json=receivedLaserPower,proto3" json:"received_laser_power,omitempty"`
	// Laser Bias Current Alarm
	LaserBiasCurrent string `protobuf:"bytes,5,opt,name=laser_bias_current,json=laserBiasCurrent,proto3" json:"laser_bias_current,omitempty"`
}

func (x *EthCtrlrPhyDomAlarms) Reset() {
	*x = EthCtrlrPhyDomAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrPhyDomAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrPhyDomAlarms) ProtoMessage() {}

func (x *EthCtrlrPhyDomAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrPhyDomAlarms.ProtoReflect.Descriptor instead.
func (*EthCtrlrPhyDomAlarms) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{8}
}

func (x *EthCtrlrPhyDomAlarms) GetTransceiverTemperature() string {
	if x != nil {
		return x.TransceiverTemperature
	}
	return ""
}

func (x *EthCtrlrPhyDomAlarms) GetTransceiverVoltage() string {
	if x != nil {
		return x.TransceiverVoltage
	}
	return ""
}

func (x *EthCtrlrPhyDomAlarms) GetTransmitLaserPower() string {
	if x != nil {
		return x.TransmitLaserPower
	}
	return ""
}

func (x *EthCtrlrPhyDomAlarms) GetReceivedLaserPower() string {
	if x != nil {
		return x.ReceivedLaserPower
	}
	return ""
}

func (x *EthCtrlrPhyDomAlarms) GetLaserBiasCurrent() string {
	if x != nil {
		return x.LaserBiasCurrent
	}
	return ""
}

type EthCtrlrPhyDomThresholdValidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The temperature fields are valid
	TemperatureValid int32 `protobuf:"zigzag32,1,opt,name=temperature_valid,json=temperatureValid,proto3" json:"temperature_valid,omitempty"`
	// The voltage fields are valid
	VoltageValid int32 `protobuf:"zigzag32,2,opt,name=voltage_valid,json=voltageValid,proto3" json:"voltage_valid,omitempty"`
	// The laser bias fields are valid
	LaserBiasValid int32 `protobuf:"zigzag32,3,opt,name=laser_bias_valid,json=laserBiasValid,proto3" json:"laser_bias_valid,omitempty"`
	// The transmit power fields are valid
	TransmitPowerValid int32 `protobuf:"zigzag32,4,opt,name=transmit_power_valid,json=transmitPowerValid,proto3" json:"transmit_power_valid,omitempty"`
	// The receive power fields are valid
	ReceivePowerValid int32 `protobuf:"zigzag32,5,opt,name=receive_power_valid,json=receivePowerValid,proto3" json:"receive_power_valid,omitempty"`
}

func (x *EthCtrlrPhyDomThresholdValidity) Reset() {
	*x = EthCtrlrPhyDomThresholdValidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrPhyDomThresholdValidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrPhyDomThresholdValidity) ProtoMessage() {}

func (x *EthCtrlrPhyDomThresholdValidity) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrPhyDomThresholdValidity.ProtoReflect.Descriptor instead.
func (*EthCtrlrPhyDomThresholdValidity) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{9}
}

func (x *EthCtrlrPhyDomThresholdValidity) GetTemperatureValid() int32 {
	if x != nil {
		return x.TemperatureValid
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholdValidity) GetVoltageValid() int32 {
	if x != nil {
		return x.VoltageValid
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholdValidity) GetLaserBiasValid() int32 {
	if x != nil {
		return x.LaserBiasValid
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholdValidity) GetTransmitPowerValid() int32 {
	if x != nil {
		return x.TransmitPowerValid
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholdValidity) GetReceivePowerValid() int32 {
	if x != nil {
		return x.ReceivePowerValid
	}
	return 0
}

type EthCtrlrPhyDomThresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field validity
	FieldValidity *EthCtrlrPhyDomThresholdValidity `protobuf:"bytes,1,opt,name=field_validity,json=fieldValidity,proto3" json:"field_validity,omitempty"`
	// Transceiver high temperature alarm threshold (mDegrees C)
	TransceiverTemperatureAlarmHigh int32 `protobuf:"zigzag32,2,opt,name=transceiver_temperature_alarm_high,json=transceiverTemperatureAlarmHigh,proto3" json:"transceiver_temperature_alarm_high,omitempty"`
	// Transceiver high temperature warning threshold (mDegrees C)
	TransceiverTemperatureWarningHigh int32 `protobuf:"zigzag32,3,opt,name=transceiver_temperature_warning_high,json=transceiverTemperatureWarningHigh,proto3" json:"transceiver_temperature_warning_high,omitempty"`
	// Transceiver low temperature warning threshold (mDegrees C)
	TransceiverTemperatureWarningLow int32 `protobuf:"zigzag32,4,opt,name=transceiver_temperature_warning_low,json=transceiverTemperatureWarningLow,proto3" json:"transceiver_temperature_warning_low,omitempty"`
	// Transceiver low temperature alarm threshold (mDegrees C)
	TransceiverTemperatureAlarmLow int32 `protobuf:"zigzag32,5,opt,name=transceiver_temperature_alarm_low,json=transceiverTemperatureAlarmLow,proto3" json:"transceiver_temperature_alarm_low,omitempty"`
	// Transceiver high voltage alarm threshold (mV)
	TransceiverVoltageAlarmHigh uint32 `protobuf:"varint,6,opt,name=transceiver_voltage_alarm_high,json=transceiverVoltageAlarmHigh,proto3" json:"transceiver_voltage_alarm_high,omitempty"`
	// Transceiver high voltage warning threshold (mV)
	TransceiverVoltageWarningHigh uint32 `protobuf:"varint,7,opt,name=transceiver_voltage_warning_high,json=transceiverVoltageWarningHigh,proto3" json:"transceiver_voltage_warning_high,omitempty"`
	// Transceiver low voltage warning threshold (mV)
	TransceiverVoltageWarningLow uint32 `protobuf:"varint,8,opt,name=transceiver_voltage_warning_low,json=transceiverVoltageWarningLow,proto3" json:"transceiver_voltage_warning_low,omitempty"`
	// Transceiver low voltage alarm threshold (mV)
	TransceiverVoltageAlarmLow uint32 `protobuf:"varint,9,opt,name=transceiver_voltage_alarm_low,json=transceiverVoltageAlarmLow,proto3" json:"transceiver_voltage_alarm_low,omitempty"`
	// Laser bias high alarm threshold (uA)
	LaserBiasAlarmHigh uint32 `protobuf:"varint,10,opt,name=laser_bias_alarm_high,json=laserBiasAlarmHigh,proto3" json:"laser_bias_alarm_high,omitempty"`
	// Laser bias high warning threshold (uA)
	LaserBiasWarningHigh uint32 `protobuf:"varint,11,opt,name=laser_bias_warning_high,json=laserBiasWarningHigh,proto3" json:"laser_bias_warning_high,omitempty"`
	// Laser bias low warning threshold (uA)
	LaserBiasWarningLow uint32 `protobuf:"varint,12,opt,name=laser_bias_warning_low,json=laserBiasWarningLow,proto3" json:"laser_bias_warning_low,omitempty"`
	// Laser bias low alarm threshold (uA)
	LaserBiasAlarmLow uint32 `protobuf:"varint,13,opt,name=laser_bias_alarm_low,json=laserBiasAlarmLow,proto3" json:"laser_bias_alarm_low,omitempty"`
	// High optical transmit power alarm threshold (uW)
	OpticalTransmitPowerAlarmHigh uint32 `protobuf:"varint,14,opt,name=optical_transmit_power_alarm_high,json=opticalTransmitPowerAlarmHigh,proto3" json:"optical_transmit_power_alarm_high,omitempty"`
	// High optical transmit power warning threshold (uW)
	OpticalTransmitPowerWarningHigh uint32 `protobuf:"varint,15,opt,name=optical_transmit_power_warning_high,json=opticalTransmitPowerWarningHigh,proto3" json:"optical_transmit_power_warning_high,omitempty"`
	// Low optical transmit power warning threshold (uW)
	OpticalTransmitPowerWarningLow uint32 `protobuf:"varint,16,opt,name=optical_transmit_power_warning_low,json=opticalTransmitPowerWarningLow,proto3" json:"optical_transmit_power_warning_low,omitempty"`
	// Low optical transmit power alarm threshold (uW)
	OpticalTransmitPowerAlarmLow uint32 `protobuf:"varint,17,opt,name=optical_transmit_power_alarm_low,json=opticalTransmitPowerAlarmLow,proto3" json:"optical_transmit_power_alarm_low,omitempty"`
	// High optical receive power alarm threshold (uW)
	OpticalReceivePowerAlarmHigh uint32 `protobuf:"varint,18,opt,name=optical_receive_power_alarm_high,json=opticalReceivePowerAlarmHigh,proto3" json:"optical_receive_power_alarm_high,omitempty"`
	// High optical receive power warning threshold (uW)
	OpticalReceivePowerWarningHigh uint32 `protobuf:"varint,19,opt,name=optical_receive_power_warning_high,json=opticalReceivePowerWarningHigh,proto3" json:"optical_receive_power_warning_high,omitempty"`
	// Low optical receive power warning threshold (uW)
	OpticalReceivePowerWarningLow uint32 `protobuf:"varint,20,opt,name=optical_receive_power_warning_low,json=opticalReceivePowerWarningLow,proto3" json:"optical_receive_power_warning_low,omitempty"`
	// Low optical receive power alarm threshold (uW)
	OpticalReceivePowerAlarmLow uint32 `protobuf:"varint,21,opt,name=optical_receive_power_alarm_low,json=opticalReceivePowerAlarmLow,proto3" json:"optical_receive_power_alarm_low,omitempty"`
}

func (x *EthCtrlrPhyDomThresholds) Reset() {
	*x = EthCtrlrPhyDomThresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrPhyDomThresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrPhyDomThresholds) ProtoMessage() {}

func (x *EthCtrlrPhyDomThresholds) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrPhyDomThresholds.ProtoReflect.Descriptor instead.
func (*EthCtrlrPhyDomThresholds) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{10}
}

func (x *EthCtrlrPhyDomThresholds) GetFieldValidity() *EthCtrlrPhyDomThresholdValidity {
	if x != nil {
		return x.FieldValidity
	}
	return nil
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureAlarmHigh() int32 {
	if x != nil {
		return x.TransceiverTemperatureAlarmHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureWarningHigh() int32 {
	if x != nil {
		return x.TransceiverTemperatureWarningHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureWarningLow() int32 {
	if x != nil {
		return x.TransceiverTemperatureWarningLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverTemperatureAlarmLow() int32 {
	if x != nil {
		return x.TransceiverTemperatureAlarmLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverVoltageAlarmHigh() uint32 {
	if x != nil {
		return x.TransceiverVoltageAlarmHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverVoltageWarningHigh() uint32 {
	if x != nil {
		return x.TransceiverVoltageWarningHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverVoltageWarningLow() uint32 {
	if x != nil {
		return x.TransceiverVoltageWarningLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetTransceiverVoltageAlarmLow() uint32 {
	if x != nil {
		return x.TransceiverVoltageAlarmLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetLaserBiasAlarmHigh() uint32 {
	if x != nil {
		return x.LaserBiasAlarmHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetLaserBiasWarningHigh() uint32 {
	if x != nil {
		return x.LaserBiasWarningHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetLaserBiasWarningLow() uint32 {
	if x != nil {
		return x.LaserBiasWarningLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetLaserBiasAlarmLow() uint32 {
	if x != nil {
		return x.LaserBiasAlarmLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerAlarmHigh() uint32 {
	if x != nil {
		return x.OpticalTransmitPowerAlarmHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerWarningHigh() uint32 {
	if x != nil {
		return x.OpticalTransmitPowerWarningHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerWarningLow() uint32 {
	if x != nil {
		return x.OpticalTransmitPowerWarningLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalTransmitPowerAlarmLow() uint32 {
	if x != nil {
		return x.OpticalTransmitPowerAlarmLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerAlarmHigh() uint32 {
	if x != nil {
		return x.OpticalReceivePowerAlarmHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerWarningHigh() uint32 {
	if x != nil {
		return x.OpticalReceivePowerWarningHigh
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerWarningLow() uint32 {
	if x != nil {
		return x.OpticalReceivePowerWarningLow
	}
	return 0
}

func (x *EthCtrlrPhyDomThresholds) GetOpticalReceivePowerAlarmLow() uint32 {
	if x != nil {
		return x.OpticalReceivePowerAlarmLow
	}
	return 0
}

type EtherPhyDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the port optics manufacturer
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Part number for the port optics
	VendorPartNumber string `protobuf:"bytes,2,opt,name=vendor_part_number,json=vendorPartNumber,proto3" json:"vendor_part_number,omitempty"`
	// Serial number for the port optics
	VendorSerialNumber string `protobuf:"bytes,3,opt,name=vendor_serial_number,json=vendorSerialNumber,proto3" json:"vendor_serial_number,omitempty"`
	// The temperature of the transceiver (mDegrees C)
	TransceiverTemperature int32 `protobuf:"zigzag32,4,opt,name=transceiver_temperature,json=transceiverTemperature,proto3" json:"transceiver_temperature,omitempty"`
	// The input voltage to the transceiver (mV)
	TransceiverVoltage int32 `protobuf:"zigzag32,5,opt,name=transceiver_voltage,json=transceiverVoltage,proto3" json:"transceiver_voltage,omitempty"`
	// The transceiver transmit laser power (uW)
	TransceiverTxPower int32 `protobuf:"zigzag32,6,opt,name=transceiver_tx_power,json=transceiverTxPower,proto3" json:"transceiver_tx_power,omitempty"`
	// The transceiver receive optical power (uW)
	TransceiverRxPower int32 `protobuf:"zigzag32,7,opt,name=transceiver_rx_power,json=transceiverRxPower,proto3" json:"transceiver_rx_power,omitempty"`
	// The laser bias of the transceiver (uA)
	TransceiverTxBias int32 `protobuf:"zigzag32,8,opt,name=transceiver_tx_bias,json=transceiverTxBias,proto3" json:"transceiver_tx_bias,omitempty"`
	// Digital Optical Monitoring (per lane information)
	Lane []*EthCtrlrPhyLaneOptMon `protobuf:"bytes,9,rep,name=lane,proto3" json:"lane,omitempty"`
	// Digital Optical Monitoring (per lane information) validity
	LaneFieldValidity *EthCtrlrPhyLaneOptMonValidity `protobuf:"bytes,10,opt,name=lane_field_validity,json=laneFieldValidity,proto3" json:"lane_field_validity,omitempty"`
	// Digital Optical Monitoring alarm thresholds
	DigOptMonAlarmThresholds *EthCtrlrPhyDomThresholds `protobuf:"bytes,11,opt,name=dig_opt_mon_alarm_thresholds,json=digOptMonAlarmThresholds,proto3" json:"dig_opt_mon_alarm_thresholds,omitempty"`
	// Digital Optical Monitoring alarms
	DigOptMonAlarms *EthCtrlrPhyDomAlarms `protobuf:"bytes,12,opt,name=dig_opt_mon_alarms,json=digOptMonAlarms,proto3" json:"dig_opt_mon_alarms,omitempty"`
	// Wavelength of the optics being used in nm * 1000
	OpticsWavelength uint32 `protobuf:"varint,13,opt,name=optics_wavelength,json=opticsWavelength,proto3" json:"optics_wavelength,omitempty"`
}

func (x *EtherPhyDetails) Reset() {
	*x = EtherPhyDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtherPhyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtherPhyDetails) ProtoMessage() {}

func (x *EtherPhyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtherPhyDetails.ProtoReflect.Descriptor instead.
func (*EtherPhyDetails) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{11}
}

func (x *EtherPhyDetails) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *EtherPhyDetails) GetVendorPartNumber() string {
	if x != nil {
		return x.VendorPartNumber
	}
	return ""
}

func (x *EtherPhyDetails) GetVendorSerialNumber() string {
	if x != nil {
		return x.VendorSerialNumber
	}
	return ""
}

func (x *EtherPhyDetails) GetTransceiverTemperature() int32 {
	if x != nil {
		return x.TransceiverTemperature
	}
	return 0
}

func (x *EtherPhyDetails) GetTransceiverVoltage() int32 {
	if x != nil {
		return x.TransceiverVoltage
	}
	return 0
}

func (x *EtherPhyDetails) GetTransceiverTxPower() int32 {
	if x != nil {
		return x.TransceiverTxPower
	}
	return 0
}

func (x *EtherPhyDetails) GetTransceiverRxPower() int32 {
	if x != nil {
		return x.TransceiverRxPower
	}
	return 0
}

func (x *EtherPhyDetails) GetTransceiverTxBias() int32 {
	if x != nil {
		return x.TransceiverTxBias
	}
	return 0
}

func (x *EtherPhyDetails) GetLane() []*EthCtrlrPhyLaneOptMon {
	if x != nil {
		return x.Lane
	}
	return nil
}

func (x *EtherPhyDetails) GetLaneFieldValidity() *EthCtrlrPhyLaneOptMonValidity {
	if x != nil {
		return x.LaneFieldValidity
	}
	return nil
}

func (x *EtherPhyDetails) GetDigOptMonAlarmThresholds() *EthCtrlrPhyDomThresholds {
	if x != nil {
		return x.DigOptMonAlarmThresholds
	}
	return nil
}

func (x *EtherPhyDetails) GetDigOptMonAlarms() *EthCtrlrPhyDomAlarms {
	if x != nil {
		return x.DigOptMonAlarms
	}
	return nil
}

func (x *EtherPhyDetails) GetOpticsWavelength() uint32 {
	if x != nil {
		return x.OpticsWavelength
	}
	return 0
}

type EthCtrlrAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Received Loss of Signal
	ReceivedLossOfSignalAlarm string `protobuf:"bytes,1,opt,name=received_loss_of_signal_alarm,json=receivedLossOfSignalAlarm,proto3" json:"received_loss_of_signal_alarm,omitempty"`
	// PCS Loss of Block Lock
	PcsLossOfBlockLockAlarm string `protobuf:"bytes,2,opt,name=pcs_loss_of_block_lock_alarm,json=pcsLossOfBlockLockAlarm,proto3" json:"pcs_loss_of_block_lock_alarm,omitempty"`
	// Local Fault
	LocalFaultAlarm string `protobuf:"bytes,3,opt,name=local_fault_alarm,json=localFaultAlarm,proto3" json:"local_fault_alarm,omitempty"`
	// Remote Fault
	RemoteFaultAlarm string `protobuf:"bytes,4,opt,name=remote_fault_alarm,json=remoteFaultAlarm,proto3" json:"remote_fault_alarm,omitempty"`
	// SD-BER
	SdBerAlarm string `protobuf:"bytes,5,opt,name=sd_ber_alarm,json=sdBerAlarm,proto3" json:"sd_ber_alarm,omitempty"`
	// SF-BER
	SfBerAlarm string `protobuf:"bytes,6,opt,name=sf_ber_alarm,json=sfBerAlarm,proto3" json:"sf_ber_alarm,omitempty"`
	// Loss of Synchronization Data
	LossOfSynchronizationDataAlarm string `protobuf:"bytes,7,opt,name=loss_of_synchronization_data_alarm,json=lossOfSynchronizationDataAlarm,proto3" json:"loss_of_synchronization_data_alarm,omitempty"`
	// Hi-BER
	HiBerAlarm string `protobuf:"bytes,8,opt,name=hi_ber_alarm,json=hiBerAlarm,proto3" json:"hi_ber_alarm,omitempty"`
	// Squelch
	SquelchAlarm string `protobuf:"bytes,9,opt,name=squelch_alarm,json=squelchAlarm,proto3" json:"squelch_alarm,omitempty"`
}

func (x *EthCtrlrAlarms) Reset() {
	*x = EthCtrlrAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrAlarms) ProtoMessage() {}

func (x *EthCtrlrAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrAlarms.ProtoReflect.Descriptor instead.
func (*EthCtrlrAlarms) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{12}
}

func (x *EthCtrlrAlarms) GetReceivedLossOfSignalAlarm() string {
	if x != nil {
		return x.ReceivedLossOfSignalAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetPcsLossOfBlockLockAlarm() string {
	if x != nil {
		return x.PcsLossOfBlockLockAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetLocalFaultAlarm() string {
	if x != nil {
		return x.LocalFaultAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetRemoteFaultAlarm() string {
	if x != nil {
		return x.RemoteFaultAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetSdBerAlarm() string {
	if x != nil {
		return x.SdBerAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetSfBerAlarm() string {
	if x != nil {
		return x.SfBerAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetLossOfSynchronizationDataAlarm() string {
	if x != nil {
		return x.LossOfSynchronizationDataAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetHiBerAlarm() string {
	if x != nil {
		return x.HiBerAlarm
	}
	return ""
}

func (x *EthCtrlrAlarms) GetSquelchAlarm() string {
	if x != nil {
		return x.SquelchAlarm
	}
	return ""
}

type EthCtrlrErrorCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sync-header error count
	SyncHeaderErrors uint64 `protobuf:"varint,1,opt,name=sync_header_errors,json=syncHeaderErrors,proto3" json:"sync_header_errors,omitempty"`
	// PCS BIP error count
	PcsbipErrors uint64 `protobuf:"varint,2,opt,name=pcsbip_errors,json=pcsbipErrors,proto3" json:"pcsbip_errors,omitempty"`
}

func (x *EthCtrlrErrorCounters) Reset() {
	*x = EthCtrlrErrorCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrErrorCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrErrorCounters) ProtoMessage() {}

func (x *EthCtrlrErrorCounters) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrErrorCounters.ProtoReflect.Descriptor instead.
func (*EthCtrlrErrorCounters) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{13}
}

func (x *EthCtrlrErrorCounters) GetSyncHeaderErrors() uint64 {
	if x != nil {
		return x.SyncHeaderErrors
	}
	return 0
}

func (x *EthCtrlrErrorCounters) GetPcsbipErrors() uint64 {
	if x != nil {
		return x.PcsbipErrors
	}
	return 0
}

type EtherBerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BER threshold for signal to degrade
	SignalDegradeThreshold uint32 `protobuf:"varint,1,opt,name=signal_degrade_threshold,json=signalDegradeThreshold,proto3" json:"signal_degrade_threshold,omitempty"`
	// Report alarm to indicate signal degrade
	SignalDegradeAlarm int32 `protobuf:"zigzag32,2,opt,name=signal_degrade_alarm,json=signalDegradeAlarm,proto3" json:"signal_degrade_alarm,omitempty"`
	// BER threshold for signal to fail
	SignalFailThreshold uint32 `protobuf:"varint,3,opt,name=signal_fail_threshold,json=signalFailThreshold,proto3" json:"signal_fail_threshold,omitempty"`
	// Report alarm to indicate signal failure
	SignalFailAlarm int32 `protobuf:"zigzag32,4,opt,name=signal_fail_alarm,json=signalFailAlarm,proto3" json:"signal_fail_alarm,omitempty"`
	// Whether drivers should signal remote faults
	SignalRemoteFault int32 `protobuf:"zigzag32,5,opt,name=signal_remote_fault,json=signalRemoteFault,proto3" json:"signal_remote_fault,omitempty"`
}

func (x *EtherBerSettings) Reset() {
	*x = EtherBerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtherBerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtherBerSettings) ProtoMessage() {}

func (x *EtherBerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtherBerSettings.ProtoReflect.Descriptor instead.
func (*EtherBerSettings) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{14}
}

func (x *EtherBerSettings) GetSignalDegradeThreshold() uint32 {
	if x != nil {
		return x.SignalDegradeThreshold
	}
	return 0
}

func (x *EtherBerSettings) GetSignalDegradeAlarm() int32 {
	if x != nil {
		return x.SignalDegradeAlarm
	}
	return 0
}

func (x *EtherBerSettings) GetSignalFailThreshold() uint32 {
	if x != nil {
		return x.SignalFailThreshold
	}
	return 0
}

func (x *EtherBerSettings) GetSignalFailAlarm() int32 {
	if x != nil {
		return x.SignalFailAlarm
	}
	return 0
}

func (x *EtherBerSettings) GetSignalRemoteFault() int32 {
	if x != nil {
		return x.SignalRemoteFault
	}
	return 0
}

type EthBerMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not BER monitoring is supported
	Supported int32 `protobuf:"zigzag32,1,opt,name=supported,proto3" json:"supported,omitempty"`
	// The BER monitoring settings to be applied
	Settings *EtherBerSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *EthBerMonitoring) Reset() {
	*x = EthBerMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthBerMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthBerMonitoring) ProtoMessage() {}

func (x *EthBerMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthBerMonitoring.ProtoReflect.Descriptor instead.
func (*EthBerMonitoring) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{15}
}

func (x *EthBerMonitoring) GetSupported() int32 {
	if x != nil {
		return x.Supported
	}
	return 0
}

func (x *EthBerMonitoring) GetSettings() *EtherBerSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type EthCtrlrUcastMacFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC addresses in the unicast ingress destination MAC filter
	UnicastMacAddresses []*MacAddrType `protobuf:"bytes,1,rep,name=unicast_mac_addresses,json=unicastMacAddresses,proto3" json:"unicast_mac_addresses,omitempty"`
}

func (x *EthCtrlrUcastMacFilter) Reset() {
	*x = EthCtrlrUcastMacFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrUcastMacFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrUcastMacFilter) ProtoMessage() {}

func (x *EthCtrlrUcastMacFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrUcastMacFilter.ProtoReflect.Descriptor instead.
func (*EthCtrlrUcastMacFilter) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{16}
}

func (x *EthCtrlrUcastMacFilter) GetUnicastMacAddresses() []*MacAddrType {
	if x != nil {
		return x.UnicastMacAddresses
	}
	return nil
}

type EthCtrlrMcastMacFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the port is in multicast promiscuous mode
	MulticastPromiscuous uint32 `protobuf:"varint,1,opt,name=multicast_promiscuous,json=multicastPromiscuous,proto3" json:"multicast_promiscuous,omitempty"`
	// MAC addresses in the multicast ingress destination MAC filter
	MulticastMacAddresses []*EtherMcastMacType_ `protobuf:"bytes,2,rep,name=multicast_mac_addresses,json=multicastMacAddresses,proto3" json:"multicast_mac_addresses,omitempty"`
}

func (x *EthCtrlrMcastMacFilter) Reset() {
	*x = EthCtrlrMcastMacFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrMcastMacFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrMcastMacFilter) ProtoMessage() {}

func (x *EthCtrlrMcastMacFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrMcastMacFilter.ProtoReflect.Descriptor instead.
func (*EthCtrlrMcastMacFilter) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{17}
}

func (x *EthCtrlrMcastMacFilter) GetMulticastPromiscuous() uint32 {
	if x != nil {
		return x.MulticastPromiscuous
	}
	return 0
}

func (x *EthCtrlrMcastMacFilter) GetMulticastMacAddresses() []*EtherMcastMacType_ {
	if x != nil {
		return x.MulticastMacAddresses
	}
	return nil
}

type EtherFecDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port operational FEC type
	Fec string `protobuf:"bytes,1,opt,name=fec,proto3" json:"fec,omitempty"`
	// Corrected codeword error count
	CorrectedCodewordCount uint64 `protobuf:"varint,2,opt,name=corrected_codeword_count,json=correctedCodewordCount,proto3" json:"corrected_codeword_count,omitempty"`
	// Uncorrected codeword error count
	UncorrectedCodewordCount uint64 `protobuf:"varint,3,opt,name=uncorrected_codeword_count,json=uncorrectedCodewordCount,proto3" json:"uncorrected_codeword_count,omitempty"`
}

func (x *EtherFecDetails) Reset() {
	*x = EtherFecDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtherFecDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtherFecDetails) ProtoMessage() {}

func (x *EtherFecDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtherFecDetails.ProtoReflect.Descriptor instead.
func (*EtherFecDetails) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{18}
}

func (x *EtherFecDetails) GetFec() string {
	if x != nil {
		return x.Fec
	}
	return ""
}

func (x *EtherFecDetails) GetCorrectedCodewordCount() uint64 {
	if x != nil {
		return x.CorrectedCodewordCount
	}
	return 0
}

func (x *EtherFecDetails) GetUncorrectedCodewordCount() uint64 {
	if x != nil {
		return x.UncorrectedCodewordCount
	}
	return 0
}

type EtherPfcDetailsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port operational priority flow control
	PriorityFlowcontrol string `protobuf:"bytes,1,opt,name=priority_flowcontrol,json=priorityFlowcontrol,proto3" json:"priority_flowcontrol,omitempty"`
	// Priority bitmap
	PriorityEnabledBitmap uint32 `protobuf:"varint,2,opt,name=priority_enabled_bitmap,json=priorityEnabledBitmap,proto3" json:"priority_enabled_bitmap,omitempty"`
	// RX Frame counts
	RxFrames []uint64 `protobuf:"varint,3,rep,packed,name=rx_frames,json=rxFrames,proto3" json:"rx_frames,omitempty"`
	// TX Frame counts
	TxFrames []uint64 `protobuf:"varint,4,rep,packed,name=tx_frames,json=txFrames,proto3" json:"tx_frames,omitempty"`
}

func (x *EtherPfcDetailsType) Reset() {
	*x = EtherPfcDetailsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtherPfcDetailsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtherPfcDetailsType) ProtoMessage() {}

func (x *EtherPfcDetailsType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtherPfcDetailsType.ProtoReflect.Descriptor instead.
func (*EtherPfcDetailsType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{19}
}

func (x *EtherPfcDetailsType) GetPriorityFlowcontrol() string {
	if x != nil {
		return x.PriorityFlowcontrol
	}
	return ""
}

func (x *EtherPfcDetailsType) GetPriorityEnabledBitmap() uint32 {
	if x != nil {
		return x.PriorityEnabledBitmap
	}
	return 0
}

func (x *EtherPfcDetailsType) GetRxFrames() []uint64 {
	if x != nil {
		return x.RxFrames
	}
	return nil
}

func (x *EtherPfcDetailsType) GetTxFrames() []uint64 {
	if x != nil {
		return x.TxFrames
	}
	return nil
}

type EthCtrlrPhyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port media type
	MediaType string `protobuf:"bytes,1,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// Presence of PHY
	PhyPresent string `protobuf:"bytes,2,opt,name=phy_present,json=phyPresent,proto3" json:"phy_present,omitempty"`
	// Details about the PHY
	PhyDetails *EtherPhyDetails `protobuf:"bytes,3,opt,name=phy_details,json=phyDetails,proto3" json:"phy_details,omitempty"`
	// Port operational loopback
	Loopback string `protobuf:"bytes,4,opt,name=loopback,proto3" json:"loopback,omitempty"`
	// Forward Error Correction information
	FecDetails *EtherFecDetails `protobuf:"bytes,5,opt,name=fec_details,json=fecDetails,proto3" json:"fec_details,omitempty"`
}

func (x *EthCtrlrPhyInfo) Reset() {
	*x = EthCtrlrPhyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrPhyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrPhyInfo) ProtoMessage() {}

func (x *EthCtrlrPhyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrPhyInfo.ProtoReflect.Descriptor instead.
func (*EthCtrlrPhyInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{20}
}

func (x *EthCtrlrPhyInfo) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *EthCtrlrPhyInfo) GetPhyPresent() string {
	if x != nil {
		return x.PhyPresent
	}
	return ""
}

func (x *EthCtrlrPhyInfo) GetPhyDetails() *EtherPhyDetails {
	if x != nil {
		return x.PhyDetails
	}
	return nil
}

func (x *EthCtrlrPhyInfo) GetLoopback() string {
	if x != nil {
		return x.Loopback
	}
	return ""
}

func (x *EthCtrlrPhyInfo) GetFecDetails() *EtherFecDetails {
	if x != nil {
		return x.FecDetails
	}
	return nil
}

type EthCtrlrL1Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link state
	LinkState string `protobuf:"bytes,1,opt,name=link_state,json=linkState,proto3" json:"link_state,omitempty"`
	// State of the LED
	LedState string `protobuf:"bytes,2,opt,name=led_state,json=ledState,proto3" json:"led_state,omitempty"`
	// Port autonegotiation configuration settings
	Autoneg *EtherAutoneg_ `protobuf:"bytes,3,opt,name=autoneg,proto3" json:"autoneg,omitempty"`
	// Port operational speed
	Speed string `protobuf:"bytes,4,opt,name=speed,proto3" json:"speed,omitempty"`
	// Port operational duplexity
	Duplex string `protobuf:"bytes,5,opt,name=duplex,proto3" json:"duplex,omitempty"`
	// Port operational flow control
	Flowcontrol string `protobuf:"bytes,6,opt,name=flowcontrol,proto3" json:"flowcontrol,omitempty"`
	// Port operational inter-packet-gap
	Ipg string `protobuf:"bytes,7,opt,name=ipg,proto3" json:"ipg,omitempty"`
	// Current alarms
	CurrentAlarms *EthCtrlrAlarms `protobuf:"bytes,8,opt,name=current_alarms,json=currentAlarms,proto3" json:"current_alarms,omitempty"`
	// Previous alarms
	PreviousAlarms *EthCtrlrAlarms `protobuf:"bytes,9,opt,name=previous_alarms,json=previousAlarms,proto3" json:"previous_alarms,omitempty"`
	// Statistics for detected errors
	ErrorCounts *EthCtrlrErrorCounters `protobuf:"bytes,10,opt,name=error_counts,json=errorCounts,proto3" json:"error_counts,omitempty"`
	// BER monitoring details
	BerMonitoring *EthBerMonitoring `protobuf:"bytes,11,opt,name=ber_monitoring,json=berMonitoring,proto3" json:"ber_monitoring,omitempty"`
	// Laser Squelch - TRUE if enabled
	LaserSquelchEnabled uint32 `protobuf:"varint,12,opt,name=laser_squelch_enabled,json=laserSquelchEnabled,proto3" json:"laser_squelch_enabled,omitempty"`
	// Bandwidth utilization (hundredths of a percent)
	BandwidthUtilization uint32 `protobuf:"varint,13,opt,name=bandwidth_utilization,json=bandwidthUtilization,proto3" json:"bandwidth_utilization,omitempty"`
	// Priority flow control information
	PfcInfo *EtherPfcDetailsType `protobuf:"bytes,14,opt,name=pfc_info,json=pfcInfo,proto3" json:"pfc_info,omitempty"`
	// Port operational bandwidth
	Bandwidth uint64 `protobuf:"varint,15,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *EthCtrlrL1Info) Reset() {
	*x = EthCtrlrL1Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrL1Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrL1Info) ProtoMessage() {}

func (x *EthCtrlrL1Info) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrL1Info.ProtoReflect.Descriptor instead.
func (*EthCtrlrL1Info) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{21}
}

func (x *EthCtrlrL1Info) GetLinkState() string {
	if x != nil {
		return x.LinkState
	}
	return ""
}

func (x *EthCtrlrL1Info) GetLedState() string {
	if x != nil {
		return x.LedState
	}
	return ""
}

func (x *EthCtrlrL1Info) GetAutoneg() *EtherAutoneg_ {
	if x != nil {
		return x.Autoneg
	}
	return nil
}

func (x *EthCtrlrL1Info) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

func (x *EthCtrlrL1Info) GetDuplex() string {
	if x != nil {
		return x.Duplex
	}
	return ""
}

func (x *EthCtrlrL1Info) GetFlowcontrol() string {
	if x != nil {
		return x.Flowcontrol
	}
	return ""
}

func (x *EthCtrlrL1Info) GetIpg() string {
	if x != nil {
		return x.Ipg
	}
	return ""
}

func (x *EthCtrlrL1Info) GetCurrentAlarms() *EthCtrlrAlarms {
	if x != nil {
		return x.CurrentAlarms
	}
	return nil
}

func (x *EthCtrlrL1Info) GetPreviousAlarms() *EthCtrlrAlarms {
	if x != nil {
		return x.PreviousAlarms
	}
	return nil
}

func (x *EthCtrlrL1Info) GetErrorCounts() *EthCtrlrErrorCounters {
	if x != nil {
		return x.ErrorCounts
	}
	return nil
}

func (x *EthCtrlrL1Info) GetBerMonitoring() *EthBerMonitoring {
	if x != nil {
		return x.BerMonitoring
	}
	return nil
}

func (x *EthCtrlrL1Info) GetLaserSquelchEnabled() uint32 {
	if x != nil {
		return x.LaserSquelchEnabled
	}
	return 0
}

func (x *EthCtrlrL1Info) GetBandwidthUtilization() uint32 {
	if x != nil {
		return x.BandwidthUtilization
	}
	return 0
}

func (x *EthCtrlrL1Info) GetPfcInfo() *EtherPfcDetailsType {
	if x != nil {
		return x.PfcInfo
	}
	return nil
}

func (x *EthCtrlrL1Info) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type EthCtrlrMacInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port operational MTU
	Mtu uint32 `protobuf:"varint,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Port operational MRU
	Mru uint32 `protobuf:"varint,2,opt,name=mru,proto3" json:"mru,omitempty"`
	// Port Burned-In MAC address
	BurnedInMacAddress string `protobuf:"bytes,3,opt,name=burned_in_mac_address,json=burnedInMacAddress,proto3" json:"burned_in_mac_address,omitempty"`
	// Port operational MAC address
	OperationalMacAddress *MacAddrType `protobuf:"bytes,4,opt,name=operational_mac_address,json=operationalMacAddress,proto3" json:"operational_mac_address,omitempty"`
	// Port unicast MAC filter information
	UnicastMacFilters *EthCtrlrUcastMacFilter `protobuf:"bytes,5,opt,name=unicast_mac_filters,json=unicastMacFilters,proto3" json:"unicast_mac_filters,omitempty"`
	// Port multicast MAC filter information
	MulticastMacFilters *EthCtrlrMcastMacFilter `protobuf:"bytes,6,opt,name=multicast_mac_filters,json=multicastMacFilters,proto3" json:"multicast_mac_filters,omitempty"`
}

func (x *EthCtrlrMacInfo) Reset() {
	*x = EthCtrlrMacInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtrlrMacInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtrlrMacInfo) ProtoMessage() {}

func (x *EthCtrlrMacInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtrlrMacInfo.ProtoReflect.Descriptor instead.
func (*EthCtrlrMacInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{22}
}

func (x *EthCtrlrMacInfo) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *EthCtrlrMacInfo) GetMru() uint32 {
	if x != nil {
		return x.Mru
	}
	return 0
}

func (x *EthCtrlrMacInfo) GetBurnedInMacAddress() string {
	if x != nil {
		return x.BurnedInMacAddress
	}
	return ""
}

func (x *EthCtrlrMacInfo) GetOperationalMacAddress() *MacAddrType {
	if x != nil {
		return x.OperationalMacAddress
	}
	return nil
}

func (x *EthCtrlrMacInfo) GetUnicastMacFilters() *EthCtrlrUcastMacFilter {
	if x != nil {
		return x.UnicastMacFilters
	}
	return nil
}

func (x *EthCtrlrMacInfo) GetMulticastMacFilters() *EthCtrlrMcastMacFilter {
	if x != nil {
		return x.MulticastMacFilters
	}
	return nil
}

type EthCtlrTransportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maintenance Mode - TRUE if enabled
	MaintenanceModeEnabled uint32 `protobuf:"varint,1,opt,name=maintenance_mode_enabled,json=maintenanceModeEnabled,proto3" json:"maintenance_mode_enabled,omitempty"`
	// AINS Soak status
	AinsStatus string `protobuf:"bytes,2,opt,name=ains_status,json=ainsStatus,proto3" json:"ains_status,omitempty"`
	// Total duration (seconds) of AINS soak timer
	TotalDuration uint32 `protobuf:"varint,3,opt,name=total_duration,json=totalDuration,proto3" json:"total_duration,omitempty"`
	// Remaining duration (seconds) of AINS soak timer
	RemainingDuration uint32 `protobuf:"varint,4,opt,name=remaining_duration,json=remainingDuration,proto3" json:"remaining_duration,omitempty"`
}

func (x *EthCtlrTransportInfo) Reset() {
	*x = EthCtlrTransportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthCtlrTransportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthCtlrTransportInfo) ProtoMessage() {}

func (x *EthCtlrTransportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthCtlrTransportInfo.ProtoReflect.Descriptor instead.
func (*EthCtlrTransportInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP(), []int{23}
}

func (x *EthCtlrTransportInfo) GetMaintenanceModeEnabled() uint32 {
	if x != nil {
		return x.MaintenanceModeEnabled
	}
	return 0
}

func (x *EthCtlrTransportInfo) GetAinsStatus() string {
	if x != nil {
		return x.AinsStatus
	}
	return ""
}

func (x *EthCtlrTransportInfo) GetTotalDuration() uint32 {
	if x != nil {
		return x.TotalDuration
	}
	return 0
}

func (x *EthCtlrTransportInfo) GetRemainingDuration() uint32 {
	if x != nil {
		return x.RemainingDuration
	}
	return 0
}

var File_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDesc = []byte{
	0x0a, 0x78, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x76, 0x32, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x2b, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x76, 0x32, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x04,
	0x0a, 0x26, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x67,
	0x5f, 0x76, 0x32, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x7a, 0x0a,
	0x08, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74,
	0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x70, 0x68, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7f, 0x0a, 0x0b, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68,
	0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x6c, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7a, 0x0a, 0x08, 0x6d, 0x61,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63,
	0x74, 0x72, 0x6c, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d,
	0x61, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74,
	0x68, 0x5f, 0x63, 0x74, 0x6c, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x5f, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6e,
	0x65, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x75, 0x70, 0x6c,
	0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x63, 0x22,
	0x25, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x15, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x22, 0xb1, 0x01, 0x0a, 0x1d, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72,
	0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4c, 0x61,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x4c, 0x61, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x23, 0x65, 0x74, 0x68,
	0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x77, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xf3, 0x02, 0x0a, 0x1a, 0x65, 0x74, 0x68, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4c, 0x61, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x61, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65,
	0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x64, 0x6f,
	0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x0e, 0x64,
	0x69, 0x67, 0x4f, 0x70, 0x74, 0x4d, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x22, 0x96, 0x02,
	0x0a, 0x18, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f,
	0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4c, 0x61, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x61,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x24, 0x65, 0x74, 0x68, 0x5f, 0x63,
	0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xa9, 0x0c,
	0x0a, 0x1c, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f,
	0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x98,
	0x01, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f,
	0x70, 0x68, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x22, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x48, 0x69, 0x67, 0x68, 0x12, 0x4f, 0x0a, 0x24, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x67, 0x68, 0x12, 0x4d, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x77, 0x12, 0x49, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x6f,
	0x77, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x48, 0x69, 0x67, 0x68, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x67, 0x68, 0x12,
	0x45, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42,
	0x69, 0x61, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x48, 0x69, 0x67, 0x68, 0x12, 0x35, 0x0a, 0x17,
	0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x67, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61,
	0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x77,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61,
	0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x21, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x48,
	0x69, 0x67, 0x68, 0x12, 0x4c, 0x0a, 0x23, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x67,
	0x68, 0x12, 0x4a, 0x0a, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x77, 0x12, 0x46, 0x0a,
	0x20, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6c, 0x6f,
	0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x4c, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x48, 0x69, 0x67, 0x68, 0x12, 0x4a, 0x0a,
	0x22, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x67, 0x68, 0x12, 0x48, 0x0a, 0x21, 0x6f, 0x70, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x77, 0x12, 0x44, 0x0a, 0x1f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6f, 0x70,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x6f, 0x77, 0x22, 0x97, 0x08, 0x0a, 0x11, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x78,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54,
	0x78, 0x42, 0x69, 0x61, 0x73, 0x12, 0x7b, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x70, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74,
	0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65,
	0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x6c, 0x61, 0x6e,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x1c, 0x64, 0x69, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63,
	0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x18, 0x64, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x4d,
	0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x64, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x6f,
	0x6e, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68,
	0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x0f, 0x64, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x4d, 0x6f, 0x6e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x57, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0xc4, 0x03, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x3d, 0x0a, 0x1c, 0x70, 0x63,
	0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x70, 0x63, 0x73, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x64, 0x5f, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x42, 0x65, 0x72,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x66, 0x5f, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x66, 0x42,
	0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1e, 0x6c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x69, 0x5f, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x69, 0x42, 0x65, 0x72,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x71, 0x75, 0x65, 0x6c, 0x63, 0x68,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x71,
	0x75, 0x65, 0x6c, 0x63, 0x68, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x22, 0x6d, 0x0a, 0x18, 0x65, 0x74,
	0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x63, 0x73, 0x62, 0x69, 0x70, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x63, 0x73,
	0x62, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xaf, 0x01, 0x0a,
	0x12, 0x65, 0x74, 0x68, 0x5f, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x7b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xad,
	0x01, 0x0a, 0x1a, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x75, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x8e, 0x01,
	0x0a, 0x15, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xee,
	0x01, 0x0a, 0x1a, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f,
	0x75, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0x9d, 0x01, 0x0a, 0x11, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xbd, 0x01, 0x0a, 0x16, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x72, 0x78, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x74, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xf2, 0x02, 0x0a, 0x12, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x70, 0x68,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x70, 0x68, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x7f, 0x0a, 0x0b, 0x66, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x63,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x66, 0x65, 0x63, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0xd3, 0x08, 0x0a, 0x11, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72,
	0x6c, 0x72, 0x5f, 0x6c, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x65,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x65, 0x67, 0x5f, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x70, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x67, 0x12,
	0x84, 0x01, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74,
	0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65,
	0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12,
	0x88, 0x01, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x62,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x62, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x71, 0x75,
	0x65, 0x6c, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x53, 0x71, 0x75, 0x65, 0x6c, 0x63, 0x68,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x08,
	0x70, 0x66, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x66, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb8, 0x04, 0x0a, 0x12, 0x65,
	0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x74, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x72, 0x75, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x97, 0x01,
	0x0a, 0x13, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x72, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x63,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x72, 0x5f,
	0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x74,
	0x6c, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x69, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescData = file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDesc
)

func file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescData)
	})
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDescData
}

var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_goTypes = []interface{}{
	(*EthernetControllerDriverBagV2Type_KEYS)(nil), // 0: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type_KEYS
	(*EthernetControllerDriverBagV2Type)(nil),      // 1: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type
	(*EtherAutoneg_)(nil),                          // 2: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_autoneg_
	(*MacAddrType)(nil),                            // 3: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.mac_addr_type
	(*EtherMcastMacType_)(nil),                     // 4: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_mcast_mac_type_
	(*EthCtrlrPhyDomLaneAlarms)(nil),               // 5: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_lane_alarms
	(*EthCtrlrPhyLaneOptMonValidity)(nil),          // 6: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_lane_opt_mon_validity
	(*EthCtrlrPhyLaneOptMon)(nil),                  // 7: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_lane_opt_mon
	(*EthCtrlrPhyDomAlarms)(nil),                   // 8: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_alarms
	(*EthCtrlrPhyDomThresholdValidity)(nil),        // 9: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_threshold_validity
	(*EthCtrlrPhyDomThresholds)(nil),               // 10: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_thresholds
	(*EtherPhyDetails)(nil),                        // 11: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_phy_details
	(*EthCtrlrAlarms)(nil),                         // 12: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_alarms
	(*EthCtrlrErrorCounters)(nil),                  // 13: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_error_counters
	(*EtherBerSettings)(nil),                       // 14: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_ber_settings
	(*EthBerMonitoring)(nil),                       // 15: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ber_monitoring
	(*EthCtrlrUcastMacFilter)(nil),                 // 16: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_ucast_mac_filter
	(*EthCtrlrMcastMacFilter)(nil),                 // 17: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mcast_mac_filter
	(*EtherFecDetails)(nil),                        // 18: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_fec_details
	(*EtherPfcDetailsType)(nil),                    // 19: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_pfc_details_type
	(*EthCtrlrPhyInfo)(nil),                        // 20: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_info
	(*EthCtrlrL1Info)(nil),                         // 21: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info
	(*EthCtrlrMacInfo)(nil),                        // 22: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mac_info
	(*EthCtlrTransportInfo)(nil),                   // 23: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctlr_transport_info
}
var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_depIdxs = []int32{
	20, // 0: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type.phy_info:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_info
	21, // 1: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type.layer1_info:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info
	22, // 2: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type.mac_info:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mac_info
	23, // 3: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ethernet_controller_driver_bag_v2_type.transport_info:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctlr_transport_info
	5,  // 4: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_lane_opt_mon.dig_opt_mon_alarm:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_lane_alarms
	9,  // 5: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_thresholds.field_validity:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_threshold_validity
	7,  // 6: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_phy_details.lane:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_lane_opt_mon
	6,  // 7: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_phy_details.lane_field_validity:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_lane_opt_mon_validity
	10, // 8: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_phy_details.dig_opt_mon_alarm_thresholds:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_thresholds
	8,  // 9: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_phy_details.dig_opt_mon_alarms:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_dom_alarms
	14, // 10: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ber_monitoring.settings:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_ber_settings
	3,  // 11: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_ucast_mac_filter.unicast_mac_addresses:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.mac_addr_type
	4,  // 12: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mcast_mac_filter.multicast_mac_addresses:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_mcast_mac_type_
	11, // 13: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_info.phy_details:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_phy_details
	18, // 14: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_phy_info.fec_details:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_fec_details
	2,  // 15: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info.autoneg:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_autoneg_
	12, // 16: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info.current_alarms:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_alarms
	12, // 17: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info.previous_alarms:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_alarms
	13, // 18: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info.error_counts:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_error_counters
	15, // 19: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info.ber_monitoring:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ber_monitoring
	19, // 20: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_l1_info.pfc_info:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.ether_pfc_details_type
	3,  // 21: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mac_info.operational_mac_address:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.mac_addr_type
	16, // 22: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mac_info.unicast_mac_filters:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_ucast_mac_filter
	17, // 23: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mac_info.multicast_mac_filters:type_name -> cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface.eth_ctrlr_mcast_mac_filter
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_init()
}
func file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_init() {
	if File_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetControllerDriverBagV2Type_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetControllerDriverBagV2Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtherAutoneg_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAddrType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtherMcastMacType_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrPhyDomLaneAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrPhyLaneOptMonValidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrPhyLaneOptMon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrPhyDomAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrPhyDomThresholdValidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrPhyDomThresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtherPhyDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrErrorCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtherBerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthBerMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrUcastMacFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrMcastMacFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtherFecDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtherPfcDetailsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrPhyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrL1Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtrlrMacInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthCtlrTransportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto = out.File
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_rawDesc = nil
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_goTypes = nil
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_interfaces_interface_ethernet_controller_driver_bag_v2_type_proto_depIdxs = nil
}
