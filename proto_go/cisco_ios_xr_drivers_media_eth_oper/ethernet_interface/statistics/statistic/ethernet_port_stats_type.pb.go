// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_drivers_media_eth_oper/ethernet_interface/statistics/statistic/ethernet_port_stats_type.proto

package cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Port stats counters
type EthernetPortStatsType_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *EthernetPortStatsType_KEYS) Reset() {
	*x = EthernetPortStatsType_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetPortStatsType_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetPortStatsType_KEYS) ProtoMessage() {}

func (x *EthernetPortStatsType_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetPortStatsType_KEYS.ProtoReflect.Descriptor instead.
func (*EthernetPortStatsType_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescGZIP(), []int{0}
}

func (x *EthernetPortStatsType_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type EthernetPortStatsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total octets of all frames
	ReceivedTotalBytes uint64 `protobuf:"varint,50,opt,name=received_total_bytes,json=receivedTotalBytes,proto3" json:"received_total_bytes,omitempty"`
	// Total octets of all good frames
	ReceivedGoodBytes uint64 `protobuf:"varint,51,opt,name=received_good_bytes,json=receivedGoodBytes,proto3" json:"received_good_bytes,omitempty"`
	// All frames, good or bad
	ReceivedTotalFrames uint64 `protobuf:"varint,52,opt,name=received_total_frames,json=receivedTotalFrames,proto3" json:"received_total_frames,omitempty"`
	// All 802.1Q frames
	Received8021QFrames uint64 `protobuf:"varint,53,opt,name=received8021_q_frames,json=received8021QFrames,proto3" json:"received8021_q_frames,omitempty"`
	// All pause frames
	ReceivedPauseFrames uint64 `protobuf:"varint,54,opt,name=received_pause_frames,json=receivedPauseFrames,proto3" json:"received_pause_frames,omitempty"`
	// Unsupported MAC Control frames
	ReceivedUnknownOpcodes uint64 `protobuf:"varint,55,opt,name=received_unknown_opcodes,json=receivedUnknownOpcodes,proto3" json:"received_unknown_opcodes,omitempty"`
	// All 64 Octet Frame Count
	ReceivedTotal64OctetFrames uint64 `protobuf:"varint,56,opt,name=received_total64_octet_frames,json=receivedTotal64OctetFrames,proto3" json:"received_total64_octet_frames,omitempty"`
	// All 65-127 Octet Frame Count
	ReceivedTotalOctetFramesFrom65To127 uint64 `protobuf:"varint,57,opt,name=received_total_octet_frames_from65_to127,json=receivedTotalOctetFramesFrom65To127,proto3" json:"received_total_octet_frames_from65_to127,omitempty"`
	// All 128-255 Octet Frame Count
	ReceivedTotalOctetFramesFrom128To255 uint64 `protobuf:"varint,58,opt,name=received_total_octet_frames_from128_to255,json=receivedTotalOctetFramesFrom128To255,proto3" json:"received_total_octet_frames_from128_to255,omitempty"`
	// All 256-511 Octet Frame Count
	ReceivedTotalOctetFramesFrom256To511 uint64 `protobuf:"varint,59,opt,name=received_total_octet_frames_from256_to511,json=receivedTotalOctetFramesFrom256To511,proto3" json:"received_total_octet_frames_from256_to511,omitempty"`
	// All 512-1023 Octet Frame Count
	ReceivedTotalOctetFramesFrom512To1023 uint64 `protobuf:"varint,60,opt,name=received_total_octet_frames_from512_to1023,json=receivedTotalOctetFramesFrom512To1023,proto3" json:"received_total_octet_frames_from512_to1023,omitempty"`
	// All 1024-1518 Octet Frame Count
	ReceivedTotalOctetFramesFrom1024To1518 uint64 `protobuf:"varint,61,opt,name=received_total_octet_frames_from1024_to1518,json=receivedTotalOctetFramesFrom1024To1518,proto3" json:"received_total_octet_frames_from1024_to1518,omitempty"`
	// All > 1518 Octet Frame Count
	ReceivedTotalOctetFramesFrom1519ToMax uint64 `protobuf:"varint,62,opt,name=received_total_octet_frames_from1519_to_max,json=receivedTotalOctetFramesFrom1519ToMax,proto3" json:"received_total_octet_frames_from1519_to_max,omitempty"`
	// Received Good Frames
	ReceivedGoodFrames uint64 `protobuf:"varint,63,opt,name=received_good_frames,json=receivedGoodFrames,proto3" json:"received_good_frames,omitempty"`
	// Received unicast Frames
	ReceivedUnicastFrames uint64 `protobuf:"varint,64,opt,name=received_unicast_frames,json=receivedUnicastFrames,proto3" json:"received_unicast_frames,omitempty"`
	// Received multicast Frames
	ReceivedMulticastFrames uint64 `protobuf:"varint,65,opt,name=received_multicast_frames,json=receivedMulticastFrames,proto3" json:"received_multicast_frames,omitempty"`
	// Received broadcast Frames
	ReceivedBroadcastFrames uint64 `protobuf:"varint,66,opt,name=received_broadcast_frames,json=receivedBroadcastFrames,proto3" json:"received_broadcast_frames,omitempty"`
	// Drops due to buffer overrun
	NumberOfBufferOverrunPacketsDropped uint64 `protobuf:"varint,67,opt,name=number_of_buffer_overrun_packets_dropped,json=numberOfBufferOverrunPacketsDropped,proto3" json:"number_of_buffer_overrun_packets_dropped,omitempty"`
	// Drops due to packet abort
	NumberOfAbortedPacketsDropped uint64 `protobuf:"varint,68,opt,name=number_of_aborted_packets_dropped,json=numberOfAbortedPacketsDropped,proto3" json:"number_of_aborted_packets_dropped,omitempty"`
	// Drops due to invalid VLAN id
	NumberofInvalidVlanIdPacketsDropped uint64 `protobuf:"varint,69,opt,name=numberof_invalid_vlan_id_packets_dropped,json=numberofInvalidVlanIdPacketsDropped,proto3" json:"numberof_invalid_vlan_id_packets_dropped,omitempty"`
	// Drops due to the destination MAC not matching
	InvalidDestMacDropPackets uint64 `protobuf:"varint,70,opt,name=invalid_dest_mac_drop_packets,json=invalidDestMacDropPackets,proto3" json:"invalid_dest_mac_drop_packets,omitempty"`
	// Drops due to the encapsulation or ether type not matching
	InvalidEncapDropPackets uint64 `protobuf:"varint,71,opt,name=invalid_encap_drop_packets,json=invalidEncapDropPackets,proto3" json:"invalid_encap_drop_packets,omitempty"`
	// Any other drops not counted
	NumberOfMiscellaneousPacketsDropped uint64 `protobuf:"varint,72,opt,name=number_of_miscellaneous_packets_dropped,json=numberOfMiscellaneousPacketsDropped,proto3" json:"number_of_miscellaneous_packets_dropped,omitempty"`
	// Good frames > MRU, dropped
	DroppedGiantPacketsGreaterthanMru uint64 `protobuf:"varint,73,opt,name=dropped_giant_packets_greaterthan_mru,json=droppedGiantPacketsGreaterthanMru,proto3" json:"dropped_giant_packets_greaterthan_mru,omitempty"`
	// Good frames < 64 Octet, dropped
	DroppedEtherStatsUndersizePkts uint64 `protobuf:"varint,74,opt,name=dropped_ether_stats_undersize_pkts,json=droppedEtherStatsUndersizePkts,proto3" json:"dropped_ether_stats_undersize_pkts,omitempty"`
	// Bad Frames > MRU, dropped
	DroppedJabbersPacketsGreaterthanMru uint64 `protobuf:"varint,75,opt,name=dropped_jabbers_packets_greaterthan_mru,json=droppedJabbersPacketsGreaterthanMru,proto3" json:"dropped_jabbers_packets_greaterthan_mru,omitempty"`
	// Bad Frames < 64 Octet, dropped
	DroppedEtherStatsFragments uint64 `protobuf:"varint,76,opt,name=dropped_ether_stats_fragments,json=droppedEtherStatsFragments,proto3" json:"dropped_ether_stats_fragments,omitempty"`
	// Frames 64 - MRU with CRC error
	DroppedPacketsWithCrcAlignErrors uint64 `protobuf:"varint,77,opt,name=dropped_packets_with_crc_align_errors,json=droppedPacketsWithCrcAlignErrors,proto3" json:"dropped_packets_with_crc_align_errors,omitempty"`
	// All collision events
	EtherStatsCollisions uint64 `protobuf:"varint,78,opt,name=ether_stats_collisions,json=etherStatsCollisions,proto3" json:"ether_stats_collisions,omitempty"`
	// Symbol errors
	SymbolErrors uint64 `protobuf:"varint,79,opt,name=symbol_errors,json=symbolErrors,proto3" json:"symbol_errors,omitempty"`
	// Any other errors not counted
	DroppedMiscellaneousErrorPackets uint64 `protobuf:"varint,80,opt,name=dropped_miscellaneous_error_packets,json=droppedMiscellaneousErrorPackets,proto3" json:"dropped_miscellaneous_error_packets,omitempty"`
	// RFC2819 etherStatsOversizedPkts
	Rfc2819EtherStatsOversizedPkts uint64 `protobuf:"varint,81,opt,name=rfc2819_ether_stats_oversized_pkts,json=rfc2819EtherStatsOversizedPkts,proto3" json:"rfc2819_ether_stats_oversized_pkts,omitempty"`
	// RFC2819 etherStatsJabbers
	Rfc2819EtherStatsJabbers uint64 `protobuf:"varint,82,opt,name=rfc2819_ether_stats_jabbers,json=rfc2819EtherStatsJabbers,proto3" json:"rfc2819_ether_stats_jabbers,omitempty"`
	// RFC2819 etherStatsCRCAlignErrors
	Rfc2819EtherStatsCrcAlignErrors uint64 `protobuf:"varint,83,opt,name=rfc2819_ether_stats_crc_align_errors,json=rfc2819EtherStatsCrcAlignErrors,proto3" json:"rfc2819_ether_stats_crc_align_errors,omitempty"`
	// RFC3635 dot3StatsAlignmentErrors
	Rfc3635Dot3StatsAlignmentErrors uint64 `protobuf:"varint,84,opt,name=rfc3635dot3_stats_alignment_errors,json=rfc3635dot3StatsAlignmentErrors,proto3" json:"rfc3635dot3_stats_alignment_errors,omitempty"`
	// Total octets of all frames
	TotalBytesTransmitted uint64 `protobuf:"varint,85,opt,name=total_bytes_transmitted,json=totalBytesTransmitted,proto3" json:"total_bytes_transmitted,omitempty"`
	// Total octets of all good frames
	TotalGoodBytesTransmitted uint64 `protobuf:"varint,86,opt,name=total_good_bytes_transmitted,json=totalGoodBytesTransmitted,proto3" json:"total_good_bytes_transmitted,omitempty"`
	// All frames, good or bad
	TotalFramesTransmitted uint64 `protobuf:"varint,87,opt,name=total_frames_transmitted,json=totalFramesTransmitted,proto3" json:"total_frames_transmitted,omitempty"`
	// All 802.1Q frames
	Transmitted8021QFrames uint64 `protobuf:"varint,88,opt,name=transmitted8021_q_frames,json=transmitted8021QFrames,proto3" json:"transmitted8021_q_frames,omitempty"`
	// All pause frames
	TransmittedTotalPauseFrames uint64 `protobuf:"varint,89,opt,name=transmitted_total_pause_frames,json=transmittedTotalPauseFrames,proto3" json:"transmitted_total_pause_frames,omitempty"`
	// All 64 Octet Frame Count
	TransmittedTotal64OctetFrames uint64 `protobuf:"varint,90,opt,name=transmitted_total64_octet_frames,json=transmittedTotal64OctetFrames,proto3" json:"transmitted_total64_octet_frames,omitempty"`
	// All 65-127 Octet Frame Count
	TransmittedTotalOctetFramesFrom65To127 uint64 `protobuf:"varint,91,opt,name=transmitted_total_octet_frames_from65_to127,json=transmittedTotalOctetFramesFrom65To127,proto3" json:"transmitted_total_octet_frames_from65_to127,omitempty"`
	// All 128-255 Octet Frame Count
	TransmittedTotalOctetFramesFrom128To255 uint64 `protobuf:"varint,92,opt,name=transmitted_total_octet_frames_from128_to255,json=transmittedTotalOctetFramesFrom128To255,proto3" json:"transmitted_total_octet_frames_from128_to255,omitempty"`
	// All 256-511 Octet Frame Count
	TransmittedTotalOctetFramesFrom256To511 uint64 `protobuf:"varint,93,opt,name=transmitted_total_octet_frames_from256_to511,json=transmittedTotalOctetFramesFrom256To511,proto3" json:"transmitted_total_octet_frames_from256_to511,omitempty"`
	// All 512-1023 Octet Frame Count
	TransmittedTotalOctetFramesFrom512To1023 uint64 `protobuf:"varint,94,opt,name=transmitted_total_octet_frames_from512_to1023,json=transmittedTotalOctetFramesFrom512To1023,proto3" json:"transmitted_total_octet_frames_from512_to1023,omitempty"`
	// All 1024-1518 Octet Frame Count
	TransmittedTotalOctetFramesFrom1024To1518 uint64 `protobuf:"varint,95,opt,name=transmitted_total_octet_frames_from1024_to1518,json=transmittedTotalOctetFramesFrom1024To1518,proto3" json:"transmitted_total_octet_frames_from1024_to1518,omitempty"`
	// All > 1518 Octet Frame Count
	TransmittedTotalOctetFramesFrom1518ToMax uint64 `protobuf:"varint,96,opt,name=transmitted_total_octet_frames_from1518_to_max,json=transmittedTotalOctetFramesFrom1518ToMax,proto3" json:"transmitted_total_octet_frames_from1518_to_max,omitempty"`
	// Transmitted Good Frames
	TransmittedGoodFrames uint64 `protobuf:"varint,97,opt,name=transmitted_good_frames,json=transmittedGoodFrames,proto3" json:"transmitted_good_frames,omitempty"`
	// Transmitted unicast Frames
	TransmittedUnicastFrames uint64 `protobuf:"varint,98,opt,name=transmitted_unicast_frames,json=transmittedUnicastFrames,proto3" json:"transmitted_unicast_frames,omitempty"`
	// Transmitted multicast Frames
	TransmittedMulticastFrames uint64 `protobuf:"varint,99,opt,name=transmitted_multicast_frames,json=transmittedMulticastFrames,proto3" json:"transmitted_multicast_frames,omitempty"`
	// Transmitted broadcast Frames
	TransmittedBroadcastFrames uint64 `protobuf:"varint,100,opt,name=transmitted_broadcast_frames,json=transmittedBroadcastFrames,proto3" json:"transmitted_broadcast_frames,omitempty"`
	// Drops due to buffer underrun
	BufferUnderrunPacketDrops uint64 `protobuf:"varint,101,opt,name=buffer_underrun_packet_drops,json=bufferUnderrunPacketDrops,proto3" json:"buffer_underrun_packet_drops,omitempty"`
	// Drops due to packet abort
	AbortedPacketDrops uint64 `protobuf:"varint,102,opt,name=aborted_packet_drops,json=abortedPacketDrops,proto3" json:"aborted_packet_drops,omitempty"`
	// Any other drops not counted
	UncountedDroppedFrames uint64 `protobuf:"varint,103,opt,name=uncounted_dropped_frames,json=uncountedDroppedFrames,proto3" json:"uncounted_dropped_frames,omitempty"`
	// Any other errors not counted
	MiscellaneousOutputErrors uint64 `protobuf:"varint,104,opt,name=miscellaneous_output_errors,json=miscellaneousOutputErrors,proto3" json:"miscellaneous_output_errors,omitempty"`
}

func (x *EthernetPortStatsType) Reset() {
	*x = EthernetPortStatsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetPortStatsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetPortStatsType) ProtoMessage() {}

func (x *EthernetPortStatsType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetPortStatsType.ProtoReflect.Descriptor instead.
func (*EthernetPortStatsType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescGZIP(), []int{1}
}

func (x *EthernetPortStatsType) GetReceivedTotalBytes() uint64 {
	if x != nil {
		return x.ReceivedTotalBytes
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedGoodBytes() uint64 {
	if x != nil {
		return x.ReceivedGoodBytes
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotalFrames() uint64 {
	if x != nil {
		return x.ReceivedTotalFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceived8021QFrames() uint64 {
	if x != nil {
		return x.Received8021QFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedPauseFrames() uint64 {
	if x != nil {
		return x.ReceivedPauseFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedUnknownOpcodes() uint64 {
	if x != nil {
		return x.ReceivedUnknownOpcodes
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotal64OctetFrames() uint64 {
	if x != nil {
		return x.ReceivedTotal64OctetFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotalOctetFramesFrom65To127() uint64 {
	if x != nil {
		return x.ReceivedTotalOctetFramesFrom65To127
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotalOctetFramesFrom128To255() uint64 {
	if x != nil {
		return x.ReceivedTotalOctetFramesFrom128To255
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotalOctetFramesFrom256To511() uint64 {
	if x != nil {
		return x.ReceivedTotalOctetFramesFrom256To511
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotalOctetFramesFrom512To1023() uint64 {
	if x != nil {
		return x.ReceivedTotalOctetFramesFrom512To1023
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotalOctetFramesFrom1024To1518() uint64 {
	if x != nil {
		return x.ReceivedTotalOctetFramesFrom1024To1518
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedTotalOctetFramesFrom1519ToMax() uint64 {
	if x != nil {
		return x.ReceivedTotalOctetFramesFrom1519ToMax
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedGoodFrames() uint64 {
	if x != nil {
		return x.ReceivedGoodFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedUnicastFrames() uint64 {
	if x != nil {
		return x.ReceivedUnicastFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedMulticastFrames() uint64 {
	if x != nil {
		return x.ReceivedMulticastFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetReceivedBroadcastFrames() uint64 {
	if x != nil {
		return x.ReceivedBroadcastFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetNumberOfBufferOverrunPacketsDropped() uint64 {
	if x != nil {
		return x.NumberOfBufferOverrunPacketsDropped
	}
	return 0
}

func (x *EthernetPortStatsType) GetNumberOfAbortedPacketsDropped() uint64 {
	if x != nil {
		return x.NumberOfAbortedPacketsDropped
	}
	return 0
}

func (x *EthernetPortStatsType) GetNumberofInvalidVlanIdPacketsDropped() uint64 {
	if x != nil {
		return x.NumberofInvalidVlanIdPacketsDropped
	}
	return 0
}

func (x *EthernetPortStatsType) GetInvalidDestMacDropPackets() uint64 {
	if x != nil {
		return x.InvalidDestMacDropPackets
	}
	return 0
}

func (x *EthernetPortStatsType) GetInvalidEncapDropPackets() uint64 {
	if x != nil {
		return x.InvalidEncapDropPackets
	}
	return 0
}

func (x *EthernetPortStatsType) GetNumberOfMiscellaneousPacketsDropped() uint64 {
	if x != nil {
		return x.NumberOfMiscellaneousPacketsDropped
	}
	return 0
}

func (x *EthernetPortStatsType) GetDroppedGiantPacketsGreaterthanMru() uint64 {
	if x != nil {
		return x.DroppedGiantPacketsGreaterthanMru
	}
	return 0
}

func (x *EthernetPortStatsType) GetDroppedEtherStatsUndersizePkts() uint64 {
	if x != nil {
		return x.DroppedEtherStatsUndersizePkts
	}
	return 0
}

func (x *EthernetPortStatsType) GetDroppedJabbersPacketsGreaterthanMru() uint64 {
	if x != nil {
		return x.DroppedJabbersPacketsGreaterthanMru
	}
	return 0
}

func (x *EthernetPortStatsType) GetDroppedEtherStatsFragments() uint64 {
	if x != nil {
		return x.DroppedEtherStatsFragments
	}
	return 0
}

func (x *EthernetPortStatsType) GetDroppedPacketsWithCrcAlignErrors() uint64 {
	if x != nil {
		return x.DroppedPacketsWithCrcAlignErrors
	}
	return 0
}

func (x *EthernetPortStatsType) GetEtherStatsCollisions() uint64 {
	if x != nil {
		return x.EtherStatsCollisions
	}
	return 0
}

func (x *EthernetPortStatsType) GetSymbolErrors() uint64 {
	if x != nil {
		return x.SymbolErrors
	}
	return 0
}

func (x *EthernetPortStatsType) GetDroppedMiscellaneousErrorPackets() uint64 {
	if x != nil {
		return x.DroppedMiscellaneousErrorPackets
	}
	return 0
}

func (x *EthernetPortStatsType) GetRfc2819EtherStatsOversizedPkts() uint64 {
	if x != nil {
		return x.Rfc2819EtherStatsOversizedPkts
	}
	return 0
}

func (x *EthernetPortStatsType) GetRfc2819EtherStatsJabbers() uint64 {
	if x != nil {
		return x.Rfc2819EtherStatsJabbers
	}
	return 0
}

func (x *EthernetPortStatsType) GetRfc2819EtherStatsCrcAlignErrors() uint64 {
	if x != nil {
		return x.Rfc2819EtherStatsCrcAlignErrors
	}
	return 0
}

func (x *EthernetPortStatsType) GetRfc3635Dot3StatsAlignmentErrors() uint64 {
	if x != nil {
		return x.Rfc3635Dot3StatsAlignmentErrors
	}
	return 0
}

func (x *EthernetPortStatsType) GetTotalBytesTransmitted() uint64 {
	if x != nil {
		return x.TotalBytesTransmitted
	}
	return 0
}

func (x *EthernetPortStatsType) GetTotalGoodBytesTransmitted() uint64 {
	if x != nil {
		return x.TotalGoodBytesTransmitted
	}
	return 0
}

func (x *EthernetPortStatsType) GetTotalFramesTransmitted() uint64 {
	if x != nil {
		return x.TotalFramesTransmitted
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmitted8021QFrames() uint64 {
	if x != nil {
		return x.Transmitted8021QFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotalPauseFrames() uint64 {
	if x != nil {
		return x.TransmittedTotalPauseFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotal64OctetFrames() uint64 {
	if x != nil {
		return x.TransmittedTotal64OctetFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotalOctetFramesFrom65To127() uint64 {
	if x != nil {
		return x.TransmittedTotalOctetFramesFrom65To127
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotalOctetFramesFrom128To255() uint64 {
	if x != nil {
		return x.TransmittedTotalOctetFramesFrom128To255
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotalOctetFramesFrom256To511() uint64 {
	if x != nil {
		return x.TransmittedTotalOctetFramesFrom256To511
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotalOctetFramesFrom512To1023() uint64 {
	if x != nil {
		return x.TransmittedTotalOctetFramesFrom512To1023
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotalOctetFramesFrom1024To1518() uint64 {
	if x != nil {
		return x.TransmittedTotalOctetFramesFrom1024To1518
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedTotalOctetFramesFrom1518ToMax() uint64 {
	if x != nil {
		return x.TransmittedTotalOctetFramesFrom1518ToMax
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedGoodFrames() uint64 {
	if x != nil {
		return x.TransmittedGoodFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedUnicastFrames() uint64 {
	if x != nil {
		return x.TransmittedUnicastFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedMulticastFrames() uint64 {
	if x != nil {
		return x.TransmittedMulticastFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetTransmittedBroadcastFrames() uint64 {
	if x != nil {
		return x.TransmittedBroadcastFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetBufferUnderrunPacketDrops() uint64 {
	if x != nil {
		return x.BufferUnderrunPacketDrops
	}
	return 0
}

func (x *EthernetPortStatsType) GetAbortedPacketDrops() uint64 {
	if x != nil {
		return x.AbortedPacketDrops
	}
	return 0
}

func (x *EthernetPortStatsType) GetUncountedDroppedFrames() uint64 {
	if x != nil {
		return x.UncountedDroppedFrames
	}
	return 0
}

func (x *EthernetPortStatsType) GetMiscellaneousOutputErrors() uint64 {
	if x != nil {
		return x.MiscellaneousOutputErrors
	}
	return 0
}

var File_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDesc = []byte{
	0x0a, 0x6a, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x46, 0x0a, 0x1d, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xdd, 0x1e, 0x0a, 0x18, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x38, 0x30, 0x32, 0x31, 0x5f, 0x71, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x38, 0x30, 0x32,
	0x31, 0x51, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x36, 0x34, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x36, 0x34, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x28, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x36, 0x35, 0x5f,
	0x74, 0x6f, 0x31, 0x32, 0x37, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x23, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x36, 0x35, 0x54, 0x6f, 0x31, 0x32, 0x37,
	0x12, 0x57, 0x0a, 0x29, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x31, 0x32, 0x38, 0x5f, 0x74, 0x6f, 0x32, 0x35, 0x35, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x24, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x31, 0x32, 0x38, 0x54, 0x6f, 0x32, 0x35, 0x35, 0x12, 0x57, 0x0a, 0x29, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x32, 0x35, 0x36,
	0x5f, 0x74, 0x6f, 0x35, 0x31, 0x31, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x24, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x32, 0x35, 0x36, 0x54, 0x6f, 0x35,
	0x31, 0x31, 0x12, 0x59, 0x0a, 0x2a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x35, 0x31, 0x32, 0x5f, 0x74, 0x6f, 0x31, 0x30, 0x32, 0x33,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x25, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x35, 0x31, 0x32, 0x54, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x12, 0x5b, 0x0a,
	0x2b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x31, 0x30, 0x32, 0x34, 0x5f, 0x74, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x26, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x31, 0x30, 0x32, 0x34, 0x54, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x12, 0x5a, 0x0a, 0x2b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x35,
	0x31, 0x39, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x25, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x31, 0x35, 0x31,
	0x39, 0x54, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x47, 0x6f,
	0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x28, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x23, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75,
	0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x48, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x28, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x23, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x6f, 0x66, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x54, 0x0a, 0x27, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x23, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x67, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x67,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6d, 0x72, 0x75, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x21, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x47, 0x69, 0x61,
	0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x74, 0x68, 0x61, 0x6e, 0x4d, 0x72, 0x75, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6a,
	0x61, 0x62, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x67,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6d, 0x72, 0x75, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x23, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4a, 0x61, 0x62,
	0x62, 0x65, 0x72, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x47, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x4d, 0x72, 0x75, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x25,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x72, 0x63, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75,
	0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x69,
	0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x66, 0x63, 0x32, 0x38,
	0x31, 0x39, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1e, 0x72, 0x66, 0x63, 0x32, 0x38, 0x31, 0x39, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x66, 0x63, 0x32, 0x38, 0x31, 0x39, 0x5f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x61, 0x62, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x66, 0x63, 0x32, 0x38, 0x31,
	0x39, 0x45, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4a, 0x61, 0x62, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x72, 0x66, 0x63, 0x32, 0x38, 0x31, 0x39, 0x5f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1f, 0x72, 0x66, 0x63, 0x32, 0x38, 0x31, 0x39, 0x45, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x43, 0x72, 0x63, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x4b, 0x0a, 0x22, 0x72, 0x66, 0x63, 0x33, 0x36, 0x33, 0x35, 0x64, 0x6f, 0x74, 0x33,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x72,
	0x66, 0x63, 0x33, 0x36, 0x33, 0x35, 0x64, 0x6f, 0x74, 0x33, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x38, 0x30, 0x32, 0x31, 0x5f, 0x71, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x38, 0x30, 0x32, 0x31, 0x51, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x59, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x36, 0x34, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x36, 0x34, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x2b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x36, 0x35, 0x5f, 0x74, 0x6f, 0x31, 0x32, 0x37, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x26,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x36,
	0x35, 0x54, 0x6f, 0x31, 0x32, 0x37, 0x12, 0x5d, 0x0a, 0x2c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x32, 0x38,
	0x5f, 0x74, 0x6f, 0x32, 0x35, 0x35, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x27, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x31, 0x32, 0x38,
	0x54, 0x6f, 0x32, 0x35, 0x35, 0x12, 0x5d, 0x0a, 0x2c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x32, 0x35, 0x36, 0x5f,
	0x74, 0x6f, 0x35, 0x31, 0x31, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x27, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x32, 0x35, 0x36, 0x54,
	0x6f, 0x35, 0x31, 0x31, 0x12, 0x5f, 0x0a, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x35, 0x31, 0x32, 0x5f, 0x74,
	0x6f, 0x31, 0x30, 0x32, 0x33, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x28, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x74,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x35, 0x31, 0x32, 0x54,
	0x6f, 0x31, 0x30, 0x32, 0x33, 0x12, 0x61, 0x0a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x30, 0x32, 0x34,
	0x5f, 0x74, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x29, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x31, 0x30,
	0x32, 0x34, 0x54, 0x6f, 0x31, 0x35, 0x31, 0x38, 0x12, 0x60, 0x0a, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x31,
	0x35, 0x31, 0x38, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x31, 0x35, 0x31, 0x38, 0x54, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x62, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x75, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f,
	0x75, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescData = file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDesc
)

func file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescData)
	})
	return file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDescData
}

var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_goTypes = []interface{}{
	(*EthernetPortStatsType_KEYS)(nil), // 0: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.statistics.statistic.ethernet_port_stats_type_KEYS
	(*EthernetPortStatsType)(nil),      // 1: cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.statistics.statistic.ethernet_port_stats_type
}
var file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_init()
}
func file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_init() {
	if File_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetPortStatsType_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetPortStatsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto = out.File
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_rawDesc = nil
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_goTypes = nil
	file_cisco_ios_xr_drivers_media_eth_oper_ethernet_interface_statistics_statistic_ethernet_port_stats_type_proto_depIdxs = nil
}
