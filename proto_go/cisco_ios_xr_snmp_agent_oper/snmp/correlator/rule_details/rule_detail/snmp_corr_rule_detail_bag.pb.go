// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_snmp_agent_oper/snmp/correlator/rule_details/rule_detail/snmp_corr_rule_detail_bag.proto

package cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Correlation Rule detail information
type SnmpCorrRuleDetailBag_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
}

func (x *SnmpCorrRuleDetailBag_KEYS) Reset() {
	*x = SnmpCorrRuleDetailBag_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpCorrRuleDetailBag_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpCorrRuleDetailBag_KEYS) ProtoMessage() {}

func (x *SnmpCorrRuleDetailBag_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpCorrRuleDetailBag_KEYS.ProtoReflect.Descriptor instead.
func (*SnmpCorrRuleDetailBag_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescGZIP(), []int{0}
}

func (x *SnmpCorrRuleDetailBag_KEYS) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

type SnmpCorrRuleDetailBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule summary, name, etc
	RuleSummary *SnmpCorrRuleSummaryBag `protobuf:"bytes,50,opt,name=rule_summary,json=ruleSummary,proto3" json:"rule_summary,omitempty"`
	// Time window (in ms) for which root/all messages are kept in correlater before sending them to hosts
	Timeout uint32 `protobuf:"varint,51,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// OID/VarBinds defining the rootcause match conditions.
	Rootcause *SnmpCorrTrapMatch `protobuf:"bytes,52,opt,name=rootcause,proto3" json:"rootcause,omitempty"`
	// OIDs/VarBinds defining the nonrootcause match conditions.
	NonRootcauses []*SnmpCorrTrapMatch `protobuf:"bytes,53,rep,name=non_rootcauses,json=nonRootcauses,proto3" json:"non_rootcauses,omitempty"`
	// Hosts (IP/port) to which the rule is applied
	ApplyHosts []*SnmpCorrHost `protobuf:"bytes,54,rep,name=apply_hosts,json=applyHosts,proto3" json:"apply_hosts,omitempty"`
}

func (x *SnmpCorrRuleDetailBag) Reset() {
	*x = SnmpCorrRuleDetailBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpCorrRuleDetailBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpCorrRuleDetailBag) ProtoMessage() {}

func (x *SnmpCorrRuleDetailBag) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpCorrRuleDetailBag.ProtoReflect.Descriptor instead.
func (*SnmpCorrRuleDetailBag) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescGZIP(), []int{1}
}

func (x *SnmpCorrRuleDetailBag) GetRuleSummary() *SnmpCorrRuleSummaryBag {
	if x != nil {
		return x.RuleSummary
	}
	return nil
}

func (x *SnmpCorrRuleDetailBag) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SnmpCorrRuleDetailBag) GetRootcause() *SnmpCorrTrapMatch {
	if x != nil {
		return x.Rootcause
	}
	return nil
}

func (x *SnmpCorrRuleDetailBag) GetNonRootcauses() []*SnmpCorrTrapMatch {
	if x != nil {
		return x.NonRootcauses
	}
	return nil
}

func (x *SnmpCorrRuleDetailBag) GetApplyHosts() []*SnmpCorrHost {
	if x != nil {
		return x.ApplyHosts
	}
	return nil
}

type SnmpCorrVbindMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OID of the varbind
	Oid string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// Varbind match type
	MatchType string `protobuf:"bytes,2,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
	// Regular expression to match
	RegExp string `protobuf:"bytes,3,opt,name=reg_exp,json=regExp,proto3" json:"reg_exp,omitempty"`
}

func (x *SnmpCorrVbindMatch) Reset() {
	*x = SnmpCorrVbindMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpCorrVbindMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpCorrVbindMatch) ProtoMessage() {}

func (x *SnmpCorrVbindMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpCorrVbindMatch.ProtoReflect.Descriptor instead.
func (*SnmpCorrVbindMatch) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescGZIP(), []int{2}
}

func (x *SnmpCorrVbindMatch) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *SnmpCorrVbindMatch) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

func (x *SnmpCorrVbindMatch) GetRegExp() string {
	if x != nil {
		return x.RegExp
	}
	return ""
}

type SnmpCorrTrapMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OID of the trap
	Oid string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// VarBinds of the trap
	VarBinds []*SnmpCorrVbindMatch `protobuf:"bytes,2,rep,name=var_binds,json=varBinds,proto3" json:"var_binds,omitempty"`
}

func (x *SnmpCorrTrapMatch) Reset() {
	*x = SnmpCorrTrapMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpCorrTrapMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpCorrTrapMatch) ProtoMessage() {}

func (x *SnmpCorrTrapMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpCorrTrapMatch.ProtoReflect.Descriptor instead.
func (*SnmpCorrTrapMatch) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescGZIP(), []int{3}
}

func (x *SnmpCorrTrapMatch) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *SnmpCorrTrapMatch) GetVarBinds() []*SnmpCorrVbindMatch {
	if x != nil {
		return x.VarBinds
	}
	return nil
}

type SnmpCorrHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address of the host
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Port of the host
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *SnmpCorrHost) Reset() {
	*x = SnmpCorrHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpCorrHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpCorrHost) ProtoMessage() {}

func (x *SnmpCorrHost) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpCorrHost.ProtoReflect.Descriptor instead.
func (*SnmpCorrHost) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescGZIP(), []int{4}
}

func (x *SnmpCorrHost) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *SnmpCorrHost) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Correlation Rule summary information
type SnmpCorrRuleSummaryBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Correlation Rule Name
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Applied state of the rule It could be not applied, applied or applied to all
	RuleState string `protobuf:"bytes,2,opt,name=rule_state,json=ruleState,proto3" json:"rule_state,omitempty"`
	// Number of buffered traps correlated to this rule
	BufferedTrapsCount uint32 `protobuf:"varint,3,opt,name=buffered_traps_count,json=bufferedTrapsCount,proto3" json:"buffered_traps_count,omitempty"`
}

func (x *SnmpCorrRuleSummaryBag) Reset() {
	*x = SnmpCorrRuleSummaryBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpCorrRuleSummaryBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpCorrRuleSummaryBag) ProtoMessage() {}

func (x *SnmpCorrRuleSummaryBag) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpCorrRuleSummaryBag.ProtoReflect.Descriptor instead.
func (*SnmpCorrRuleSummaryBag) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescGZIP(), []int{5}
}

func (x *SnmpCorrRuleSummaryBag) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *SnmpCorrRuleSummaryBag) GetRuleState() string {
	if x != nil {
		return x.RuleState
	}
	return ""
}

func (x *SnmpCorrRuleSummaryBag) GetBufferedTrapsCount() uint32 {
	if x != nil {
		return x.BufferedTrapsCount
	}
	return 0
}

var File_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDesc = []byte{
	0x0a, 0x65, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x73,
	0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x73,
	0x6e, 0x6d, 0x70, 0x2f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x61,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x3d,
	0x0a, 0x1e, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x04,
	0x0a, 0x19, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x61, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x0c,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x5f,
	0x63, 0x6f, 0x72, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x62, 0x61, 0x67, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x79, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x73,
	0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x73,
	0x6e, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x73, 0x6e, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0d, 0x6e,
	0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x22, 0x61, 0x0a, 0x15, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x5f, 0x76, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x45, 0x78, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x73, 0x6e, 0x6d, 0x70,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x79, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x73, 0x6e,
	0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x76, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x08, 0x76, 0x61, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x22, 0x43, 0x0a,
	0x0e, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x62, 0x61,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescData = file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDesc
)

func file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescData)
	})
	return file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDescData
}

var file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_goTypes = []interface{}{
	(*SnmpCorrRuleDetailBag_KEYS)(nil), // 0: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag_KEYS
	(*SnmpCorrRuleDetailBag)(nil),      // 1: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag
	(*SnmpCorrVbindMatch)(nil),         // 2: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_vbind_match
	(*SnmpCorrTrapMatch)(nil),          // 3: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_trap_match
	(*SnmpCorrHost)(nil),               // 4: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_host
	(*SnmpCorrRuleSummaryBag)(nil),     // 5: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_summary_bag
}
var file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_depIdxs = []int32{
	5, // 0: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag.rule_summary:type_name -> cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_summary_bag
	3, // 1: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag.rootcause:type_name -> cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_trap_match
	3, // 2: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag.non_rootcauses:type_name -> cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_trap_match
	4, // 3: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_rule_detail_bag.apply_hosts:type_name -> cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_host
	2, // 4: cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_trap_match.var_binds:type_name -> cisco_ios_xr_snmp_agent_oper.snmp.correlator.rule_details.rule_detail.snmp_corr_vbind_match
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_init()
}
func file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_init() {
	if File_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpCorrRuleDetailBag_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpCorrRuleDetailBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpCorrVbindMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpCorrTrapMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpCorrHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpCorrRuleSummaryBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto = out.File
	file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_rawDesc = nil
	file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_goTypes = nil
	file_cisco_ios_xr_snmp_agent_oper_snmp_correlator_rule_details_rule_detail_snmp_corr_rule_detail_bag_proto_depIdxs = nil
}
