// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_snmp_agent_oper/snmp/information/statistics/snmp_stats.proto

package cisco_ios_xr_snmp_agent_oper_snmp_information_statistics

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SNMP statistics
type SnmpStats_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SnmpStats_KEYS) Reset() {
	*x = SnmpStats_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpStats_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpStats_KEYS) ProtoMessage() {}

func (x *SnmpStats_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpStats_KEYS.ProtoReflect.Descriptor instead.
func (*SnmpStats_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescGZIP(), []int{0}
}

type SnmpStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// snmpInPkts
	PacketsReceived uint32 `protobuf:"varint,50,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	// snmpInBadVersions
	BadVersionsReceived uint32 `protobuf:"varint,51,opt,name=bad_versions_received,json=badVersionsReceived,proto3" json:"bad_versions_received,omitempty"`
	// snmpInBadCommunityNames
	BadCommunityNamesReceived uint32 `protobuf:"varint,52,opt,name=bad_community_names_received,json=badCommunityNamesReceived,proto3" json:"bad_community_names_received,omitempty"`
	// snmpInBadCommunityUses
	BadCommunityUsesReceived uint32 `protobuf:"varint,53,opt,name=bad_community_uses_received,json=badCommunityUsesReceived,proto3" json:"bad_community_uses_received,omitempty"`
	// snmpInASNParseErrs
	AsnParseErrorsReceived uint32 `protobuf:"varint,54,opt,name=asn_parse_errors_received,json=asnParseErrorsReceived,proto3" json:"asn_parse_errors_received,omitempty"`
	// snmpSilentDrops
	SilentDropCount uint32 `protobuf:"varint,55,opt,name=silent_drop_count,json=silentDropCount,proto3" json:"silent_drop_count,omitempty"`
	// snmpProxyDrops
	ProxyDropCount uint32 `protobuf:"varint,56,opt,name=proxy_drop_count,json=proxyDropCount,proto3" json:"proxy_drop_count,omitempty"`
	// snmpInTooBigs
	TooBigPacketReceived uint32 `protobuf:"varint,57,opt,name=too_big_packet_received,json=tooBigPacketReceived,proto3" json:"too_big_packet_received,omitempty"`
	// snmp maximum packet size
	MaxPacketSize uint32 `protobuf:"varint,58,opt,name=max_packet_size,json=maxPacketSize,proto3" json:"max_packet_size,omitempty"`
	// snmpInNoSuchNames
	NoSuchNamesReceived uint32 `protobuf:"varint,59,opt,name=no_such_names_received,json=noSuchNamesReceived,proto3" json:"no_such_names_received,omitempty"`
	// snmpInBadValues
	BadValuesReceived uint32 `protobuf:"varint,60,opt,name=bad_values_received,json=badValuesReceived,proto3" json:"bad_values_received,omitempty"`
	// snmpInReadOnlys
	ReadOnlyReceived uint32 `protobuf:"varint,61,opt,name=read_only_received,json=readOnlyReceived,proto3" json:"read_only_received,omitempty"`
	// snmpInGenErrs
	TotalGeneralErrors uint32 `protobuf:"varint,62,opt,name=total_general_errors,json=totalGeneralErrors,proto3" json:"total_general_errors,omitempty"`
	// snmpInTotalReqVars
	TotalRequestedVariables uint32 `protobuf:"varint,63,opt,name=total_requested_variables,json=totalRequestedVariables,proto3" json:"total_requested_variables,omitempty"`
	// snmpInTotalSetVars
	TotalSetVariablesReceived uint32 `protobuf:"varint,64,opt,name=total_set_variables_received,json=totalSetVariablesReceived,proto3" json:"total_set_variables_received,omitempty"`
	// snmpInGetRequests
	GetRequestsReceived uint32 `protobuf:"varint,65,opt,name=get_requests_received,json=getRequestsReceived,proto3" json:"get_requests_received,omitempty"`
	// snmpInGetNexts
	GetNextRequestsReceived uint32 `protobuf:"varint,66,opt,name=get_next_requests_received,json=getNextRequestsReceived,proto3" json:"get_next_requests_received,omitempty"`
	// snmpInSetRequests
	SetRequestsReceived uint32 `protobuf:"varint,67,opt,name=set_requests_received,json=setRequestsReceived,proto3" json:"set_requests_received,omitempty"`
	// snmpInGetResponses
	GetResponsesReceived uint32 `protobuf:"varint,68,opt,name=get_responses_received,json=getResponsesReceived,proto3" json:"get_responses_received,omitempty"`
	// snmpInTraps
	TrapsReceived uint32 `protobuf:"varint,69,opt,name=traps_received,json=trapsReceived,proto3" json:"traps_received,omitempty"`
	// snmpOutPkts
	TotalPacketsSent uint32 `protobuf:"varint,70,opt,name=total_packets_sent,json=totalPacketsSent,proto3" json:"total_packets_sent,omitempty"`
	// snmpOutTooBigs
	TooBigPacketsSent uint32 `protobuf:"varint,71,opt,name=too_big_packets_sent,json=tooBigPacketsSent,proto3" json:"too_big_packets_sent,omitempty"`
	// snmpOutNoSuchNames
	NoSuchNamesSent uint32 `protobuf:"varint,72,opt,name=no_such_names_sent,json=noSuchNamesSent,proto3" json:"no_such_names_sent,omitempty"`
	// snmpOutBadValues
	BadValuesSent uint32 `protobuf:"varint,73,opt,name=bad_values_sent,json=badValuesSent,proto3" json:"bad_values_sent,omitempty"`
	// snmpOutGenErrs
	GeneralErrorsSent uint32 `protobuf:"varint,74,opt,name=general_errors_sent,json=generalErrorsSent,proto3" json:"general_errors_sent,omitempty"`
	// snmpOutGetRequests
	GetRequestsSent uint32 `protobuf:"varint,75,opt,name=get_requests_sent,json=getRequestsSent,proto3" json:"get_requests_sent,omitempty"`
	// snmpOutGetNexts
	GetNextRequestSent uint32 `protobuf:"varint,76,opt,name=get_next_request_sent,json=getNextRequestSent,proto3" json:"get_next_request_sent,omitempty"`
	// snmpOutSetRequests
	SetRequestsSent uint32 `protobuf:"varint,77,opt,name=set_requests_sent,json=setRequestsSent,proto3" json:"set_requests_sent,omitempty"`
	// snmpOutGetResponses
	GetResponsesSent uint32 `protobuf:"varint,78,opt,name=get_responses_sent,json=getResponsesSent,proto3" json:"get_responses_sent,omitempty"`
	// snmpOutTraps
	TrapsSent uint32 `protobuf:"varint,79,opt,name=traps_sent,json=trapsSent,proto3" json:"traps_sent,omitempty"`
}

func (x *SnmpStats) Reset() {
	*x = SnmpStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpStats) ProtoMessage() {}

func (x *SnmpStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpStats.ProtoReflect.Descriptor instead.
func (*SnmpStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescGZIP(), []int{1}
}

func (x *SnmpStats) GetPacketsReceived() uint32 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *SnmpStats) GetBadVersionsReceived() uint32 {
	if x != nil {
		return x.BadVersionsReceived
	}
	return 0
}

func (x *SnmpStats) GetBadCommunityNamesReceived() uint32 {
	if x != nil {
		return x.BadCommunityNamesReceived
	}
	return 0
}

func (x *SnmpStats) GetBadCommunityUsesReceived() uint32 {
	if x != nil {
		return x.BadCommunityUsesReceived
	}
	return 0
}

func (x *SnmpStats) GetAsnParseErrorsReceived() uint32 {
	if x != nil {
		return x.AsnParseErrorsReceived
	}
	return 0
}

func (x *SnmpStats) GetSilentDropCount() uint32 {
	if x != nil {
		return x.SilentDropCount
	}
	return 0
}

func (x *SnmpStats) GetProxyDropCount() uint32 {
	if x != nil {
		return x.ProxyDropCount
	}
	return 0
}

func (x *SnmpStats) GetTooBigPacketReceived() uint32 {
	if x != nil {
		return x.TooBigPacketReceived
	}
	return 0
}

func (x *SnmpStats) GetMaxPacketSize() uint32 {
	if x != nil {
		return x.MaxPacketSize
	}
	return 0
}

func (x *SnmpStats) GetNoSuchNamesReceived() uint32 {
	if x != nil {
		return x.NoSuchNamesReceived
	}
	return 0
}

func (x *SnmpStats) GetBadValuesReceived() uint32 {
	if x != nil {
		return x.BadValuesReceived
	}
	return 0
}

func (x *SnmpStats) GetReadOnlyReceived() uint32 {
	if x != nil {
		return x.ReadOnlyReceived
	}
	return 0
}

func (x *SnmpStats) GetTotalGeneralErrors() uint32 {
	if x != nil {
		return x.TotalGeneralErrors
	}
	return 0
}

func (x *SnmpStats) GetTotalRequestedVariables() uint32 {
	if x != nil {
		return x.TotalRequestedVariables
	}
	return 0
}

func (x *SnmpStats) GetTotalSetVariablesReceived() uint32 {
	if x != nil {
		return x.TotalSetVariablesReceived
	}
	return 0
}

func (x *SnmpStats) GetGetRequestsReceived() uint32 {
	if x != nil {
		return x.GetRequestsReceived
	}
	return 0
}

func (x *SnmpStats) GetGetNextRequestsReceived() uint32 {
	if x != nil {
		return x.GetNextRequestsReceived
	}
	return 0
}

func (x *SnmpStats) GetSetRequestsReceived() uint32 {
	if x != nil {
		return x.SetRequestsReceived
	}
	return 0
}

func (x *SnmpStats) GetGetResponsesReceived() uint32 {
	if x != nil {
		return x.GetResponsesReceived
	}
	return 0
}

func (x *SnmpStats) GetTrapsReceived() uint32 {
	if x != nil {
		return x.TrapsReceived
	}
	return 0
}

func (x *SnmpStats) GetTotalPacketsSent() uint32 {
	if x != nil {
		return x.TotalPacketsSent
	}
	return 0
}

func (x *SnmpStats) GetTooBigPacketsSent() uint32 {
	if x != nil {
		return x.TooBigPacketsSent
	}
	return 0
}

func (x *SnmpStats) GetNoSuchNamesSent() uint32 {
	if x != nil {
		return x.NoSuchNamesSent
	}
	return 0
}

func (x *SnmpStats) GetBadValuesSent() uint32 {
	if x != nil {
		return x.BadValuesSent
	}
	return 0
}

func (x *SnmpStats) GetGeneralErrorsSent() uint32 {
	if x != nil {
		return x.GeneralErrorsSent
	}
	return 0
}

func (x *SnmpStats) GetGetRequestsSent() uint32 {
	if x != nil {
		return x.GetRequestsSent
	}
	return 0
}

func (x *SnmpStats) GetGetNextRequestSent() uint32 {
	if x != nil {
		return x.GetNextRequestSent
	}
	return 0
}

func (x *SnmpStats) GetSetRequestsSent() uint32 {
	if x != nil {
		return x.SetRequestsSent
	}
	return 0
}

func (x *SnmpStats) GetGetResponsesSent() uint32 {
	if x != nil {
		return x.GetResponsesSent
	}
	return 0
}

func (x *SnmpStats) GetTrapsSent() uint32 {
	if x != nil {
		return x.TrapsSent
	}
	return 0
}

var File_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDesc = []byte{
	0x0a, 0x49, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x73,
	0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x73,
	0x6e, 0x6d, 0x70, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x73, 0x6e, 0x6d, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x6e, 0x6d, 0x70, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x22, 0xdb, 0x0b, 0x0a, 0x0a, 0x73, 0x6e, 0x6d,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x62, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x62, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x62, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x73, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x73, 0x6e, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x6f, 0x5f, 0x62,
	0x69, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x6f, 0x42, 0x69, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x6f, 0x5f, 0x73, 0x75, 0x63,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x6f, 0x53, 0x75, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62,
	0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x61, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x6f, 0x5f,
	0x62, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x6f, 0x5f,
	0x73, 0x75, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x6f, 0x53, 0x75, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x62, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x65, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x70, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x70, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescData = file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDesc
)

func file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescData)
	})
	return file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDescData
}

var file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_goTypes = []interface{}{
	(*SnmpStats_KEYS)(nil), // 0: cisco_ios_xr_snmp_agent_oper.snmp.information.statistics.snmp_stats_KEYS
	(*SnmpStats)(nil),      // 1: cisco_ios_xr_snmp_agent_oper.snmp.information.statistics.snmp_stats
}
var file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_init() }
func file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_init() {
	if File_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpStats_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto = out.File
	file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_rawDesc = nil
	file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_goTypes = nil
	file_cisco_ios_xr_snmp_agent_oper_snmp_information_statistics_snmp_stats_proto_depIdxs = nil
}
