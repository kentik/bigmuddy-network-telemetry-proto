// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_cdp_oper/cdp/nodes/node/neighbors/devices/device/cdp_neighbor.proto

package cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// CDP neighbor info
type CdpNeighbor_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *CdpNeighbor_KEYS) Reset() {
	*x = CdpNeighbor_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpNeighbor_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpNeighbor_KEYS) ProtoMessage() {}

func (x *CdpNeighbor_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpNeighbor_KEYS.ProtoReflect.Descriptor instead.
func (*CdpNeighbor_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{0}
}

func (x *CdpNeighbor_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *CdpNeighbor_KEYS) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type CdpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next neighbor in the list
	CdpNeighbor []*CdpNeighborItem `protobuf:"bytes,50,rep,name=cdp_neighbor,json=cdpNeighbor,proto3" json:"cdp_neighbor,omitempty"`
}

func (x *CdpNeighbor) Reset() {
	*x = CdpNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpNeighbor) ProtoMessage() {}

func (x *CdpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpNeighbor.ProtoReflect.Descriptor instead.
func (*CdpNeighbor) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{1}
}

func (x *CdpNeighbor) GetCdpNeighbor() []*CdpNeighborItem {
	if x != nil {
		return x.CdpNeighbor
	}
	return nil
}

type CdpNeighborItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface the neighbor entry was received on
	ReceivingInterfaceName string `protobuf:"bytes,1,opt,name=receiving_interface_name,json=receivingInterfaceName,proto3" json:"receiving_interface_name,omitempty"`
	// Device identifier
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Outgoing port identifier
	PortId string `protobuf:"bytes,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// Version number
	HeaderVersion uint32 `protobuf:"varint,4,opt,name=header_version,json=headerVersion,proto3" json:"header_version,omitempty"`
	// Remaining hold time
	HoldTime uint32 `protobuf:"varint,5,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	// Capabilities
	Capabilities string `protobuf:"bytes,6,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Platform type
	Platform string `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	// Detailed neighbor info
	Detail *CdpNeighborDetail `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CdpNeighborItem) Reset() {
	*x = CdpNeighborItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpNeighborItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpNeighborItem) ProtoMessage() {}

func (x *CdpNeighborItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpNeighborItem.ProtoReflect.Descriptor instead.
func (*CdpNeighborItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{2}
}

func (x *CdpNeighborItem) GetReceivingInterfaceName() string {
	if x != nil {
		return x.ReceivingInterfaceName
	}
	return ""
}

func (x *CdpNeighborItem) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CdpNeighborItem) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *CdpNeighborItem) GetHeaderVersion() uint32 {
	if x != nil {
		return x.HeaderVersion
	}
	return 0
}

func (x *CdpNeighborItem) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *CdpNeighborItem) GetCapabilities() string {
	if x != nil {
		return x.Capabilities
	}
	return ""
}

func (x *CdpNeighborItem) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CdpNeighborItem) GetDetail() *CdpNeighborDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type In6AddrTd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *In6AddrTd) Reset() {
	*x = In6AddrTd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *In6AddrTd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*In6AddrTd) ProtoMessage() {}

func (x *In6AddrTd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use In6AddrTd.ProtoReflect.Descriptor instead.
func (*In6AddrTd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{3}
}

func (x *In6AddrTd) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CdpL3Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType string `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	// IPv4 address
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// IPv6 address
	Ipv6Address *In6AddrTd `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *CdpL3Addr) Reset() {
	*x = CdpL3Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpL3Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpL3Addr) ProtoMessage() {}

func (x *CdpL3Addr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpL3Addr.ProtoReflect.Descriptor instead.
func (*CdpL3Addr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{4}
}

func (x *CdpL3Addr) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *CdpL3Addr) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *CdpL3Addr) GetIpv6Address() *In6AddrTd {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

type CdpAddrEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next address entry in list
	CdpAddrEntry []*CdpAddrEntryItem `protobuf:"bytes,1,rep,name=cdp_addr_entry,json=cdpAddrEntry,proto3" json:"cdp_addr_entry,omitempty"`
}

func (x *CdpAddrEntry) Reset() {
	*x = CdpAddrEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpAddrEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpAddrEntry) ProtoMessage() {}

func (x *CdpAddrEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpAddrEntry.ProtoReflect.Descriptor instead.
func (*CdpAddrEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{5}
}

func (x *CdpAddrEntry) GetCdpAddrEntry() []*CdpAddrEntryItem {
	if x != nil {
		return x.CdpAddrEntry
	}
	return nil
}

type CdpAddrEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network layer address
	Address *CdpL3Addr `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CdpAddrEntryItem) Reset() {
	*x = CdpAddrEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpAddrEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpAddrEntryItem) ProtoMessage() {}

func (x *CdpAddrEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpAddrEntryItem.ProtoReflect.Descriptor instead.
func (*CdpAddrEntryItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{6}
}

func (x *CdpAddrEntryItem) GetAddress() *CdpL3Addr {
	if x != nil {
		return x.Address
	}
	return nil
}

type CdpProtHelloEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next protocol hello entry in list
	CdpProtHelloEntry []*CdpProtHelloEntryItem `protobuf:"bytes,1,rep,name=cdp_prot_hello_entry,json=cdpProtHelloEntry,proto3" json:"cdp_prot_hello_entry,omitempty"`
}

func (x *CdpProtHelloEntry) Reset() {
	*x = CdpProtHelloEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpProtHelloEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpProtHelloEntry) ProtoMessage() {}

func (x *CdpProtHelloEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpProtHelloEntry.ProtoReflect.Descriptor instead.
func (*CdpProtHelloEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{7}
}

func (x *CdpProtHelloEntry) GetCdpProtHelloEntry() []*CdpProtHelloEntryItem {
	if x != nil {
		return x.CdpProtHelloEntry
	}
	return nil
}

type CdpProtHelloEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol Hello msg
	HelloMessage []byte `protobuf:"bytes,1,opt,name=hello_message,json=helloMessage,proto3" json:"hello_message,omitempty"`
}

func (x *CdpProtHelloEntryItem) Reset() {
	*x = CdpProtHelloEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpProtHelloEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpProtHelloEntryItem) ProtoMessage() {}

func (x *CdpProtHelloEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpProtHelloEntryItem.ProtoReflect.Descriptor instead.
func (*CdpProtHelloEntryItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{8}
}

func (x *CdpProtHelloEntryItem) GetHelloMessage() []byte {
	if x != nil {
		return x.HelloMessage
	}
	return nil
}

type CdpNeighborDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of network addresses
	NetworkAddresses *CdpAddrEntry `protobuf:"bytes,1,opt,name=network_addresses,json=networkAddresses,proto3" json:"network_addresses,omitempty"`
	// Version TLV
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// List of protocol hello entries
	ProtocolHelloList *CdpProtHelloEntry `protobuf:"bytes,3,opt,name=protocol_hello_list,json=protocolHelloList,proto3" json:"protocol_hello_list,omitempty"`
	// VTP domain
	VtpDomain string `protobuf:"bytes,4,opt,name=vtp_domain,json=vtpDomain,proto3" json:"vtp_domain,omitempty"`
	// Native VLAN
	NativeVlan uint32 `protobuf:"varint,5,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	// Duplex setting
	Duplex string `protobuf:"bytes,6,opt,name=duplex,proto3" json:"duplex,omitempty"`
	// SysName
	SystemName string `protobuf:"bytes,7,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
}

func (x *CdpNeighborDetail) Reset() {
	*x = CdpNeighborDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdpNeighborDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdpNeighborDetail) ProtoMessage() {}

func (x *CdpNeighborDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdpNeighborDetail.ProtoReflect.Descriptor instead.
func (*CdpNeighborDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP(), []int{9}
}

func (x *CdpNeighborDetail) GetNetworkAddresses() *CdpAddrEntry {
	if x != nil {
		return x.NetworkAddresses
	}
	return nil
}

func (x *CdpNeighborDetail) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CdpNeighborDetail) GetProtocolHelloList() *CdpProtHelloEntry {
	if x != nil {
		return x.ProtocolHelloList
	}
	return nil
}

func (x *CdpNeighborDetail) GetVtpDomain() string {
	if x != nil {
		return x.VtpDomain
	}
	return ""
}

func (x *CdpNeighborDetail) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *CdpNeighborDetail) GetDuplex() string {
	if x != nil {
		return x.Duplex
	}
	return ""
}

func (x *CdpNeighborDetail) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

var File_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDesc = []byte{
	0x0a, 0x50, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x63, 0x64, 0x70, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x63, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x3d, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x4d, 0x0a, 0x11, 0x63, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x83, 0x01, 0x0a, 0x0c, 0x63, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x12, 0x73, 0x0a, 0x0c, 0x63, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x64, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x22, 0xf3, 0x02, 0x0a, 0x11, 0x63, 0x64, 0x70, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x18,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x6a, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x23, 0x0a, 0x0b,
	0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x63, 0x64, 0x70, 0x5f, 0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6d, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x64, 0x70,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x64, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x63, 0x64, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x78, 0x0a, 0x0e, 0x63, 0x64, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x63, 0x64, 0x70, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x7b, 0x0a, 0x13, 0x63, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x64, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x64, 0x70, 0x5f,
	0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x14, 0x63, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x5f, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x63, 0x64,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x52, 0x11, 0x63, 0x64, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x40, 0x0a, 0x19, 0x63, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x13, 0x63, 0x64, 0x70, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x7a, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x64, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x64, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x64, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x5f, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x74, 0x70, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x74, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x75, 0x70,
	0x6c, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescData = file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDesc
)

func file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescData)
	})
	return file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDescData
}

var file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_goTypes = []interface{}{
	(*CdpNeighbor_KEYS)(nil),      // 0: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_KEYS
	(*CdpNeighbor)(nil),           // 1: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor
	(*CdpNeighborItem)(nil),       // 2: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_item
	(*In6AddrTd)(nil),             // 3: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.in6_addr_td
	(*CdpL3Addr)(nil),             // 4: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_l3_addr
	(*CdpAddrEntry)(nil),          // 5: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_addr_entry
	(*CdpAddrEntryItem)(nil),      // 6: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_addr_entry_item
	(*CdpProtHelloEntry)(nil),     // 7: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_prot_hello_entry
	(*CdpProtHelloEntryItem)(nil), // 8: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_prot_hello_entry_item
	(*CdpNeighborDetail)(nil),     // 9: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_detail
}
var file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor.cdp_neighbor:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_item
	9, // 1: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_item.detail:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_detail
	3, // 2: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_l3_addr.ipv6_address:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.in6_addr_td
	6, // 3: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_addr_entry.cdp_addr_entry:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_addr_entry_item
	4, // 4: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_addr_entry_item.address:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_l3_addr
	8, // 5: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_prot_hello_entry.cdp_prot_hello_entry:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_prot_hello_entry_item
	5, // 6: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_detail.network_addresses:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_addr_entry
	7, // 7: cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_neighbor_detail.protocol_hello_list:type_name -> cisco_ios_xr_cdp_oper.cdp.nodes.node.neighbors.devices.device.cdp_prot_hello_entry
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_init()
}
func file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_init() {
	if File_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpNeighbor_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpNeighborItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*In6AddrTd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpL3Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpAddrEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpAddrEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpProtHelloEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpProtHelloEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdpNeighborDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto = out.File
	file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_rawDesc = nil
	file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_goTypes = nil
	file_cisco_ios_xr_cdp_oper_cdp_nodes_node_neighbors_devices_device_cdp_neighbor_proto_depIdxs = nil
}
