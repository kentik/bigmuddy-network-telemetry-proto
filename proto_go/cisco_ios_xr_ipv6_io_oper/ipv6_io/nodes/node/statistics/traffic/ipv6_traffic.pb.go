// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_io_oper/ipv6_io/nodes/node/statistics/traffic/ipv6_traffic.proto

package cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IPv6 and ICMPv6 Traffic Information
type Ipv6Traffic_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *Ipv6Traffic_KEYS) Reset() {
	*x = Ipv6Traffic_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Traffic_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Traffic_KEYS) ProtoMessage() {}

func (x *Ipv6Traffic_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Traffic_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6Traffic_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6Traffic_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type Ipv6Traffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 Statistics
	Ipv6 *Ipv6IoTraffic `protobuf:"bytes,50,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	// ICMP Statistics
	Icmp *Ipv6IoIcmpTraffic `protobuf:"bytes,51,opt,name=icmp,proto3" json:"icmp,omitempty"`
	// IPv6 Node Discovery Statistics
	Ipv6NodeDiscovery *Ipv6NdTraffic `protobuf:"bytes,52,opt,name=ipv6_node_discovery,json=ipv6NodeDiscovery,proto3" json:"ipv6_node_discovery,omitempty"`
}

func (x *Ipv6Traffic) Reset() {
	*x = Ipv6Traffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Traffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Traffic) ProtoMessage() {}

func (x *Ipv6Traffic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Traffic.ProtoReflect.Descriptor instead.
func (*Ipv6Traffic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6Traffic) GetIpv6() *Ipv6IoTraffic {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Ipv6Traffic) GetIcmp() *Ipv6IoIcmpTraffic {
	if x != nil {
		return x.Icmp
	}
	return nil
}

func (x *Ipv6Traffic) GetIpv6NodeDiscovery() *Ipv6NdTraffic {
	if x != nil {
		return x.Ipv6NodeDiscovery
	}
	return nil
}

// IPv6 Traffic Information
type Ipv6IoTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total Packets
	TotalPackets uint32 `protobuf:"varint,1,opt,name=total_packets,json=totalPackets,proto3" json:"total_packets,omitempty"`
	// Local Destination Packets
	LocalDestinationPackets uint32 `protobuf:"varint,2,opt,name=local_destination_packets,json=localDestinationPackets,proto3" json:"local_destination_packets,omitempty"`
	// Format Errors
	FormatErrors uint32 `protobuf:"varint,3,opt,name=format_errors,json=formatErrors,proto3" json:"format_errors,omitempty"`
	// Truncated Packets
	TruncatedPackets uint32 `protobuf:"varint,4,opt,name=truncated_packets,json=truncatedPackets,proto3" json:"truncated_packets,omitempty"`
	// Hop Count Exceeded Packets
	HopCountExceededPackets uint32 `protobuf:"varint,5,opt,name=hop_count_exceeded_packets,json=hopCountExceededPackets,proto3" json:"hop_count_exceeded_packets,omitempty"`
	// Bad Source Address Packets
	BadSourceAddressPackets uint32 `protobuf:"varint,6,opt,name=bad_source_address_packets,json=badSourceAddressPackets,proto3" json:"bad_source_address_packets,omitempty"`
	// Bad Header Packets
	BadHeaderPackets uint32 `protobuf:"varint,7,opt,name=bad_header_packets,json=badHeaderPackets,proto3" json:"bad_header_packets,omitempty"`
	// Unknown Option Type Packets
	UnknownOptionTypePackets uint32 `protobuf:"varint,8,opt,name=unknown_option_type_packets,json=unknownOptionTypePackets,proto3" json:"unknown_option_type_packets,omitempty"`
	// Unknown Protocol Packets
	UnknownProtocolPackets uint32 `protobuf:"varint,9,opt,name=unknown_protocol_packets,json=unknownProtocolPackets,proto3" json:"unknown_protocol_packets,omitempty"`
	// Fragments
	Fragments uint32 `protobuf:"varint,10,opt,name=fragments,proto3" json:"fragments,omitempty"`
	// Reassembled Packets
	ReassembledPackets uint32 `protobuf:"varint,11,opt,name=reassembled_packets,json=reassembledPackets,proto3" json:"reassembled_packets,omitempty"`
	// Reassembly Timeouts
	ReassemblyTimeouts uint32 `protobuf:"varint,12,opt,name=reassembly_timeouts,json=reassemblyTimeouts,proto3" json:"reassembly_timeouts,omitempty"`
	// Reassembly Failures
	ReassemblyFailures uint32 `protobuf:"varint,13,opt,name=reassembly_failures,json=reassemblyFailures,proto3" json:"reassembly_failures,omitempty"`
	// Reassembly Reach Maximum Drop
	ReassemblyMaximumDrops uint32 `protobuf:"varint,14,opt,name=reassembly_maximum_drops,json=reassemblyMaximumDrops,proto3" json:"reassembly_maximum_drops,omitempty"`
	// Packets Output
	GeneratedPackets uint32 `protobuf:"varint,15,opt,name=generated_packets,json=generatedPackets,proto3" json:"generated_packets,omitempty"`
	// Packets Forwarded
	ForwardedPackets uint32 `protobuf:"varint,16,opt,name=forwarded_packets,json=forwardedPackets,proto3" json:"forwarded_packets,omitempty"`
	// Packets Source Routed
	SourceRoutedPackets uint32 `protobuf:"varint,17,opt,name=source_routed_packets,json=sourceRoutedPackets,proto3" json:"source_routed_packets,omitempty"`
	// Packets Fragmented
	FragmentedPackets uint32 `protobuf:"varint,18,opt,name=fragmented_packets,json=fragmentedPackets,proto3" json:"fragmented_packets,omitempty"`
	// Fragmented Packet Count
	FragmentCount uint32 `protobuf:"varint,19,opt,name=fragment_count,json=fragmentCount,proto3" json:"fragment_count,omitempty"`
	// Fragment Failures
	FragmentFailures uint32 `protobuf:"varint,20,opt,name=fragment_failures,json=fragmentFailures,proto3" json:"fragment_failures,omitempty"`
	// No Route Packets
	NoRoutePackets uint32 `protobuf:"varint,21,opt,name=no_route_packets,json=noRoutePackets,proto3" json:"no_route_packets,omitempty"`
	// Packet Too Big
	TooBigPackets uint32 `protobuf:"varint,22,opt,name=too_big_packets,json=tooBigPackets,proto3" json:"too_big_packets,omitempty"`
	// Multicast In
	ReceivedMulticastPackets uint32 `protobuf:"varint,23,opt,name=received_multicast_packets,json=receivedMulticastPackets,proto3" json:"received_multicast_packets,omitempty"`
	// Multicast Out
	SentMulticastPackets uint32 `protobuf:"varint,24,opt,name=sent_multicast_packets,json=sentMulticastPackets,proto3" json:"sent_multicast_packets,omitempty"`
	// Misc. drops
	MiscellaneousDrops uint32 `protobuf:"varint,25,opt,name=miscellaneous_drops,json=miscellaneousDrops,proto3" json:"miscellaneous_drops,omitempty"`
	// Lisp IPv4 Encapped packets
	LispV4EncapPackets uint32 `protobuf:"varint,26,opt,name=lisp_v4_encap_packets,json=lispV4EncapPackets,proto3" json:"lisp_v4_encap_packets,omitempty"`
	// Lisp IPv4 Decapped packets
	LispV4DecapPackets uint32 `protobuf:"varint,27,opt,name=lisp_v4_decap_packets,json=lispV4DecapPackets,proto3" json:"lisp_v4_decap_packets,omitempty"`
	// Lisp IPv6 Encapped packets
	LispV6EncapPackets uint32 `protobuf:"varint,28,opt,name=lisp_v6_encap_packets,json=lispV6EncapPackets,proto3" json:"lisp_v6_encap_packets,omitempty"`
	// Lisp IPv6 Decapped packets
	LispV6DecapPackets uint32 `protobuf:"varint,29,opt,name=lisp_v6_decap_packets,json=lispV6DecapPackets,proto3" json:"lisp_v6_decap_packets,omitempty"`
	// Lisp Encap errors
	LispEncapErrors uint32 `protobuf:"varint,30,opt,name=lisp_encap_errors,json=lispEncapErrors,proto3" json:"lisp_encap_errors,omitempty"`
	// Lisp Decap errors
	LispDecapErrors uint32 `protobuf:"varint,31,opt,name=lisp_decap_errors,json=lispDecapErrors,proto3" json:"lisp_decap_errors,omitempty"`
}

func (x *Ipv6IoTraffic) Reset() {
	*x = Ipv6IoTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6IoTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6IoTraffic) ProtoMessage() {}

func (x *Ipv6IoTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6IoTraffic.ProtoReflect.Descriptor instead.
func (*Ipv6IoTraffic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv6IoTraffic) GetTotalPackets() uint32 {
	if x != nil {
		return x.TotalPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetLocalDestinationPackets() uint32 {
	if x != nil {
		return x.LocalDestinationPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetFormatErrors() uint32 {
	if x != nil {
		return x.FormatErrors
	}
	return 0
}

func (x *Ipv6IoTraffic) GetTruncatedPackets() uint32 {
	if x != nil {
		return x.TruncatedPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetHopCountExceededPackets() uint32 {
	if x != nil {
		return x.HopCountExceededPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetBadSourceAddressPackets() uint32 {
	if x != nil {
		return x.BadSourceAddressPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetBadHeaderPackets() uint32 {
	if x != nil {
		return x.BadHeaderPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetUnknownOptionTypePackets() uint32 {
	if x != nil {
		return x.UnknownOptionTypePackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetUnknownProtocolPackets() uint32 {
	if x != nil {
		return x.UnknownProtocolPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetFragments() uint32 {
	if x != nil {
		return x.Fragments
	}
	return 0
}

func (x *Ipv6IoTraffic) GetReassembledPackets() uint32 {
	if x != nil {
		return x.ReassembledPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetReassemblyTimeouts() uint32 {
	if x != nil {
		return x.ReassemblyTimeouts
	}
	return 0
}

func (x *Ipv6IoTraffic) GetReassemblyFailures() uint32 {
	if x != nil {
		return x.ReassemblyFailures
	}
	return 0
}

func (x *Ipv6IoTraffic) GetReassemblyMaximumDrops() uint32 {
	if x != nil {
		return x.ReassemblyMaximumDrops
	}
	return 0
}

func (x *Ipv6IoTraffic) GetGeneratedPackets() uint32 {
	if x != nil {
		return x.GeneratedPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetForwardedPackets() uint32 {
	if x != nil {
		return x.ForwardedPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetSourceRoutedPackets() uint32 {
	if x != nil {
		return x.SourceRoutedPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetFragmentedPackets() uint32 {
	if x != nil {
		return x.FragmentedPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetFragmentCount() uint32 {
	if x != nil {
		return x.FragmentCount
	}
	return 0
}

func (x *Ipv6IoTraffic) GetFragmentFailures() uint32 {
	if x != nil {
		return x.FragmentFailures
	}
	return 0
}

func (x *Ipv6IoTraffic) GetNoRoutePackets() uint32 {
	if x != nil {
		return x.NoRoutePackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetTooBigPackets() uint32 {
	if x != nil {
		return x.TooBigPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetReceivedMulticastPackets() uint32 {
	if x != nil {
		return x.ReceivedMulticastPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetSentMulticastPackets() uint32 {
	if x != nil {
		return x.SentMulticastPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetMiscellaneousDrops() uint32 {
	if x != nil {
		return x.MiscellaneousDrops
	}
	return 0
}

func (x *Ipv6IoTraffic) GetLispV4EncapPackets() uint32 {
	if x != nil {
		return x.LispV4EncapPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetLispV4DecapPackets() uint32 {
	if x != nil {
		return x.LispV4DecapPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetLispV6EncapPackets() uint32 {
	if x != nil {
		return x.LispV6EncapPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetLispV6DecapPackets() uint32 {
	if x != nil {
		return x.LispV6DecapPackets
	}
	return 0
}

func (x *Ipv6IoTraffic) GetLispEncapErrors() uint32 {
	if x != nil {
		return x.LispEncapErrors
	}
	return 0
}

func (x *Ipv6IoTraffic) GetLispDecapErrors() uint32 {
	if x != nil {
		return x.LispDecapErrors
	}
	return 0
}

// ICMPv6 Traffic Information
type Ipv6IoIcmpTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ICMP Received
	TotalMessages uint32 `protobuf:"varint,1,opt,name=total_messages,json=totalMessages,proto3" json:"total_messages,omitempty"`
	// ICMP Too Short Errors
	TooShortErrorMessages uint32 `protobuf:"varint,2,opt,name=too_short_error_messages,json=tooShortErrorMessages,proto3" json:"too_short_error_messages,omitempty"`
	// ICMP Checksum Errors
	ChecksumErrorMessages uint32 `protobuf:"varint,3,opt,name=checksum_error_messages,json=checksumErrorMessages,proto3" json:"checksum_error_messages,omitempty"`
	// ICMP Unknown Error
	UnknownErrorTypeMessages uint32 `protobuf:"varint,4,opt,name=unknown_error_type_messages,json=unknownErrorTypeMessages,proto3" json:"unknown_error_type_messages,omitempty"`
	// ICMP Transmitted
	OutputMessages uint32 `protobuf:"varint,5,opt,name=output_messages,json=outputMessages,proto3" json:"output_messages,omitempty"`
	// ICMP Sent Packets Ratelimited
	SentRateLimitedPackets uint32 `protobuf:"varint,6,opt,name=sent_rate_limited_packets,json=sentRateLimitedPackets,proto3" json:"sent_rate_limited_packets,omitempty"`
	// ICMP Route Unreachable Sent
	SentUnreachableRoutingMessages uint32 `protobuf:"varint,7,opt,name=sent_unreachable_routing_messages,json=sentUnreachableRoutingMessages,proto3" json:"sent_unreachable_routing_messages,omitempty"`
	// ICMP Admin Unreachable Sent
	SentUnreachableAdminMessages uint32 `protobuf:"varint,8,opt,name=sent_unreachable_admin_messages,json=sentUnreachableAdminMessages,proto3" json:"sent_unreachable_admin_messages,omitempty"`
	// ICMP Host Unreachable Sent
	SentUnreachableNeighborMessages uint32 `protobuf:"varint,9,opt,name=sent_unreachable_neighbor_messages,json=sentUnreachableNeighborMessages,proto3" json:"sent_unreachable_neighbor_messages,omitempty"`
	// ICMP Addr Unreachable Sent
	SentUnreachableAddressMessages uint32 `protobuf:"varint,10,opt,name=sent_unreachable_address_messages,json=sentUnreachableAddressMessages,proto3" json:"sent_unreachable_address_messages,omitempty"`
	// ICMP Port Unreachable Sent
	SentUnreachablePortMessages uint32 `protobuf:"varint,11,opt,name=sent_unreachable_port_messages,json=sentUnreachablePortMessages,proto3" json:"sent_unreachable_port_messages,omitempty"`
	// ICMP Route Unreachable Received
	ReceivedUnreachableRoutingMessages uint32 `protobuf:"varint,12,opt,name=received_unreachable_routing_messages,json=receivedUnreachableRoutingMessages,proto3" json:"received_unreachable_routing_messages,omitempty"`
	// ICMP Admin Unreachable Received
	ReceivedUnreachableAdminMessages uint32 `protobuf:"varint,13,opt,name=received_unreachable_admin_messages,json=receivedUnreachableAdminMessages,proto3" json:"received_unreachable_admin_messages,omitempty"`
	// ICMP Host Unreachable Received
	ReceivedUnreachableNeighborMessages uint32 `protobuf:"varint,14,opt,name=received_unreachable_neighbor_messages,json=receivedUnreachableNeighborMessages,proto3" json:"received_unreachable_neighbor_messages,omitempty"`
	// ICMP Addr Unreachable Received
	ReceivedUnreachableAddressMessages uint32 `protobuf:"varint,15,opt,name=received_unreachable_address_messages,json=receivedUnreachableAddressMessages,proto3" json:"received_unreachable_address_messages,omitempty"`
	// ICMP Port Unreachable Received
	ReceivedUnreachablePortMessages uint32 `protobuf:"varint,16,opt,name=received_unreachable_port_messages,json=receivedUnreachablePortMessages,proto3" json:"received_unreachable_port_messages,omitempty"`
	// ICMP Hop Count Expired Sent
	SentHopCountExpiredMessages uint32 `protobuf:"varint,17,opt,name=sent_hop_count_expired_messages,json=sentHopCountExpiredMessages,proto3" json:"sent_hop_count_expired_messages,omitempty"`
	// ICMP Reassembly Timeouts
	SentReassemblyTimeouts uint32 `protobuf:"varint,18,opt,name=sent_reassembly_timeouts,json=sentReassemblyTimeouts,proto3" json:"sent_reassembly_timeouts,omitempty"`
	// ICMP Hop Count Expired Received
	ReceivedHopCountExpiredMessages uint32 `protobuf:"varint,19,opt,name=received_hop_count_expired_messages,json=receivedHopCountExpiredMessages,proto3" json:"received_hop_count_expired_messages,omitempty"`
	// ICMP Reassembly Timeouts
	ReceivedReassemblyTimeouts uint32 `protobuf:"varint,20,opt,name=received_reassembly_timeouts,json=receivedReassemblyTimeouts,proto3" json:"received_reassembly_timeouts,omitempty"`
	// ICMP Too Big Messages Sent
	SentTooBigMessages uint32 `protobuf:"varint,21,opt,name=sent_too_big_messages,json=sentTooBigMessages,proto3" json:"sent_too_big_messages,omitempty"`
	// ICMP Too Big Messages Received
	ReceivedTooBigMessages uint32 `protobuf:"varint,22,opt,name=received_too_big_messages,json=receivedTooBigMessages,proto3" json:"received_too_big_messages,omitempty"`
	// ICMP Parameter Error Messages Sent
	SentParameterErrorMessages uint32 `protobuf:"varint,23,opt,name=sent_parameter_error_messages,json=sentParameterErrorMessages,proto3" json:"sent_parameter_error_messages,omitempty"`
	// ICMP Parameter Next Header Messages Sent
	SentParameterHeaderMessages uint32 `protobuf:"varint,24,opt,name=sent_parameter_header_messages,json=sentParameterHeaderMessages,proto3" json:"sent_parameter_header_messages,omitempty"`
	// ICMP Parameter Option Messages Sent
	SentParameterOptionMessages uint32 `protobuf:"varint,25,opt,name=sent_parameter_option_messages,json=sentParameterOptionMessages,proto3" json:"sent_parameter_option_messages,omitempty"`
	// ICMP Parameter Error Messages Received
	ReceivedParameterErrorMessages uint32 `protobuf:"varint,26,opt,name=received_parameter_error_messages,json=receivedParameterErrorMessages,proto3" json:"received_parameter_error_messages,omitempty"`
	// ICMP Parameter Next Header Messages Received
	ReceivedParameterHeaderMessages uint32 `protobuf:"varint,27,opt,name=received_parameter_header_messages,json=receivedParameterHeaderMessages,proto3" json:"received_parameter_header_messages,omitempty"`
	// ICMP Parameter Option Problem Received
	ReceivedParameterOptionMessages uint32 `protobuf:"varint,28,opt,name=received_parameter_option_messages,json=receivedParameterOptionMessages,proto3" json:"received_parameter_option_messages,omitempty"`
	// ICMP Echo Request Sent
	SentEchoRequestMessages uint32 `protobuf:"varint,29,opt,name=sent_echo_request_messages,json=sentEchoRequestMessages,proto3" json:"sent_echo_request_messages,omitempty"`
	// ICMP Echo Reply Sent
	SentEchoReplyMessages uint32 `protobuf:"varint,30,opt,name=sent_echo_reply_messages,json=sentEchoReplyMessages,proto3" json:"sent_echo_reply_messages,omitempty"`
	// ICMP Echo Request Received
	ReceivedEchoRequestMessages uint32 `protobuf:"varint,31,opt,name=received_echo_request_messages,json=receivedEchoRequestMessages,proto3" json:"received_echo_request_messages,omitempty"`
	// ICMP Echo Reply Received
	ReceivedEchoReplyMessages uint32 `protobuf:"varint,32,opt,name=received_echo_reply_messages,json=receivedEchoReplyMessages,proto3" json:"received_echo_reply_messages,omitempty"`
	// ICMP Unknown Timeout Messages Sent
	SentUnknownTimeoutMessages uint32 `protobuf:"varint,33,opt,name=sent_unknown_timeout_messages,json=sentUnknownTimeoutMessages,proto3" json:"sent_unknown_timeout_messages,omitempty"`
	// ICMP Unknown Timeout Messages Received
	ReceivedUnknownTimeoutMessages uint32 `protobuf:"varint,34,opt,name=received_unknown_timeout_messages,json=receivedUnknownTimeoutMessages,proto3" json:"received_unknown_timeout_messages,omitempty"`
	// ICMP Parameter Unknown Type Messages Sent
	SentParameterUnknownTypeMessages uint32 `protobuf:"varint,35,opt,name=sent_parameter_unknown_type_messages,json=sentParameterUnknownTypeMessages,proto3" json:"sent_parameter_unknown_type_messages,omitempty"`
	// ICMP Parameter Unknown Type Messages Received
	ReceivedParameterUnknownTypeMessages uint32 `protobuf:"varint,36,opt,name=received_parameter_unknown_type_messages,json=receivedParameterUnknownTypeMessages,proto3" json:"received_parameter_unknown_type_messages,omitempty"`
	// ICMP Unreachable Unknown Messages Sent
	SentUnreachableUnknownTypeMessages uint32 `protobuf:"varint,37,opt,name=sent_unreachable_unknown_type_messages,json=sentUnreachableUnknownTypeMessages,proto3" json:"sent_unreachable_unknown_type_messages,omitempty"`
	// ICMP Unreachable Unknown Messages Received
	ReceivedUnreachableUnknownTypeMessages uint32 `protobuf:"varint,38,opt,name=received_unreachable_unknown_type_messages,json=receivedUnreachableUnknownTypeMessages,proto3" json:"received_unreachable_unknown_type_messages,omitempty"`
}

func (x *Ipv6IoIcmpTraffic) Reset() {
	*x = Ipv6IoIcmpTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6IoIcmpTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6IoIcmpTraffic) ProtoMessage() {}

func (x *Ipv6IoIcmpTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6IoIcmpTraffic.ProtoReflect.Descriptor instead.
func (*Ipv6IoIcmpTraffic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv6IoIcmpTraffic) GetTotalMessages() uint32 {
	if x != nil {
		return x.TotalMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetTooShortErrorMessages() uint32 {
	if x != nil {
		return x.TooShortErrorMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetChecksumErrorMessages() uint32 {
	if x != nil {
		return x.ChecksumErrorMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetUnknownErrorTypeMessages() uint32 {
	if x != nil {
		return x.UnknownErrorTypeMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetOutputMessages() uint32 {
	if x != nil {
		return x.OutputMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentRateLimitedPackets() uint32 {
	if x != nil {
		return x.SentRateLimitedPackets
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentUnreachableRoutingMessages() uint32 {
	if x != nil {
		return x.SentUnreachableRoutingMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentUnreachableAdminMessages() uint32 {
	if x != nil {
		return x.SentUnreachableAdminMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentUnreachableNeighborMessages() uint32 {
	if x != nil {
		return x.SentUnreachableNeighborMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentUnreachableAddressMessages() uint32 {
	if x != nil {
		return x.SentUnreachableAddressMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentUnreachablePortMessages() uint32 {
	if x != nil {
		return x.SentUnreachablePortMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedUnreachableRoutingMessages() uint32 {
	if x != nil {
		return x.ReceivedUnreachableRoutingMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedUnreachableAdminMessages() uint32 {
	if x != nil {
		return x.ReceivedUnreachableAdminMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedUnreachableNeighborMessages() uint32 {
	if x != nil {
		return x.ReceivedUnreachableNeighborMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedUnreachableAddressMessages() uint32 {
	if x != nil {
		return x.ReceivedUnreachableAddressMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedUnreachablePortMessages() uint32 {
	if x != nil {
		return x.ReceivedUnreachablePortMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentHopCountExpiredMessages() uint32 {
	if x != nil {
		return x.SentHopCountExpiredMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentReassemblyTimeouts() uint32 {
	if x != nil {
		return x.SentReassemblyTimeouts
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedHopCountExpiredMessages() uint32 {
	if x != nil {
		return x.ReceivedHopCountExpiredMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedReassemblyTimeouts() uint32 {
	if x != nil {
		return x.ReceivedReassemblyTimeouts
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentTooBigMessages() uint32 {
	if x != nil {
		return x.SentTooBigMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedTooBigMessages() uint32 {
	if x != nil {
		return x.ReceivedTooBigMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentParameterErrorMessages() uint32 {
	if x != nil {
		return x.SentParameterErrorMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentParameterHeaderMessages() uint32 {
	if x != nil {
		return x.SentParameterHeaderMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentParameterOptionMessages() uint32 {
	if x != nil {
		return x.SentParameterOptionMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedParameterErrorMessages() uint32 {
	if x != nil {
		return x.ReceivedParameterErrorMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedParameterHeaderMessages() uint32 {
	if x != nil {
		return x.ReceivedParameterHeaderMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedParameterOptionMessages() uint32 {
	if x != nil {
		return x.ReceivedParameterOptionMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentEchoRequestMessages() uint32 {
	if x != nil {
		return x.SentEchoRequestMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentEchoReplyMessages() uint32 {
	if x != nil {
		return x.SentEchoReplyMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedEchoRequestMessages() uint32 {
	if x != nil {
		return x.ReceivedEchoRequestMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedEchoReplyMessages() uint32 {
	if x != nil {
		return x.ReceivedEchoReplyMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentUnknownTimeoutMessages() uint32 {
	if x != nil {
		return x.SentUnknownTimeoutMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedUnknownTimeoutMessages() uint32 {
	if x != nil {
		return x.ReceivedUnknownTimeoutMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentParameterUnknownTypeMessages() uint32 {
	if x != nil {
		return x.SentParameterUnknownTypeMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedParameterUnknownTypeMessages() uint32 {
	if x != nil {
		return x.ReceivedParameterUnknownTypeMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetSentUnreachableUnknownTypeMessages() uint32 {
	if x != nil {
		return x.SentUnreachableUnknownTypeMessages
	}
	return 0
}

func (x *Ipv6IoIcmpTraffic) GetReceivedUnreachableUnknownTypeMessages() uint32 {
	if x != nil {
		return x.ReceivedUnreachableUnknownTypeMessages
	}
	return 0
}

// IPV6 ND Traffic
type Ipv6NdTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ICMP Router Solicitations Sent
	SentRouterSolicitationMessages uint32 `protobuf:"varint,1,opt,name=sent_router_solicitation_messages,json=sentRouterSolicitationMessages,proto3" json:"sent_router_solicitation_messages,omitempty"`
	// ICMP Router Advertisements Sent
	SentRouterAdvertisementMessages uint32 `protobuf:"varint,2,opt,name=sent_router_advertisement_messages,json=sentRouterAdvertisementMessages,proto3" json:"sent_router_advertisement_messages,omitempty"`
	// ICMP Neighbor Solicitations Sent
	SentNeighborSolicitationMessages uint32 `protobuf:"varint,3,opt,name=sent_neighbor_solicitation_messages,json=sentNeighborSolicitationMessages,proto3" json:"sent_neighbor_solicitation_messages,omitempty"`
	// ICMP Neighbor Advertisements Sent
	SentNeighborAdvertisementMessages uint32 `protobuf:"varint,4,opt,name=sent_neighbor_advertisement_messages,json=sentNeighborAdvertisementMessages,proto3" json:"sent_neighbor_advertisement_messages,omitempty"`
	// ICMP Redirect Sent
	SentRedirectMessages uint32 `protobuf:"varint,5,opt,name=sent_redirect_messages,json=sentRedirectMessages,proto3" json:"sent_redirect_messages,omitempty"`
	// ICMP Router Solicitations Received
	ReceivedRouterSolicitationMessages uint32 `protobuf:"varint,6,opt,name=received_router_solicitation_messages,json=receivedRouterSolicitationMessages,proto3" json:"received_router_solicitation_messages,omitempty"`
	// ICMP Router Advertisements Received
	ReceivedRouterAdvertisementMessages uint32 `protobuf:"varint,7,opt,name=received_router_advertisement_messages,json=receivedRouterAdvertisementMessages,proto3" json:"received_router_advertisement_messages,omitempty"`
	// ICMP Neighbor Solicitations Received
	ReceivedNeighborSolicitationMessages uint32 `protobuf:"varint,8,opt,name=received_neighbor_solicitation_messages,json=receivedNeighborSolicitationMessages,proto3" json:"received_neighbor_solicitation_messages,omitempty"`
	// ICMP Neighbor Advertisements Received
	ReceivedNeighborAdvertisementMessages uint32 `protobuf:"varint,9,opt,name=received_neighbor_advertisement_messages,json=receivedNeighborAdvertisementMessages,proto3" json:"received_neighbor_advertisement_messages,omitempty"`
	// ICMP Redirect Received
	ReceivedRedirectMessages uint32 `protobuf:"varint,10,opt,name=received_redirect_messages,json=receivedRedirectMessages,proto3" json:"received_redirect_messages,omitempty"`
}

func (x *Ipv6NdTraffic) Reset() {
	*x = Ipv6NdTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6NdTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6NdTraffic) ProtoMessage() {}

func (x *Ipv6NdTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6NdTraffic.ProtoReflect.Descriptor instead.
func (*Ipv6NdTraffic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescGZIP(), []int{4}
}

func (x *Ipv6NdTraffic) GetSentRouterSolicitationMessages() uint32 {
	if x != nil {
		return x.SentRouterSolicitationMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetSentRouterAdvertisementMessages() uint32 {
	if x != nil {
		return x.SentRouterAdvertisementMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetSentNeighborSolicitationMessages() uint32 {
	if x != nil {
		return x.SentNeighborSolicitationMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetSentNeighborAdvertisementMessages() uint32 {
	if x != nil {
		return x.SentNeighborAdvertisementMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetSentRedirectMessages() uint32 {
	if x != nil {
		return x.SentRedirectMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetReceivedRouterSolicitationMessages() uint32 {
	if x != nil {
		return x.ReceivedRouterSolicitationMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetReceivedRouterAdvertisementMessages() uint32 {
	if x != nil {
		return x.ReceivedRouterAdvertisementMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetReceivedNeighborSolicitationMessages() uint32 {
	if x != nil {
		return x.ReceivedNeighborSolicitationMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetReceivedNeighborAdvertisementMessages() uint32 {
	if x != nil {
		return x.ReceivedNeighborAdvertisementMessages
	}
	return 0
}

func (x *Ipv6NdTraffic) GetReceivedRedirectMessages() uint32 {
	if x != nil {
		return x.ReceivedRedirectMessages
	}
	return 0
}

var File_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDesc = []byte{
	0x0a, 0x52, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x69, 0x6f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0x30, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x64, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x69,
	0x0a, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x11, 0x69, 0x70, 0x76, 0x36, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0xfc, 0x0b, 0x0a,
	0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x62, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x61, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f,
	0x6f, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f,
	0x75, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x70, 0x5f,
	0x76, 0x34, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x70, 0x56, 0x34, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69,
	0x73, 0x70, 0x5f, 0x76, 0x34, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x70, 0x56,
	0x34, 0x44, 0x65, 0x63, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69,
	0x73, 0x70, 0x56, 0x36, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x76, 0x36, 0x5f, 0x64, 0x65, 0x63, 0x61,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6c, 0x69, 0x73, 0x70, 0x56, 0x36, 0x44, 0x65, 0x63, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6c, 0x69, 0x73, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x70,
	0x44, 0x65, 0x63, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xe9, 0x14, 0x0a, 0x14,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x69, 0x6f, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74,
	0x6f, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74,
	0x6f, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x49, 0x0a, 0x21, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x22, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x73,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x21, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x25, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x53, 0x0a, 0x26, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x25, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x73, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x6f, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x6f, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x73, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x63,
	0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x74, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x63, 0x68,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x63, 0x68,
	0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x24, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x73,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x28, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x24, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x2a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x26, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x95, 0x06, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x21, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1f, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x21, 0x73, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x25, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x26,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x55, 0x0a, 0x27, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x24, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x28, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescData = file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_goTypes = []interface{}{
	(*Ipv6Traffic_KEYS)(nil),  // 0: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_traffic_KEYS
	(*Ipv6Traffic)(nil),       // 1: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_traffic
	(*Ipv6IoTraffic)(nil),     // 2: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_io_traffic
	(*Ipv6IoIcmpTraffic)(nil), // 3: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_io_icmp_traffic
	(*Ipv6NdTraffic)(nil),     // 4: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_nd_traffic
}
var file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_traffic.ipv6:type_name -> cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_io_traffic
	3, // 1: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_traffic.icmp:type_name -> cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_io_icmp_traffic
	4, // 2: cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_traffic.ipv6_node_discovery:type_name -> cisco_ios_xr_ipv6_io_oper.ipv6_io.nodes.node.statistics.traffic.ipv6_nd_traffic
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_init()
}
func file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_init() {
	if File_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Traffic_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Traffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6IoTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6IoIcmpTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6NdTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto = out.File
	file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_io_oper_ipv6_io_nodes_node_statistics_traffic_ipv6_traffic_proto_depIdxs = nil
}
