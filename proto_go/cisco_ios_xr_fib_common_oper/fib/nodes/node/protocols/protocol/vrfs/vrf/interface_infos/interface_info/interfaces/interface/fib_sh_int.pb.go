// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/fib/nodes/node/protocols/protocol/vrfs/vrf/interface_infos/interface_info/interfaces/interface/fib_sh_int.proto

package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FIB per interface information
type FibShInt_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProtocolName  string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	VrfName       string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	LinkType      string `protobuf:"bytes,4,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	InterfaceName string `protobuf:"bytes,5,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *FibShInt_KEYS) Reset() {
	*x = FibShInt_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShInt_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShInt_KEYS) ProtoMessage() {}

func (x *FibShInt_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShInt_KEYS.ProtoReflect.Descriptor instead.
func (*FibShInt_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescGZIP(), []int{0}
}

func (x *FibShInt_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *FibShInt_KEYS) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *FibShInt_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *FibShInt_KEYS) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *FibShInt_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type FibShInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface handle
	PerInterface string `protobuf:"bytes,50,opt,name=per_interface,json=perInterface,proto3" json:"per_interface,omitempty"`
	// FIB Interface type
	FibInterfaceType uint32 `protobuf:"varint,51,opt,name=fib_interface_type,json=fibInterfaceType,proto3" json:"fib_interface_type,omitempty"`
	// Pointer to fibidb
	FibIdPointer uint32 `protobuf:"varint,52,opt,name=fib_id_pointer,json=fibIdPointer,proto3" json:"fib_id_pointer,omitempty"`
	// Flags on fibidb
	FibIdFlags uint32 `protobuf:"varint,53,opt,name=fib_id_flags,json=fibIdFlags,proto3" json:"fib_id_flags,omitempty"`
	// Pointer to fibidb extension
	FibIdExtensionPointer uint32 `protobuf:"varint,54,opt,name=fib_id_extension_pointer,json=fibIdExtensionPointer,proto3" json:"fib_id_extension_pointer,omitempty"`
	// Flags on fibidb extension
	FibIdExtensionFlags uint32 `protobuf:"varint,55,opt,name=fib_id_extension_flags,json=fibIdExtensionFlags,proto3" json:"fib_id_extension_flags,omitempty"`
	// Number of dependent nhinfo's
	NumberOfDependentNextHopInformation uint32 `protobuf:"varint,56,opt,name=number_of_dependent_next_hop_information,json=numberOfDependentNextHopInformation,proto3" json:"number_of_dependent_next_hop_information,omitempty"`
	// Vrf local cef info ptr
	VrfLocalCefInformationPointer uint32 `protobuf:"varint,57,opt,name=vrf_local_cef_information_pointer,json=vrfLocalCefInformationPointer,proto3" json:"vrf_local_cef_information_pointer,omitempty"`
	// Reference count
	ReferenceCount uint32 `protobuf:"varint,58,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty"`
	// Time last modified
	LastModifiedTime uint32 `protobuf:"varint,59,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	// Last Oper
	LastOperation string `protobuf:"bytes,60,opt,name=last_operation,json=lastOperation,proto3" json:"last_operation,omitempty"`
	// Is the protocol configured?
	ProtocolEnabled bool `protobuf:"varint,61,opt,name=protocol_enabled,json=protocolEnabled,proto3" json:"protocol_enabled,omitempty"`
	// Detailed FIB interface information
	DetailFibIntInformation *FibShIntDet `protobuf:"bytes,62,opt,name=detail_fib_int_information,json=detailFibIntInformation,proto3" json:"detail_fib_int_information,omitempty"`
	// Reference count for the protocol
	ReferanceCountForProtocol uint32 `protobuf:"varint,63,opt,name=referance_count_for_protocol,json=referanceCountForProtocol,proto3" json:"referance_count_for_protocol,omitempty"`
	// Number of input packets
	NumberOfInputPackets uint64 `protobuf:"varint,64,opt,name=number_of_input_packets,json=numberOfInputPackets,proto3" json:"number_of_input_packets,omitempty"`
	// Number of input bytes
	NumberOfInputBytes uint64 `protobuf:"varint,65,opt,name=number_of_input_bytes,json=numberOfInputBytes,proto3" json:"number_of_input_bytes,omitempty"`
	// Number of output packets
	NumberOfOutputPackets uint64 `protobuf:"varint,66,opt,name=number_of_output_packets,json=numberOfOutputPackets,proto3" json:"number_of_output_packets,omitempty"`
	// Number of output bytes
	NumberOfOutputBytes uint64 `protobuf:"varint,67,opt,name=number_of_output_bytes,json=numberOfOutputBytes,proto3" json:"number_of_output_bytes,omitempty"`
	// Interface up flag
	InterfaceUpFlag bool `protobuf:"varint,68,opt,name=interface_up_flag,json=interfaceUpFlag,proto3" json:"interface_up_flag,omitempty"`
	// Per packet loadbalancing flag
	PerPacketLoadBalancingFlag bool `protobuf:"varint,69,opt,name=per_packet_load_balancing_flag,json=perPacketLoadBalancingFlag,proto3" json:"per_packet_load_balancing_flag,omitempty"`
	// P2P interface flag
	P2PInterfaceFlag bool `protobuf:"varint,70,opt,name=p2_p_interface_flag,json=p2PInterfaceFlag,proto3" json:"p2_p_interface_flag,omitempty"`
	// Loopback interface flag
	LoopbackInterfaceFlag bool `protobuf:"varint,71,opt,name=loopback_interface_flag,json=loopbackInterfaceFlag,proto3" json:"loopback_interface_flag,omitempty"`
	// Null interface flag
	NullInterfaceFlag bool `protobuf:"varint,72,opt,name=null_interface_flag,json=nullInterfaceFlag,proto3" json:"null_interface_flag,omitempty"`
	// Tunnel interface flag
	TunnelInterfaceFlag bool `protobuf:"varint,73,opt,name=tunnel_interface_flag,json=tunnelInterfaceFlag,proto3" json:"tunnel_interface_flag,omitempty"`
	// GRE Tunnel interface flag
	GreTunnelInterfaceFlag bool `protobuf:"varint,74,opt,name=gre_tunnel_interface_flag,json=greTunnelInterfaceFlag,proto3" json:"gre_tunnel_interface_flag,omitempty"`
	// Punt packets from FIB switching flag
	PuntPacketsFromFibSwitchingFlag bool `protobuf:"varint,75,opt,name=punt_packets_from_fib_switching_flag,json=puntPacketsFromFibSwitchingFlag,proto3" json:"punt_packets_from_fib_switching_flag,omitempty"`
	// Drop packets while FIB switching flag
	DropPacketsWhileFibSwitchingFlag bool `protobuf:"varint,76,opt,name=drop_packets_while_fib_switching_flag,json=dropPacketsWhileFibSwitchingFlag,proto3" json:"drop_packets_while_fib_switching_flag,omitempty"`
	// Punt packets from linecard flag
	PuntPacketsFromLinecardFlag bool `protobuf:"varint,77,opt,name=punt_packets_from_linecard_flag,json=puntPacketsFromLinecardFlag,proto3" json:"punt_packets_from_linecard_flag,omitempty"`
	// Pimary local v4 address for the interface
	PrimaryIpv4Address string `protobuf:"bytes,78,opt,name=primary_ipv4_address,json=primaryIpv4Address,proto3" json:"primary_ipv4_address,omitempty"`
	// Pimary local v6 address for the interface
	PrimaryIpv6Address string `protobuf:"bytes,79,opt,name=primary_ipv6_address,json=primaryIpv6Address,proto3" json:"primary_ipv6_address,omitempty"`
	// Internal Information
	SiInternal *FibShIntInternal `protobuf:"bytes,80,opt,name=si_internal,json=siInternal,proto3" json:"si_internal,omitempty"`
}

func (x *FibShInt) Reset() {
	*x = FibShInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShInt) ProtoMessage() {}

func (x *FibShInt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShInt.ProtoReflect.Descriptor instead.
func (*FibShInt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescGZIP(), []int{1}
}

func (x *FibShInt) GetPerInterface() string {
	if x != nil {
		return x.PerInterface
	}
	return ""
}

func (x *FibShInt) GetFibInterfaceType() uint32 {
	if x != nil {
		return x.FibInterfaceType
	}
	return 0
}

func (x *FibShInt) GetFibIdPointer() uint32 {
	if x != nil {
		return x.FibIdPointer
	}
	return 0
}

func (x *FibShInt) GetFibIdFlags() uint32 {
	if x != nil {
		return x.FibIdFlags
	}
	return 0
}

func (x *FibShInt) GetFibIdExtensionPointer() uint32 {
	if x != nil {
		return x.FibIdExtensionPointer
	}
	return 0
}

func (x *FibShInt) GetFibIdExtensionFlags() uint32 {
	if x != nil {
		return x.FibIdExtensionFlags
	}
	return 0
}

func (x *FibShInt) GetNumberOfDependentNextHopInformation() uint32 {
	if x != nil {
		return x.NumberOfDependentNextHopInformation
	}
	return 0
}

func (x *FibShInt) GetVrfLocalCefInformationPointer() uint32 {
	if x != nil {
		return x.VrfLocalCefInformationPointer
	}
	return 0
}

func (x *FibShInt) GetReferenceCount() uint32 {
	if x != nil {
		return x.ReferenceCount
	}
	return 0
}

func (x *FibShInt) GetLastModifiedTime() uint32 {
	if x != nil {
		return x.LastModifiedTime
	}
	return 0
}

func (x *FibShInt) GetLastOperation() string {
	if x != nil {
		return x.LastOperation
	}
	return ""
}

func (x *FibShInt) GetProtocolEnabled() bool {
	if x != nil {
		return x.ProtocolEnabled
	}
	return false
}

func (x *FibShInt) GetDetailFibIntInformation() *FibShIntDet {
	if x != nil {
		return x.DetailFibIntInformation
	}
	return nil
}

func (x *FibShInt) GetReferanceCountForProtocol() uint32 {
	if x != nil {
		return x.ReferanceCountForProtocol
	}
	return 0
}

func (x *FibShInt) GetNumberOfInputPackets() uint64 {
	if x != nil {
		return x.NumberOfInputPackets
	}
	return 0
}

func (x *FibShInt) GetNumberOfInputBytes() uint64 {
	if x != nil {
		return x.NumberOfInputBytes
	}
	return 0
}

func (x *FibShInt) GetNumberOfOutputPackets() uint64 {
	if x != nil {
		return x.NumberOfOutputPackets
	}
	return 0
}

func (x *FibShInt) GetNumberOfOutputBytes() uint64 {
	if x != nil {
		return x.NumberOfOutputBytes
	}
	return 0
}

func (x *FibShInt) GetInterfaceUpFlag() bool {
	if x != nil {
		return x.InterfaceUpFlag
	}
	return false
}

func (x *FibShInt) GetPerPacketLoadBalancingFlag() bool {
	if x != nil {
		return x.PerPacketLoadBalancingFlag
	}
	return false
}

func (x *FibShInt) GetP2PInterfaceFlag() bool {
	if x != nil {
		return x.P2PInterfaceFlag
	}
	return false
}

func (x *FibShInt) GetLoopbackInterfaceFlag() bool {
	if x != nil {
		return x.LoopbackInterfaceFlag
	}
	return false
}

func (x *FibShInt) GetNullInterfaceFlag() bool {
	if x != nil {
		return x.NullInterfaceFlag
	}
	return false
}

func (x *FibShInt) GetTunnelInterfaceFlag() bool {
	if x != nil {
		return x.TunnelInterfaceFlag
	}
	return false
}

func (x *FibShInt) GetGreTunnelInterfaceFlag() bool {
	if x != nil {
		return x.GreTunnelInterfaceFlag
	}
	return false
}

func (x *FibShInt) GetPuntPacketsFromFibSwitchingFlag() bool {
	if x != nil {
		return x.PuntPacketsFromFibSwitchingFlag
	}
	return false
}

func (x *FibShInt) GetDropPacketsWhileFibSwitchingFlag() bool {
	if x != nil {
		return x.DropPacketsWhileFibSwitchingFlag
	}
	return false
}

func (x *FibShInt) GetPuntPacketsFromLinecardFlag() bool {
	if x != nil {
		return x.PuntPacketsFromLinecardFlag
	}
	return false
}

func (x *FibShInt) GetPrimaryIpv4Address() string {
	if x != nil {
		return x.PrimaryIpv4Address
	}
	return ""
}

func (x *FibShInt) GetPrimaryIpv6Address() string {
	if x != nil {
		return x.PrimaryIpv6Address
	}
	return ""
}

func (x *FibShInt) GetSiInternal() *FibShIntInternal {
	if x != nil {
		return x.SiInternal
	}
	return nil
}

// Event history Entry
type EvtHistEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the event
	EvtTimestamp string `protobuf:"bytes,1,opt,name=evt_timestamp,json=evtTimestamp,proto3" json:"evt_timestamp,omitempty"`
	// Event name
	EvtName string `protobuf:"bytes,2,opt,name=evt_name,json=evtName,proto3" json:"evt_name,omitempty"`
	// Event type
	EvtType uint32 `protobuf:"varint,3,opt,name=evt_type,json=evtType,proto3" json:"evt_type,omitempty"`
	// Multiple instance flag
	EvtMany bool `protobuf:"varint,4,opt,name=evt_many,json=evtMany,proto3" json:"evt_many,omitempty"`
	// Sticky flag
	EvtSticky bool `protobuf:"varint,5,opt,name=evt_sticky,json=evtSticky,proto3" json:"evt_sticky,omitempty"`
	// Optional data
	EvtData []uint32 `protobuf:"varint,6,rep,packed,name=evt_data,json=evtData,proto3" json:"evt_data,omitempty"`
}

func (x *EvtHistEntry) Reset() {
	*x = EvtHistEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvtHistEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvtHistEntry) ProtoMessage() {}

func (x *EvtHistEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvtHistEntry.ProtoReflect.Descriptor instead.
func (*EvtHistEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescGZIP(), []int{2}
}

func (x *EvtHistEntry) GetEvtTimestamp() string {
	if x != nil {
		return x.EvtTimestamp
	}
	return ""
}

func (x *EvtHistEntry) GetEvtName() string {
	if x != nil {
		return x.EvtName
	}
	return ""
}

func (x *EvtHistEntry) GetEvtType() uint32 {
	if x != nil {
		return x.EvtType
	}
	return 0
}

func (x *EvtHistEntry) GetEvtMany() bool {
	if x != nil {
		return x.EvtMany
	}
	return false
}

func (x *EvtHistEntry) GetEvtSticky() bool {
	if x != nil {
		return x.EvtSticky
	}
	return false
}

func (x *EvtHistEntry) GetEvtData() []uint32 {
	if x != nil {
		return x.EvtData
	}
	return nil
}

// Per object event history
type EvtHistInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Class name string
	EvtClassName string `protobuf:"bytes,1,opt,name=evt_class_name,json=evtClassName,proto3" json:"evt_class_name,omitempty"`
	// Array of event entries
	EvtEntry []*EvtHistEntry `protobuf:"bytes,2,rep,name=evt_entry,json=evtEntry,proto3" json:"evt_entry,omitempty"`
}

func (x *EvtHistInfo) Reset() {
	*x = EvtHistInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvtHistInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvtHistInfo) ProtoMessage() {}

func (x *EvtHistInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvtHistInfo.ProtoReflect.Descriptor instead.
func (*EvtHistInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescGZIP(), []int{3}
}

func (x *EvtHistInfo) GetEvtClassName() string {
	if x != nil {
		return x.EvtClassName
	}
	return ""
}

func (x *EvtHistInfo) GetEvtEntry() []*EvtHistEntry {
	if x != nil {
		return x.EvtEntry
	}
	return nil
}

// FIB per interface detail information
type FibShIntDet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface Protocol MTU
	InterfaceMtu uint32 `protobuf:"varint,1,opt,name=interface_mtu,json=interfaceMtu,proto3" json:"interface_mtu,omitempty"`
	// Forwarding enabled/disabled flag
	ForwardingFlag bool `protobuf:"varint,2,opt,name=forwarding_flag,json=forwardingFlag,proto3" json:"forwarding_flag,omitempty"`
	// RPF configured flag
	RpfConfiguredFlag bool `protobuf:"varint,3,opt,name=rpf_configured_flag,json=rpfConfiguredFlag,proto3" json:"rpf_configured_flag,omitempty"`
	// RPF mode
	RpfMode string `protobuf:"bytes,4,opt,name=rpf_mode,json=rpfMode,proto3" json:"rpf_mode,omitempty"`
	// Allow default route with RPF
	DefaultRouteWithRpf bool `protobuf:"varint,5,opt,name=default_route_with_rpf,json=defaultRouteWithRpf,proto3" json:"default_route_with_rpf,omitempty"`
	// Allow selfping with RPF
	SelfPingWithRpf bool `protobuf:"varint,6,opt,name=self_ping_with_rpf,json=selfPingWithRpf,proto3" json:"self_ping_with_rpf,omitempty"`
	// BGP PA configured flag
	BgpPaInputConfiguredFlag bool `protobuf:"varint,7,opt,name=bgp_pa_input_configured_flag,json=bgpPaInputConfiguredFlag,proto3" json:"bgp_pa_input_configured_flag,omitempty"`
	// src BGP PA configured flag
	SourceBgpPaInputConfiguredFlag bool `protobuf:"varint,8,opt,name=source_bgp_pa_input_configured_flag,json=sourceBgpPaInputConfiguredFlag,proto3" json:"source_bgp_pa_input_configured_flag,omitempty"`
	// dst BGP PA configured flag
	DestinationBgpPaInputConfiguredFlag bool `protobuf:"varint,9,opt,name=destination_bgp_pa_input_configured_flag,json=destinationBgpPaInputConfiguredFlag,proto3" json:"destination_bgp_pa_input_configured_flag,omitempty"`
	// BGP PA configured flag
	BgpPaOutputConfiguredFlag bool `protobuf:"varint,10,opt,name=bgp_pa_output_configured_flag,json=bgpPaOutputConfiguredFlag,proto3" json:"bgp_pa_output_configured_flag,omitempty"`
	// src BGP PA configured flag
	SourceBgpPaOutputConfiguredFlag bool `protobuf:"varint,11,opt,name=source_bgp_pa_output_configured_flag,json=sourceBgpPaOutputConfiguredFlag,proto3" json:"source_bgp_pa_output_configured_flag,omitempty"`
	// dst BGP PA configured flag
	DestinationBgpPaOutputConfiguredFlag bool `protobuf:"varint,12,opt,name=destination_bgp_pa_output_configured_flag,json=destinationBgpPaOutputConfiguredFlag,proto3" json:"destination_bgp_pa_output_configured_flag,omitempty"`
	// ICMP  configured flag
	IcmpFlag uint32 `protobuf:"varint,13,opt,name=icmp_flag,json=icmpFlag,proto3" json:"icmp_flag,omitempty"`
	// Drop packets with multiple-label-stack if set
	MultiLabelDropFlag bool `protobuf:"varint,14,opt,name=multi_label_drop_flag,json=multiLabelDropFlag,proto3" json:"multi_label_drop_flag,omitempty"`
}

func (x *FibShIntDet) Reset() {
	*x = FibShIntDet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShIntDet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShIntDet) ProtoMessage() {}

func (x *FibShIntDet) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShIntDet.ProtoReflect.Descriptor instead.
func (*FibShIntDet) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescGZIP(), []int{4}
}

func (x *FibShIntDet) GetInterfaceMtu() uint32 {
	if x != nil {
		return x.InterfaceMtu
	}
	return 0
}

func (x *FibShIntDet) GetForwardingFlag() bool {
	if x != nil {
		return x.ForwardingFlag
	}
	return false
}

func (x *FibShIntDet) GetRpfConfiguredFlag() bool {
	if x != nil {
		return x.RpfConfiguredFlag
	}
	return false
}

func (x *FibShIntDet) GetRpfMode() string {
	if x != nil {
		return x.RpfMode
	}
	return ""
}

func (x *FibShIntDet) GetDefaultRouteWithRpf() bool {
	if x != nil {
		return x.DefaultRouteWithRpf
	}
	return false
}

func (x *FibShIntDet) GetSelfPingWithRpf() bool {
	if x != nil {
		return x.SelfPingWithRpf
	}
	return false
}

func (x *FibShIntDet) GetBgpPaInputConfiguredFlag() bool {
	if x != nil {
		return x.BgpPaInputConfiguredFlag
	}
	return false
}

func (x *FibShIntDet) GetSourceBgpPaInputConfiguredFlag() bool {
	if x != nil {
		return x.SourceBgpPaInputConfiguredFlag
	}
	return false
}

func (x *FibShIntDet) GetDestinationBgpPaInputConfiguredFlag() bool {
	if x != nil {
		return x.DestinationBgpPaInputConfiguredFlag
	}
	return false
}

func (x *FibShIntDet) GetBgpPaOutputConfiguredFlag() bool {
	if x != nil {
		return x.BgpPaOutputConfiguredFlag
	}
	return false
}

func (x *FibShIntDet) GetSourceBgpPaOutputConfiguredFlag() bool {
	if x != nil {
		return x.SourceBgpPaOutputConfiguredFlag
	}
	return false
}

func (x *FibShIntDet) GetDestinationBgpPaOutputConfiguredFlag() bool {
	if x != nil {
		return x.DestinationBgpPaOutputConfiguredFlag
	}
	return false
}

func (x *FibShIntDet) GetIcmpFlag() uint32 {
	if x != nil {
		return x.IcmpFlag
	}
	return 0
}

func (x *FibShIntDet) GetMultiLabelDropFlag() bool {
	if x != nil {
		return x.MultiLabelDropFlag
	}
	return false
}

// FIB per interface internal information
type FibShIntInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event History for IDB
	FibIdbHist *EvtHistInfo `protobuf:"bytes,1,opt,name=fib_idb_hist,json=fibIdbHist,proto3" json:"fib_idb_hist,omitempty"`
	// Event History for Srtehead
	FibSrteHeadHist *EvtHistInfo `protobuf:"bytes,2,opt,name=fib_srte_head_hist,json=fibSrteHeadHist,proto3" json:"fib_srte_head_hist,omitempty"`
}

func (x *FibShIntInternal) Reset() {
	*x = FibShIntInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShIntInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShIntInternal) ProtoMessage() {}

func (x *FibShIntInternal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShIntInternal.ProtoReflect.Descriptor instead.
func (*FibShIntInternal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescGZIP(), []int{5}
}

func (x *FibShIntInternal) GetFibIdbHist() *EvtHistInfo {
	if x != nil {
		return x.FibIdbHist
	}
	return nil
}

func (x *FibShIntInternal) GetFibSrteHeadHist() *EvtHistInfo {
	if x != nil {
		return x.FibSrteHeadHist
	}
	return nil
}

var File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDesc = []byte{
	0x0a, 0x8c, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f,
	0x66, 0x69, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x7b, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69,
	0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xb2, 0x01, 0x0a,
	0x0f, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xb9, 0x0f, 0x0a, 0x0a, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x66, 0x69, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x62,
	0x49, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x69, 0x62,
	0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x66, 0x69, 0x62, 0x49, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x66,
	0x69, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66,
	0x69, 0x62, 0x49, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x69, 0x62, 0x49, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x28, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x21, 0x76, 0x72, 0x66, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65,
	0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x76, 0x72, 0x66,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0xc9, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x52, 0x17, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69,
	0x62, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x32, 0x5f, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x32, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x72, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x67, 0x72, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4d,
	0x0a, 0x24, 0x70, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x62,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4f, 0x0a,
	0x25, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x77, 0x68,
	0x69, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x64, 0x72,
	0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x46, 0x69,
	0x62, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x44,
	0x0a, 0x1f, 0x70, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x70, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x70, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0b, 0x73, 0x69, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x90,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66,
	0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x66, 0x69,
	0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x0a, 0x73, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xc0, 0x01,
	0x0a, 0x0e, 0x65, 0x76, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x76, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x74, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x76, 0x74, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x65, 0x76, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x65, 0x76, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x8b, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x74, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x76, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0xa9, 0x06, 0x0a, 0x0e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x74, 0x75, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x70, 0x66, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x72, 0x70, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x66, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x70, 0x66, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x70, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x70, 0x66, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x70, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x70, 0x66, 0x12, 0x3e, 0x0a, 0x1c, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x62, 0x67, 0x70, 0x50, 0x61, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x4b, 0x0a, 0x23, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70,
	0x5f, 0x70, 0x61, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x67, 0x70, 0x50, 0x61, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x55, 0x0a, 0x28, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x70, 0x61, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x23, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x67,
	0x70, 0x50, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62,
	0x67, 0x70, 0x50, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4d, 0x0a, 0x24, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x67,
	0x70, 0x50, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x57, 0x0a, 0x29, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0x80, 0x03, 0x0a, 0x13, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xad, 0x01, 0x0a, 0x0c, 0x66, 0x69, 0x62,
	0x5f, 0x69, 0x64, 0x62, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x8a, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x65,
	0x76, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x69,
	0x62, 0x49, 0x64, 0x62, 0x48, 0x69, 0x73, 0x74, 0x12, 0xb8, 0x01, 0x0a, 0x12, 0x66, 0x69, 0x62,
	0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8a, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x76, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x66, 0x69, 0x62, 0x53, 0x72, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_goTypes = []interface{}{
	(*FibShInt_KEYS)(nil),    // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int_KEYS
	(*FibShInt)(nil),         // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int
	(*EvtHistEntry)(nil),     // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.evt_hist_entry
	(*EvtHistInfo)(nil),      // 3: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.evt_hist_info
	(*FibShIntDet)(nil),      // 4: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int_det
	(*FibShIntInternal)(nil), // 5: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int_internal
}
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_depIdxs = []int32{
	4, // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int.detail_fib_int_information:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int_det
	5, // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int.si_internal:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int_internal
	2, // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.evt_hist_info.evt_entry:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.evt_hist_entry
	3, // 3: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int_internal.fib_idb_hist:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.evt_hist_info
	3, // 4: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.fib_sh_int_internal.fib_srte_head_hist:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface.evt_hist_info
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShInt_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvtHistEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvtHistInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShIntDet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShIntInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto = out.File
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_interface_infos_interface_info_interfaces_interface_fib_sh_int_proto_depIdxs = nil
}
