// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/fib/nodes/node/protocols/protocol/vrfs/vrf/ip_prefix_briefs/ip_prefix_brief/fib_sh_tbl_fib.proto

package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Basic FIB table information
type FibShTblFib_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProtocolName string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	VrfName      string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Prefix       string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength uint32 `protobuf:"varint,5,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *FibShTblFib_KEYS) Reset() {
	*x = FibShTblFib_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblFib_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblFib_KEYS) ProtoMessage() {}

func (x *FibShTblFib_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblFib_KEYS.ProtoReflect.Descriptor instead.
func (*FibShTblFib_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{0}
}

func (x *FibShTblFib_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *FibShTblFib_KEYS) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *FibShTblFib_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *FibShTblFib_KEYS) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *FibShTblFib_KEYS) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type FibShTblFib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proto type for this entry
	ProtocolTypeFibEntry uint32 `protobuf:"varint,50,opt,name=protocol_type_fib_entry,json=protocolTypeFibEntry,proto3" json:"protocol_type_fib_entry,omitempty"`
	// Detailed FIB entry information
	DetailFibEntryInformation *FibShTblFibDet `protobuf:"bytes,51,opt,name=detail_fib_entry_information,json=detailFibEntryInformation,proto3" json:"detail_fib_entry_information,omitempty"`
	// FIB entry path details
	FibEntryPath *FibShTblPath `protobuf:"bytes,52,opt,name=fib_entry_path,json=fibEntryPath,proto3" json:"fib_entry_path,omitempty"`
	// Platform Hardware info
	PlatformHardware []byte `protobuf:"bytes,53,opt,name=platform_hardware,json=platformHardware,proto3" json:"platform_hardware,omitempty"`
	// Number of references to the pathlist
	NumberOfReferancesToPathList uint32 `protobuf:"varint,54,opt,name=number_of_referances_to_path_list,json=numberOfReferancesToPathList,proto3" json:"number_of_referances_to_path_list,omitempty"`
	// The pathlist flags
	PathListFlags uint32 `protobuf:"varint,55,opt,name=path_list_flags,json=pathListFlags,proto3" json:"path_list_flags,omitempty"`
	// The pathlist source
	PathListSource uint32 `protobuf:"varint,56,opt,name=path_list_source,json=pathListSource,proto3" json:"path_list_source,omitempty"`
	// Number of references to the LDI
	NumberOfReferancesToLdi uint32 `protobuf:"varint,57,opt,name=number_of_referances_to_ldi,json=numberOfReferancesToLdi,proto3" json:"number_of_referances_to_ldi,omitempty"`
	// The LDI flags
	LdiFlags uint32 `protobuf:"varint,58,opt,name=ldi_flags,json=ldiFlags,proto3" json:"ldi_flags,omitempty"`
	// The flags of ext assocaited with LDI
	FlagsExternalLdi uint32 `protobuf:"varint,59,opt,name=flags_external_ldi,json=flagsExternalLdi,proto3" json:"flags_external_ldi,omitempty"`
	// exact-route result
	ExactRouteResult bool `protobuf:"varint,60,opt,name=exact_route_result,json=exactRouteResult,proto3" json:"exact_route_result,omitempty"`
	// Prefix is static or connected
	PrefixIsStaticOrConnected bool `protobuf:"varint,61,opt,name=prefix_is_static_or_connected,json=prefixIsStaticOrConnected,proto3" json:"prefix_is_static_or_connected,omitempty"`
	// Packet should always be received
	PacketShouldRecieve bool `protobuf:"varint,62,opt,name=packet_should_recieve,json=packetShouldRecieve,proto3" json:"packet_should_recieve,omitempty"`
	// Prefix is connected
	PrefixConnected bool `protobuf:"varint,63,opt,name=prefix_connected,json=prefixConnected,proto3" json:"prefix_connected,omitempty"`
	// Prefix is for an adjacency
	PrefixForAdjancency bool `protobuf:"varint,64,opt,name=prefix_for_adjancency,json=prefixForAdjancency,proto3" json:"prefix_for_adjancency,omitempty"`
	// Prefix is for a PIC nexthop
	PrefixForPicNextHop bool `protobuf:"varint,65,opt,name=prefix_for_pic_next_hop,json=prefixForPicNextHop,proto3" json:"prefix_for_pic_next_hop,omitempty"`
	// Purgable after the purge interval
	PurgableAfterPurgeInterval bool `protobuf:"varint,66,opt,name=purgable_after_purge_interval,json=purgableAfterPurgeInterval,proto3" json:"purgable_after_purge_interval,omitempty"`
	// Broadcast receive flag
	BroadcastReciveFlag bool `protobuf:"varint,67,opt,name=broadcast_recive_flag,json=broadcastReciveFlag,proto3" json:"broadcast_recive_flag,omitempty"`
	// Broadcast forward flag
	BroadcastForwardFlag bool `protobuf:"varint,68,opt,name=broadcast_forward_flag,json=broadcastForwardFlag,proto3" json:"broadcast_forward_flag,omitempty"`
	// 0/0 route added as default route
	ZeroByZeroRouteAsDefault bool `protobuf:"varint,69,opt,name=zero_by_zero_route_as_default,json=zeroByZeroRouteAsDefault,proto3" json:"zero_by_zero_route_as_default,omitempty"`
	// External switch function triggered
	ExternalSwitchTriggered bool `protobuf:"varint,70,opt,name=external_switch_triggered,json=externalSwitchTriggered,proto3" json:"external_switch_triggered,omitempty"`
	// Route attributes summary flag
	RouteAttributeFlag bool `protobuf:"varint,71,opt,name=route_attribute_flag,json=routeAttributeFlag,proto3" json:"route_attribute_flag,omitempty"`
	// Dummy real zero route
	DummyRealZeroRoute bool `protobuf:"varint,72,opt,name=dummy_real_zero_route,json=dummyRealZeroRoute,proto3" json:"dummy_real_zero_route,omitempty"`
	// The LDI LW flags
	LdiLwFlag uint32 `protobuf:"varint,73,opt,name=ldi_lw_flag,json=ldiLwFlag,proto3" json:"ldi_lw_flag,omitempty"`
	// The refcounter of LDI LW LDI
	RefCounterOfLdiLwLdi uint32 `protobuf:"varint,74,opt,name=ref_counter_of_ldi_lw_ldi,json=refCounterOfLdiLwLdi,proto3" json:"ref_counter_of_ldi_lw_ldi,omitempty"`
	// The type of LDI LW LDI
	TypeOfLdiLwLdi uint32 `protobuf:"varint,75,opt,name=type_of_ldi_lw_ldi,json=typeOfLdiLwLdi,proto3" json:"type_of_ldi_lw_ldi,omitempty"`
	// The LSPA flags
	LspaFlags uint32 `protobuf:"varint,76,opt,name=lspa_flags,json=lspaFlags,proto3" json:"lspa_flags,omitempty"`
	// The version of the route
	VersionOfRoute uint64 `protobuf:"varint,77,opt,name=version_of_route,json=versionOfRoute,proto3" json:"version_of_route,omitempty"`
	// Priority at which the route was downloaded
	FibRouteDownloadPriority uint32 `protobuf:"varint,78,opt,name=fib_route_download_priority,json=fibRouteDownloadPriority,proto3" json:"fib_route_download_priority,omitempty"`
	// The time of last update in msec
	TimeOfLastUpdateInMsec uint64 `protobuf:"varint,79,opt,name=time_of_last_update_in_msec,json=timeOfLastUpdateInMsec,proto3" json:"time_of_last_update_in_msec,omitempty"`
	// Is L2 Subscriber route
	L2SubscriberRoute bool `protobuf:"varint,80,opt,name=l2_subscriber_route,json=l2SubscriberRoute,proto3" json:"l2_subscriber_route,omitempty"`
	// XConnect-id associated with L2 subscriber
	L2SubscriberXConnectId uint32 `protobuf:"varint,81,opt,name=l2_subscriber_x_connect_id,json=l2SubscriberXConnectId,proto3" json:"l2_subscriber_x_connect_id,omitempty"`
	// IP protocol associated with L2 subscriber
	L2SubscriberIpProtocol uint32 `protobuf:"varint,82,opt,name=l2_subscriber_ip_protocol,json=l2SubscriberIpProtocol,proto3" json:"l2_subscriber_ip_protocol,omitempty"`
	// L2TPv3 cookie length for L2 subscriber
	L2Tpv3CookieLengthBits uint32 `protobuf:"varint,83,opt,name=l2_tpv3_cookie_length_bits,json=l2Tpv3CookieLengthBits,proto3" json:"l2_tpv3_cookie_length_bits,omitempty"`
	// Route destined for Line Card that support External Reach only
	RouteForExternalReachLinecardFlag bool `protobuf:"varint,84,opt,name=route_for_external_reach_linecard_flag,json=routeForExternalReachLinecardFlag,proto3" json:"route_for_external_reach_linecard_flag,omitempty"`
}

func (x *FibShTblFib) Reset() {
	*x = FibShTblFib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblFib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblFib) ProtoMessage() {}

func (x *FibShTblFib) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblFib.ProtoReflect.Descriptor instead.
func (*FibShTblFib) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{1}
}

func (x *FibShTblFib) GetProtocolTypeFibEntry() uint32 {
	if x != nil {
		return x.ProtocolTypeFibEntry
	}
	return 0
}

func (x *FibShTblFib) GetDetailFibEntryInformation() *FibShTblFibDet {
	if x != nil {
		return x.DetailFibEntryInformation
	}
	return nil
}

func (x *FibShTblFib) GetFibEntryPath() *FibShTblPath {
	if x != nil {
		return x.FibEntryPath
	}
	return nil
}

func (x *FibShTblFib) GetPlatformHardware() []byte {
	if x != nil {
		return x.PlatformHardware
	}
	return nil
}

func (x *FibShTblFib) GetNumberOfReferancesToPathList() uint32 {
	if x != nil {
		return x.NumberOfReferancesToPathList
	}
	return 0
}

func (x *FibShTblFib) GetPathListFlags() uint32 {
	if x != nil {
		return x.PathListFlags
	}
	return 0
}

func (x *FibShTblFib) GetPathListSource() uint32 {
	if x != nil {
		return x.PathListSource
	}
	return 0
}

func (x *FibShTblFib) GetNumberOfReferancesToLdi() uint32 {
	if x != nil {
		return x.NumberOfReferancesToLdi
	}
	return 0
}

func (x *FibShTblFib) GetLdiFlags() uint32 {
	if x != nil {
		return x.LdiFlags
	}
	return 0
}

func (x *FibShTblFib) GetFlagsExternalLdi() uint32 {
	if x != nil {
		return x.FlagsExternalLdi
	}
	return 0
}

func (x *FibShTblFib) GetExactRouteResult() bool {
	if x != nil {
		return x.ExactRouteResult
	}
	return false
}

func (x *FibShTblFib) GetPrefixIsStaticOrConnected() bool {
	if x != nil {
		return x.PrefixIsStaticOrConnected
	}
	return false
}

func (x *FibShTblFib) GetPacketShouldRecieve() bool {
	if x != nil {
		return x.PacketShouldRecieve
	}
	return false
}

func (x *FibShTblFib) GetPrefixConnected() bool {
	if x != nil {
		return x.PrefixConnected
	}
	return false
}

func (x *FibShTblFib) GetPrefixForAdjancency() bool {
	if x != nil {
		return x.PrefixForAdjancency
	}
	return false
}

func (x *FibShTblFib) GetPrefixForPicNextHop() bool {
	if x != nil {
		return x.PrefixForPicNextHop
	}
	return false
}

func (x *FibShTblFib) GetPurgableAfterPurgeInterval() bool {
	if x != nil {
		return x.PurgableAfterPurgeInterval
	}
	return false
}

func (x *FibShTblFib) GetBroadcastReciveFlag() bool {
	if x != nil {
		return x.BroadcastReciveFlag
	}
	return false
}

func (x *FibShTblFib) GetBroadcastForwardFlag() bool {
	if x != nil {
		return x.BroadcastForwardFlag
	}
	return false
}

func (x *FibShTblFib) GetZeroByZeroRouteAsDefault() bool {
	if x != nil {
		return x.ZeroByZeroRouteAsDefault
	}
	return false
}

func (x *FibShTblFib) GetExternalSwitchTriggered() bool {
	if x != nil {
		return x.ExternalSwitchTriggered
	}
	return false
}

func (x *FibShTblFib) GetRouteAttributeFlag() bool {
	if x != nil {
		return x.RouteAttributeFlag
	}
	return false
}

func (x *FibShTblFib) GetDummyRealZeroRoute() bool {
	if x != nil {
		return x.DummyRealZeroRoute
	}
	return false
}

func (x *FibShTblFib) GetLdiLwFlag() uint32 {
	if x != nil {
		return x.LdiLwFlag
	}
	return 0
}

func (x *FibShTblFib) GetRefCounterOfLdiLwLdi() uint32 {
	if x != nil {
		return x.RefCounterOfLdiLwLdi
	}
	return 0
}

func (x *FibShTblFib) GetTypeOfLdiLwLdi() uint32 {
	if x != nil {
		return x.TypeOfLdiLwLdi
	}
	return 0
}

func (x *FibShTblFib) GetLspaFlags() uint32 {
	if x != nil {
		return x.LspaFlags
	}
	return 0
}

func (x *FibShTblFib) GetVersionOfRoute() uint64 {
	if x != nil {
		return x.VersionOfRoute
	}
	return 0
}

func (x *FibShTblFib) GetFibRouteDownloadPriority() uint32 {
	if x != nil {
		return x.FibRouteDownloadPriority
	}
	return 0
}

func (x *FibShTblFib) GetTimeOfLastUpdateInMsec() uint64 {
	if x != nil {
		return x.TimeOfLastUpdateInMsec
	}
	return 0
}

func (x *FibShTblFib) GetL2SubscriberRoute() bool {
	if x != nil {
		return x.L2SubscriberRoute
	}
	return false
}

func (x *FibShTblFib) GetL2SubscriberXConnectId() uint32 {
	if x != nil {
		return x.L2SubscriberXConnectId
	}
	return 0
}

func (x *FibShTblFib) GetL2SubscriberIpProtocol() uint32 {
	if x != nil {
		return x.L2SubscriberIpProtocol
	}
	return 0
}

func (x *FibShTblFib) GetL2Tpv3CookieLengthBits() uint32 {
	if x != nil {
		return x.L2Tpv3CookieLengthBits
	}
	return 0
}

func (x *FibShTblFib) GetRouteForExternalReachLinecardFlag() bool {
	if x != nil {
		return x.RouteForExternalReachLinecardFlag
	}
	return false
}

// FIB address
type FibAddrStr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *FibAddrStr) Reset() {
	*x = FibAddrStr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAddrStr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAddrStr) ProtoMessage() {}

func (x *FibAddrStr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAddrStr.ProtoReflect.Descriptor instead.
func (*FibAddrStr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{2}
}

func (x *FibAddrStr) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// mpls label stack information for FIB table entries
type FibShTblMplsLabelStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfLabels uint32   `protobuf:"varint,1,opt,name=number_of_labels,json=numberOfLabels,proto3" json:"number_of_labels,omitempty"`
	LStack         []uint32 `protobuf:"varint,2,rep,packed,name=l_stack,json=lStack,proto3" json:"l_stack,omitempty"`
	OutInterface   string   `protobuf:"bytes,3,opt,name=out_interface,json=outInterface,proto3" json:"out_interface,omitempty"`
	NhAddress      string   `protobuf:"bytes,4,opt,name=nh_address,json=nhAddress,proto3" json:"nh_address,omitempty"`
}

func (x *FibShTblMplsLabelStack) Reset() {
	*x = FibShTblMplsLabelStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblMplsLabelStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblMplsLabelStack) ProtoMessage() {}

func (x *FibShTblMplsLabelStack) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblMplsLabelStack.ProtoReflect.Descriptor instead.
func (*FibShTblMplsLabelStack) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{3}
}

func (x *FibShTblMplsLabelStack) GetNumberOfLabels() uint32 {
	if x != nil {
		return x.NumberOfLabels
	}
	return 0
}

func (x *FibShTblMplsLabelStack) GetLStack() []uint32 {
	if x != nil {
		return x.LStack
	}
	return nil
}

func (x *FibShTblMplsLabelStack) GetOutInterface() string {
	if x != nil {
		return x.OutInterface
	}
	return ""
}

func (x *FibShTblMplsLabelStack) GetNhAddress() string {
	if x != nil {
		return x.NhAddress
	}
	return ""
}

// mpls path information for FIB table entries
type FibShTblPathMplsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalLable             uint32 `protobuf:"varint,1,opt,name=local_lable,json=localLable,proto3" json:"local_lable,omitempty"`
	RecursiveFwdChain      bool   `protobuf:"varint,2,opt,name=recursive_fwd_chain,json=recursiveFwdChain,proto3" json:"recursive_fwd_chain,omitempty"`
	RecursiveOutLabelValid bool   `protobuf:"varint,3,opt,name=recursive_out_label_valid,json=recursiveOutLabelValid,proto3" json:"recursive_out_label_valid,omitempty"`
	RecursiveOutLable      uint32 `protobuf:"varint,4,opt,name=recursive_out_lable,json=recursiveOutLable,proto3" json:"recursive_out_lable,omitempty"`
	NumberOfIgpPaths       uint32 `protobuf:"varint,5,opt,name=number_of_igp_paths,json=numberOfIgpPaths,proto3" json:"number_of_igp_paths,omitempty"`
	// RemoteBackupPath
	RemoteBackup       bool                      `protobuf:"varint,6,opt,name=remote_backup,json=remoteBackup,proto3" json:"remote_backup,omitempty"`
	IgpLabelStackArray []*FibShTblMplsLabelStack `protobuf:"bytes,7,rep,name=igp_label_stack_array,json=igpLabelStackArray,proto3" json:"igp_label_stack_array,omitempty"`
}

func (x *FibShTblPathMplsInfo) Reset() {
	*x = FibShTblPathMplsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblPathMplsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblPathMplsInfo) ProtoMessage() {}

func (x *FibShTblPathMplsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblPathMplsInfo.ProtoReflect.Descriptor instead.
func (*FibShTblPathMplsInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{4}
}

func (x *FibShTblPathMplsInfo) GetLocalLable() uint32 {
	if x != nil {
		return x.LocalLable
	}
	return 0
}

func (x *FibShTblPathMplsInfo) GetRecursiveFwdChain() bool {
	if x != nil {
		return x.RecursiveFwdChain
	}
	return false
}

func (x *FibShTblPathMplsInfo) GetRecursiveOutLabelValid() bool {
	if x != nil {
		return x.RecursiveOutLabelValid
	}
	return false
}

func (x *FibShTblPathMplsInfo) GetRecursiveOutLable() uint32 {
	if x != nil {
		return x.RecursiveOutLable
	}
	return 0
}

func (x *FibShTblPathMplsInfo) GetNumberOfIgpPaths() uint32 {
	if x != nil {
		return x.NumberOfIgpPaths
	}
	return 0
}

func (x *FibShTblPathMplsInfo) GetRemoteBackup() bool {
	if x != nil {
		return x.RemoteBackup
	}
	return false
}

func (x *FibShTblPathMplsInfo) GetIgpLabelStackArray() []*FibShTblMplsLabelStack {
	if x != nil {
		return x.IgpLabelStackArray
	}
	return nil
}

// Detailed IP Encap Header Description
type FibShIpencapHdrDet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header Type
	IpEncapHdrType string `protobuf:"bytes,1,opt,name=ip_encap_hdr_type,json=ipEncapHdrType,proto3" json:"ip_encap_hdr_type,omitempty"`
	// Static Header
	IpEncapHdrp []byte `protobuf:"bytes,2,opt,name=ip_encap_hdrp,json=ipEncapHdrp,proto3" json:"ip_encap_hdrp,omitempty"`
	// Dynamic Header Fields
	IpEncapHdrDyn uint32 `protobuf:"varint,3,opt,name=ip_encap_hdr_dyn,json=ipEncapHdrDyn,proto3" json:"ip_encap_hdr_dyn,omitempty"`
}

func (x *FibShIpencapHdrDet) Reset() {
	*x = FibShIpencapHdrDet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShIpencapHdrDet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShIpencapHdrDet) ProtoMessage() {}

func (x *FibShIpencapHdrDet) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShIpencapHdrDet.ProtoReflect.Descriptor instead.
func (*FibShIpencapHdrDet) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{5}
}

func (x *FibShIpencapHdrDet) GetIpEncapHdrType() string {
	if x != nil {
		return x.IpEncapHdrType
	}
	return ""
}

func (x *FibShIpencapHdrDet) GetIpEncapHdrp() []byte {
	if x != nil {
		return x.IpEncapHdrp
	}
	return nil
}

func (x *FibShIpencapHdrDet) GetIpEncapHdrDyn() uint32 {
	if x != nil {
		return x.IpEncapHdrDyn
	}
	return 0
}

// Detailed IP Encap Description
type FibShIpencapDet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header Count
	IpEncapHdrCount uint32 `protobuf:"varint,1,opt,name=ip_encap_hdr_count,json=ipEncapHdrCount,proto3" json:"ip_encap_hdr_count,omitempty"`
	// IPEncap Object Locks
	IpEncapLocks uint32 `protobuf:"varint,2,opt,name=ip_encap_locks,json=ipEncapLocks,proto3" json:"ip_encap_locks,omitempty"`
	// Transport Table
	IpEncapTransportTbl uint32 `protobuf:"varint,3,opt,name=ip_encap_transport_tbl,json=ipEncapTransportTbl,proto3" json:"ip_encap_transport_tbl,omitempty"`
	// Transport VRF name
	IpeTransportVrfName string `protobuf:"bytes,4,opt,name=ipe_transport_vrf_name,json=ipeTransportVrfName,proto3" json:"ipe_transport_vrf_name,omitempty"`
	// Transport AF
	IpEncapTransportAf uint32 `protobuf:"varint,5,opt,name=ip_encap_transport_af,json=ipEncapTransportAf,proto3" json:"ip_encap_transport_af,omitempty"`
	// Payload AF
	IpEncapPayloadAf uint32 `protobuf:"varint,6,opt,name=ip_encap_payload_af,json=ipEncapPayloadAf,proto3" json:"ip_encap_payload_af,omitempty"`
	// Payload MTU
	IpEncapPayloadMtu uint32 `protobuf:"varint,7,opt,name=ip_encap_payload_mtu,json=ipEncapPayloadMtu,proto3" json:"ip_encap_payload_mtu,omitempty"`
	// Pointer to parent
	IpEncapParent uint32 `protobuf:"varint,8,opt,name=ip_encap_parent,json=ipEncapParent,proto3" json:"ip_encap_parent,omitempty"`
	// Parent type enumeration
	IpEncapParentType uint32 `protobuf:"varint,9,opt,name=ip_encap_parent_type,json=ipEncapParentType,proto3" json:"ip_encap_parent_type,omitempty"`
	// Headers
	IpEncapHdrs []*FibShIpencapHdrDet `protobuf:"bytes,10,rep,name=ip_encap_hdrs,json=ipEncapHdrs,proto3" json:"ip_encap_hdrs,omitempty"`
}

func (x *FibShIpencapDet) Reset() {
	*x = FibShIpencapDet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShIpencapDet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShIpencapDet) ProtoMessage() {}

func (x *FibShIpencapDet) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShIpencapDet.ProtoReflect.Descriptor instead.
func (*FibShIpencapDet) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{6}
}

func (x *FibShIpencapDet) GetIpEncapHdrCount() uint32 {
	if x != nil {
		return x.IpEncapHdrCount
	}
	return 0
}

func (x *FibShIpencapDet) GetIpEncapLocks() uint32 {
	if x != nil {
		return x.IpEncapLocks
	}
	return 0
}

func (x *FibShIpencapDet) GetIpEncapTransportTbl() uint32 {
	if x != nil {
		return x.IpEncapTransportTbl
	}
	return 0
}

func (x *FibShIpencapDet) GetIpeTransportVrfName() string {
	if x != nil {
		return x.IpeTransportVrfName
	}
	return ""
}

func (x *FibShIpencapDet) GetIpEncapTransportAf() uint32 {
	if x != nil {
		return x.IpEncapTransportAf
	}
	return 0
}

func (x *FibShIpencapDet) GetIpEncapPayloadAf() uint32 {
	if x != nil {
		return x.IpEncapPayloadAf
	}
	return 0
}

func (x *FibShIpencapDet) GetIpEncapPayloadMtu() uint32 {
	if x != nil {
		return x.IpEncapPayloadMtu
	}
	return 0
}

func (x *FibShIpencapDet) GetIpEncapParent() uint32 {
	if x != nil {
		return x.IpEncapParent
	}
	return 0
}

func (x *FibShIpencapDet) GetIpEncapParentType() uint32 {
	if x != nil {
		return x.IpEncapParentType
	}
	return 0
}

func (x *FibShIpencapDet) GetIpEncapHdrs() []*FibShIpencapHdrDet {
	if x != nil {
		return x.IpEncapHdrs
	}
	return nil
}

// Detailed path information for FIB table entries
type FibShTblPathDet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address to recurse to
	IpAddressToRecurse string `protobuf:"bytes,1,opt,name=ip_address_to_recurse,json=ipAddressToRecurse,proto3" json:"ip_address_to_recurse,omitempty"`
	// Local label to recurse over
	LabelToRecurse uint32 `protobuf:"varint,2,opt,name=label_to_recurse,json=labelToRecurse,proto3" json:"label_to_recurse,omitempty"`
	// Next hop prefix
	DetailNextHopPrefix string `protobuf:"bytes,3,opt,name=detail_next_hop_prefix,json=detailNextHopPrefix,proto3" json:"detail_next_hop_prefix,omitempty"`
	// Next hop mask length
	NextHopMaskLength uint32 `protobuf:"varint,4,opt,name=next_hop_mask_length,json=nextHopMaskLength,proto3" json:"next_hop_mask_length,omitempty"`
	// Interface associated with this path
	InterfaceAssociatedPath string `protobuf:"bytes,5,opt,name=interface_associated_path,json=interfaceAssociatedPath,proto3" json:"interface_associated_path,omitempty"`
	// Next hop interface
	NextHopInterface string `protobuf:"bytes,6,opt,name=next_hop_interface,json=nextHopInterface,proto3" json:"next_hop_interface,omitempty"`
	// Next hop VRF
	NextHopVrf []byte `protobuf:"bytes,7,opt,name=next_hop_vrf,json=nextHopVrf,proto3" json:"next_hop_vrf,omitempty"`
	// Tunnel endpoint id
	TunnleEndpointId uint32 `protobuf:"varint,8,opt,name=tunnle_endpoint_id,json=tunnleEndpointId,proto3" json:"tunnle_endpoint_id,omitempty"`
	// LISP RLOC ID
	Lisprlocid uint32 `protobuf:"varint,9,opt,name=lisprlocid,proto3" json:"lisprlocid,omitempty"`
	// No. of dependents for this path
	NumberOfDependenciesThisPath uint32 `protobuf:"varint,10,opt,name=number_of_dependencies_this_path,json=numberOfDependenciesThisPath,proto3" json:"number_of_dependencies_this_path,omitempty"`
	// Round robin reset value
	RobinResetValue uint32 `protobuf:"varint,11,opt,name=robin_reset_value,json=robinResetValue,proto3" json:"robin_reset_value,omitempty"`
	// Is recursion object a leaf?
	RecursePrefixObject bool `protobuf:"varint,12,opt,name=recurse_prefix_object,json=recursePrefixObject,proto3" json:"recurse_prefix_object,omitempty"`
	// Next prefix recursion in the path
	NextPrefixRecursion []byte `protobuf:"bytes,13,opt,name=next_prefix_recursion,json=nextPrefixRecursion,proto3" json:"next_prefix_recursion,omitempty"`
	// Next prefix length
	NextPrefixLength uint32 `protobuf:"varint,14,opt,name=next_prefix_length,json=nextPrefixLength,proto3" json:"next_prefix_length,omitempty"`
	// Recursion has two leaves (e.g. implicit-null path)
	RecursePrefixObject2 bool `protobuf:"varint,15,opt,name=recurse_prefix_object2,json=recursePrefixObject2,proto3" json:"recurse_prefix_object2,omitempty"`
	// Next prefix2 recursion in the path
	NextPrefixRecursion2 []byte `protobuf:"bytes,16,opt,name=next_prefix_recursion2,json=nextPrefixRecursion2,proto3" json:"next_prefix_recursion2,omitempty"`
	// Next prefix2 length
	NextPrefixLength2 uint32 `protobuf:"varint,17,opt,name=next_prefix_length2,json=nextPrefixLength2,proto3" json:"next_prefix_length2,omitempty"`
	// FIB entry adjacency type
	DetailFibAdjacencyType string `protobuf:"bytes,18,opt,name=detail_fib_adjacency_type,json=detailFibAdjacencyType,proto3" json:"detail_fib_adjacency_type,omitempty"`
	// Current path flag
	CurrentPathFlag bool `protobuf:"varint,19,opt,name=current_path_flag,json=currentPathFlag,proto3" json:"current_path_flag,omitempty"`
	// Recursive path information is available
	RecursivePathInformation bool `protobuf:"varint,20,opt,name=recursive_path_information,json=recursivePathInformation,proto3" json:"recursive_path_information,omitempty"`
	// Path is an external adjacency
	ExternalAdjacency bool `protobuf:"varint,21,opt,name=external_adjacency,json=externalAdjacency,proto3" json:"external_adjacency,omitempty"`
	// FIB Nhinfo type
	FibPathNhInformationType string `protobuf:"bytes,22,opt,name=fib_path_nh_information_type,json=fibPathNhInformationType,proto3" json:"fib_path_nh_information_type,omitempty"`
	// FIB Nhinfo type special
	FibPathNhInformationTypeSpecial string `protobuf:"bytes,23,opt,name=fib_path_nh_information_type_special,json=fibPathNhInformationTypeSpecial,proto3" json:"fib_path_nh_information_type_special,omitempty"`
	// Weight of the path
	WeightOfPath uint32 `protobuf:"varint,24,opt,name=weight_of_path,json=weightOfPath,proto3" json:"weight_of_path,omitempty"`
	// Tunnel class of the path
	TunnelClass uint32 `protobuf:"varint,25,opt,name=tunnel_class,json=tunnelClass,proto3" json:"tunnel_class,omitempty"`
	// IP Encap
	SpdIpencap []*FibShIpencapDet `protobuf:"bytes,26,rep,name=spd_ipencap,json=spdIpencap,proto3" json:"spd_ipencap,omitempty"`
	// Tunnel is forward class
	TunnelIsForwardClass bool `protobuf:"varint,27,opt,name=tunnel_is_forward_class,json=tunnelIsForwardClass,proto3" json:"tunnel_is_forward_class,omitempty"`
}

func (x *FibShTblPathDet) Reset() {
	*x = FibShTblPathDet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblPathDet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblPathDet) ProtoMessage() {}

func (x *FibShTblPathDet) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblPathDet.ProtoReflect.Descriptor instead.
func (*FibShTblPathDet) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{7}
}

func (x *FibShTblPathDet) GetIpAddressToRecurse() string {
	if x != nil {
		return x.IpAddressToRecurse
	}
	return ""
}

func (x *FibShTblPathDet) GetLabelToRecurse() uint32 {
	if x != nil {
		return x.LabelToRecurse
	}
	return 0
}

func (x *FibShTblPathDet) GetDetailNextHopPrefix() string {
	if x != nil {
		return x.DetailNextHopPrefix
	}
	return ""
}

func (x *FibShTblPathDet) GetNextHopMaskLength() uint32 {
	if x != nil {
		return x.NextHopMaskLength
	}
	return 0
}

func (x *FibShTblPathDet) GetInterfaceAssociatedPath() string {
	if x != nil {
		return x.InterfaceAssociatedPath
	}
	return ""
}

func (x *FibShTblPathDet) GetNextHopInterface() string {
	if x != nil {
		return x.NextHopInterface
	}
	return ""
}

func (x *FibShTblPathDet) GetNextHopVrf() []byte {
	if x != nil {
		return x.NextHopVrf
	}
	return nil
}

func (x *FibShTblPathDet) GetTunnleEndpointId() uint32 {
	if x != nil {
		return x.TunnleEndpointId
	}
	return 0
}

func (x *FibShTblPathDet) GetLisprlocid() uint32 {
	if x != nil {
		return x.Lisprlocid
	}
	return 0
}

func (x *FibShTblPathDet) GetNumberOfDependenciesThisPath() uint32 {
	if x != nil {
		return x.NumberOfDependenciesThisPath
	}
	return 0
}

func (x *FibShTblPathDet) GetRobinResetValue() uint32 {
	if x != nil {
		return x.RobinResetValue
	}
	return 0
}

func (x *FibShTblPathDet) GetRecursePrefixObject() bool {
	if x != nil {
		return x.RecursePrefixObject
	}
	return false
}

func (x *FibShTblPathDet) GetNextPrefixRecursion() []byte {
	if x != nil {
		return x.NextPrefixRecursion
	}
	return nil
}

func (x *FibShTblPathDet) GetNextPrefixLength() uint32 {
	if x != nil {
		return x.NextPrefixLength
	}
	return 0
}

func (x *FibShTblPathDet) GetRecursePrefixObject2() bool {
	if x != nil {
		return x.RecursePrefixObject2
	}
	return false
}

func (x *FibShTblPathDet) GetNextPrefixRecursion2() []byte {
	if x != nil {
		return x.NextPrefixRecursion2
	}
	return nil
}

func (x *FibShTblPathDet) GetNextPrefixLength2() uint32 {
	if x != nil {
		return x.NextPrefixLength2
	}
	return 0
}

func (x *FibShTblPathDet) GetDetailFibAdjacencyType() string {
	if x != nil {
		return x.DetailFibAdjacencyType
	}
	return ""
}

func (x *FibShTblPathDet) GetCurrentPathFlag() bool {
	if x != nil {
		return x.CurrentPathFlag
	}
	return false
}

func (x *FibShTblPathDet) GetRecursivePathInformation() bool {
	if x != nil {
		return x.RecursivePathInformation
	}
	return false
}

func (x *FibShTblPathDet) GetExternalAdjacency() bool {
	if x != nil {
		return x.ExternalAdjacency
	}
	return false
}

func (x *FibShTblPathDet) GetFibPathNhInformationType() string {
	if x != nil {
		return x.FibPathNhInformationType
	}
	return ""
}

func (x *FibShTblPathDet) GetFibPathNhInformationTypeSpecial() string {
	if x != nil {
		return x.FibPathNhInformationTypeSpecial
	}
	return ""
}

func (x *FibShTblPathDet) GetWeightOfPath() uint32 {
	if x != nil {
		return x.WeightOfPath
	}
	return 0
}

func (x *FibShTblPathDet) GetTunnelClass() uint32 {
	if x != nil {
		return x.TunnelClass
	}
	return 0
}

func (x *FibShTblPathDet) GetSpdIpencap() []*FibShIpencapDet {
	if x != nil {
		return x.SpdIpencap
	}
	return nil
}

func (x *FibShTblPathDet) GetTunnelIsForwardClass() bool {
	if x != nil {
		return x.TunnelIsForwardClass
	}
	return false
}

// Brief path information for FIB table entries
type FibShTblPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next entry in the path
	FibShTblPath []*FibShTblPathItem `protobuf:"bytes,1,rep,name=fib_sh_tbl_path,json=fibShTblPath,proto3" json:"fib_sh_tbl_path,omitempty"`
}

func (x *FibShTblPath) Reset() {
	*x = FibShTblPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblPath) ProtoMessage() {}

func (x *FibShTblPath) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblPath.ProtoReflect.Descriptor instead.
func (*FibShTblPath) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{8}
}

func (x *FibShTblPath) GetFibShTblPath() []*FibShTblPathItem {
	if x != nil {
		return x.FibShTblPath
	}
	return nil
}

type FibShTblPathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// More detail about this path entry
	MoreDetailAboutPath *FibShTblPathDet `protobuf:"bytes,1,opt,name=more_detail_about_path,json=moreDetailAboutPath,proto3" json:"more_detail_about_path,omitempty"`
	// mpls info for this path entry
	MplsInformationForPath *FibShTblPathMplsInfo `protobuf:"bytes,2,opt,name=mpls_information_for_path,json=mplsInformationForPath,proto3" json:"mpls_information_for_path,omitempty"`
	// Hardware info
	HardwareInformation []byte `protobuf:"bytes,3,opt,name=hardware_information,json=hardwareInformation,proto3" json:"hardware_information,omitempty"`
	// Interface handle
	BriefInterfaceHandle string `protobuf:"bytes,4,opt,name=brief_interface_handle,json=briefInterfaceHandle,proto3" json:"brief_interface_handle,omitempty"`
	// Next hop prefix
	BriefNextHopPrefix string `protobuf:"bytes,5,opt,name=brief_next_hop_prefix,json=briefNextHopPrefix,proto3" json:"brief_next_hop_prefix,omitempty"`
	// Local label to recurse over
	ViaLabelToRecurse uint32 `protobuf:"varint,6,opt,name=via_label_to_recurse,json=viaLabelToRecurse,proto3" json:"via_label_to_recurse,omitempty"`
	// P-node address
	BriefPnodeAddress string `protobuf:"bytes,7,opt,name=brief_pnode_address,json=briefPnodeAddress,proto3" json:"brief_pnode_address,omitempty"`
	// Q-node address
	BriefQnodeAddress string `protobuf:"bytes,8,opt,name=brief_qnode_address,json=briefQnodeAddress,proto3" json:"brief_qnode_address,omitempty"`
	// Resolved path
	ResolvedPath bool `protobuf:"varint,9,opt,name=resolved_path,json=resolvedPath,proto3" json:"resolved_path,omitempty"`
	// Recursive path
	RecursivePath bool `protobuf:"varint,10,opt,name=recursive_path,json=recursivePath,proto3" json:"recursive_path,omitempty"`
	// Packets received on this path
	PacketsReceivedPath bool `protobuf:"varint,11,opt,name=packets_received_path,json=packetsReceivedPath,proto3" json:"packets_received_path,omitempty"`
	// Attached path
	AttachedPath bool `protobuf:"varint,12,opt,name=attached_path,json=attachedPath,proto3" json:"attached_path,omitempty"`
	// Backup path
	BackupPath bool `protobuf:"varint,13,opt,name=backup_path,json=backupPath,proto3" json:"backup_path,omitempty"`
	// Best external path
	BestExternalPath bool `protobuf:"varint,14,opt,name=best_external_path,json=bestExternalPath,proto3" json:"best_external_path,omitempty"`
	// Is protection ignored
	ProtectIgnore bool `protobuf:"varint,15,opt,name=protect_ignore,json=protectIgnore,proto3" json:"protect_ignore,omitempty"`
	// Is this the path used for DLB
	PathDlb bool `protobuf:"varint,16,opt,name=path_dlb,json=pathDlb,proto3" json:"path_dlb,omitempty"`
	// Path flags
	PathFlags uint32 `protobuf:"varint,17,opt,name=path_flags,json=pathFlags,proto3" json:"path_flags,omitempty"`
	// Path Info flags
	PathInfoFlags uint32 `protobuf:"varint,18,opt,name=path_info_flags,json=pathInfoFlags,proto3" json:"path_info_flags,omitempty"`
	// Path index
	PathIndex uint32 `protobuf:"varint,19,opt,name=path_index,json=pathIndex,proto3" json:"path_index,omitempty"`
	// Backup path index
	BackupIndex uint32 `protobuf:"varint,20,opt,name=backup_index,json=backupIndex,proto3" json:"backup_index,omitempty"`
	// Next Hop Index
	NextHopIndex uint32 `protobuf:"varint,21,opt,name=next_hop_index,json=nextHopIndex,proto3" json:"next_hop_index,omitempty"`
	// Parent Interface Handle
	ParentInterfaceHandle string `protobuf:"bytes,22,opt,name=parent_interface_handle,json=parentInterfaceHandle,proto3" json:"parent_interface_handle,omitempty"`
	// recursion via /N constraint
	RecursionViaLen uint32 `protobuf:"varint,23,opt,name=recursion_via_len,json=recursionViaLen,proto3" json:"recursion_via_len,omitempty"`
}

func (x *FibShTblPathItem) Reset() {
	*x = FibShTblPathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblPathItem) ProtoMessage() {}

func (x *FibShTblPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblPathItem.ProtoReflect.Descriptor instead.
func (*FibShTblPathItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{9}
}

func (x *FibShTblPathItem) GetMoreDetailAboutPath() *FibShTblPathDet {
	if x != nil {
		return x.MoreDetailAboutPath
	}
	return nil
}

func (x *FibShTblPathItem) GetMplsInformationForPath() *FibShTblPathMplsInfo {
	if x != nil {
		return x.MplsInformationForPath
	}
	return nil
}

func (x *FibShTblPathItem) GetHardwareInformation() []byte {
	if x != nil {
		return x.HardwareInformation
	}
	return nil
}

func (x *FibShTblPathItem) GetBriefInterfaceHandle() string {
	if x != nil {
		return x.BriefInterfaceHandle
	}
	return ""
}

func (x *FibShTblPathItem) GetBriefNextHopPrefix() string {
	if x != nil {
		return x.BriefNextHopPrefix
	}
	return ""
}

func (x *FibShTblPathItem) GetViaLabelToRecurse() uint32 {
	if x != nil {
		return x.ViaLabelToRecurse
	}
	return 0
}

func (x *FibShTblPathItem) GetBriefPnodeAddress() string {
	if x != nil {
		return x.BriefPnodeAddress
	}
	return ""
}

func (x *FibShTblPathItem) GetBriefQnodeAddress() string {
	if x != nil {
		return x.BriefQnodeAddress
	}
	return ""
}

func (x *FibShTblPathItem) GetResolvedPath() bool {
	if x != nil {
		return x.ResolvedPath
	}
	return false
}

func (x *FibShTblPathItem) GetRecursivePath() bool {
	if x != nil {
		return x.RecursivePath
	}
	return false
}

func (x *FibShTblPathItem) GetPacketsReceivedPath() bool {
	if x != nil {
		return x.PacketsReceivedPath
	}
	return false
}

func (x *FibShTblPathItem) GetAttachedPath() bool {
	if x != nil {
		return x.AttachedPath
	}
	return false
}

func (x *FibShTblPathItem) GetBackupPath() bool {
	if x != nil {
		return x.BackupPath
	}
	return false
}

func (x *FibShTblPathItem) GetBestExternalPath() bool {
	if x != nil {
		return x.BestExternalPath
	}
	return false
}

func (x *FibShTblPathItem) GetProtectIgnore() bool {
	if x != nil {
		return x.ProtectIgnore
	}
	return false
}

func (x *FibShTblPathItem) GetPathDlb() bool {
	if x != nil {
		return x.PathDlb
	}
	return false
}

func (x *FibShTblPathItem) GetPathFlags() uint32 {
	if x != nil {
		return x.PathFlags
	}
	return 0
}

func (x *FibShTblPathItem) GetPathInfoFlags() uint32 {
	if x != nil {
		return x.PathInfoFlags
	}
	return 0
}

func (x *FibShTblPathItem) GetPathIndex() uint32 {
	if x != nil {
		return x.PathIndex
	}
	return 0
}

func (x *FibShTblPathItem) GetBackupIndex() uint32 {
	if x != nil {
		return x.BackupIndex
	}
	return 0
}

func (x *FibShTblPathItem) GetNextHopIndex() uint32 {
	if x != nil {
		return x.NextHopIndex
	}
	return 0
}

func (x *FibShTblPathItem) GetParentInterfaceHandle() string {
	if x != nil {
		return x.ParentInterfaceHandle
	}
	return ""
}

func (x *FibShTblPathItem) GetRecursionViaLen() uint32 {
	if x != nil {
		return x.RecursionViaLen
	}
	return 0
}

// Internal load sharing information arrays for FIB table entries
type FibShTblLoadinfoInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// level of ldis
	LevelOfldis uint32 `protobuf:"varint,1,opt,name=level_ofldis,json=levelOfldis,proto3" json:"level_ofldis,omitempty"`
	// no. of ldis
	NumberOfLdis uint32 `protobuf:"varint,2,opt,name=number_of_ldis,json=numberOfLdis,proto3" json:"number_of_ldis,omitempty"`
	// Maximum index of the arrays
	MaximumIndexArrays uint32 `protobuf:"varint,3,opt,name=maximum_index_arrays,json=maximumIndexArrays,proto3" json:"maximum_index_arrays,omitempty"`
	// Path indices
	PathIndices []byte `protobuf:"bytes,4,opt,name=path_indices,json=pathIndices,proto3" json:"path_indices,omitempty"`
	// Path indices
	PathLdiNumbers []byte `protobuf:"bytes,5,opt,name=path_ldi_numbers,json=pathLdiNumbers,proto3" json:"path_ldi_numbers,omitempty"`
	// Sanity flag
	SanityFlag []bool `protobuf:"varint,6,rep,packed,name=sanity_flag,json=sanityFlag,proto3" json:"sanity_flag,omitempty"`
	// Adjacency address
	AdjacencyAddress []*FibAddrStr `protobuf:"bytes,7,rep,name=adjacency_address,json=adjacencyAddress,proto3" json:"adjacency_address,omitempty"`
	// Interface handle
	InterfaceHandle []string `protobuf:"bytes,8,rep,name=interface_handle,json=interfaceHandle,proto3" json:"interface_handle,omitempty"`
	// Maximum slots
	MaximumSlots uint32 `protobuf:"varint,9,opt,name=maximum_slots,json=maximumSlots,proto3" json:"maximum_slots,omitempty"`
	// Weights of paths
	WeightsOfPaths []uint32 `protobuf:"varint,10,rep,packed,name=weights_of_paths,json=weightsOfPaths,proto3" json:"weights_of_paths,omitempty"`
	// Normalized weights
	NormalizedWeights []byte `protobuf:"bytes,11,opt,name=normalized_weights,json=normalizedWeights,proto3" json:"normalized_weights,omitempty"`
	// Tunnel class value
	TunnelClassValue []byte `protobuf:"bytes,12,opt,name=tunnel_class_value,json=tunnelClassValue,proto3" json:"tunnel_class_value,omitempty"`
	// PBTS info valid flag
	IsPbtsInfoValid bool `protobuf:"varint,13,opt,name=is_pbts_info_valid,json=isPbtsInfoValid,proto3" json:"is_pbts_info_valid,omitempty"`
	// PBTS class offset
	PbtsClassOffset []byte `protobuf:"bytes,14,opt,name=pbts_class_offset,json=pbtsClassOffset,proto3" json:"pbts_class_offset,omitempty"`
	// PBTS class num paths
	PbtsClassNumPaths []byte `protobuf:"bytes,15,opt,name=pbts_class_num_paths,json=pbtsClassNumPaths,proto3" json:"pbts_class_num_paths,omitempty"`
	// Does PBTS class fall back to drop or any class
	PbtsClassIsFallbackMapped []bool `protobuf:"varint,16,rep,packed,name=pbts_class_is_fallback_mapped,json=pbtsClassIsFallbackMapped,proto3" json:"pbts_class_is_fallback_mapped,omitempty"`
	// PBTS class falls back to class
	PbtsFallbackMappedClass []byte `protobuf:"bytes,17,opt,name=pbts_fallback_mapped_class,json=pbtsFallbackMappedClass,proto3" json:"pbts_fallback_mapped_class,omitempty"`
	// PBTS class falls back to drop
	PbtsFallbackToDrop []bool `protobuf:"varint,18,rep,packed,name=pbts_fallback_to_drop,json=pbtsFallbackToDrop,proto3" json:"pbts_fallback_to_drop,omitempty"`
	// Round Robin Disable
	RoundRobinDisable bool `protobuf:"varint,19,opt,name=round_robin_disable,json=roundRobinDisable,proto3" json:"round_robin_disable,omitempty"`
	// Number of LDI next hop buckets
	LdiNextHopBuckets uint32 `protobuf:"varint,20,opt,name=ldi_next_hop_buckets,json=ldiNextHopBuckets,proto3" json:"ldi_next_hop_buckets,omitempty"`
	// Platform Hardware info
	PlatformHardwareInformation []byte `protobuf:"bytes,21,opt,name=platform_hardware_information,json=platformHardwareInformation,proto3" json:"platform_hardware_information,omitempty"`
	// Tunnel is forward class
	TunnelIsForwardClass []bool `protobuf:"varint,22,rep,packed,name=tunnel_is_forward_class,json=tunnelIsForwardClass,proto3" json:"tunnel_is_forward_class,omitempty"`
}

func (x *FibShTblLoadinfoInt) Reset() {
	*x = FibShTblLoadinfoInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblLoadinfoInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblLoadinfoInt) ProtoMessage() {}

func (x *FibShTblLoadinfoInt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblLoadinfoInt.ProtoReflect.Descriptor instead.
func (*FibShTblLoadinfoInt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{10}
}

func (x *FibShTblLoadinfoInt) GetLevelOfldis() uint32 {
	if x != nil {
		return x.LevelOfldis
	}
	return 0
}

func (x *FibShTblLoadinfoInt) GetNumberOfLdis() uint32 {
	if x != nil {
		return x.NumberOfLdis
	}
	return 0
}

func (x *FibShTblLoadinfoInt) GetMaximumIndexArrays() uint32 {
	if x != nil {
		return x.MaximumIndexArrays
	}
	return 0
}

func (x *FibShTblLoadinfoInt) GetPathIndices() []byte {
	if x != nil {
		return x.PathIndices
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetPathLdiNumbers() []byte {
	if x != nil {
		return x.PathLdiNumbers
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetSanityFlag() []bool {
	if x != nil {
		return x.SanityFlag
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetAdjacencyAddress() []*FibAddrStr {
	if x != nil {
		return x.AdjacencyAddress
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetInterfaceHandle() []string {
	if x != nil {
		return x.InterfaceHandle
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetMaximumSlots() uint32 {
	if x != nil {
		return x.MaximumSlots
	}
	return 0
}

func (x *FibShTblLoadinfoInt) GetWeightsOfPaths() []uint32 {
	if x != nil {
		return x.WeightsOfPaths
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetNormalizedWeights() []byte {
	if x != nil {
		return x.NormalizedWeights
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetTunnelClassValue() []byte {
	if x != nil {
		return x.TunnelClassValue
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetIsPbtsInfoValid() bool {
	if x != nil {
		return x.IsPbtsInfoValid
	}
	return false
}

func (x *FibShTblLoadinfoInt) GetPbtsClassOffset() []byte {
	if x != nil {
		return x.PbtsClassOffset
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetPbtsClassNumPaths() []byte {
	if x != nil {
		return x.PbtsClassNumPaths
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetPbtsClassIsFallbackMapped() []bool {
	if x != nil {
		return x.PbtsClassIsFallbackMapped
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetPbtsFallbackMappedClass() []byte {
	if x != nil {
		return x.PbtsFallbackMappedClass
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetPbtsFallbackToDrop() []bool {
	if x != nil {
		return x.PbtsFallbackToDrop
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetRoundRobinDisable() bool {
	if x != nil {
		return x.RoundRobinDisable
	}
	return false
}

func (x *FibShTblLoadinfoInt) GetLdiNextHopBuckets() uint32 {
	if x != nil {
		return x.LdiNextHopBuckets
	}
	return 0
}

func (x *FibShTblLoadinfoInt) GetPlatformHardwareInformation() []byte {
	if x != nil {
		return x.PlatformHardwareInformation
	}
	return nil
}

func (x *FibShTblLoadinfoInt) GetTunnelIsForwardClass() []bool {
	if x != nil {
		return x.TunnelIsForwardClass
	}
	return nil
}

// Detailed load sharing information for FIB table entries
type FibShTblLoadinfoDet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Packets through this loadinfo
	PacketsThroughLoadInformation uint64 `protobuf:"varint,1,opt,name=packets_through_load_information,json=packetsThroughLoadInformation,proto3" json:"packets_through_load_information,omitempty"`
	// Bytes through this loadinfo
	BytesThroughLoadInformation uint64 `protobuf:"varint,2,opt,name=bytes_through_load_information,json=bytesThroughLoadInformation,proto3" json:"bytes_through_load_information,omitempty"`
	// Total packets through this loadinfo
	TotalPacketsThroughLoadInformation uint64 `protobuf:"varint,3,opt,name=total_packets_through_load_information,json=totalPacketsThroughLoadInformation,proto3" json:"total_packets_through_load_information,omitempty"`
	// Total bytes through this loadinfo
	TotalBytesThroughLoadInformation uint64 `protobuf:"varint,4,opt,name=total_bytes_through_load_information,json=totalBytesThroughLoadInformation,proto3" json:"total_bytes_through_load_information,omitempty"`
	// Prefix of the owner
	PrefixOfOwner uint32 `protobuf:"varint,5,opt,name=prefix_of_owner,json=prefixOfOwner,proto3" json:"prefix_of_owner,omitempty"`
	// Mask length of the owner
	MaskLengthOfOwner uint32 `protobuf:"varint,6,opt,name=mask_length_of_owner,json=maskLengthOfOwner,proto3" json:"mask_length_of_owner,omitempty"`
	// Loadinfo reference count
	LoadInformationReferenceCount uint32 `protobuf:"varint,7,opt,name=load_information_reference_count,json=loadInformationReferenceCount,proto3" json:"load_information_reference_count,omitempty"`
	// Per destination load sharing flag
	PerDestLoadSharingFlag bool `protobuf:"varint,8,opt,name=per_dest_load_sharing_flag,json=perDestLoadSharingFlag,proto3" json:"per_dest_load_sharing_flag,omitempty"`
	// Loadinfo owner deleted flag
	LoadInformationOwnerDeletedFlag bool `protobuf:"varint,9,opt,name=load_information_owner_deleted_flag,json=loadInformationOwnerDeletedFlag,proto3" json:"load_information_owner_deleted_flag,omitempty"`
	// Loadinfo sanity flag
	LoadinfoSanityFlag bool `protobuf:"varint,10,opt,name=loadinfo_sanity_flag,json=loadinfoSanityFlag,proto3" json:"loadinfo_sanity_flag,omitempty"`
	// Owner flag
	IsOwner bool `protobuf:"varint,11,opt,name=is_owner,json=isOwner,proto3" json:"is_owner,omitempty"`
	// Loadinfo internal data
	LoadInformtionInternalData *FibShTblLoadinfoInt `protobuf:"bytes,12,opt,name=load_informtion_internal_data,json=loadInformtionInternalData,proto3" json:"load_informtion_internal_data,omitempty"`
}

func (x *FibShTblLoadinfoDet) Reset() {
	*x = FibShTblLoadinfoDet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblLoadinfoDet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblLoadinfoDet) ProtoMessage() {}

func (x *FibShTblLoadinfoDet) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblLoadinfoDet.ProtoReflect.Descriptor instead.
func (*FibShTblLoadinfoDet) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{11}
}

func (x *FibShTblLoadinfoDet) GetPacketsThroughLoadInformation() uint64 {
	if x != nil {
		return x.PacketsThroughLoadInformation
	}
	return 0
}

func (x *FibShTblLoadinfoDet) GetBytesThroughLoadInformation() uint64 {
	if x != nil {
		return x.BytesThroughLoadInformation
	}
	return 0
}

func (x *FibShTblLoadinfoDet) GetTotalPacketsThroughLoadInformation() uint64 {
	if x != nil {
		return x.TotalPacketsThroughLoadInformation
	}
	return 0
}

func (x *FibShTblLoadinfoDet) GetTotalBytesThroughLoadInformation() uint64 {
	if x != nil {
		return x.TotalBytesThroughLoadInformation
	}
	return 0
}

func (x *FibShTblLoadinfoDet) GetPrefixOfOwner() uint32 {
	if x != nil {
		return x.PrefixOfOwner
	}
	return 0
}

func (x *FibShTblLoadinfoDet) GetMaskLengthOfOwner() uint32 {
	if x != nil {
		return x.MaskLengthOfOwner
	}
	return 0
}

func (x *FibShTblLoadinfoDet) GetLoadInformationReferenceCount() uint32 {
	if x != nil {
		return x.LoadInformationReferenceCount
	}
	return 0
}

func (x *FibShTblLoadinfoDet) GetPerDestLoadSharingFlag() bool {
	if x != nil {
		return x.PerDestLoadSharingFlag
	}
	return false
}

func (x *FibShTblLoadinfoDet) GetLoadInformationOwnerDeletedFlag() bool {
	if x != nil {
		return x.LoadInformationOwnerDeletedFlag
	}
	return false
}

func (x *FibShTblLoadinfoDet) GetLoadinfoSanityFlag() bool {
	if x != nil {
		return x.LoadinfoSanityFlag
	}
	return false
}

func (x *FibShTblLoadinfoDet) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

func (x *FibShTblLoadinfoDet) GetLoadInformtionInternalData() *FibShTblLoadinfoInt {
	if x != nil {
		return x.LoadInformtionInternalData
	}
	return nil
}

// Detailed FIB table entry information
type FibShTblFibDet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FIB entry version number
	FibEntryVersion uint32 `protobuf:"varint,1,opt,name=fib_entry_version,json=fibEntryVersion,proto3" json:"fib_entry_version,omitempty"`
	// Per Prefix Accounting
	PerPrefixAccounting uint32 `protobuf:"varint,2,opt,name=per_prefix_accounting,json=perPrefixAccounting,proto3" json:"per_prefix_accounting,omitempty"`
	// Load sharing type
	LoadSharingType string `protobuf:"bytes,3,opt,name=load_sharing_type,json=loadSharingType,proto3" json:"load_sharing_type,omitempty"`
	// FIB entry adjacency type
	FibEntryAdjacencyType string `protobuf:"bytes,4,opt,name=fib_entry_adjacency_type,json=fibEntryAdjacencyType,proto3" json:"fib_entry_adjacency_type,omitempty"`
	// FIB Protocol type
	FibProtocolType uint32 `protobuf:"varint,5,opt,name=fib_protocol_type,json=fibProtocolType,proto3" json:"fib_protocol_type,omitempty"`
	// AFI FIB protocol type
	AfiFibProtocolType uint32 `protobuf:"varint,6,opt,name=afi_fib_protocol_type,json=afiFibProtocolType,proto3" json:"afi_fib_protocol_type,omitempty"`
	// AIB L3 Address
	AibL3Address []byte `protobuf:"bytes,7,opt,name=aib_l3_address,json=aibL3Address,proto3" json:"aib_l3_address,omitempty"`
	// ADJ ADDR LEN
	AdjacencyAddressLength uint32 `protobuf:"varint,8,opt,name=adjacency_address_length,json=adjacencyAddressLength,proto3" json:"adjacency_address_length,omitempty"`
	// ADJ IFH
	AdjacencyInterface uint32 `protobuf:"varint,9,opt,name=adjacency_interface,json=adjacencyInterface,proto3" json:"adjacency_interface,omitempty"`
	// FIB Special NHINFO Type
	FibSpecialNhInformationType uint32 `protobuf:"varint,10,opt,name=fib_special_nh_information_type,json=fibSpecialNhInformationType,proto3" json:"fib_special_nh_information_type,omitempty"`
	// FIB entry adj address
	FibEntryAdjacencyAddress []byte `protobuf:"bytes,11,opt,name=fib_entry_adjacency_address,json=fibEntryAdjacencyAddress,proto3" json:"fib_entry_adjacency_address,omitempty"`
	// FIB entry adjacency interface
	FibEntryAdjacencyInterface uint32 `protobuf:"varint,12,opt,name=fib_entry_adjacency_interface,json=fibEntryAdjacencyInterface,proto3" json:"fib_entry_adjacency_interface,omitempty"`
	// Packets through this FIB entry
	PacketsThroughFibEntry uint64 `protobuf:"varint,13,opt,name=packets_through_fib_entry,json=packetsThroughFibEntry,proto3" json:"packets_through_fib_entry,omitempty"`
	// Bytes through this FIB entry
	BytesThroughFibEntry uint64 `protobuf:"varint,14,opt,name=bytes_through_fib_entry,json=bytesThroughFibEntry,proto3" json:"bytes_through_fib_entry,omitempty"`
	// Prefix length
	DetailedPrefixLength uint32 `protobuf:"varint,15,opt,name=detailed_prefix_length,json=detailedPrefixLength,proto3" json:"detailed_prefix_length,omitempty"`
	// Prefix protocol
	PrefixProtocol uint32 `protobuf:"varint,16,opt,name=prefix_protocol,json=prefixProtocol,proto3" json:"prefix_protocol,omitempty"`
	// Precedence for packets to this entry
	PrecedenceForpackets uint32 `protobuf:"varint,17,opt,name=precedence_forpackets,json=precedenceForpackets,proto3" json:"precedence_forpackets,omitempty"`
	// Traffic index for packets to this entry
	TrafficIndexForPackets uint32 `protobuf:"varint,18,opt,name=traffic_index_for_packets,json=trafficIndexForPackets,proto3" json:"traffic_index_for_packets,omitempty"`
	// Switch function compontent ID
	SwitchCompontentId uint32 `protobuf:"varint,19,opt,name=switch_compontent_id,json=switchCompontentId,proto3" json:"switch_compontent_id,omitempty"`
	// Fast adjacency flag
	FastAdjacencyFlag bool `protobuf:"varint,20,opt,name=fast_adjacency_flag,json=fastAdjacencyFlag,proto3" json:"fast_adjacency_flag,omitempty"`
	// Illegal fast adjacency flag
	IllegalFastAdjacencyFlag bool `protobuf:"varint,21,opt,name=illegal_fast_adjacency_flag,json=illegalFastAdjacencyFlag,proto3" json:"illegal_fast_adjacency_flag,omitempty"`
	// Remote adjacency flag
	RemoteAdjacencyFlag bool `protobuf:"varint,22,opt,name=remote_adjacency_flag,json=remoteAdjacencyFlag,proto3" json:"remote_adjacency_flag,omitempty"`
	// Detailed Loadshare info
	LoadshareInformation *FibShTblLoadinfoDet `protobuf:"bytes,23,opt,name=loadshare_information,json=loadshareInformation,proto3" json:"loadshare_information,omitempty"`
	// BGP attribute id
	BgpAttributeId uint32 `protobuf:"varint,24,opt,name=bgp_attribute_id,json=bgpAttributeId,proto3" json:"bgp_attribute_id,omitempty"`
	// BGP local attribute id
	BgpLocalAttributeId uint32 `protobuf:"varint,25,opt,name=bgp_local_attribute_id,json=bgpLocalAttributeId,proto3" json:"bgp_local_attribute_id,omitempty"`
	// BGP attribute origin as
	BgpAttributeOriginAs uint32 `protobuf:"varint,26,opt,name=bgp_attribute_origin_as,json=bgpAttributeOriginAs,proto3" json:"bgp_attribute_origin_as,omitempty"`
	// BGP attribute next hop as
	BgpAttributeNextHopAs uint32 `protobuf:"varint,27,opt,name=bgp_attribute_next_hop_as,json=bgpAttributeNextHopAs,proto3" json:"bgp_attribute_next_hop_as,omitempty"`
	// As path string
	PathString []byte `protobuf:"bytes,28,opt,name=path_string,json=pathString,proto3" json:"path_string,omitempty"`
	// extcom st
	ExtcomString []byte `protobuf:"bytes,29,opt,name=extcom_string,json=extcomString,proto3" json:"extcom_string,omitempty"`
	// com st
	ComString []byte `protobuf:"bytes,30,opt,name=com_string,json=comString,proto3" json:"com_string,omitempty"`
	// extended community
	ExtendedCommunity uint32 `protobuf:"varint,31,opt,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	// qos group
	QosGroup uint32 `protobuf:"varint,32,opt,name=qos_group,json=qosGroup,proto3" json:"qos_group,omitempty"`
	// mpls fec
	MplsFec uint32 `protobuf:"varint,33,opt,name=mpls_fec,json=mplsFec,proto3" json:"mpls_fec,omitempty"`
	// qppb QOS group and IP precedence
	QppbQosGroupAndIpPrecedence uint32 `protobuf:"varint,34,opt,name=qppb_qos_group_and_ip_precedence,json=qppbQosGroupAndIpPrecedence,proto3" json:"qppb_qos_group_and_ip_precedence,omitempty"`
	// PBR flow-tag
	FlowTag uint32 `protobuf:"varint,35,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
	// SPP forwarding class ID
	ForwardClass uint32 `protobuf:"varint,36,opt,name=forward_class,json=forwardClass,proto3" json:"forward_class,omitempty"`
	// The time of last update for PL in msec
	PlTimeOfLastUpdateInMsec uint64 `protobuf:"varint,37,opt,name=pl_time_of_last_update_in_msec,json=plTimeOfLastUpdateInMsec,proto3" json:"pl_time_of_last_update_in_msec,omitempty"`
	// The time of last update for LDI in msec
	LdiTimeOfLastUpdateInMsec uint64 `protobuf:"varint,38,opt,name=ldi_time_of_last_update_in_msec,json=ldiTimeOfLastUpdateInMsec,proto3" json:"ldi_time_of_last_update_in_msec,omitempty"`
	// The time of last update for LW-LDI in msec
	LwldiTimeOfLastUpdateInMsec uint64 `protobuf:"varint,39,opt,name=lwldi_time_of_last_update_in_msec,json=lwldiTimeOfLastUpdateInMsec,proto3" json:"lwldi_time_of_last_update_in_msec,omitempty"`
	// The type of time-stamp on PL
	PlTimeStampType uint32 `protobuf:"varint,40,opt,name=pl_time_stamp_type,json=plTimeStampType,proto3" json:"pl_time_stamp_type,omitempty"`
}

func (x *FibShTblFibDet) Reset() {
	*x = FibShTblFibDet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShTblFibDet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShTblFibDet) ProtoMessage() {}

func (x *FibShTblFibDet) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShTblFibDet.ProtoReflect.Descriptor instead.
func (*FibShTblFibDet) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP(), []int{12}
}

func (x *FibShTblFibDet) GetFibEntryVersion() uint32 {
	if x != nil {
		return x.FibEntryVersion
	}
	return 0
}

func (x *FibShTblFibDet) GetPerPrefixAccounting() uint32 {
	if x != nil {
		return x.PerPrefixAccounting
	}
	return 0
}

func (x *FibShTblFibDet) GetLoadSharingType() string {
	if x != nil {
		return x.LoadSharingType
	}
	return ""
}

func (x *FibShTblFibDet) GetFibEntryAdjacencyType() string {
	if x != nil {
		return x.FibEntryAdjacencyType
	}
	return ""
}

func (x *FibShTblFibDet) GetFibProtocolType() uint32 {
	if x != nil {
		return x.FibProtocolType
	}
	return 0
}

func (x *FibShTblFibDet) GetAfiFibProtocolType() uint32 {
	if x != nil {
		return x.AfiFibProtocolType
	}
	return 0
}

func (x *FibShTblFibDet) GetAibL3Address() []byte {
	if x != nil {
		return x.AibL3Address
	}
	return nil
}

func (x *FibShTblFibDet) GetAdjacencyAddressLength() uint32 {
	if x != nil {
		return x.AdjacencyAddressLength
	}
	return 0
}

func (x *FibShTblFibDet) GetAdjacencyInterface() uint32 {
	if x != nil {
		return x.AdjacencyInterface
	}
	return 0
}

func (x *FibShTblFibDet) GetFibSpecialNhInformationType() uint32 {
	if x != nil {
		return x.FibSpecialNhInformationType
	}
	return 0
}

func (x *FibShTblFibDet) GetFibEntryAdjacencyAddress() []byte {
	if x != nil {
		return x.FibEntryAdjacencyAddress
	}
	return nil
}

func (x *FibShTblFibDet) GetFibEntryAdjacencyInterface() uint32 {
	if x != nil {
		return x.FibEntryAdjacencyInterface
	}
	return 0
}

func (x *FibShTblFibDet) GetPacketsThroughFibEntry() uint64 {
	if x != nil {
		return x.PacketsThroughFibEntry
	}
	return 0
}

func (x *FibShTblFibDet) GetBytesThroughFibEntry() uint64 {
	if x != nil {
		return x.BytesThroughFibEntry
	}
	return 0
}

func (x *FibShTblFibDet) GetDetailedPrefixLength() uint32 {
	if x != nil {
		return x.DetailedPrefixLength
	}
	return 0
}

func (x *FibShTblFibDet) GetPrefixProtocol() uint32 {
	if x != nil {
		return x.PrefixProtocol
	}
	return 0
}

func (x *FibShTblFibDet) GetPrecedenceForpackets() uint32 {
	if x != nil {
		return x.PrecedenceForpackets
	}
	return 0
}

func (x *FibShTblFibDet) GetTrafficIndexForPackets() uint32 {
	if x != nil {
		return x.TrafficIndexForPackets
	}
	return 0
}

func (x *FibShTblFibDet) GetSwitchCompontentId() uint32 {
	if x != nil {
		return x.SwitchCompontentId
	}
	return 0
}

func (x *FibShTblFibDet) GetFastAdjacencyFlag() bool {
	if x != nil {
		return x.FastAdjacencyFlag
	}
	return false
}

func (x *FibShTblFibDet) GetIllegalFastAdjacencyFlag() bool {
	if x != nil {
		return x.IllegalFastAdjacencyFlag
	}
	return false
}

func (x *FibShTblFibDet) GetRemoteAdjacencyFlag() bool {
	if x != nil {
		return x.RemoteAdjacencyFlag
	}
	return false
}

func (x *FibShTblFibDet) GetLoadshareInformation() *FibShTblLoadinfoDet {
	if x != nil {
		return x.LoadshareInformation
	}
	return nil
}

func (x *FibShTblFibDet) GetBgpAttributeId() uint32 {
	if x != nil {
		return x.BgpAttributeId
	}
	return 0
}

func (x *FibShTblFibDet) GetBgpLocalAttributeId() uint32 {
	if x != nil {
		return x.BgpLocalAttributeId
	}
	return 0
}

func (x *FibShTblFibDet) GetBgpAttributeOriginAs() uint32 {
	if x != nil {
		return x.BgpAttributeOriginAs
	}
	return 0
}

func (x *FibShTblFibDet) GetBgpAttributeNextHopAs() uint32 {
	if x != nil {
		return x.BgpAttributeNextHopAs
	}
	return 0
}

func (x *FibShTblFibDet) GetPathString() []byte {
	if x != nil {
		return x.PathString
	}
	return nil
}

func (x *FibShTblFibDet) GetExtcomString() []byte {
	if x != nil {
		return x.ExtcomString
	}
	return nil
}

func (x *FibShTblFibDet) GetComString() []byte {
	if x != nil {
		return x.ComString
	}
	return nil
}

func (x *FibShTblFibDet) GetExtendedCommunity() uint32 {
	if x != nil {
		return x.ExtendedCommunity
	}
	return 0
}

func (x *FibShTblFibDet) GetQosGroup() uint32 {
	if x != nil {
		return x.QosGroup
	}
	return 0
}

func (x *FibShTblFibDet) GetMplsFec() uint32 {
	if x != nil {
		return x.MplsFec
	}
	return 0
}

func (x *FibShTblFibDet) GetQppbQosGroupAndIpPrecedence() uint32 {
	if x != nil {
		return x.QppbQosGroupAndIpPrecedence
	}
	return 0
}

func (x *FibShTblFibDet) GetFlowTag() uint32 {
	if x != nil {
		return x.FlowTag
	}
	return 0
}

func (x *FibShTblFibDet) GetForwardClass() uint32 {
	if x != nil {
		return x.ForwardClass
	}
	return 0
}

func (x *FibShTblFibDet) GetPlTimeOfLastUpdateInMsec() uint64 {
	if x != nil {
		return x.PlTimeOfLastUpdateInMsec
	}
	return 0
}

func (x *FibShTblFibDet) GetLdiTimeOfLastUpdateInMsec() uint64 {
	if x != nil {
		return x.LdiTimeOfLastUpdateInMsec
	}
	return 0
}

func (x *FibShTblFibDet) GetLwldiTimeOfLastUpdateInMsec() uint64 {
	if x != nil {
		return x.LwldiTimeOfLastUpdateInMsec
	}
	return 0
}

func (x *FibShTblFibDet) GetPlTimeStampType() uint32 {
	if x != nil {
		return x.PlTimeStampType
	}
	return 0
}

var File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDesc = []byte{
	0x0a, 0x7d, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x66,
	0x69, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2f, 0x69, 0x70, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2f, 0x66, 0x69, 0x62, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x68, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69,
	0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x66, 0x69,
	0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x4b, 0x45, 0x59,
	0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xc2, 0x10, 0x0a, 0x0e,
	0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x12, 0x35,
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xbd, 0x01, 0x0a, 0x1c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74,
	0x62, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x52, 0x19, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x46, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69,
	0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68,
	0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0c, 0x66, 0x69, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x70, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x64, 0x69, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x4c, 0x64, 0x69, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x64, 0x69, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x64, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x64, 0x69,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x64, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76,
	0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x6e, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x6a, 0x61, 0x6e, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x17, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x75, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x75, 0x72, 0x67, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3f,
	0x0a, 0x1d, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x79, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x7a, 0x65, 0x72, 0x6f, 0x42, 0x79, 0x5a, 0x65, 0x72,
	0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x3a, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a,
	0x15, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x7a, 0x65, 0x72, 0x6f,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x75,
	0x6d, 0x6d, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x64, 0x69, 0x5f, 0x6c, 0x77, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x64, 0x69, 0x4c, 0x77, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x37, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6c, 0x77, 0x5f, 0x6c, 0x64, 0x69, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4f,
	0x66, 0x4c, 0x64, 0x69, 0x4c, 0x77, 0x4c, 0x64, 0x69, 0x12, 0x2a, 0x0a, 0x12, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6c, 0x77, 0x5f, 0x6c, 0x64, 0x69, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x4c, 0x64, 0x69,
	0x4c, 0x77, 0x4c, 0x64, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x73, 0x70, 0x61, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x73, 0x70, 0x61, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x66, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x69, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a,
	0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x32,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x32, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x32,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x6c, 0x32, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x58, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x32, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x32, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x32, 0x5f, 0x74, 0x70, 0x76, 0x33, 0x5f, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x32, 0x54, 0x70, 0x76, 0x33, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x69, 0x74, 0x73, 0x12, 0x51, 0x0a,
	0x26, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x22, 0x28, 0x0a, 0x0c, 0x66, 0x69, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xe7, 0x03, 0x0a, 0x19, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x77,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x46, 0x77, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x75,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x49, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0xb9, 0x01, 0x0a, 0x15, 0x69, 0x67, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x12, 0x69, 0x67, 0x70, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x16,
	0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x68,
	0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x64, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x68, 0x64,
	0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x48, 0x64, 0x72, 0x70, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x64, 0x79, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x64, 0x72, 0x44, 0x79, 0x6e, 0x22, 0xe5,
	0x04, 0x0a, 0x12, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x64, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x48, 0x64, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x70, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70, 0x5f, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x62, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x62, 0x6c, 0x12, 0x33, 0x0a,
	0x16, 0x69, 0x70, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x72, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x66, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x66, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x69, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x74, 0x75, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x69, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x70, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa5,
	0x01, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x68, 0x64, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69,
	0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x52, 0x0b, 0x69, 0x70, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x48, 0x64, 0x72, 0x73, 0x22, 0xdb, 0x0b, 0x0a, 0x13, 0x66, 0x69, 0x62, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x76, 0x72, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x56, 0x72, 0x66, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x75, 0x6e, 0x6e, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x70, 0x72, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x70, 0x72, 0x6c, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x54, 0x68, 0x69, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x32, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x5f,
	0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x62, 0x41,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x69, 0x62, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x69, 0x62,
	0x50, 0x61, 0x74, 0x68, 0x4e, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x66, 0x69, 0x62, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x66, 0x69, 0x62, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x9d, 0x01,
	0x0a, 0x0b, 0x73, 0x70, 0x64, 0x5f, 0x69, 0x70, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x70, 0x64, 0x49, 0x70, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x35, 0x0a,
	0x17, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f,
	0x74, 0x62, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x66, 0x69, 0x62,
	0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66, 0x69,
	0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x52, 0x0c, 0x66, 0x69, 0x62, 0x53, 0x68, 0x54, 0x62, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x83, 0x0a, 0x0a, 0x14, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0xb2, 0x01, 0x0a, 0x16, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x52, 0x13, 0x6d, 0x6f, 0x72, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0xbf,
	0x01, 0x0a, 0x19, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x6d, 0x70, 0x6c, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x31, 0x0a, 0x14, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x72, 0x69,
	0x65, 0x66, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x72, 0x69, 0x65, 0x66, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2f, 0x0a, 0x14,
	0x76, 0x69, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x69, 0x61, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x70, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x50, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x71, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x51, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x62, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x64, 0x6c, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68,
	0x44, 0x6c, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x61, 0x4c, 0x65, 0x6e, 0x22, 0x97, 0x09, 0x0a, 0x17, 0x66, 0x69, 0x62, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x66, 0x6c, 0x64,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4f,
	0x66, 0x6c, 0x64, 0x69, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x64, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x64, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x68,
	0x4c, 0x64, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0xa3, 0x01, 0x0a, 0x11,
	0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69,
	0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x52,
	0x10, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x4f, 0x66, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70,
	0x62, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x62, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x62, 0x74, 0x73, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x70, 0x62, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x62, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x70, 0x62, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x62, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x08, 0x52, 0x19, 0x70, 0x62, 0x74, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x62, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x70, 0x62, 0x74, 0x73, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x62, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x12, 0x70, 0x62, 0x74, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x44, 0x72, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x64, 0x69, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6c, 0x64, 0x69, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x08, 0x52, 0x14, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0x8c, 0x07, 0x0a, 0x17, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x20,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x26, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x22, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f,
	0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x4f, 0x66, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1d, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4c, 0x0a, 0x23,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x66, 0x6f, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0xc5, 0x01, 0x0a, 0x1d, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x69, 0x6e, 0x74, 0x52, 0x1a, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xff, 0x10, 0x0a, 0x12, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x66, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x70, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x69, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x66, 0x69, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x66, 0x69, 0x46, 0x69, 0x62, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x69,
	0x62, 0x5f, 0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x61, 0x69, 0x62, 0x4c, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x66, 0x69, 0x62, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x4e, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x66, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x46, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x35,
	0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x46, 0x69, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x73, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6c, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x46, 0x61, 0x73, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0xb7, 0x01, 0x0a, 0x15, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62,
	0x72, 0x69, 0x65, 0x66, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x62, 0x6c,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x74, 0x52, 0x14, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62,
	0x67, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x62, 0x67, 0x70,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x61, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x62, 0x67,
	0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x41, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x63, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x74,
	0x63, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x6f, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x6f, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x65, 0x63,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63, 0x12,
	0x45, 0x0a, 0x20, 0x71, 0x70, 0x70, 0x62, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x71, 0x70, 0x70, 0x62, 0x51,
	0x6f, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x64, 0x49, 0x70, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x1e, 0x70, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x70, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x1f, 0x6c, 0x64, 0x69, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x19, 0x6c, 0x64, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x21,
	0x6c, 0x77, 0x6c, 0x64, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x65,
	0x63, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x6c, 0x77, 0x6c, 0x64, 0x69, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x4d, 0x73, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x70, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_goTypes = []interface{}{
	(*FibShTblFib_KEYS)(nil),       // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_fib_KEYS
	(*FibShTblFib)(nil),            // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_fib
	(*FibAddrStr)(nil),             // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_addr_str
	(*FibShTblMplsLabelStack)(nil), // 3: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_mpls_label_stack
	(*FibShTblPathMplsInfo)(nil),   // 4: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_mpls_info
	(*FibShIpencapHdrDet)(nil),     // 5: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_ipencap_hdr_det
	(*FibShIpencapDet)(nil),        // 6: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_ipencap_det
	(*FibShTblPathDet)(nil),        // 7: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_det
	(*FibShTblPath)(nil),           // 8: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path
	(*FibShTblPathItem)(nil),       // 9: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_item
	(*FibShTblLoadinfoInt)(nil),    // 10: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_loadinfo_int
	(*FibShTblLoadinfoDet)(nil),    // 11: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_loadinfo_det
	(*FibShTblFibDet)(nil),         // 12: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_fib_det
}
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_depIdxs = []int32{
	12, // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_fib.detail_fib_entry_information:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_fib_det
	8,  // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_fib.fib_entry_path:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path
	3,  // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_mpls_info.igp_label_stack_array:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_mpls_label_stack
	5,  // 3: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_ipencap_det.ip_encap_hdrs:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_ipencap_hdr_det
	6,  // 4: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_det.spd_ipencap:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_ipencap_det
	9,  // 5: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path.fib_sh_tbl_path:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_item
	7,  // 6: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_item.more_detail_about_path:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_det
	4,  // 7: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_item.mpls_information_for_path:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_path_mpls_info
	2,  // 8: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_loadinfo_int.adjacency_address:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_addr_str
	10, // 9: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_loadinfo_det.load_informtion_internal_data:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_loadinfo_int
	11, // 10: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_fib_det.loadshare_information:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_briefs.ip_prefix_brief.fib_sh_tbl_loadinfo_det
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblFib_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblFib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAddrStr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblMplsLabelStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblPathMplsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShIpencapHdrDet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShIpencapDet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblPathDet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblPathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblLoadinfoInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblLoadinfoDet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShTblFibDet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto = out.File
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_ip_prefix_briefs_ip_prefix_brief_fib_sh_tbl_fib_proto_depIdxs = nil
}
