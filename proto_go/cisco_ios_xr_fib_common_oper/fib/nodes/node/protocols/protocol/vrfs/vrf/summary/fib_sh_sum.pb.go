// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/fib/nodes/node/protocols/protocol/vrfs/vrf/summary/fib_sh_sum.proto

package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FIB summary statistics
type FibShSum_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProtocolName string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	VrfName      string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *FibShSum_KEYS) Reset() {
	*x = FibShSum_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShSum_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShSum_KEYS) ProtoMessage() {}

func (x *FibShSum_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShSum_KEYS.ProtoReflect.Descriptor instead.
func (*FibShSum_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescGZIP(), []int{0}
}

func (x *FibShSum_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *FibShSum_KEYS) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *FibShSum_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type FibShSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The router-id
	Prefix []byte `protobuf:"bytes,50,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Table Id
	SsTblId uint32 `protobuf:"varint,51,opt,name=ss_tbl_id,json=ssTblId,proto3" json:"ss_tbl_id,omitempty"`
	// Table Id Ptr
	SsTblIdPtr uint32 `protobuf:"varint,52,opt,name=ss_tbl_id_ptr,json=ssTblIdPtr,proto3" json:"ss_tbl_id_ptr,omitempty"`
	// Virtual routing forwarding instance Id
	SsVrfId uint32 `protobuf:"varint,53,opt,name=ss_vrf_id,json=ssVrfId,proto3" json:"ss_vrf_id,omitempty"`
	// Virtual router instance Id
	SsVrId uint32 `protobuf:"varint,54,opt,name=ss_vr_id,json=ssVrId,proto3" json:"ss_vr_id,omitempty"`
	// LBA configuration state
	LoadBalancing string `protobuf:"bytes,55,opt,name=load_balancing,json=loadBalancing,proto3" json:"load_balancing,omitempty"`
	// Number of forwarding elements linked to the table
	ForwardingElements uint32 `protobuf:"varint,56,opt,name=forwarding_elements,json=forwardingElements,proto3" json:"forwarding_elements,omitempty"`
	// Number of routes
	Routes uint32 `protobuf:"varint,57,opt,name=routes,proto3" json:"routes,omitempty"`
	// Number of inplace modifications
	PrefixInPlaceModifications uint32 `protobuf:"varint,58,opt,name=prefix_in_place_modifications,json=prefixInPlaceModifications,proto3" json:"prefix_in_place_modifications,omitempty"`
	// Number of deleted stale leafs
	StalePrefixDeletes uint32 `protobuf:"varint,59,opt,name=stale_prefix_deletes,json=stalePrefixDeletes,proto3" json:"stale_prefix_deletes,omitempty"`
	// Count of load sharing elements
	LoadSharingElements uint32 `protobuf:"varint,60,opt,name=load_sharing_elements,json=loadSharingElements,proto3" json:"load_sharing_elements,omitempty"`
	// Count of load sharing references
	LoadSharingReferences uint64 `protobuf:"varint,61,opt,name=load_sharing_references,json=loadSharingReferences,proto3" json:"load_sharing_references,omitempty"`
	// Total memory used by load sharing elements
	TotalLoadShareElementBytes uint32 `protobuf:"varint,62,opt,name=total_load_share_element_bytes,json=totalLoadShareElementBytes,proto3" json:"total_load_share_element_bytes,omitempty"`
	// Exclusive load sharing element
	ExclusiveLoadSharingElement *FibPlLdiCount `protobuf:"bytes,63,opt,name=exclusive_load_sharing_element,json=exclusiveLoadSharingElement,proto3" json:"exclusive_load_sharing_element,omitempty"`
	// Shared load sharing element
	SharedLoadSharingElement *FibPlLdiCount `protobuf:"bytes,64,opt,name=shared_load_sharing_element,json=sharedLoadSharingElement,proto3" json:"shared_load_sharing_element,omitempty"`
	// Cross-table shared load sharing element
	CrossSharedLoadSharingElement *FibPlLdiCount `protobuf:"bytes,65,opt,name=cross_shared_load_sharing_element,json=crossSharedLoadSharingElement,proto3" json:"cross_shared_load_sharing_element,omitempty"`
	// Label-shared load sharing element
	LabelSharedLoadSharingElement *FibPlLdiCount `protobuf:"bytes,66,opt,name=label_shared_load_sharing_element,json=labelSharedLoadSharingElement,proto3" json:"label_shared_load_sharing_element,omitempty"`
	// Total memory used by leaves
	LeavesUsedBytes uint32 `protobuf:"varint,67,opt,name=leaves_used_bytes,json=leavesUsedBytes,proto3" json:"leaves_used_bytes,omitempty"`
	// Number of reresolved entries
	ReresolveEntries uint32 `protobuf:"varint,68,opt,name=reresolve_entries,json=reresolveEntries,proto3" json:"reresolve_entries,omitempty"`
	// Number of old unresolved entries
	OldUnresolveEntries uint32 `protobuf:"varint,69,opt,name=old_unresolve_entries,json=oldUnresolveEntries,proto3" json:"old_unresolve_entries,omitempty"`
	// Number of new unresolved entries
	NewUnresolveEntries uint32 `protobuf:"varint,70,opt,name=new_unresolve_entries,json=newUnresolveEntries,proto3" json:"new_unresolve_entries,omitempty"`
	// Number of total unresolved entries
	UnresolveEntries uint32 `protobuf:"varint,71,opt,name=unresolve_entries,json=unresolveEntries,proto3" json:"unresolve_entries,omitempty"`
	// Number of routes dropped by CEF
	CefRouteDrops uint32 `protobuf:"varint,72,opt,name=cef_route_drops,json=cefRouteDrops,proto3" json:"cef_route_drops,omitempty"`
	// the number of routes dropped due to version mismatch
	CefVersionMismatchRouteDrops uint64 `protobuf:"varint,73,opt,name=cef_version_mismatch_route_drops,json=cefVersionMismatchRouteDrops,proto3" json:"cef_version_mismatch_route_drops,omitempty"`
	// Number of entries in the route delete cache
	DeleteCacheNumEntries uint32 `protobuf:"varint,74,opt,name=delete_cache_num_entries,json=deleteCacheNumEntries,proto3" json:"delete_cache_num_entries,omitempty"`
	// Number of entries present on addition
	ExistingLeavesRevisions uint32 `protobuf:"varint,75,opt,name=existing_leaves_revisions,json=existingLeavesRevisions,proto3" json:"existing_leaves_revisions,omitempty"`
	// Default prefix
	FibDefaultPrefix uint32 `protobuf:"varint,76,opt,name=fib_default_prefix,json=fibDefaultPrefix,proto3" json:"fib_default_prefix,omitempty"`
	// Default prefix mask length
	FibDefaultPrefixMaskLength uint32 `protobuf:"varint,77,opt,name=fib_default_prefix_mask_length,json=fibDefaultPrefixMaskLength,proto3" json:"fib_default_prefix_mask_length,omitempty"`
	// Number of NHINFOS
	NextHops uint32 `protobuf:"varint,78,opt,name=next_hops,json=nextHops,proto3" json:"next_hops,omitempty"`
	// Number of incomplete NHINFOS
	IncompleteNextHops uint32 `protobuf:"varint,79,opt,name=incomplete_next_hops,json=incompleteNextHops,proto3" json:"incomplete_next_hops,omitempty"`
	// IP CEF resolution timer in seconds
	ResolutionTimer uint32 `protobuf:"varint,80,opt,name=resolution_timer,json=resolutionTimer,proto3" json:"resolution_timer,omitempty"`
	// IP CEF slow processing time in seconds
	SlowProcessTimer uint32 `protobuf:"varint,81,opt,name=slow_process_timer,json=slowProcessTimer,proto3" json:"slow_process_timer,omitempty"`
	// IP CEF max resolution time in seconds
	MaxResolutionTimer uint32 `protobuf:"varint,82,opt,name=max_resolution_timer,json=maxResolutionTimer,proto3" json:"max_resolution_timer,omitempty"`
	// Number of prefixes with imposition LDI
	ImpositionPrefixes uint32 `protobuf:"varint,83,opt,name=imposition_prefixes,json=impositionPrefixes,proto3" json:"imposition_prefixes,omitempty"`
	// Number of prefixes with extended path-list
	ExtendedPrefixes uint32 `protobuf:"varint,84,opt,name=extended_prefixes,json=extendedPrefixes,proto3" json:"extended_prefixes,omitempty"`
	// Number of routes updates with recycled label handled
	CeflBlRecycledRoutes uint32 `protobuf:"varint,85,opt,name=cefl_bl_recycled_routes,json=ceflBlRecycledRoutes,proto3" json:"cefl_bl_recycled_routes,omitempty"`
	// pd backwalks on LDI modify with backup path
	LdiBackwalks uint32 `protobuf:"varint,86,opt,name=ldi_backwalks,json=ldiBackwalks,proto3" json:"ldi_backwalks,omitempty"`
	// Number of routes with FRR protection
	SsProtRouteCount uint32 `protobuf:"varint,87,opt,name=ss_prot_route_count,json=ssProtRouteCount,proto3" json:"ss_prot_route_count,omitempty"`
	// Number of lisp eid prefixes associated with table
	LispEidPrefixes uint32 `protobuf:"varint,88,opt,name=lisp_eid_prefixes,json=lispEidPrefixes,proto3" json:"lisp_eid_prefixes,omitempty"`
	// Number of lisp eid prefixes eligible for forwarding
	LispEidValidPrefixes uint32 `protobuf:"varint,89,opt,name=lisp_eid_valid_prefixes,json=lispEidValidPrefixes,proto3" json:"lisp_eid_valid_prefixes,omitempty"`
	// Number of lisp rloc objects associated with table
	LispRlocObjects uint32 `protobuf:"varint,90,opt,name=lisp_rloc_objects,json=lispRlocObjects,proto3" json:"lisp_rloc_objects,omitempty"`
	// VXLAN local Interface handle
	SsVxlanLtepIfh string `protobuf:"bytes,91,opt,name=ss_vxlan_ltep_ifh,json=ssVxlanLtepIfh,proto3" json:"ss_vxlan_ltep_ifh,omitempty"`
	// Number of dropped pathlists
	SsDropPlCount uint32 `protobuf:"varint,92,opt,name=ss_drop_pl_count,json=ssDropPlCount,proto3" json:"ss_drop_pl_count,omitempty"`
}

func (x *FibShSum) Reset() {
	*x = FibShSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShSum) ProtoMessage() {}

func (x *FibShSum) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShSum.ProtoReflect.Descriptor instead.
func (*FibShSum) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescGZIP(), []int{1}
}

func (x *FibShSum) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *FibShSum) GetSsTblId() uint32 {
	if x != nil {
		return x.SsTblId
	}
	return 0
}

func (x *FibShSum) GetSsTblIdPtr() uint32 {
	if x != nil {
		return x.SsTblIdPtr
	}
	return 0
}

func (x *FibShSum) GetSsVrfId() uint32 {
	if x != nil {
		return x.SsVrfId
	}
	return 0
}

func (x *FibShSum) GetSsVrId() uint32 {
	if x != nil {
		return x.SsVrId
	}
	return 0
}

func (x *FibShSum) GetLoadBalancing() string {
	if x != nil {
		return x.LoadBalancing
	}
	return ""
}

func (x *FibShSum) GetForwardingElements() uint32 {
	if x != nil {
		return x.ForwardingElements
	}
	return 0
}

func (x *FibShSum) GetRoutes() uint32 {
	if x != nil {
		return x.Routes
	}
	return 0
}

func (x *FibShSum) GetPrefixInPlaceModifications() uint32 {
	if x != nil {
		return x.PrefixInPlaceModifications
	}
	return 0
}

func (x *FibShSum) GetStalePrefixDeletes() uint32 {
	if x != nil {
		return x.StalePrefixDeletes
	}
	return 0
}

func (x *FibShSum) GetLoadSharingElements() uint32 {
	if x != nil {
		return x.LoadSharingElements
	}
	return 0
}

func (x *FibShSum) GetLoadSharingReferences() uint64 {
	if x != nil {
		return x.LoadSharingReferences
	}
	return 0
}

func (x *FibShSum) GetTotalLoadShareElementBytes() uint32 {
	if x != nil {
		return x.TotalLoadShareElementBytes
	}
	return 0
}

func (x *FibShSum) GetExclusiveLoadSharingElement() *FibPlLdiCount {
	if x != nil {
		return x.ExclusiveLoadSharingElement
	}
	return nil
}

func (x *FibShSum) GetSharedLoadSharingElement() *FibPlLdiCount {
	if x != nil {
		return x.SharedLoadSharingElement
	}
	return nil
}

func (x *FibShSum) GetCrossSharedLoadSharingElement() *FibPlLdiCount {
	if x != nil {
		return x.CrossSharedLoadSharingElement
	}
	return nil
}

func (x *FibShSum) GetLabelSharedLoadSharingElement() *FibPlLdiCount {
	if x != nil {
		return x.LabelSharedLoadSharingElement
	}
	return nil
}

func (x *FibShSum) GetLeavesUsedBytes() uint32 {
	if x != nil {
		return x.LeavesUsedBytes
	}
	return 0
}

func (x *FibShSum) GetReresolveEntries() uint32 {
	if x != nil {
		return x.ReresolveEntries
	}
	return 0
}

func (x *FibShSum) GetOldUnresolveEntries() uint32 {
	if x != nil {
		return x.OldUnresolveEntries
	}
	return 0
}

func (x *FibShSum) GetNewUnresolveEntries() uint32 {
	if x != nil {
		return x.NewUnresolveEntries
	}
	return 0
}

func (x *FibShSum) GetUnresolveEntries() uint32 {
	if x != nil {
		return x.UnresolveEntries
	}
	return 0
}

func (x *FibShSum) GetCefRouteDrops() uint32 {
	if x != nil {
		return x.CefRouteDrops
	}
	return 0
}

func (x *FibShSum) GetCefVersionMismatchRouteDrops() uint64 {
	if x != nil {
		return x.CefVersionMismatchRouteDrops
	}
	return 0
}

func (x *FibShSum) GetDeleteCacheNumEntries() uint32 {
	if x != nil {
		return x.DeleteCacheNumEntries
	}
	return 0
}

func (x *FibShSum) GetExistingLeavesRevisions() uint32 {
	if x != nil {
		return x.ExistingLeavesRevisions
	}
	return 0
}

func (x *FibShSum) GetFibDefaultPrefix() uint32 {
	if x != nil {
		return x.FibDefaultPrefix
	}
	return 0
}

func (x *FibShSum) GetFibDefaultPrefixMaskLength() uint32 {
	if x != nil {
		return x.FibDefaultPrefixMaskLength
	}
	return 0
}

func (x *FibShSum) GetNextHops() uint32 {
	if x != nil {
		return x.NextHops
	}
	return 0
}

func (x *FibShSum) GetIncompleteNextHops() uint32 {
	if x != nil {
		return x.IncompleteNextHops
	}
	return 0
}

func (x *FibShSum) GetResolutionTimer() uint32 {
	if x != nil {
		return x.ResolutionTimer
	}
	return 0
}

func (x *FibShSum) GetSlowProcessTimer() uint32 {
	if x != nil {
		return x.SlowProcessTimer
	}
	return 0
}

func (x *FibShSum) GetMaxResolutionTimer() uint32 {
	if x != nil {
		return x.MaxResolutionTimer
	}
	return 0
}

func (x *FibShSum) GetImpositionPrefixes() uint32 {
	if x != nil {
		return x.ImpositionPrefixes
	}
	return 0
}

func (x *FibShSum) GetExtendedPrefixes() uint32 {
	if x != nil {
		return x.ExtendedPrefixes
	}
	return 0
}

func (x *FibShSum) GetCeflBlRecycledRoutes() uint32 {
	if x != nil {
		return x.CeflBlRecycledRoutes
	}
	return 0
}

func (x *FibShSum) GetLdiBackwalks() uint32 {
	if x != nil {
		return x.LdiBackwalks
	}
	return 0
}

func (x *FibShSum) GetSsProtRouteCount() uint32 {
	if x != nil {
		return x.SsProtRouteCount
	}
	return 0
}

func (x *FibShSum) GetLispEidPrefixes() uint32 {
	if x != nil {
		return x.LispEidPrefixes
	}
	return 0
}

func (x *FibShSum) GetLispEidValidPrefixes() uint32 {
	if x != nil {
		return x.LispEidValidPrefixes
	}
	return 0
}

func (x *FibShSum) GetLispRlocObjects() uint32 {
	if x != nil {
		return x.LispRlocObjects
	}
	return 0
}

func (x *FibShSum) GetSsVxlanLtepIfh() string {
	if x != nil {
		return x.SsVxlanLtepIfh
	}
	return ""
}

func (x *FibShSum) GetSsDropPlCount() uint32 {
	if x != nil {
		return x.SsDropPlCount
	}
	return 0
}

// FIB Pathlist and Loadinfo summary
type FibPlLdiCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total memory used by load sharing elements in bytes
	TotalLoadSharingElementBytes uint32 `protobuf:"varint,1,opt,name=total_load_sharing_element_bytes,json=totalLoadSharingElementBytes,proto3" json:"total_load_sharing_element_bytes,omitempty"`
	// Total count of references to load sharing elements
	TotalLoadSharingElementReferences uint64 `protobuf:"varint,2,opt,name=total_load_sharing_element_references,json=totalLoadSharingElementReferences,proto3" json:"total_load_sharing_element_references,omitempty"`
	// Total count of Pathlist elements
	TotalPathListElements uint32 `protobuf:"varint,3,opt,name=total_path_list_elements,json=totalPathListElements,proto3" json:"total_path_list_elements,omitempty"`
	// Count of recursive Pathlist elements
	RecursivePathListElements uint32 `protobuf:"varint,4,opt,name=recursive_path_list_elements,json=recursivePathListElements,proto3" json:"recursive_path_list_elements,omitempty"`
	// Count of platform shared Pathlist elements
	PlatformSharedPathListElements uint32 `protobuf:"varint,5,opt,name=platform_shared_path_list_elements,json=platformSharedPathListElements,proto3" json:"platform_shared_path_list_elements,omitempty"`
	// Count of Pathlist elements in retry
	RetryPathListElements uint32 `protobuf:"varint,6,opt,name=retry_path_list_elements,json=retryPathListElements,proto3" json:"retry_path_list_elements,omitempty"`
	// Total count of Loadinfo elements
	TotalLoadInfoElements uint32 `protobuf:"varint,7,opt,name=total_load_info_elements,json=totalLoadInfoElements,proto3" json:"total_load_info_elements,omitempty"`
	// Count of recursive Loadinfo elements
	RecursiveLoadInfoElements uint32 `protobuf:"varint,8,opt,name=recursive_load_info_elements,json=recursiveLoadInfoElements,proto3" json:"recursive_load_info_elements,omitempty"`
	// Count of platform shared Loadinfo elements
	PlatformSharedLoadInfoElements uint32 `protobuf:"varint,9,opt,name=platform_shared_load_info_elements,json=platformSharedLoadInfoElements,proto3" json:"platform_shared_load_info_elements,omitempty"`
}

func (x *FibPlLdiCount) Reset() {
	*x = FibPlLdiCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibPlLdiCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibPlLdiCount) ProtoMessage() {}

func (x *FibPlLdiCount) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibPlLdiCount.ProtoReflect.Descriptor instead.
func (*FibPlLdiCount) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescGZIP(), []int{2}
}

func (x *FibPlLdiCount) GetTotalLoadSharingElementBytes() uint32 {
	if x != nil {
		return x.TotalLoadSharingElementBytes
	}
	return 0
}

func (x *FibPlLdiCount) GetTotalLoadSharingElementReferences() uint64 {
	if x != nil {
		return x.TotalLoadSharingElementReferences
	}
	return 0
}

func (x *FibPlLdiCount) GetTotalPathListElements() uint32 {
	if x != nil {
		return x.TotalPathListElements
	}
	return 0
}

func (x *FibPlLdiCount) GetRecursivePathListElements() uint32 {
	if x != nil {
		return x.RecursivePathListElements
	}
	return 0
}

func (x *FibPlLdiCount) GetPlatformSharedPathListElements() uint32 {
	if x != nil {
		return x.PlatformSharedPathListElements
	}
	return 0
}

func (x *FibPlLdiCount) GetRetryPathListElements() uint32 {
	if x != nil {
		return x.RetryPathListElements
	}
	return 0
}

func (x *FibPlLdiCount) GetTotalLoadInfoElements() uint32 {
	if x != nil {
		return x.TotalLoadInfoElements
	}
	return 0
}

func (x *FibPlLdiCount) GetRecursiveLoadInfoElements() uint32 {
	if x != nil {
		return x.RecursiveLoadInfoElements
	}
	return 0
}

func (x *FibPlLdiCount) GetPlatformSharedLoadInfoElements() uint32 {
	if x != nil {
		return x.PlatformSharedLoadInfoElements
	}
	return 0
}

var File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDesc = []byte{
	0x0a, 0x60, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x66,
	0x69, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2f, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x4f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x6e, 0x0a, 0x0f, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x75,
	0x6d, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xc1, 0x13, 0x0a, 0x0a, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x73,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x73,
	0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x73, 0x54, 0x62, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x73, 0x73, 0x5f, 0x74, 0x62, 0x6c,
	0x5f, 0x69, 0x64, 0x5f, 0x70, 0x74, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x73, 0x54, 0x62, 0x6c, 0x49, 0x64, 0x50, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x73, 0x5f,
	0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x73,
	0x56, 0x72, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x73, 0x73, 0x5f, 0x76, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x73, 0x56, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x1e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x66, 0x69, 0x62, 0x5f, 0x70, 0x6c, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa0, 0x01,
	0x0a, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x70, 0x6c, 0x5f, 0x6c, 0x64, 0x69,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0xab, 0x01, 0x0a, 0x21, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x66,
	0x69, 0x62, 0x5f, 0x70, 0x6c, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x1d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xab,
	0x01, 0x0a, 0x21, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x66, 0x69, 0x62,
	0x5f, 0x70, 0x6c, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x1d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x55, 0x6e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x65,
	0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x65, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x65, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x63, 0x65,
	0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x69, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69, 0x62,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x42, 0x0a,
	0x1e, 0x66, 0x69, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x69, 0x62, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x65, 0x66,
	0x6c, 0x5f, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x65, 0x66, 0x6c,
	0x42, 0x6c, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x64, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x6c, 0x6b,
	0x73, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x64, 0x69, 0x42, 0x61, 0x63, 0x6b,
	0x77, 0x61, 0x6c, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6c, 0x69, 0x73, 0x70, 0x45, 0x69, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x70, 0x45, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x70, 0x5f,
	0x72, 0x6c, 0x6f, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x70, 0x52, 0x6c, 0x6f, 0x63, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x73, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f,
	0x6c, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x66, 0x68, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x73, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x4c, 0x74, 0x65, 0x70, 0x49, 0x66, 0x68, 0x12, 0x27,
	0x0a, 0x10, 0x73, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x73, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x04, 0x0a, 0x10, 0x66, 0x69, 0x62, 0x5f,
	0x70, 0x6c, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x20,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4a, 0x0a, 0x22, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f,
	0x0a, 0x1c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4a, 0x0a, 0x22, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_goTypes = []interface{}{
	(*FibShSum_KEYS)(nil), // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum_KEYS
	(*FibShSum)(nil),      // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum
	(*FibPlLdiCount)(nil), // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_pl_ldi_count
}
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum.exclusive_load_sharing_element:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_pl_ldi_count
	2, // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum.shared_load_sharing_element:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_pl_ldi_count
	2, // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum.cross_shared_load_sharing_element:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_pl_ldi_count
	2, // 3: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum.label_shared_load_sharing_element:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_pl_ldi_count
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShSum_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibPlLdiCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto = out.File
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary_fib_sh_sum_proto_depIdxs = nil
}
