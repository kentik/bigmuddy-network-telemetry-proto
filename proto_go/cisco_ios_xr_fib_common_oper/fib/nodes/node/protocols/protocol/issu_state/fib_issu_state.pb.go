// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/fib/nodes/node/protocols/protocol/issu_state/fib_issu_state.proto

package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FIB ISSU state
type FibIssuState_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProtocolName string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
}

func (x *FibIssuState_KEYS) Reset() {
	*x = FibIssuState_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibIssuState_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibIssuState_KEYS) ProtoMessage() {}

func (x *FibIssuState_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibIssuState_KEYS.ProtoReflect.Descriptor instead.
func (*FibIssuState_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescGZIP(), []int{0}
}

func (x *FibIssuState_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *FibIssuState_KEYS) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

type FibIssuState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMDR supported
	ImdrSupport bool `protobuf:"varint,50,opt,name=imdr_support,json=imdrSupport,proto3" json:"imdr_support,omitempty"`
	// SLC supported
	SlcSupport bool `protobuf:"varint,51,opt,name=slc_support,json=slcSupport,proto3" json:"slc_support,omitempty"`
	// ISSU restart
	FisIssuRestart bool `protobuf:"varint,52,opt,name=fis_issu_restart,json=fisIssuRestart,proto3" json:"fis_issu_restart,omitempty"`
	// IMDR End-of-config implicit
	ImdrEocImplicit bool `protobuf:"varint,53,opt,name=imdr_eoc_implicit,json=imdrEocImplicit,proto3" json:"imdr_eoc_implicit,omitempty"`
	// SLC End-of-config implicit
	SlcEocImplicit bool `protobuf:"varint,54,opt,name=slc_eoc_implicit,json=slcEocImplicit,proto3" json:"slc_eoc_implicit,omitempty"`
	// End-of-config received from IMDR timestamp
	EocReceivedImdrTimeStamp string `protobuf:"bytes,55,opt,name=eoc_received_imdr_time_stamp,json=eocReceivedImdrTimeStamp,proto3" json:"eoc_received_imdr_time_stamp,omitempty"`
	// End-of-config received from SLC timestamp
	EocReceivedSlcTimeStamp string `protobuf:"bytes,56,opt,name=eoc_received_slc_time_stamp,json=eocReceivedSlcTimeStamp,proto3" json:"eoc_received_slc_time_stamp,omitempty"`
	// End-of-download received from IM timestamp
	EodReceivedImTimeStamp string `protobuf:"bytes,57,opt,name=eod_received_im_time_stamp,json=eodReceivedImTimeStamp,proto3" json:"eod_received_im_time_stamp,omitempty"`
	// End-of-download send to IMDR timestamp
	EodSentImdrTimeStamp string `protobuf:"bytes,58,opt,name=eod_sent_imdr_time_stamp,json=eodSentImdrTimeStamp,proto3" json:"eod_sent_imdr_time_stamp,omitempty"`
	// End-of-download send to SLC timestamp
	EodSentSlcTimeStamp string `protobuf:"bytes,59,opt,name=eod_sent_slc_time_stamp,json=eodSentSlcTimeStamp,proto3" json:"eod_sent_slc_time_stamp,omitempty"`
	// ISSU error sent to ISSUMGR timetstamp
	FisIssuErrorTs uint64 `protobuf:"varint,60,opt,name=fis_issu_error_ts,json=fisIssuErrorTs,proto3" json:"fis_issu_error_ts,omitempty"`
	// IMDR state for the protocols
	FisProtoState []*FibIssuProtoState `protobuf:"bytes,61,rep,name=fis_proto_state,json=fisProtoState,proto3" json:"fis_proto_state,omitempty"`
}

func (x *FibIssuState) Reset() {
	*x = FibIssuState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibIssuState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibIssuState) ProtoMessage() {}

func (x *FibIssuState) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibIssuState.ProtoReflect.Descriptor instead.
func (*FibIssuState) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescGZIP(), []int{1}
}

func (x *FibIssuState) GetImdrSupport() bool {
	if x != nil {
		return x.ImdrSupport
	}
	return false
}

func (x *FibIssuState) GetSlcSupport() bool {
	if x != nil {
		return x.SlcSupport
	}
	return false
}

func (x *FibIssuState) GetFisIssuRestart() bool {
	if x != nil {
		return x.FisIssuRestart
	}
	return false
}

func (x *FibIssuState) GetImdrEocImplicit() bool {
	if x != nil {
		return x.ImdrEocImplicit
	}
	return false
}

func (x *FibIssuState) GetSlcEocImplicit() bool {
	if x != nil {
		return x.SlcEocImplicit
	}
	return false
}

func (x *FibIssuState) GetEocReceivedImdrTimeStamp() string {
	if x != nil {
		return x.EocReceivedImdrTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEocReceivedSlcTimeStamp() string {
	if x != nil {
		return x.EocReceivedSlcTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEodReceivedImTimeStamp() string {
	if x != nil {
		return x.EodReceivedImTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEodSentImdrTimeStamp() string {
	if x != nil {
		return x.EodSentImdrTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEodSentSlcTimeStamp() string {
	if x != nil {
		return x.EodSentSlcTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetFisIssuErrorTs() uint64 {
	if x != nil {
		return x.FisIssuErrorTs
	}
	return 0
}

func (x *FibIssuState) GetFisProtoState() []*FibIssuProtoState {
	if x != nil {
		return x.FisProtoState
	}
	return nil
}

// FIB ISSU protocol state
type FibIssuProtoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol name
	ProtocolName    string `protobuf:"bytes,1,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	AibEodTimeStamp string `protobuf:"bytes,2,opt,name=aib_eod_time_stamp,json=aibEodTimeStamp,proto3" json:"aib_eod_time_stamp,omitempty"`
	// RSI EOD expected/valid
	RsiEodValid bool `protobuf:"varint,3,opt,name=rsi_eod_valid,json=rsiEodValid,proto3" json:"rsi_eod_valid,omitempty"`
	// RSI EOD received timestamp
	RsiEodTimeStamp string `protobuf:"bytes,4,opt,name=rsi_eod_time_stamp,json=rsiEodTimeStamp,proto3" json:"rsi_eod_time_stamp,omitempty"`
	// LSD EOD expected/valid
	LsdEodValid bool `protobuf:"varint,5,opt,name=lsd_eod_valid,json=lsdEodValid,proto3" json:"lsd_eod_valid,omitempty"`
	// LSD EOD received timestamp
	LsdEodTimeStamp string `protobuf:"bytes,6,opt,name=lsd_eod_time_stamp,json=lsdEodTimeStamp,proto3" json:"lsd_eod_time_stamp,omitempty"`
	// LMRIB EOD expected/valid
	LmribEodValid bool `protobuf:"varint,7,opt,name=lmrib_eod_valid,json=lmribEodValid,proto3" json:"lmrib_eod_valid,omitempty"`
	// LMRIB EOD received timestamp
	LmribEodTimeStamp string `protobuf:"bytes,8,opt,name=lmrib_eod_time_stamp,json=lmribEodTimeStamp,proto3" json:"lmrib_eod_time_stamp,omitempty"`
	// RIB table info valid
	RibInfoValid bool `protobuf:"varint,9,opt,name=rib_info_valid,json=ribInfoValid,proto3" json:"rib_info_valid,omitempty"`
	// Number of BCDL tables
	BcdlTables uint32 `protobuf:"varint,10,opt,name=bcdl_tables,json=bcdlTables,proto3" json:"bcdl_tables,omitempty"`
	// Number of tables converged
	ConvergedTables uint32 `protobuf:"varint,11,opt,name=converged_tables,json=convergedTables,proto3" json:"converged_tables,omitempty"`
	// All RIB tables converged timestamp
	RibTablesConvergedTimeStamp string `protobuf:"bytes,12,opt,name=rib_tables_converged_time_stamp,json=ribTablesConvergedTimeStamp,proto3" json:"rib_tables_converged_time_stamp,omitempty"`
	// Protocol EOD expected/valid
	ProtocolEodValid bool `protobuf:"varint,13,opt,name=protocol_eod_valid,json=protocolEodValid,proto3" json:"protocol_eod_valid,omitempty"`
	// Protocol EOD sent timestamp
	ProtocolEodTimeStamp string `protobuf:"bytes,14,opt,name=protocol_eod_time_stamp,json=protocolEodTimeStamp,proto3" json:"protocol_eod_time_stamp,omitempty"`
}

func (x *FibIssuProtoState) Reset() {
	*x = FibIssuProtoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibIssuProtoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibIssuProtoState) ProtoMessage() {}

func (x *FibIssuProtoState) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibIssuProtoState.ProtoReflect.Descriptor instead.
func (*FibIssuProtoState) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescGZIP(), []int{2}
}

func (x *FibIssuProtoState) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *FibIssuProtoState) GetAibEodTimeStamp() string {
	if x != nil {
		return x.AibEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetRsiEodValid() bool {
	if x != nil {
		return x.RsiEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetRsiEodTimeStamp() string {
	if x != nil {
		return x.RsiEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetLsdEodValid() bool {
	if x != nil {
		return x.LsdEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetLsdEodTimeStamp() string {
	if x != nil {
		return x.LsdEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetLmribEodValid() bool {
	if x != nil {
		return x.LmribEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetLmribEodTimeStamp() string {
	if x != nil {
		return x.LmribEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetRibInfoValid() bool {
	if x != nil {
		return x.RibInfoValid
	}
	return false
}

func (x *FibIssuProtoState) GetBcdlTables() uint32 {
	if x != nil {
		return x.BcdlTables
	}
	return 0
}

func (x *FibIssuProtoState) GetConvergedTables() uint32 {
	if x != nil {
		return x.ConvergedTables
	}
	return 0
}

func (x *FibIssuProtoState) GetRibTablesConvergedTimeStamp() string {
	if x != nil {
		return x.RibTablesConvergedTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetProtocolEodValid() bool {
	if x != nil {
		return x.ProtocolEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetProtocolEodTimeStamp() string {
	if x != nil {
		return x.ProtocolEodTimeStamp
	}
	return ""
}

var File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDesc = []byte{
	0x0a, 0x5e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x66,
	0x69, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x69, 0x62, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x49, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66,
	0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x66,
	0x69, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x05, 0x0a, 0x0e, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x64, 0x72, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6d, 0x64, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c,
	0x63, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x6c, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x69, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x73, 0x49, 0x73, 0x73, 0x75, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x64, 0x72, 0x5f, 0x65, 0x6f,
	0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6d, 0x64, 0x72, 0x45, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x63, 0x5f, 0x65, 0x6f, 0x63, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6c, 0x63,
	0x45, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x65,
	0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x64, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x65, 0x6f, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6d,
	0x64, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x65,
	0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x65, 0x6f, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x6c, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x1a, 0x65, 0x6f, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65,
	0x6f, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x18, 0x65, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6d, 0x64, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6f, 0x64, 0x53, 0x65, 0x6e, 0x74,
	0x49, 0x6d, 0x64, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a,
	0x17, 0x65, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x6f, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x66, 0x69, 0x73, 0x49, 0x73, 0x73, 0x75, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x73, 0x12, 0x87,
	0x01, 0x0a, 0x0f, 0x66, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x80, 0x05, 0x0a, 0x14, 0x66, 0x69, 0x62,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x69, 0x62, 0x5f, 0x65, 0x6f,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x69, 0x62, 0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x73, 0x69, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x73, 0x69, 0x45,
	0x6f, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x73, 0x69, 0x5f, 0x65,
	0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x73, 0x69, 0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x73, 0x64, 0x5f, 0x65, 0x6f, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x73, 0x64,
	0x45, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x73, 0x64, 0x5f,
	0x65, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x73, 0x64, 0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6d, 0x72, 0x69, 0x62, 0x5f, 0x65,
	0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6c, 0x6d, 0x72, 0x69, 0x62, 0x45, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x6c, 0x6d, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6d, 0x72,
	0x69, 0x62, 0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x69, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x63, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x63, 0x64, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x1f, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x72, 0x69, 0x62, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6f, 0x64, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45,
	0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_goTypes = []interface{}{
	(*FibIssuState_KEYS)(nil), // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.issu_state.fib_issu_state_KEYS
	(*FibIssuState)(nil),      // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.issu_state.fib_issu_state
	(*FibIssuProtoState)(nil), // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.issu_state.fib_issu_proto_state
}
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.issu_state.fib_issu_state.fis_proto_state:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.issu_state.fib_issu_proto_state
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibIssuState_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibIssuState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibIssuProtoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto = out.File
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_issu_state_fib_issu_state_proto_depIdxs = nil
}
