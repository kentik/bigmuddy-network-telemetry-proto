// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/fib/nodes/node/protocols/protocol/misc/fib_sh_misc.proto

package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FIB miscellaneous info
type FibShMisc_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ProtocolName string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
}

func (x *FibShMisc_KEYS) Reset() {
	*x = FibShMisc_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShMisc_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShMisc_KEYS) ProtoMessage() {}

func (x *FibShMisc_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShMisc_KEYS.ProtoReflect.Descriptor instead.
func (*FibShMisc_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{0}
}

func (x *FibShMisc_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *FibShMisc_KEYS) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

type FibShMisc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per protocol debug stats
	MiProtoDbgStats []*FibShProtoDebugStats `protobuf:"bytes,50,rep,name=mi_proto_dbg_stats,json=miProtoDbgStats,proto3" json:"mi_proto_dbg_stats,omitempty"`
	// number of pfi ifh create notif
	MiPfiIfhUpd uint64 `protobuf:"varint,51,opt,name=mi_pfi_ifh_upd,json=miPfiIfhUpd,proto3" json:"mi_pfi_ifh_upd,omitempty"`
	// number of pfi ifh delete notif
	MiPfiIfhDel uint64 `protobuf:"varint,52,opt,name=mi_pfi_ifh_del,json=miPfiIfhDel,proto3" json:"mi_pfi_ifh_del,omitempty"`
	// number of stale ifh removed
	MiPfiIfhStale uint64 `protobuf:"varint,53,opt,name=mi_pfi_ifh_stale,json=miPfiIfhStale,proto3" json:"mi_pfi_ifh_stale,omitempty"`
	// total platform update time
	MiTotPlatUpdTime uint64 `protobuf:"varint,54,opt,name=mi_tot_plat_upd_time,json=miTotPlatUpdTime,proto3" json:"mi_tot_plat_upd_time,omitempty"`
	// total time spent in gtrie operations
	MiTotGtrieTime uint64 `protobuf:"varint,55,opt,name=mi_tot_gtrie_time,json=miTotGtrieTime,proto3" json:"mi_tot_gtrie_time,omitempty"`
	// total download time
	MiTotDnldTime uint64 `protobuf:"varint,56,opt,name=mi_tot_dnld_time,json=miTotDnldTime,proto3" json:"mi_tot_dnld_time,omitempty"`
	// clock download time
	MiClockTime uint64 `protobuf:"varint,57,opt,name=mi_clock_time,json=miClockTime,proto3" json:"mi_clock_time,omitempty"`
	// CPU download time
	MiCpuTime uint64 `protobuf:"varint,58,opt,name=mi_cpu_time,json=miCpuTime,proto3" json:"mi_cpu_time,omitempty"`
	// Last FIB shared memory reset time stamp
	MiShmResetTs uint64 `protobuf:"varint,59,opt,name=mi_shm_reset_ts,json=miShmResetTs,proto3" json:"mi_shm_reset_ts,omitempty"`
	// Number of idbs that hit ifh recycle
	MiIdbRecycleCount uint32 `protobuf:"varint,60,opt,name=mi_idb_recycle_count,json=miIdbRecycleCount,proto3" json:"mi_idb_recycle_count,omitempty"`
	// Number of idb cleaned up after hitting ifh recycle
	MiIdbRecycleCleanupCount uint32 `protobuf:"varint,61,opt,name=mi_idb_recycle_cleanup_count,json=miIdbRecycleCleanupCount,proto3" json:"mi_idb_recycle_cleanup_count,omitempty"`
	// Number of recycled idb extensions that failed cleanup
	MiIdbExtCleanupFailedCount []uint32 `protobuf:"varint,62,rep,packed,name=mi_idb_ext_cleanup_failed_count,json=miIdbExtCleanupFailedCount,proto3" json:"mi_idb_ext_cleanup_failed_count,omitempty"`
	// Number of management interfaces
	MiNumMgmtList uint32 `protobuf:"varint,63,opt,name=mi_num_mgmt_list,json=miNumMgmtList,proto3" json:"mi_num_mgmt_list,omitempty"`
	// the number of counters used for purge counter stats
	MiIdbPurgeCntrs []*FibShProtoPurgeStats `protobuf:"bytes,64,rep,name=mi_idb_purge_cntrs,json=miIdbPurgeCntrs,proto3" json:"mi_idb_purge_cntrs,omitempty"`
	// Timestamps of deleted routes
	MiDelTs []*FibShRouteDelTs `protobuf:"bytes,65,rep,name=mi_del_ts,json=miDelTs,proto3" json:"mi_del_ts,omitempty"`
	// Per protocol Failure stats for label RPF
	MiLrpfStatsFail []uint32 `protobuf:"varint,66,rep,packed,name=mi_lrpf_stats_fail,json=miLrpfStatsFail,proto3" json:"mi_lrpf_stats_fail,omitempty"`
	// Per protocol actions stats for label RPF
	MiLrpfStatsAct []uint32 `protobuf:"varint,67,rep,packed,name=mi_lrpf_stats_act,json=miLrpfStatsAct,proto3" json:"mi_lrpf_stats_act,omitempty"`
	// Per protocol number of label RPFs
	MiLrpfNum []uint32 `protobuf:"varint,68,rep,packed,name=mi_lrpf_num,json=miLrpfNum,proto3" json:"mi_lrpf_num,omitempty"`
	// Number of interfaces having label security enabled
	MiIdbLsecEnabledNum            []uint32 `protobuf:"varint,69,rep,packed,name=mi_idb_lsec_enabled_num,json=miIdbLsecEnabledNum,proto3" json:"mi_idb_lsec_enabled_num,omitempty"`
	MiNumVirtualLlAddressesAdded   uint32   `protobuf:"varint,70,opt,name=mi_num_virtual_ll_addresses_added,json=miNumVirtualLlAddressesAdded,proto3" json:"mi_num_virtual_ll_addresses_added,omitempty"`
	MiNumVirtualLlAddressesDeleted uint32   `protobuf:"varint,71,opt,name=mi_num_virtual_ll_addresses_deleted,json=miNumVirtualLlAddressesDeleted,proto3" json:"mi_num_virtual_ll_addresses_deleted,omitempty"`
	MiNumVirtualLlAddressesDropped uint32   `protobuf:"varint,72,opt,name=mi_num_virtual_ll_addresses_dropped,json=miNumVirtualLlAddressesDropped,proto3" json:"mi_num_virtual_ll_addresses_dropped,omitempty"`
	MiNumVirtualLlAddressesCached  uint32   `protobuf:"varint,73,opt,name=mi_num_virtual_ll_addresses_cached,json=miNumVirtualLlAddressesCached,proto3" json:"mi_num_virtual_ll_addresses_cached,omitempty"`
	// FIB ISSU state
	MiIssuState *FibIssuState `protobuf:"bytes,74,opt,name=mi_issu_state,json=miIssuState,proto3" json:"mi_issu_state,omitempty"`
	// FRR statistics
	MiFrrStats []*FibShProtoFrrStats `protobuf:"bytes,75,rep,name=mi_frr_stats,json=miFrrStats,proto3" json:"mi_frr_stats,omitempty"`
	// FIB platform capabilities
	MiPlatCapabilities *FibShPlatCapabilities `protobuf:"bytes,76,opt,name=mi_plat_capabilities,json=miPlatCapabilities,proto3" json:"mi_plat_capabilities,omitempty"`
	// number of LISP EID prefixes
	MiNumLispEids []uint32 `protobuf:"varint,77,rep,packed,name=mi_num_lisp_eids,json=miNumLispEids,proto3" json:"mi_num_lisp_eids,omitempty"`
	// number of LISP EID prefixes eligible for forwarding
	MiNumLispValidEids []uint32 `protobuf:"varint,78,rep,packed,name=mi_num_lisp_valid_eids,json=miNumLispValidEids,proto3" json:"mi_num_lisp_valid_eids,omitempty"`
	// cpuless node list init
	MiCpulessInit bool `protobuf:"varint,79,opt,name=mi_cpuless_init,json=miCpulessInit,proto3" json:"mi_cpuless_init,omitempty"`
	// count of cpuless line cards
	MiCpulessCount uint32 `protobuf:"varint,80,opt,name=mi_cpuless_count,json=miCpulessCount,proto3" json:"mi_cpuless_count,omitempty"`
	// list of cpuless line cards
	MiCpulessNodes []uint32 `protobuf:"varint,81,rep,packed,name=mi_cpuless_nodes,json=miCpulessNodes,proto3" json:"mi_cpuless_nodes,omitempty"`
	// Prefer AIB routes over RIB/LSD operational state
	MiPreferAibRoutesOverRibOper bool `protobuf:"varint,82,opt,name=mi_prefer_aib_routes_over_rib_oper,json=miPreferAibRoutesOverRibOper,proto3" json:"mi_prefer_aib_routes_over_rib_oper,omitempty"`
	// Prefer AIB routes over RIB/LSD configured state
	MiPreferAibRoutesOverRibCfg bool `protobuf:"varint,83,opt,name=mi_prefer_aib_routes_over_rib_cfg,json=miPreferAibRoutesOverRibCfg,proto3" json:"mi_prefer_aib_routes_over_rib_cfg,omitempty"`
}

func (x *FibShMisc) Reset() {
	*x = FibShMisc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShMisc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShMisc) ProtoMessage() {}

func (x *FibShMisc) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShMisc.ProtoReflect.Descriptor instead.
func (*FibShMisc) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{1}
}

func (x *FibShMisc) GetMiProtoDbgStats() []*FibShProtoDebugStats {
	if x != nil {
		return x.MiProtoDbgStats
	}
	return nil
}

func (x *FibShMisc) GetMiPfiIfhUpd() uint64 {
	if x != nil {
		return x.MiPfiIfhUpd
	}
	return 0
}

func (x *FibShMisc) GetMiPfiIfhDel() uint64 {
	if x != nil {
		return x.MiPfiIfhDel
	}
	return 0
}

func (x *FibShMisc) GetMiPfiIfhStale() uint64 {
	if x != nil {
		return x.MiPfiIfhStale
	}
	return 0
}

func (x *FibShMisc) GetMiTotPlatUpdTime() uint64 {
	if x != nil {
		return x.MiTotPlatUpdTime
	}
	return 0
}

func (x *FibShMisc) GetMiTotGtrieTime() uint64 {
	if x != nil {
		return x.MiTotGtrieTime
	}
	return 0
}

func (x *FibShMisc) GetMiTotDnldTime() uint64 {
	if x != nil {
		return x.MiTotDnldTime
	}
	return 0
}

func (x *FibShMisc) GetMiClockTime() uint64 {
	if x != nil {
		return x.MiClockTime
	}
	return 0
}

func (x *FibShMisc) GetMiCpuTime() uint64 {
	if x != nil {
		return x.MiCpuTime
	}
	return 0
}

func (x *FibShMisc) GetMiShmResetTs() uint64 {
	if x != nil {
		return x.MiShmResetTs
	}
	return 0
}

func (x *FibShMisc) GetMiIdbRecycleCount() uint32 {
	if x != nil {
		return x.MiIdbRecycleCount
	}
	return 0
}

func (x *FibShMisc) GetMiIdbRecycleCleanupCount() uint32 {
	if x != nil {
		return x.MiIdbRecycleCleanupCount
	}
	return 0
}

func (x *FibShMisc) GetMiIdbExtCleanupFailedCount() []uint32 {
	if x != nil {
		return x.MiIdbExtCleanupFailedCount
	}
	return nil
}

func (x *FibShMisc) GetMiNumMgmtList() uint32 {
	if x != nil {
		return x.MiNumMgmtList
	}
	return 0
}

func (x *FibShMisc) GetMiIdbPurgeCntrs() []*FibShProtoPurgeStats {
	if x != nil {
		return x.MiIdbPurgeCntrs
	}
	return nil
}

func (x *FibShMisc) GetMiDelTs() []*FibShRouteDelTs {
	if x != nil {
		return x.MiDelTs
	}
	return nil
}

func (x *FibShMisc) GetMiLrpfStatsFail() []uint32 {
	if x != nil {
		return x.MiLrpfStatsFail
	}
	return nil
}

func (x *FibShMisc) GetMiLrpfStatsAct() []uint32 {
	if x != nil {
		return x.MiLrpfStatsAct
	}
	return nil
}

func (x *FibShMisc) GetMiLrpfNum() []uint32 {
	if x != nil {
		return x.MiLrpfNum
	}
	return nil
}

func (x *FibShMisc) GetMiIdbLsecEnabledNum() []uint32 {
	if x != nil {
		return x.MiIdbLsecEnabledNum
	}
	return nil
}

func (x *FibShMisc) GetMiNumVirtualLlAddressesAdded() uint32 {
	if x != nil {
		return x.MiNumVirtualLlAddressesAdded
	}
	return 0
}

func (x *FibShMisc) GetMiNumVirtualLlAddressesDeleted() uint32 {
	if x != nil {
		return x.MiNumVirtualLlAddressesDeleted
	}
	return 0
}

func (x *FibShMisc) GetMiNumVirtualLlAddressesDropped() uint32 {
	if x != nil {
		return x.MiNumVirtualLlAddressesDropped
	}
	return 0
}

func (x *FibShMisc) GetMiNumVirtualLlAddressesCached() uint32 {
	if x != nil {
		return x.MiNumVirtualLlAddressesCached
	}
	return 0
}

func (x *FibShMisc) GetMiIssuState() *FibIssuState {
	if x != nil {
		return x.MiIssuState
	}
	return nil
}

func (x *FibShMisc) GetMiFrrStats() []*FibShProtoFrrStats {
	if x != nil {
		return x.MiFrrStats
	}
	return nil
}

func (x *FibShMisc) GetMiPlatCapabilities() *FibShPlatCapabilities {
	if x != nil {
		return x.MiPlatCapabilities
	}
	return nil
}

func (x *FibShMisc) GetMiNumLispEids() []uint32 {
	if x != nil {
		return x.MiNumLispEids
	}
	return nil
}

func (x *FibShMisc) GetMiNumLispValidEids() []uint32 {
	if x != nil {
		return x.MiNumLispValidEids
	}
	return nil
}

func (x *FibShMisc) GetMiCpulessInit() bool {
	if x != nil {
		return x.MiCpulessInit
	}
	return false
}

func (x *FibShMisc) GetMiCpulessCount() uint32 {
	if x != nil {
		return x.MiCpulessCount
	}
	return 0
}

func (x *FibShMisc) GetMiCpulessNodes() []uint32 {
	if x != nil {
		return x.MiCpulessNodes
	}
	return nil
}

func (x *FibShMisc) GetMiPreferAibRoutesOverRibOper() bool {
	if x != nil {
		return x.MiPreferAibRoutesOverRibOper
	}
	return false
}

func (x *FibShMisc) GetMiPreferAibRoutesOverRibCfg() bool {
	if x != nil {
		return x.MiPreferAibRoutesOverRibCfg
	}
	return false
}

// FIB Max time statistics for each action types of an object
type FibShObjActionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of updates
	FoasTotUpdates uint64 `protobuf:"varint,1,opt,name=foas_tot_updates,json=foasTotUpdates,proto3" json:"foas_tot_updates,omitempty"`
	// Total time for updates
	FoasTotUpdTime uint64 `protobuf:"varint,2,opt,name=foas_tot_upd_time,json=foasTotUpdTime,proto3" json:"foas_tot_upd_time,omitempty"`
	// Total number of updates that took zero time
	FoasTotUpdatesZero uint64 `protobuf:"varint,3,opt,name=foas_tot_updates_zero,json=foasTotUpdatesZero,proto3" json:"foas_tot_updates_zero,omitempty"`
	// Total number of successful updates
	FoasNumSuccess uint64 `protobuf:"varint,4,opt,name=foas_num_success,json=foasNumSuccess,proto3" json:"foas_num_success,omitempty"`
	// Total number of failed updates
	FoasNumFailure uint64 `protobuf:"varint,5,opt,name=foas_num_failure,json=foasNumFailure,proto3" json:"foas_num_failure,omitempty"`
	// Time for the update
	FoasMaxTime uint64 `protobuf:"varint,6,opt,name=foas_max_time,json=foasMaxTime,proto3" json:"foas_max_time,omitempty"`
	// Time stamp of max update
	FoasMaxTstamp uint64 `protobuf:"varint,7,opt,name=foas_max_tstamp,json=foasMaxTstamp,proto3" json:"foas_max_tstamp,omitempty"`
}

func (x *FibShObjActionStats) Reset() {
	*x = FibShObjActionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShObjActionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShObjActionStats) ProtoMessage() {}

func (x *FibShObjActionStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShObjActionStats.ProtoReflect.Descriptor instead.
func (*FibShObjActionStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{2}
}

func (x *FibShObjActionStats) GetFoasTotUpdates() uint64 {
	if x != nil {
		return x.FoasTotUpdates
	}
	return 0
}

func (x *FibShObjActionStats) GetFoasTotUpdTime() uint64 {
	if x != nil {
		return x.FoasTotUpdTime
	}
	return 0
}

func (x *FibShObjActionStats) GetFoasTotUpdatesZero() uint64 {
	if x != nil {
		return x.FoasTotUpdatesZero
	}
	return 0
}

func (x *FibShObjActionStats) GetFoasNumSuccess() uint64 {
	if x != nil {
		return x.FoasNumSuccess
	}
	return 0
}

func (x *FibShObjActionStats) GetFoasNumFailure() uint64 {
	if x != nil {
		return x.FoasNumFailure
	}
	return 0
}

func (x *FibShObjActionStats) GetFoasMaxTime() uint64 {
	if x != nil {
		return x.FoasMaxTime
	}
	return 0
}

func (x *FibShObjActionStats) GetFoasMaxTstamp() uint64 {
	if x != nil {
		return x.FoasMaxTstamp
	}
	return 0
}

// FIB Max time statistics for each FIB object
type FibShObjStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of updates
	FosTotUpdates uint64 `protobuf:"varint,1,opt,name=fos_tot_updates,json=fosTotUpdates,proto3" json:"fos_tot_updates,omitempty"`
	// Total time for updates
	FosTotUpdTime uint64 `protobuf:"varint,2,opt,name=fos_tot_upd_time,json=fosTotUpdTime,proto3" json:"fos_tot_upd_time,omitempty"`
	// Array of max time info indexed by action type
	FosObjActStats []*FibShObjActionStats `protobuf:"bytes,3,rep,name=fos_obj_act_stats,json=fosObjActStats,proto3" json:"fos_obj_act_stats,omitempty"`
}

func (x *FibShObjStats) Reset() {
	*x = FibShObjStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShObjStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShObjStats) ProtoMessage() {}

func (x *FibShObjStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShObjStats.ProtoReflect.Descriptor instead.
func (*FibShObjStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{3}
}

func (x *FibShObjStats) GetFosTotUpdates() uint64 {
	if x != nil {
		return x.FosTotUpdates
	}
	return 0
}

func (x *FibShObjStats) GetFosTotUpdTime() uint64 {
	if x != nil {
		return x.FosTotUpdTime
	}
	return 0
}

func (x *FibShObjStats) GetFosObjActStats() []*FibShObjActionStats {
	if x != nil {
		return x.FosObjActStats
	}
	return nil
}

// FIB platform update statistics
type FibShPlatfUpdStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of successful updates
	FpusNumSuccess uint64 `protobuf:"varint,1,opt,name=fpus_num_success,json=fpusNumSuccess,proto3" json:"fpus_num_success,omitempty"`
	// Number of unsuccessful updates
	FpusNumFailure uint64 `protobuf:"varint,2,opt,name=fpus_num_failure,json=fpusNumFailure,proto3" json:"fpus_num_failure,omitempty"`
	// Array of max time info indexed by object type
	FpusObjStats []*FibShObjStats `protobuf:"bytes,3,rep,name=fpus_obj_stats,json=fpusObjStats,proto3" json:"fpus_obj_stats,omitempty"`
	// Total time for all pd updates
	FpusUpdTotalTime uint64 `protobuf:"varint,4,opt,name=fpus_upd_total_time,json=fpusUpdTotalTime,proto3" json:"fpus_upd_total_time,omitempty"`
}

func (x *FibShPlatfUpdStats) Reset() {
	*x = FibShPlatfUpdStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShPlatfUpdStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShPlatfUpdStats) ProtoMessage() {}

func (x *FibShPlatfUpdStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShPlatfUpdStats.ProtoReflect.Descriptor instead.
func (*FibShPlatfUpdStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{4}
}

func (x *FibShPlatfUpdStats) GetFpusNumSuccess() uint64 {
	if x != nil {
		return x.FpusNumSuccess
	}
	return 0
}

func (x *FibShPlatfUpdStats) GetFpusNumFailure() uint64 {
	if x != nil {
		return x.FpusNumFailure
	}
	return 0
}

func (x *FibShPlatfUpdStats) GetFpusObjStats() []*FibShObjStats {
	if x != nil {
		return x.FpusObjStats
	}
	return nil
}

func (x *FibShPlatfUpdStats) GetFpusUpdTotalTime() uint64 {
	if x != nil {
		return x.FpusUpdTotalTime
	}
	return 0
}

// FIB timing statistics for individual gtrie functions
type FibShGtrieFnTiming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gtrie operation
	FgftFn []byte `protobuf:"bytes,1,opt,name=fgft_fn,json=fgftFn,proto3" json:"fgft_fn,omitempty"`
	// Total number of updates
	FgftTotUpdates uint64 `protobuf:"varint,2,opt,name=fgft_tot_updates,json=fgftTotUpdates,proto3" json:"fgft_tot_updates,omitempty"`
	// Total number of updates with zero timing (due to timestamp granularity)
	FgftTotUpdatesZero uint64 `protobuf:"varint,3,opt,name=fgft_tot_updates_zero,json=fgftTotUpdatesZero,proto3" json:"fgft_tot_updates_zero,omitempty"`
	// Total time for updates
	FgftTotUpdTime uint64 `protobuf:"varint,4,opt,name=fgft_tot_upd_time,json=fgftTotUpdTime,proto3" json:"fgft_tot_upd_time,omitempty"`
	// Time for the update
	FgftMaxTime uint64 `protobuf:"varint,5,opt,name=fgft_max_time,json=fgftMaxTime,proto3" json:"fgft_max_time,omitempty"`
	// Time stamp of max update
	FgftMaxTstamp uint64 `protobuf:"varint,6,opt,name=fgft_max_tstamp,json=fgftMaxTstamp,proto3" json:"fgft_max_tstamp,omitempty"`
}

func (x *FibShGtrieFnTiming) Reset() {
	*x = FibShGtrieFnTiming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShGtrieFnTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShGtrieFnTiming) ProtoMessage() {}

func (x *FibShGtrieFnTiming) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShGtrieFnTiming.ProtoReflect.Descriptor instead.
func (*FibShGtrieFnTiming) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{5}
}

func (x *FibShGtrieFnTiming) GetFgftFn() []byte {
	if x != nil {
		return x.FgftFn
	}
	return nil
}

func (x *FibShGtrieFnTiming) GetFgftTotUpdates() uint64 {
	if x != nil {
		return x.FgftTotUpdates
	}
	return 0
}

func (x *FibShGtrieFnTiming) GetFgftTotUpdatesZero() uint64 {
	if x != nil {
		return x.FgftTotUpdatesZero
	}
	return 0
}

func (x *FibShGtrieFnTiming) GetFgftTotUpdTime() uint64 {
	if x != nil {
		return x.FgftTotUpdTime
	}
	return 0
}

func (x *FibShGtrieFnTiming) GetFgftMaxTime() uint64 {
	if x != nil {
		return x.FgftMaxTime
	}
	return 0
}

func (x *FibShGtrieFnTiming) GetFgftMaxTstamp() uint64 {
	if x != nil {
		return x.FgftMaxTstamp
	}
	return 0
}

// FIB platform update statistics
type FibShGtrieTiming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of successful updates
	FgtNumSuccess uint64 `protobuf:"varint,1,opt,name=fgt_num_success,json=fgtNumSuccess,proto3" json:"fgt_num_success,omitempty"`
	// Number of unsuccessful updates
	FgtNumFailure uint64 `protobuf:"varint,2,opt,name=fgt_num_failure,json=fgtNumFailure,proto3" json:"fgt_num_failure,omitempty"`
	// Array of max time info indexed by gtrie function
	FgtGtrieFnTiming []*FibShGtrieFnTiming `protobuf:"bytes,3,rep,name=fgt_gtrie_fn_timing,json=fgtGtrieFnTiming,proto3" json:"fgt_gtrie_fn_timing,omitempty"`
	// Total time for all pd updates
	FgtUpdTotalTime uint64 `protobuf:"varint,4,opt,name=fgt_upd_total_time,json=fgtUpdTotalTime,proto3" json:"fgt_upd_total_time,omitempty"`
}

func (x *FibShGtrieTiming) Reset() {
	*x = FibShGtrieTiming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShGtrieTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShGtrieTiming) ProtoMessage() {}

func (x *FibShGtrieTiming) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShGtrieTiming.ProtoReflect.Descriptor instead.
func (*FibShGtrieTiming) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{6}
}

func (x *FibShGtrieTiming) GetFgtNumSuccess() uint64 {
	if x != nil {
		return x.FgtNumSuccess
	}
	return 0
}

func (x *FibShGtrieTiming) GetFgtNumFailure() uint64 {
	if x != nil {
		return x.FgtNumFailure
	}
	return 0
}

func (x *FibShGtrieTiming) GetFgtGtrieFnTiming() []*FibShGtrieFnTiming {
	if x != nil {
		return x.FgtGtrieFnTiming
	}
	return nil
}

func (x *FibShGtrieTiming) GetFgtUpdTotalTime() uint64 {
	if x != nil {
		return x.FgtUpdTotalTime
	}
	return 0
}

// FIB per protocol debug information
type FibShProtoDebugStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the number of fib entries in global tbl
	FpdGbltblEntries uint64 `protobuf:"varint,1,opt,name=fpd_gbltbl_entries,json=fpdGbltblEntries,proto3" json:"fpd_gbltbl_entries,omitempty"`
	// the number of fib entries in global retry tbl
	FpdGbltblRejEntries uint64 `protobuf:"varint,2,opt,name=fpd_gbltbl_rej_entries,json=fpdGbltblRejEntries,proto3" json:"fpd_gbltbl_rej_entries,omitempty"`
	// the number of fib entries in vrf tbls
	FpdVrftblEntries uint64 `protobuf:"varint,3,opt,name=fpd_vrftbl_entries,json=fpdVrftblEntries,proto3" json:"fpd_vrftbl_entries,omitempty"`
	// the number of fib entries in vrf retry tbls
	FpdVrftblRejEntries uint64 `protobuf:"varint,4,opt,name=fpd_vrftbl_rej_entries,json=fpdVrftblRejEntries,proto3" json:"fpd_vrftbl_rej_entries,omitempty"`
	// the number of tables in table set
	FpdNumTbls uint32 `protobuf:"varint,5,opt,name=fpd_num_tbls,json=fpdNumTbls,proto3" json:"fpd_num_tbls,omitempty"`
	// Number of global routes from each route source
	FpdGbltblSrcEntries []uint64 `protobuf:"varint,6,rep,packed,name=fpd_gbltbl_src_entries,json=fpdGbltblSrcEntries,proto3" json:"fpd_gbltbl_src_entries,omitempty"`
	// Number of vrf routes from each route source
	FpdVrftblSrcEntries []uint64 `protobuf:"varint,7,rep,packed,name=fpd_vrftbl_src_entries,json=fpdVrftblSrcEntries,proto3" json:"fpd_vrftbl_src_entries,omitempty"`
	// the number of bcdl msgs
	FpdBcdlMsgs uint64 `protobuf:"varint,8,opt,name=fpd_bcdl_msgs,json=fpdBcdlMsgs,proto3" json:"fpd_bcdl_msgs,omitempty"`
	// the number of route updates
	FpdRouteUpd uint64 `protobuf:"varint,9,opt,name=fpd_route_upd,json=fpdRouteUpd,proto3" json:"fpd_route_upd,omitempty"`
	// the number of route deletes
	FpdRouteDel uint64 `protobuf:"varint,10,opt,name=fpd_route_del,json=fpdRouteDel,proto3" json:"fpd_route_del,omitempty"`
	// the number of routes received
	FpdRouteRcv uint64 `protobuf:"varint,11,opt,name=fpd_route_rcv,json=fpdRouteRcv,proto3" json:"fpd_route_rcv,omitempty"`
	// the number of routes dropped
	FpdRouteDrops uint64 `protobuf:"varint,12,opt,name=fpd_route_drops,json=fpdRouteDrops,proto3" json:"fpd_route_drops,omitempty"`
	// the number of routes handled with recycled label
	FpdLblRecycled uint64 `protobuf:"varint,13,opt,name=fpd_lbl_recycled,json=fpdLblRecycled,proto3" json:"fpd_lbl_recycled,omitempty"`
	// the number of routes dropped because of version mismatch
	FpdVersionMismatchDrops uint64 `protobuf:"varint,14,opt,name=fpd_version_mismatch_drops,json=fpdVersionMismatchDrops,proto3" json:"fpd_version_mismatch_drops,omitempty"`
	// the number of adjacency updates
	FpdAdjUpd uint64 `protobuf:"varint,15,opt,name=fpd_adj_upd,json=fpdAdjUpd,proto3" json:"fpd_adj_upd,omitempty"`
	// the number of adjacency deletes
	FpdAdjDel uint64 `protobuf:"varint,16,opt,name=fpd_adj_del,json=fpdAdjDel,proto3" json:"fpd_adj_del,omitempty"`
	// number of TX adjacency updates from AIB
	FpdAdjUpdTx uint64 `protobuf:"varint,17,opt,name=fpd_adj_upd_tx,json=fpdAdjUpdTx,proto3" json:"fpd_adj_upd_tx,omitempty"`
	// number of TX adjacency updates that found or created NH
	FpdAdjUpdTxNhFound uint64 `protobuf:"varint,18,opt,name=fpd_adj_upd_tx_nh_found,json=fpdAdjUpdTxNhFound,proto3" json:"fpd_adj_upd_tx_nh_found,omitempty"`
	// number of TX adjacency updates that went to retry
	FpdAdjUpdTxRetryCreated uint64 `protobuf:"varint,19,opt,name=fpd_adj_upd_tx_retry_created,json=fpdAdjUpdTxRetryCreated,proto3" json:"fpd_adj_upd_tx_retry_created,omitempty"`
	// number of TX adj retries that found or created NH
	FpdAdjTxRetryNhFound uint64 `protobuf:"varint,20,opt,name=fpd_adj_tx_retry_nh_found,json=fpdAdjTxRetryNhFound,proto3" json:"fpd_adj_tx_retry_nh_found,omitempty"`
	// number of times TX NH retry objects updated
	FpdAdjTxRetryObjReinit uint64 `protobuf:"varint,21,opt,name=fpd_adj_tx_retry_obj_reinit,json=fpdAdjTxRetryObjReinit,proto3" json:"fpd_adj_tx_retry_obj_reinit,omitempty"`
	//  number of adj updates dropped because of OOR
	FpdAdjDrops uint64 `protobuf:"varint,22,opt,name=fpd_adj_drops,json=fpdAdjDrops,proto3" json:"fpd_adj_drops,omitempty"`
	// number of AIB messages
	FpdAdjMsg uint64 `protobuf:"varint,23,opt,name=fpd_adj_msg,json=fpdAdjMsg,proto3" json:"fpd_adj_msg,omitempty"`
	// the number of TE upds received
	FpdTeRcv uint64 `protobuf:"varint,24,opt,name=fpd_te_rcv,json=fpdTeRcv,proto3" json:"fpd_te_rcv,omitempty"`
	// the number of TE upds dropped because of version mismatch
	FpdTeVersionMismatchDrops uint64 `protobuf:"varint,25,opt,name=fpd_te_version_mismatch_drops,json=fpdTeVersionMismatchDrops,proto3" json:"fpd_te_version_mismatch_drops,omitempty"`
	// platform update statistics
	FpdPlatfUpdStats *FibShPlatfUpdStats `protobuf:"bytes,26,opt,name=fpd_platf_upd_stats,json=fpdPlatfUpdStats,proto3" json:"fpd_platf_upd_stats,omitempty"`
	// Gtrie timing statistics
	FpdGtrieTiming *FibShGtrieTiming `protobuf:"bytes,27,opt,name=fpd_gtrie_timing,json=fpdGtrieTiming,proto3" json:"fpd_gtrie_timing,omitempty"`
	// the number of retry timeouts
	FpdNumRetryTouts uint64 `protobuf:"varint,28,opt,name=fpd_num_retry_touts,json=fpdNumRetryTouts,proto3" json:"fpd_num_retry_touts,omitempty"`
	// the number of fixup LDIs
	FpdLdiNumFixedup uint64 `protobuf:"varint,29,opt,name=fpd_ldi_num_fixedup,json=fpdLdiNumFixedup,proto3" json:"fpd_ldi_num_fixedup,omitempty"`
	// the number of corrected fixup LDIs
	FpdLdiNumCorrectFixup uint64 `protobuf:"varint,30,opt,name=fpd_ldi_num_correct_fixup,json=fpdLdiNumCorrectFixup,proto3" json:"fpd_ldi_num_correct_fixup,omitempty"`
	// the number of PL queued for fixup
	FpdPlNumQueuedFixedup uint64 `protobuf:"varint,31,opt,name=fpd_pl_num_queued_fixedup,json=fpdPlNumQueuedFixedup,proto3" json:"fpd_pl_num_queued_fixedup,omitempty"`
	// the number of corrected fixup PLs
	FpdPlNumCorrectFixup uint64 `protobuf:"varint,32,opt,name=fpd_pl_num_correct_fixup,json=fpdPlNumCorrectFixup,proto3" json:"fpd_pl_num_correct_fixup,omitempty"`
	// the number PLs added to retry while already in retry
	FpdPlRetryAddExist uint64 `protobuf:"varint,33,opt,name=fpd_pl_retry_add_exist,json=fpdPlRetryAddExist,proto3" json:"fpd_pl_retry_add_exist,omitempty"`
	// the number of PLs linked to resolving tables for inline res
	FpdPlInlineResQ uint64 `protobuf:"varint,34,opt,name=fpd_pl_inline_res_q,json=fpdPlInlineResQ,proto3" json:"fpd_pl_inline_res_q,omitempty"`
	// number of pl creates with backu path
	FpdPlWithBackupCreateCount uint64 `protobuf:"varint,35,opt,name=fpd_pl_with_backup_create_count,json=fpdPlWithBackupCreateCount,proto3" json:"fpd_pl_with_backup_create_count,omitempty"`
	// number of pl deletes with backup path
	FpdPlWithBackupDelCount uint64 `protobuf:"varint,36,opt,name=fpd_pl_with_backup_del_count,json=fpdPlWithBackupDelCount,proto3" json:"fpd_pl_with_backup_del_count,omitempty"`
	// number of PLs marked to include backup path
	FpdPlBackupEnableCount uint64 `protobuf:"varint,37,opt,name=fpd_pl_backup_enable_count,json=fpdPlBackupEnableCount,proto3" json:"fpd_pl_backup_enable_count,omitempty"`
	//  number of PLs unmarked to include backup path
	FpdPlBackupDisableCount uint64 `protobuf:"varint,38,opt,name=fpd_pl_backup_disable_count,json=fpdPlBackupDisableCount,proto3" json:"fpd_pl_backup_disable_count,omitempty"`
	// number of PLs visited on fast notification
	FpdPlFastNfnCount uint64 `protobuf:"varint,39,opt,name=fpd_pl_fast_nfn_count,json=fpdPlFastNfnCount,proto3" json:"fpd_pl_fast_nfn_count,omitempty"`
	// number of ldi backup path activications
	FpdLdiBackupActivateCount uint64 `protobuf:"varint,40,opt,name=fpd_ldi_backup_activate_count,json=fpdLdiBackupActivateCount,proto3" json:"fpd_ldi_backup_activate_count,omitempty"`
	// ldi mod time for last backup activation
	FpdLdiLastBackupActivateTime uint64 `protobuf:"varint,41,opt,name=fpd_ldi_last_backup_activate_time,json=fpdLdiLastBackupActivateTime,proto3" json:"fpd_ldi_last_backup_activate_time,omitempty"`
	// max ldi mod time for backup activation
	FpdLdiMaxBackupActivateTime uint64 `protobuf:"varint,42,opt,name=fpd_ldi_max_backup_activate_time,json=fpdLdiMaxBackupActivateTime,proto3" json:"fpd_ldi_max_backup_activate_time,omitempty"`
	// min ldi mod time for backup activation
	FpdLdiMinBackupActivateTime uint64 `protobuf:"varint,43,opt,name=fpd_ldi_min_backup_activate_time,json=fpdLdiMinBackupActivateTime,proto3" json:"fpd_ldi_min_backup_activate_time,omitempty"`
	// total ldi mod time for backup activation
	FpdLdiTotalBackupActivateTime uint64 `protobuf:"varint,44,opt,name=fpd_ldi_total_backup_activate_time,json=fpdLdiTotalBackupActivateTime,proto3" json:"fpd_ldi_total_backup_activate_time,omitempty"`
	// avg ldi mod time for backup activation
	FpdLdiAvgBackupActivateTime uint64 `protobuf:"varint,45,opt,name=fpd_ldi_avg_backup_activate_time,json=fpdLdiAvgBackupActivateTime,proto3" json:"fpd_ldi_avg_backup_activate_time,omitempty"`
	// number of resolution failures because of recursion constraint
	FpdRecursionConstraintCount uint64 `protobuf:"varint,46,opt,name=fpd_recursion_constraint_count,json=fpdRecursionConstraintCount,proto3" json:"fpd_recursion_constraint_count,omitempty"`
	// the number of deleted with non-zero refcount
	FpdLdiNumDelRefcnt uint64 `protobuf:"varint,47,opt,name=fpd_ldi_num_del_refcnt,json=fpdLdiNumDelRefcnt,proto3" json:"fpd_ldi_num_del_refcnt,omitempty"`
	// the number of retries of each type
	FpdNumRetries []uint64 `protobuf:"varint,48,rep,packed,name=fpd_num_retries,json=fpdNumRetries,proto3" json:"fpd_num_retries,omitempty"`
	// the number of elements in retryq
	FpdRetryqSize uint32 `protobuf:"varint,49,opt,name=fpd_retryq_size,json=fpdRetryqSize,proto3" json:"fpd_retryq_size,omitempty"`
	// the number of allocs for this proto
	FpdNumAllocs uint64 `protobuf:"varint,50,opt,name=fpd_num_allocs,json=fpdNumAllocs,proto3" json:"fpd_num_allocs,omitempty"`
	// the number of frees for this proto
	FpdNumFrees uint64 `protobuf:"varint,51,opt,name=fpd_num_frees,json=fpdNumFrees,proto3" json:"fpd_num_frees,omitempty"`
}

func (x *FibShProtoDebugStats) Reset() {
	*x = FibShProtoDebugStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShProtoDebugStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShProtoDebugStats) ProtoMessage() {}

func (x *FibShProtoDebugStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShProtoDebugStats.ProtoReflect.Descriptor instead.
func (*FibShProtoDebugStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{7}
}

func (x *FibShProtoDebugStats) GetFpdGbltblEntries() uint64 {
	if x != nil {
		return x.FpdGbltblEntries
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdGbltblRejEntries() uint64 {
	if x != nil {
		return x.FpdGbltblRejEntries
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdVrftblEntries() uint64 {
	if x != nil {
		return x.FpdVrftblEntries
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdVrftblRejEntries() uint64 {
	if x != nil {
		return x.FpdVrftblRejEntries
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdNumTbls() uint32 {
	if x != nil {
		return x.FpdNumTbls
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdGbltblSrcEntries() []uint64 {
	if x != nil {
		return x.FpdGbltblSrcEntries
	}
	return nil
}

func (x *FibShProtoDebugStats) GetFpdVrftblSrcEntries() []uint64 {
	if x != nil {
		return x.FpdVrftblSrcEntries
	}
	return nil
}

func (x *FibShProtoDebugStats) GetFpdBcdlMsgs() uint64 {
	if x != nil {
		return x.FpdBcdlMsgs
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdRouteUpd() uint64 {
	if x != nil {
		return x.FpdRouteUpd
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdRouteDel() uint64 {
	if x != nil {
		return x.FpdRouteDel
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdRouteRcv() uint64 {
	if x != nil {
		return x.FpdRouteRcv
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdRouteDrops() uint64 {
	if x != nil {
		return x.FpdRouteDrops
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLblRecycled() uint64 {
	if x != nil {
		return x.FpdLblRecycled
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdVersionMismatchDrops() uint64 {
	if x != nil {
		return x.FpdVersionMismatchDrops
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjUpd() uint64 {
	if x != nil {
		return x.FpdAdjUpd
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjDel() uint64 {
	if x != nil {
		return x.FpdAdjDel
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjUpdTx() uint64 {
	if x != nil {
		return x.FpdAdjUpdTx
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjUpdTxNhFound() uint64 {
	if x != nil {
		return x.FpdAdjUpdTxNhFound
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjUpdTxRetryCreated() uint64 {
	if x != nil {
		return x.FpdAdjUpdTxRetryCreated
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjTxRetryNhFound() uint64 {
	if x != nil {
		return x.FpdAdjTxRetryNhFound
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjTxRetryObjReinit() uint64 {
	if x != nil {
		return x.FpdAdjTxRetryObjReinit
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjDrops() uint64 {
	if x != nil {
		return x.FpdAdjDrops
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdAdjMsg() uint64 {
	if x != nil {
		return x.FpdAdjMsg
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdTeRcv() uint64 {
	if x != nil {
		return x.FpdTeRcv
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdTeVersionMismatchDrops() uint64 {
	if x != nil {
		return x.FpdTeVersionMismatchDrops
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlatfUpdStats() *FibShPlatfUpdStats {
	if x != nil {
		return x.FpdPlatfUpdStats
	}
	return nil
}

func (x *FibShProtoDebugStats) GetFpdGtrieTiming() *FibShGtrieTiming {
	if x != nil {
		return x.FpdGtrieTiming
	}
	return nil
}

func (x *FibShProtoDebugStats) GetFpdNumRetryTouts() uint64 {
	if x != nil {
		return x.FpdNumRetryTouts
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiNumFixedup() uint64 {
	if x != nil {
		return x.FpdLdiNumFixedup
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiNumCorrectFixup() uint64 {
	if x != nil {
		return x.FpdLdiNumCorrectFixup
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlNumQueuedFixedup() uint64 {
	if x != nil {
		return x.FpdPlNumQueuedFixedup
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlNumCorrectFixup() uint64 {
	if x != nil {
		return x.FpdPlNumCorrectFixup
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlRetryAddExist() uint64 {
	if x != nil {
		return x.FpdPlRetryAddExist
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlInlineResQ() uint64 {
	if x != nil {
		return x.FpdPlInlineResQ
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlWithBackupCreateCount() uint64 {
	if x != nil {
		return x.FpdPlWithBackupCreateCount
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlWithBackupDelCount() uint64 {
	if x != nil {
		return x.FpdPlWithBackupDelCount
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlBackupEnableCount() uint64 {
	if x != nil {
		return x.FpdPlBackupEnableCount
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlBackupDisableCount() uint64 {
	if x != nil {
		return x.FpdPlBackupDisableCount
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdPlFastNfnCount() uint64 {
	if x != nil {
		return x.FpdPlFastNfnCount
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiBackupActivateCount() uint64 {
	if x != nil {
		return x.FpdLdiBackupActivateCount
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiLastBackupActivateTime() uint64 {
	if x != nil {
		return x.FpdLdiLastBackupActivateTime
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiMaxBackupActivateTime() uint64 {
	if x != nil {
		return x.FpdLdiMaxBackupActivateTime
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiMinBackupActivateTime() uint64 {
	if x != nil {
		return x.FpdLdiMinBackupActivateTime
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiTotalBackupActivateTime() uint64 {
	if x != nil {
		return x.FpdLdiTotalBackupActivateTime
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiAvgBackupActivateTime() uint64 {
	if x != nil {
		return x.FpdLdiAvgBackupActivateTime
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdRecursionConstraintCount() uint64 {
	if x != nil {
		return x.FpdRecursionConstraintCount
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdLdiNumDelRefcnt() uint64 {
	if x != nil {
		return x.FpdLdiNumDelRefcnt
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdNumRetries() []uint64 {
	if x != nil {
		return x.FpdNumRetries
	}
	return nil
}

func (x *FibShProtoDebugStats) GetFpdRetryqSize() uint32 {
	if x != nil {
		return x.FpdRetryqSize
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdNumAllocs() uint64 {
	if x != nil {
		return x.FpdNumAllocs
	}
	return 0
}

func (x *FibShProtoDebugStats) GetFpdNumFrees() uint64 {
	if x != nil {
		return x.FpdNumFrees
	}
	return 0
}

// FIB per protocol purge counters
type FibShProtoPurgeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the number of frees for this proto
	FppCntrs []uint32 `protobuf:"varint,1,rep,packed,name=fpp_cntrs,json=fppCntrs,proto3" json:"fpp_cntrs,omitempty"`
}

func (x *FibShProtoPurgeStats) Reset() {
	*x = FibShProtoPurgeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShProtoPurgeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShProtoPurgeStats) ProtoMessage() {}

func (x *FibShProtoPurgeStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShProtoPurgeStats.ProtoReflect.Descriptor instead.
func (*FibShProtoPurgeStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{8}
}

func (x *FibShProtoPurgeStats) GetFppCntrs() []uint32 {
	if x != nil {
		return x.FppCntrs
	}
	return nil
}

type FibShRouteDelTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid   uint32 `protobuf:"varint,1,opt,name=tableid,proto3" json:"tableid,omitempty"`
	Prfx      []byte `protobuf:"bytes,2,opt,name=prfx,proto3" json:"prfx,omitempty"`
	PrfxLen   uint32 `protobuf:"varint,3,opt,name=prfx_len,json=prfxLen,proto3" json:"prfx_len,omitempty"`
	PrfxProto uint32 `protobuf:"varint,4,opt,name=prfx_proto,json=prfxProto,proto3" json:"prfx_proto,omitempty"`
	MsecTime  uint64 `protobuf:"varint,5,opt,name=msec_time,json=msecTime,proto3" json:"msec_time,omitempty"`
}

func (x *FibShRouteDelTs) Reset() {
	*x = FibShRouteDelTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShRouteDelTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShRouteDelTs) ProtoMessage() {}

func (x *FibShRouteDelTs) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShRouteDelTs.ProtoReflect.Descriptor instead.
func (*FibShRouteDelTs) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{9}
}

func (x *FibShRouteDelTs) GetTableid() uint32 {
	if x != nil {
		return x.Tableid
	}
	return 0
}

func (x *FibShRouteDelTs) GetPrfx() []byte {
	if x != nil {
		return x.Prfx
	}
	return nil
}

func (x *FibShRouteDelTs) GetPrfxLen() uint32 {
	if x != nil {
		return x.PrfxLen
	}
	return 0
}

func (x *FibShRouteDelTs) GetPrfxProto() uint32 {
	if x != nil {
		return x.PrfxProto
	}
	return 0
}

func (x *FibShRouteDelTs) GetMsecTime() uint64 {
	if x != nil {
		return x.MsecTime
	}
	return 0
}

// FIB ISSU protocol state
type FibIssuProtoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol name
	ProtocolName    string `protobuf:"bytes,1,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	AibEodTimeStamp string `protobuf:"bytes,2,opt,name=aib_eod_time_stamp,json=aibEodTimeStamp,proto3" json:"aib_eod_time_stamp,omitempty"`
	// RSI EOD expected/valid
	RsiEodValid bool `protobuf:"varint,3,opt,name=rsi_eod_valid,json=rsiEodValid,proto3" json:"rsi_eod_valid,omitempty"`
	// RSI EOD received timestamp
	RsiEodTimeStamp string `protobuf:"bytes,4,opt,name=rsi_eod_time_stamp,json=rsiEodTimeStamp,proto3" json:"rsi_eod_time_stamp,omitempty"`
	// LSD EOD expected/valid
	LsdEodValid bool `protobuf:"varint,5,opt,name=lsd_eod_valid,json=lsdEodValid,proto3" json:"lsd_eod_valid,omitempty"`
	// LSD EOD received timestamp
	LsdEodTimeStamp string `protobuf:"bytes,6,opt,name=lsd_eod_time_stamp,json=lsdEodTimeStamp,proto3" json:"lsd_eod_time_stamp,omitempty"`
	// LMRIB EOD expected/valid
	LmribEodValid bool `protobuf:"varint,7,opt,name=lmrib_eod_valid,json=lmribEodValid,proto3" json:"lmrib_eod_valid,omitempty"`
	// LMRIB EOD received timestamp
	LmribEodTimeStamp string `protobuf:"bytes,8,opt,name=lmrib_eod_time_stamp,json=lmribEodTimeStamp,proto3" json:"lmrib_eod_time_stamp,omitempty"`
	// RIB table info valid
	RibInfoValid bool `protobuf:"varint,9,opt,name=rib_info_valid,json=ribInfoValid,proto3" json:"rib_info_valid,omitempty"`
	// Number of BCDL tables
	BcdlTables uint32 `protobuf:"varint,10,opt,name=bcdl_tables,json=bcdlTables,proto3" json:"bcdl_tables,omitempty"`
	// Number of tables converged
	ConvergedTables uint32 `protobuf:"varint,11,opt,name=converged_tables,json=convergedTables,proto3" json:"converged_tables,omitempty"`
	// All RIB tables converged timestamp
	RibTablesConvergedTimeStamp string `protobuf:"bytes,12,opt,name=rib_tables_converged_time_stamp,json=ribTablesConvergedTimeStamp,proto3" json:"rib_tables_converged_time_stamp,omitempty"`
	// Protocol EOD expected/valid
	ProtocolEodValid bool `protobuf:"varint,13,opt,name=protocol_eod_valid,json=protocolEodValid,proto3" json:"protocol_eod_valid,omitempty"`
	// Protocol EOD sent timestamp
	ProtocolEodTimeStamp string `protobuf:"bytes,14,opt,name=protocol_eod_time_stamp,json=protocolEodTimeStamp,proto3" json:"protocol_eod_time_stamp,omitempty"`
}

func (x *FibIssuProtoState) Reset() {
	*x = FibIssuProtoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibIssuProtoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibIssuProtoState) ProtoMessage() {}

func (x *FibIssuProtoState) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibIssuProtoState.ProtoReflect.Descriptor instead.
func (*FibIssuProtoState) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{10}
}

func (x *FibIssuProtoState) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *FibIssuProtoState) GetAibEodTimeStamp() string {
	if x != nil {
		return x.AibEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetRsiEodValid() bool {
	if x != nil {
		return x.RsiEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetRsiEodTimeStamp() string {
	if x != nil {
		return x.RsiEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetLsdEodValid() bool {
	if x != nil {
		return x.LsdEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetLsdEodTimeStamp() string {
	if x != nil {
		return x.LsdEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetLmribEodValid() bool {
	if x != nil {
		return x.LmribEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetLmribEodTimeStamp() string {
	if x != nil {
		return x.LmribEodTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetRibInfoValid() bool {
	if x != nil {
		return x.RibInfoValid
	}
	return false
}

func (x *FibIssuProtoState) GetBcdlTables() uint32 {
	if x != nil {
		return x.BcdlTables
	}
	return 0
}

func (x *FibIssuProtoState) GetConvergedTables() uint32 {
	if x != nil {
		return x.ConvergedTables
	}
	return 0
}

func (x *FibIssuProtoState) GetRibTablesConvergedTimeStamp() string {
	if x != nil {
		return x.RibTablesConvergedTimeStamp
	}
	return ""
}

func (x *FibIssuProtoState) GetProtocolEodValid() bool {
	if x != nil {
		return x.ProtocolEodValid
	}
	return false
}

func (x *FibIssuProtoState) GetProtocolEodTimeStamp() string {
	if x != nil {
		return x.ProtocolEodTimeStamp
	}
	return ""
}

// FIB ISSU state
type FibIssuState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMDR supported
	ImdrSupport bool `protobuf:"varint,1,opt,name=imdr_support,json=imdrSupport,proto3" json:"imdr_support,omitempty"`
	// SLC supported
	SlcSupport bool `protobuf:"varint,2,opt,name=slc_support,json=slcSupport,proto3" json:"slc_support,omitempty"`
	// ISSU restart
	FisIssuRestart bool `protobuf:"varint,3,opt,name=fis_issu_restart,json=fisIssuRestart,proto3" json:"fis_issu_restart,omitempty"`
	// IMDR End-of-config implicit
	ImdrEocImplicit bool `protobuf:"varint,4,opt,name=imdr_eoc_implicit,json=imdrEocImplicit,proto3" json:"imdr_eoc_implicit,omitempty"`
	// SLC End-of-config implicit
	SlcEocImplicit bool `protobuf:"varint,5,opt,name=slc_eoc_implicit,json=slcEocImplicit,proto3" json:"slc_eoc_implicit,omitempty"`
	// End-of-config received from IMDR timestamp
	EocReceivedImdrTimeStamp string `protobuf:"bytes,6,opt,name=eoc_received_imdr_time_stamp,json=eocReceivedImdrTimeStamp,proto3" json:"eoc_received_imdr_time_stamp,omitempty"`
	// End-of-config received from SLC timestamp
	EocReceivedSlcTimeStamp string `protobuf:"bytes,7,opt,name=eoc_received_slc_time_stamp,json=eocReceivedSlcTimeStamp,proto3" json:"eoc_received_slc_time_stamp,omitempty"`
	// End-of-download received from IM timestamp
	EodReceivedImTimeStamp string `protobuf:"bytes,8,opt,name=eod_received_im_time_stamp,json=eodReceivedImTimeStamp,proto3" json:"eod_received_im_time_stamp,omitempty"`
	// End-of-download send to IMDR timestamp
	EodSentImdrTimeStamp string `protobuf:"bytes,9,opt,name=eod_sent_imdr_time_stamp,json=eodSentImdrTimeStamp,proto3" json:"eod_sent_imdr_time_stamp,omitempty"`
	// End-of-download send to SLC timestamp
	EodSentSlcTimeStamp string `protobuf:"bytes,10,opt,name=eod_sent_slc_time_stamp,json=eodSentSlcTimeStamp,proto3" json:"eod_sent_slc_time_stamp,omitempty"`
	// ISSU error sent to ISSUMGR timetstamp
	FisIssuErrorTs uint64 `protobuf:"varint,11,opt,name=fis_issu_error_ts,json=fisIssuErrorTs,proto3" json:"fis_issu_error_ts,omitempty"`
	// IMDR state for the protocols
	FisProtoState []*FibIssuProtoState `protobuf:"bytes,12,rep,name=fis_proto_state,json=fisProtoState,proto3" json:"fis_proto_state,omitempty"`
}

func (x *FibIssuState) Reset() {
	*x = FibIssuState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibIssuState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibIssuState) ProtoMessage() {}

func (x *FibIssuState) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibIssuState.ProtoReflect.Descriptor instead.
func (*FibIssuState) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{11}
}

func (x *FibIssuState) GetImdrSupport() bool {
	if x != nil {
		return x.ImdrSupport
	}
	return false
}

func (x *FibIssuState) GetSlcSupport() bool {
	if x != nil {
		return x.SlcSupport
	}
	return false
}

func (x *FibIssuState) GetFisIssuRestart() bool {
	if x != nil {
		return x.FisIssuRestart
	}
	return false
}

func (x *FibIssuState) GetImdrEocImplicit() bool {
	if x != nil {
		return x.ImdrEocImplicit
	}
	return false
}

func (x *FibIssuState) GetSlcEocImplicit() bool {
	if x != nil {
		return x.SlcEocImplicit
	}
	return false
}

func (x *FibIssuState) GetEocReceivedImdrTimeStamp() string {
	if x != nil {
		return x.EocReceivedImdrTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEocReceivedSlcTimeStamp() string {
	if x != nil {
		return x.EocReceivedSlcTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEodReceivedImTimeStamp() string {
	if x != nil {
		return x.EodReceivedImTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEodSentImdrTimeStamp() string {
	if x != nil {
		return x.EodSentImdrTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetEodSentSlcTimeStamp() string {
	if x != nil {
		return x.EodSentSlcTimeStamp
	}
	return ""
}

func (x *FibIssuState) GetFisIssuErrorTs() uint64 {
	if x != nil {
		return x.FisIssuErrorTs
	}
	return 0
}

func (x *FibIssuState) GetFisProtoState() []*FibIssuProtoState {
	if x != nil {
		return x.FisProtoState
	}
	return nil
}

// FIB per protocol frr counters
type FibShProtoFrrStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of FRR events sent on nh interface down
	MiNumIntfFrr uint32 `protobuf:"varint,1,opt,name=mi_num_intf_frr,json=miNumIntfFrr,proto3" json:"mi_num_intf_frr,omitempty"`
	// number of FRR events sent on nh parent interface down
	MiNumParentIntfFrr uint32 `protobuf:"varint,2,opt,name=mi_num_parent_intf_frr,json=miNumParentIntfFrr,proto3" json:"mi_num_parent_intf_frr,omitempty"`
	// number of interface down FRR events from PFI
	MiNumPfiIntfDown uint32 `protobuf:"varint,3,opt,name=mi_num_pfi_intf_down,json=miNumPfiIntfDown,proto3" json:"mi_num_pfi_intf_down,omitempty"`
	// number of NH down FRR events frm BFD
	MiNumBfdDown uint32 `protobuf:"varint,4,opt,name=mi_num_bfd_down,json=miNumBfdDown,proto3" json:"mi_num_bfd_down,omitempty"`
	// total number of prot FRR objects
	MiNumProtFrrObjects uint32 `protobuf:"varint,5,opt,name=mi_num_prot_frr_objects,json=miNumProtFrrObjects,proto3" json:"mi_num_prot_frr_objects,omitempty"`
	// total number of backup FRR objects
	MiNumBkupFrrObjects uint32 `protobuf:"varint,6,opt,name=mi_num_bkup_frr_objects,json=miNumBkupFrrObjects,proto3" json:"mi_num_bkup_frr_objects,omitempty"`
	// total number of successful FRR tunnel ID allocations
	MiNumTunidAllocs uint32 `protobuf:"varint,7,opt,name=mi_num_tunid_allocs,json=miNumTunidAllocs,proto3" json:"mi_num_tunid_allocs,omitempty"`
	// total number of FRR tunnel ID allocation failures
	MiNumTunidAllocFailures uint32 `protobuf:"varint,8,opt,name=mi_num_tunid_alloc_failures,json=miNumTunidAllocFailures,proto3" json:"mi_num_tunid_alloc_failures,omitempty"`
	// total number of successful FRR tunnel ID frees
	MiNumTunidFrees uint32 `protobuf:"varint,9,opt,name=mi_num_tunid_frees,json=miNumTunidFrees,proto3" json:"mi_num_tunid_frees,omitempty"`
	// total number of FRR tunnel ID free failures
	MiNumTunidFreeFailures uint32 `protobuf:"varint,10,opt,name=mi_num_tunid_free_failures,json=miNumTunidFreeFailures,proto3" json:"mi_num_tunid_free_failures,omitempty"`
	// number of frr reset queue adds
	MiNumFrrResetQueueAdds uint32 `protobuf:"varint,11,opt,name=mi_num_frr_reset_queue_adds,json=miNumFrrResetQueueAdds,proto3" json:"mi_num_frr_reset_queue_adds,omitempty"`
	// number of frr reset queue deletes
	MiNumFrrResetQueueRemove uint32 `protobuf:"varint,12,opt,name=mi_num_frr_reset_queue_remove,json=miNumFrrResetQueueRemove,proto3" json:"mi_num_frr_reset_queue_remove,omitempty"`
	// number of frr resets
	MiNumFrrReset uint32 `protobuf:"varint,13,opt,name=mi_num_frr_reset,json=miNumFrrReset,proto3" json:"mi_num_frr_reset,omitempty"`
	// number of frr events received in proto thread
	MiNumFrrProtoEvents uint32 `protobuf:"varint,14,opt,name=mi_num_frr_proto_events,json=miNumFrrProtoEvents,proto3" json:"mi_num_frr_proto_events,omitempty"`
	// frr log size
	MiNumFrrLogs uint32 `protobuf:"varint,15,opt,name=mi_num_frr_logs,json=miNumFrrLogs,proto3" json:"mi_num_frr_logs,omitempty"`
}

func (x *FibShProtoFrrStats) Reset() {
	*x = FibShProtoFrrStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShProtoFrrStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShProtoFrrStats) ProtoMessage() {}

func (x *FibShProtoFrrStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShProtoFrrStats.ProtoReflect.Descriptor instead.
func (*FibShProtoFrrStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{12}
}

func (x *FibShProtoFrrStats) GetMiNumIntfFrr() uint32 {
	if x != nil {
		return x.MiNumIntfFrr
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumParentIntfFrr() uint32 {
	if x != nil {
		return x.MiNumParentIntfFrr
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumPfiIntfDown() uint32 {
	if x != nil {
		return x.MiNumPfiIntfDown
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumBfdDown() uint32 {
	if x != nil {
		return x.MiNumBfdDown
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumProtFrrObjects() uint32 {
	if x != nil {
		return x.MiNumProtFrrObjects
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumBkupFrrObjects() uint32 {
	if x != nil {
		return x.MiNumBkupFrrObjects
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumTunidAllocs() uint32 {
	if x != nil {
		return x.MiNumTunidAllocs
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumTunidAllocFailures() uint32 {
	if x != nil {
		return x.MiNumTunidAllocFailures
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumTunidFrees() uint32 {
	if x != nil {
		return x.MiNumTunidFrees
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumTunidFreeFailures() uint32 {
	if x != nil {
		return x.MiNumTunidFreeFailures
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumFrrResetQueueAdds() uint32 {
	if x != nil {
		return x.MiNumFrrResetQueueAdds
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumFrrResetQueueRemove() uint32 {
	if x != nil {
		return x.MiNumFrrResetQueueRemove
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumFrrReset() uint32 {
	if x != nil {
		return x.MiNumFrrReset
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumFrrProtoEvents() uint32 {
	if x != nil {
		return x.MiNumFrrProtoEvents
	}
	return 0
}

func (x *FibShProtoFrrStats) GetMiNumFrrLogs() uint32 {
	if x != nil {
		return x.MiNumFrrLogs
	}
	return 0
}

// FIB platform capabilities
type FibShPlatCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L3 LBL levels
	FpcNumL3LblLevels uint32 `protobuf:"varint,1,opt,name=fpc_num_l3_lbl_levels,json=fpcNumL3LblLevels,proto3" json:"fpc_num_l3_lbl_levels,omitempty"`
	// L3 Hash buckets
	FpcNumL3LblPaths uint32 `protobuf:"varint,2,opt,name=fpc_num_l3_lbl_paths,json=fpcNumL3LblPaths,proto3" json:"fpc_num_l3_lbl_paths,omitempty"`
	// L3 Recursive Hash buckets
	FpcNumL3LblRecPaths uint32 `protobuf:"varint,3,opt,name=fpc_num_l3_lbl_rec_paths,json=fpcNumL3LblRecPaths,proto3" json:"fpc_num_l3_lbl_rec_paths,omitempty"`
	// L3 Unequal cost hash buckets
	FpcNumL3UcmpPaths uint32 `protobuf:"varint,4,opt,name=fpc_num_l3_ucmp_paths,json=fpcNumL3UcmpPaths,proto3" json:"fpc_num_l3_ucmp_paths,omitempty"`
	// Forwarding stages
	FpcNumFwdingStages uint32 `protobuf:"varint,5,opt,name=fpc_num_fwding_stages,json=fpcNumFwdingStages,proto3" json:"fpc_num_fwding_stages,omitempty"`
	// Label split
	FpcLocalLabelSplit uint32 `protobuf:"varint,6,opt,name=fpc_local_label_split,json=fpcLocalLabelSplit,proto3" json:"fpc_local_label_split,omitempty"`
	// Statistics support
	FpcStatsSupport bool `protobuf:"varint,7,opt,name=fpc_stats_support,json=fpcStatsSupport,proto3" json:"fpc_stats_support,omitempty"`
	// Plat ready cb register
	FpcPlatfReadyCbWait bool `protobuf:"varint,8,opt,name=fpc_platf_ready_cb_wait,json=fpcPlatfReadyCbWait,proto3" json:"fpc_platf_ready_cb_wait,omitempty"`
	// Path per tunnel class
	FpcNumPathsPerPbtsClass uint32 `protobuf:"varint,9,opt,name=fpc_num_paths_per_pbts_class,json=fpcNumPathsPerPbtsClass,proto3" json:"fpc_num_paths_per_pbts_class,omitempty"`
	// V4 update disable
	FpcPlatfV4UpdDisable bool `protobuf:"varint,10,opt,name=fpc_platf_v4_upd_disable,json=fpcPlatfV4UpdDisable,proto3" json:"fpc_platf_v4_upd_disable,omitempty"`
	// V6 update disable
	FpcPlatfV6UpdDisable bool `protobuf:"varint,11,opt,name=fpc_platf_v6_upd_disable,json=fpcPlatfV6UpdDisable,proto3" json:"fpc_platf_v6_upd_disable,omitempty"`
	// LBA tuples
	FpcLbaTuplesDefault uint32 `protobuf:"varint,12,opt,name=fpc_lba_tuples_default,json=fpcLbaTuplesDefault,proto3" json:"fpc_lba_tuples_default,omitempty"`
	// MRAPS support
	FpcMrapsSupport bool `protobuf:"varint,13,opt,name=fpc_mraps_support,json=fpcMrapsSupport,proto3" json:"fpc_mraps_support,omitempty"`
	// PBTS default class support
	FpcPbtsDefclassSupport bool `protobuf:"varint,14,opt,name=fpc_pbts_defclass_support,json=fpcPbtsDefclassSupport,proto3" json:"fpc_pbts_defclass_support,omitempty"`
	// loadinfo filter support
	FpcLoadinfoFilterSupport bool `protobuf:"varint,15,opt,name=fpc_loadinfo_filter_support,json=fpcLoadinfoFilterSupport,proto3" json:"fpc_loadinfo_filter_support,omitempty"`
	// LISP Decap over 4
	FpcLispDecapOverV4 []bool `protobuf:"varint,16,rep,packed,name=fpc_lisp_decap_over_v4,json=fpcLispDecapOverV4,proto3" json:"fpc_lisp_decap_over_v4,omitempty"`
	// LISP Decap over 6
	FpcLispDecapOverV6 []bool `protobuf:"varint,17,rep,packed,name=fpc_lisp_decap_over_v6,json=fpcLispDecapOverV6,proto3" json:"fpc_lisp_decap_over_v6,omitempty"`
	// LISP UCMP support
	FpcLispUcmp []bool `protobuf:"varint,18,rep,packed,name=fpc_lisp_ucmp,json=fpcLispUcmp,proto3" json:"fpc_lisp_ucmp,omitempty"`
	// Fallback VRF support
	FpcResolveViaTable []bool `protobuf:"varint,19,rep,packed,name=fpc_resolve_via_table,json=fpcResolveViaTable,proto3" json:"fpc_resolve_via_table,omitempty"`
	// NHID support
	FpcNhid bool `protobuf:"varint,20,opt,name=fpc_nhid,json=fpcNhid,proto3" json:"fpc_nhid,omitempty"`
	// Backwalk dependents is required
	FpcPlatfTempBackWalkReqd bool `protobuf:"varint,21,opt,name=fpc_platf_temp_back_walk_reqd,json=fpcPlatfTempBackWalkReqd,proto3" json:"fpc_platf_temp_back_walk_reqd,omitempty"`
	// Link MPLS IPv6 NH support
	FpcLinkMplsNhinfoInIpv6ThreadSupport bool `protobuf:"varint,22,opt,name=fpc_link_mpls_nhinfo_in_ipv6_thread_support,json=fpcLinkMplsNhinfoInIpv6ThreadSupport,proto3" json:"fpc_link_mpls_nhinfo_in_ipv6_thread_support,omitempty"`
	// Exclude Deag backup Paths
	FpcExcludeDeagBkup bool `protobuf:"varint,23,opt,name=fpc_exclude_deag_bkup,json=fpcExcludeDeagBkup,proto3" json:"fpc_exclude_deag_bkup,omitempty"`
	// Per-destination load-balancing support
	FpcDlbSupport bool `protobuf:"varint,24,opt,name=fpc_dlb_support,json=fpcDlbSupport,proto3" json:"fpc_dlb_support,omitempty"`
	// Prefix filter level of support
	FpcPrefixFilterSupport uint32 `protobuf:"varint,25,opt,name=fpc_prefix_filter_support,json=fpcPrefixFilterSupport,proto3" json:"fpc_prefix_filter_support,omitempty"`
	// Slowpath ingress inject required
	FpcSlowpathIngressInjectReqd bool `protobuf:"varint,26,opt,name=fpc_slowpath_ingress_inject_reqd,json=fpcSlowpathIngressInjectReqd,proto3" json:"fpc_slowpath_ingress_inject_reqd,omitempty"`
}

func (x *FibShPlatCapabilities) Reset() {
	*x = FibShPlatCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibShPlatCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibShPlatCapabilities) ProtoMessage() {}

func (x *FibShPlatCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibShPlatCapabilities.ProtoReflect.Descriptor instead.
func (*FibShPlatCapabilities) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP(), []int{13}
}

func (x *FibShPlatCapabilities) GetFpcNumL3LblLevels() uint32 {
	if x != nil {
		return x.FpcNumL3LblLevels
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcNumL3LblPaths() uint32 {
	if x != nil {
		return x.FpcNumL3LblPaths
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcNumL3LblRecPaths() uint32 {
	if x != nil {
		return x.FpcNumL3LblRecPaths
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcNumL3UcmpPaths() uint32 {
	if x != nil {
		return x.FpcNumL3UcmpPaths
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcNumFwdingStages() uint32 {
	if x != nil {
		return x.FpcNumFwdingStages
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcLocalLabelSplit() uint32 {
	if x != nil {
		return x.FpcLocalLabelSplit
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcStatsSupport() bool {
	if x != nil {
		return x.FpcStatsSupport
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcPlatfReadyCbWait() bool {
	if x != nil {
		return x.FpcPlatfReadyCbWait
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcNumPathsPerPbtsClass() uint32 {
	if x != nil {
		return x.FpcNumPathsPerPbtsClass
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcPlatfV4UpdDisable() bool {
	if x != nil {
		return x.FpcPlatfV4UpdDisable
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcPlatfV6UpdDisable() bool {
	if x != nil {
		return x.FpcPlatfV6UpdDisable
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcLbaTuplesDefault() uint32 {
	if x != nil {
		return x.FpcLbaTuplesDefault
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcMrapsSupport() bool {
	if x != nil {
		return x.FpcMrapsSupport
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcPbtsDefclassSupport() bool {
	if x != nil {
		return x.FpcPbtsDefclassSupport
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcLoadinfoFilterSupport() bool {
	if x != nil {
		return x.FpcLoadinfoFilterSupport
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcLispDecapOverV4() []bool {
	if x != nil {
		return x.FpcLispDecapOverV4
	}
	return nil
}

func (x *FibShPlatCapabilities) GetFpcLispDecapOverV6() []bool {
	if x != nil {
		return x.FpcLispDecapOverV6
	}
	return nil
}

func (x *FibShPlatCapabilities) GetFpcLispUcmp() []bool {
	if x != nil {
		return x.FpcLispUcmp
	}
	return nil
}

func (x *FibShPlatCapabilities) GetFpcResolveViaTable() []bool {
	if x != nil {
		return x.FpcResolveViaTable
	}
	return nil
}

func (x *FibShPlatCapabilities) GetFpcNhid() bool {
	if x != nil {
		return x.FpcNhid
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcPlatfTempBackWalkReqd() bool {
	if x != nil {
		return x.FpcPlatfTempBackWalkReqd
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcLinkMplsNhinfoInIpv6ThreadSupport() bool {
	if x != nil {
		return x.FpcLinkMplsNhinfoInIpv6ThreadSupport
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcExcludeDeagBkup() bool {
	if x != nil {
		return x.FpcExcludeDeagBkup
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcDlbSupport() bool {
	if x != nil {
		return x.FpcDlbSupport
	}
	return false
}

func (x *FibShPlatCapabilities) GetFpcPrefixFilterSupport() uint32 {
	if x != nil {
		return x.FpcPrefixFilterSupport
	}
	return 0
}

func (x *FibShPlatCapabilities) GetFpcSlowpathIngressInjectReqd() bool {
	if x != nil {
		return x.FpcSlowpathIngressInjectReqd
	}
	return false
}

var File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDesc = []byte{
	0x0a, 0x55, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x66,
	0x69, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2f, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x69, 0x73,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x22, 0x54, 0x0a, 0x10,
	0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xaf, 0x11, 0x0a, 0x0b, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x69,
	0x73, 0x63, 0x12, 0x8a, 0x01, 0x0a, 0x12, 0x6d, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x64, 0x62, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66,
	0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f,
	0x6d, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x62, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0e, 0x6d, 0x69, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x66, 0x68, 0x5f, 0x75, 0x70,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x50, 0x66, 0x69, 0x49, 0x66,
	0x68, 0x55, 0x70, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x69, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69,
	0x66, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69,
	0x50, 0x66, 0x69, 0x49, 0x66, 0x68, 0x44, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x69, 0x5f,
	0x70, 0x66, 0x69, 0x5f, 0x69, 0x66, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x50, 0x66, 0x69, 0x49, 0x66, 0x68, 0x53, 0x74, 0x61,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x6d, 0x69, 0x5f, 0x74, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x69, 0x54, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x55, 0x70, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x5f, 0x74, 0x6f, 0x74, 0x5f, 0x67, 0x74, 0x72,
	0x69, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d,
	0x69, 0x54, 0x6f, 0x74, 0x47, 0x74, 0x72, 0x69, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x10, 0x6d, 0x69, 0x5f, 0x74, 0x6f, 0x74, 0x5f, 0x64, 0x6e, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x54, 0x6f, 0x74, 0x44, 0x6e,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x5f, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x69, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x69, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x69,
	0x5f, 0x73, 0x68, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x53, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x5f, 0x69, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6d, 0x69, 0x49, 0x64, 0x62, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x69, 0x5f, 0x69, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x69, 0x49, 0x64, 0x62, 0x52,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1f, 0x6d, 0x69, 0x5f, 0x69, 0x64, 0x62, 0x5f, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x69, 0x49,
	0x64, 0x62, 0x45, 0x78, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x69, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x4d, 0x67, 0x6d, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x8a, 0x01, 0x0a, 0x12, 0x6d, 0x69, 0x5f, 0x69, 0x64, 0x62, 0x5f, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x5f, 0x63, 0x6e, 0x74, 0x72, 0x73, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d,
	0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x6d, 0x69,
	0x49, 0x64, 0x62, 0x50, 0x75, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x72, 0x73, 0x12, 0x74, 0x0a,
	0x09, 0x6d, 0x69, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x73, 0x18, 0x41, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x73, 0x52, 0x07, 0x6d, 0x69, 0x44, 0x65,
	0x6c, 0x54, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x69, 0x5f, 0x6c, 0x72, 0x70, 0x66, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x42, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x69, 0x4c, 0x72, 0x70, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x5f, 0x6c, 0x72, 0x70, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x4c,
	0x72, 0x70, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d,
	0x69, 0x5f, 0x6c, 0x72, 0x70, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x69, 0x4c, 0x72, 0x70, 0x66, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x17, 0x6d,
	0x69, 0x5f, 0x69, 0x64, 0x62, 0x5f, 0x6c, 0x73, 0x65, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x45, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69,
	0x49, 0x64, 0x62, 0x4c, 0x73, 0x65, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x47, 0x0a, 0x21, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x69,
	0x4e, 0x75, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x23, 0x6d, 0x69,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x23, 0x6d, 0x69, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x22, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x77, 0x0a, 0x0d, 0x6d, 0x69, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x49,
	0x73, 0x73, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x6d, 0x69, 0x5f, 0x66,
	0x72, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69,
	0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x6d, 0x69, 0x46,
	0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x14, 0x6d, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62,
	0x5f, 0x73, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x6d, 0x69, 0x50, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x69, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x69, 0x64, 0x73, 0x18, 0x4d, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x70, 0x45, 0x69,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x16, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x69, 0x64, 0x73, 0x18, 0x4e, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x70, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x45, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x5f, 0x63, 0x70, 0x75,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6d, 0x69, 0x43, 0x70, 0x75, 0x6c, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x69, 0x5f, 0x63, 0x70, 0x75, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x43, 0x70, 0x75, 0x6c,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x5f, 0x63,
	0x70, 0x75, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x51, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x43, 0x70, 0x75, 0x6c, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x22, 0x6d, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f,
	0x61, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x6d, 0x69, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x41, 0x69, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x21,
	0x6d, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x69, 0x62, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x63, 0x66,
	0x67, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6d, 0x69, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x41, 0x69, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x69,
	0x62, 0x43, 0x66, 0x67, 0x22, 0xc1, 0x02, 0x0a, 0x17, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f,
	0x6f, 0x62, 0x6a, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x6f, 0x61, 0x73,
	0x54, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x6f,
	0x61, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x6f, 0x61, 0x73, 0x54, 0x6f, 0x74, 0x55, 0x70,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x6f, 0x61, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x6f, 0x61, 0x73, 0x54, 0x6f, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x61, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x66, 0x6f, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x6f,
	0x61, 0x73, 0x4e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x6f, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x6f, 0x61, 0x73, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x61, 0x73, 0x4d,
	0x61, 0x78, 0x54, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x66, 0x69, 0x62,
	0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x66, 0x6f, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x73, 0x54, 0x6f, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x66, 0x6f, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x66, 0x6f, 0x73, 0x54, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x11, 0x66, 0x6f, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63,
	0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x66, 0x6f, 0x73, 0x4f, 0x62, 0x6a,
	0x41, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x16, 0x66, 0x69, 0x62,
	0x5f, 0x73, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x70, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66,
	0x70, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x70, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x70, 0x75, 0x73, 0x4e, 0x75, 0x6d,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x7b, 0x0a, 0x0e, 0x66, 0x70, 0x75, 0x73, 0x5f,
	0x6f, 0x62, 0x6a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66,
	0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x62, 0x6a,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x66, 0x70, 0x75, 0x73, 0x4f, 0x62, 0x6a, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x70, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x66, 0x70, 0x75, 0x73, 0x55, 0x70, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x16, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x67,
	0x74, 0x72, 0x69, 0x65, 0x5f, 0x66, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x67, 0x66, 0x74, 0x5f, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x66, 0x67, 0x66, 0x74, 0x46, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x67, 0x66, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x66, 0x67, 0x66, 0x74, 0x54, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x67, 0x66, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x66, 0x67, 0x66, 0x74, 0x54, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x67, 0x66, 0x74, 0x5f, 0x74, 0x6f, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x66, 0x67, 0x66, 0x74, 0x54, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x66, 0x67, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x67, 0x66, 0x74, 0x4d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x67, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x67,
	0x66, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9f, 0x02, 0x0a, 0x13,
	0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x67, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x67, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x67,
	0x74, 0x4e, 0x75, 0x6d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x67, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x67, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x66, 0x67, 0x74, 0x5f, 0x67, 0x74, 0x72, 0x69,
	0x65, 0x5f, 0x66, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x67,
	0x74, 0x72, 0x69, 0x65, 0x5f, 0x66, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x66, 0x67, 0x74, 0x47, 0x74, 0x72, 0x69, 0x65, 0x46, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x2b, 0x0a, 0x12, 0x66, 0x67, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x67,
	0x74, 0x55, 0x70, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xea, 0x15,
	0x0a, 0x18, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x70,
	0x64, 0x5f, 0x67, 0x62, 0x6c, 0x74, 0x62, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x66, 0x70, 0x64, 0x47, 0x62, 0x6c, 0x74, 0x62,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x70, 0x64, 0x5f,
	0x67, 0x62, 0x6c, 0x74, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x66, 0x70, 0x64, 0x47, 0x62, 0x6c,
	0x74, 0x62, 0x6c, 0x52, 0x65, 0x6a, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x70, 0x64, 0x5f, 0x76, 0x72, 0x66, 0x74, 0x62, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x66, 0x70, 0x64, 0x56, 0x72,
	0x66, 0x74, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x66,
	0x70, 0x64, 0x5f, 0x76, 0x72, 0x66, 0x74, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x66, 0x70, 0x64,
	0x56, 0x72, 0x66, 0x74, 0x62, 0x6c, 0x52, 0x65, 0x6a, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x66, 0x70, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x62, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x70, 0x64, 0x4e, 0x75, 0x6d, 0x54, 0x62,
	0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x70, 0x64, 0x5f, 0x67, 0x62, 0x6c, 0x74, 0x62, 0x6c,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x13, 0x66, 0x70, 0x64, 0x47, 0x62, 0x6c, 0x74, 0x62, 0x6c, 0x53, 0x72, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x70, 0x64, 0x5f, 0x76,
	0x72, 0x66, 0x74, 0x62, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x66, 0x70, 0x64, 0x56, 0x72, 0x66, 0x74,
	0x62, 0x6c, 0x53, 0x72, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x70, 0x64, 0x5f, 0x62, 0x63, 0x64, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x70, 0x64, 0x42, 0x63, 0x64, 0x6c, 0x4d, 0x73, 0x67, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x70, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x70, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70, 0x64, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x63, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x66, 0x70, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x63, 0x76, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x70, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x70, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x70, 0x64, 0x5f, 0x6c, 0x62, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x66, 0x70, 0x64, 0x4c, 0x62, 0x6c, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x12, 0x3b,
	0x0a, 0x1a, 0x66, 0x70, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x17, 0x66, 0x70, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x66,
	0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x75, 0x70, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x55, 0x70, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x66,
	0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x44, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0e, 0x66,
	0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x55, 0x70, 0x64, 0x54, 0x78,
	0x12, 0x33, 0x0a, 0x17, 0x66, 0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x74, 0x78, 0x5f, 0x6e, 0x68, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x55, 0x70, 0x64, 0x54, 0x78, 0x4e, 0x68,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x1c, 0x66, 0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a,
	0x5f, 0x75, 0x70, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x66, 0x70, 0x64,
	0x41, 0x64, 0x6a, 0x55, 0x70, 0x64, 0x54, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x19, 0x66, 0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f,
	0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x68, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x54,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4e, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3b, 0x0a,
	0x1b, 0x66, 0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x72, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x54, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x4f, 0x62, 0x6a, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70,
	0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1e,
	0x0a, 0x0b, 0x66, 0x70, 0x64, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x70, 0x64, 0x41, 0x64, 0x6a, 0x4d, 0x73, 0x67, 0x12, 0x1c,
	0x0a, 0x0a, 0x66, 0x70, 0x64, 0x5f, 0x74, 0x65, 0x5f, 0x72, 0x63, 0x76, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x66, 0x70, 0x64, 0x54, 0x65, 0x52, 0x63, 0x76, 0x12, 0x40, 0x0a, 0x1d,
	0x66, 0x70, 0x64, 0x5f, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x66, 0x70, 0x64, 0x54, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x13, 0x66, 0x70, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x69,
	0x73, 0x63, 0x2e, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x5f,
	0x75, 0x70, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x66, 0x70, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x55, 0x70, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x10,
	0x66, 0x70, 0x64, 0x5f, 0x67, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69, 0x62,
	0x5f, 0x73, 0x68, 0x5f, 0x67, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x66, 0x70, 0x64, 0x47, 0x74, 0x72, 0x69, 0x65, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x13, 0x66, 0x70, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x66,
	0x70, 0x64, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x6f, 0x75, 0x74, 0x73, 0x12,
	0x2d, 0x0a, 0x13, 0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x75, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x66, 0x70,
	0x64, 0x4c, 0x64, 0x69, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x75, 0x70, 0x12, 0x38,
	0x0a, 0x19, 0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x75, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x66, 0x70, 0x64, 0x4c, 0x64, 0x69, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x78, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x19, 0x66, 0x70, 0x64, 0x5f,
	0x70, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x75, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x66, 0x70, 0x64,
	0x50, 0x6c, 0x4e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x75, 0x70, 0x12, 0x36, 0x0a, 0x18, 0x66, 0x70, 0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x75, 0x70, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x70, 0x64, 0x50, 0x6c, 0x4e, 0x75, 0x6d, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x46, 0x69, 0x78, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x16, 0x66, 0x70,
	0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x70, 0x64, 0x50,
	0x6c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x13, 0x66, 0x70, 0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x5f, 0x71, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x70, 0x64,
	0x50, 0x6c, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x51, 0x12, 0x43, 0x0a, 0x1f,
	0x66, 0x70, 0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x66, 0x70, 0x64, 0x50, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x1c, 0x66, 0x70, 0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x66, 0x70, 0x64, 0x50, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x70, 0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x66, 0x70, 0x64, 0x50, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b,
	0x66, 0x70, 0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x66, 0x70, 0x64, 0x50, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x66, 0x70,
	0x64, 0x5f, 0x70, 0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x66, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x70, 0x64, 0x50, 0x6c,
	0x46, 0x61, 0x73, 0x74, 0x4e, 0x66, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d,
	0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x66, 0x70, 0x64, 0x4c, 0x64, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x21, 0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x66, 0x70, 0x64, 0x4c, 0x64,
	0x69, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x66, 0x70, 0x64, 0x5f, 0x6c,
	0x64, 0x69, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1b, 0x66, 0x70, 0x64, 0x4c, 0x64, 0x69, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x20, 0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x66, 0x70, 0x64, 0x4c, 0x64, 0x69,
	0x4d, 0x69, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1d, 0x66, 0x70, 0x64, 0x4c, 0x64, 0x69, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x20, 0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x66, 0x70, 0x64, 0x4c,
	0x64, 0x69, 0x41, 0x76, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x70, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1b, 0x66, 0x70, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x16,
	0x66, 0x70, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x70,
	0x64, 0x4c, 0x64, 0x69, 0x4e, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x63, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x70, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x70, 0x64, 0x4e, 0x75,
	0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x70, 0x64, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x71, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x70, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x71, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x70, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x70, 0x64, 0x4e, 0x75, 0x6d,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66,
	0x70, 0x64, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x18, 0x66, 0x69,
	0x62, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x70, 0x5f, 0x63, 0x6e,
	0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x70, 0x70, 0x43, 0x6e,
	0x74, 0x72, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x66, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x72, 0x66, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x66,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x66,
	0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x66, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x66, 0x78, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x73, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x80, 0x05, 0x0a, 0x14, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x61, 0x69, 0x62, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x69, 0x62, 0x45,
	0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72,
	0x73, 0x69, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x73, 0x69, 0x45, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x12, 0x72, 0x73, 0x69, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x73, 0x69,
	0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x73, 0x64, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x73, 0x64, 0x45, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x73, 0x64, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x73,
	0x64, 0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x6d, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6d, 0x72, 0x69, 0x62, 0x45, 0x6f, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6d, 0x72, 0x69, 0x62, 0x5f, 0x65,
	0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6d, 0x72, 0x69, 0x62, 0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x69, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x63, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x63, 0x64, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x69, 0x62, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x72, 0x69, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xab, 0x05, 0x0a, 0x0e, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x64, 0x72, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d,
	0x64, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x63,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x6c, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69,
	0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x73, 0x49, 0x73, 0x73, 0x75, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x64, 0x72, 0x5f, 0x65, 0x6f, 0x63,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6d, 0x64, 0x72, 0x45, 0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x63, 0x5f, 0x65, 0x6f, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6c, 0x63, 0x45,
	0x6f, 0x63, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x65, 0x6f,
	0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x64, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x65, 0x6f, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6d, 0x64,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x65, 0x6f,
	0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x65, 0x6f, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x6c, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x1a, 0x65, 0x6f, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6f,
	0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x18, 0x65, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6d, 0x64, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6f, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x49,
	0x6d, 0x64, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x17,
	0x65, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65,
	0x6f, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66,
	0x69, 0x73, 0x49, 0x73, 0x73, 0x75, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x0f, 0x66, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x73, 0x63, 0x2e, 0x66, 0x69,
	0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x90, 0x06, 0x0a, 0x16, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0f,
	0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x66, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x66,
	0x46, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x66, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x66, 0x46, 0x72, 0x72, 0x12, 0x2e, 0x0a, 0x14, 0x6d, 0x69, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x66, 0x69, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x50, 0x66, 0x69, 0x49,
	0x6e, 0x74, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x69, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x42, 0x66, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x34,
	0x0a, 0x17, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x5f, 0x66, 0x72,
	0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x46, 0x72, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62,
	0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x42, 0x6b, 0x75, 0x70,
	0x46, 0x72, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x69,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x75, 0x6e, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x54, 0x75,
	0x6e, 0x69, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x69, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x75, 0x6e, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x54, 0x75, 0x6e, 0x69, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x69, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x75, 0x6e, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x54, 0x75, 0x6e, 0x69, 0x64, 0x46,
	0x72, 0x65, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x75, 0x6e, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x54,
	0x75, 0x6e, 0x69, 0x64, 0x46, 0x72, 0x65, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x1b, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x72, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x64, 0x64, 0x73, 0x12, 0x3f, 0x0a,
	0x1d, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x72, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x27,
	0x0a, 0x10, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x46,
	0x72, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x69, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x46,
	0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a,
	0x0f, 0x6d, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x72,
	0x4c, 0x6f, 0x67, 0x73, 0x22, 0x8b, 0x0b, 0x0a, 0x18, 0x66, 0x69, 0x62, 0x5f, 0x73, 0x68, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x15, 0x66, 0x70, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x33, 0x5f,
	0x6c, 0x62, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x66, 0x70, 0x63, 0x4e, 0x75, 0x6d, 0x4c, 0x33, 0x4c, 0x62, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x14, 0x66, 0x70, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c,
	0x33, 0x5f, 0x6c, 0x62, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x66, 0x70, 0x63, 0x4e, 0x75, 0x6d, 0x4c, 0x33, 0x4c, 0x62, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x18, 0x66, 0x70, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c,
	0x33, 0x5f, 0x6c, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x70, 0x63, 0x4e, 0x75, 0x6d, 0x4c, 0x33, 0x4c,
	0x62, 0x6c, 0x52, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x15, 0x66, 0x70,
	0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x33, 0x5f, 0x75, 0x63, 0x6d, 0x70, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x70, 0x63, 0x4e, 0x75,
	0x6d, 0x4c, 0x33, 0x55, 0x63, 0x6d, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x66, 0x70, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x77, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x70, 0x63,
	0x4e, 0x75, 0x6d, 0x46, 0x77, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x66, 0x70, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x17, 0x66, 0x70, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x63, 0x62, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x66, 0x70, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x62,
	0x57, 0x61, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1c, 0x66, 0x70, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x74, 0x73, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x70, 0x63, 0x4e,
	0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x50, 0x65, 0x72, 0x50, 0x62, 0x74, 0x73, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x66, 0x70, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x5f, 0x76, 0x34, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x70, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x56,
	0x34, 0x55, 0x70, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x66,
	0x70, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x5f, 0x76, 0x36, 0x5f, 0x75, 0x70, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66,
	0x70, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x56, 0x36, 0x55, 0x70, 0x64, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x62, 0x61, 0x5f, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x70, 0x63, 0x4c, 0x62, 0x61, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x70, 0x63, 0x5f,
	0x6d, 0x72, 0x61, 0x70, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x70, 0x63, 0x4d, 0x72, 0x61, 0x70, 0x73, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x70, 0x63, 0x5f, 0x70, 0x62, 0x74, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x70, 0x63, 0x50, 0x62, 0x74, 0x73,
	0x44, 0x65, 0x66, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x3d, 0x0a, 0x1b, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x66, 0x70, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66,
	0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32,
	0x0a, 0x16, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x34, 0x18, 0x10, 0x20, 0x03, 0x28, 0x08, 0x52, 0x12,
	0x66, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x70, 0x44, 0x65, 0x63, 0x61, 0x70, 0x4f, 0x76, 0x65, 0x72,
	0x56, 0x34, 0x12, 0x32, 0x0a, 0x16, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x64,
	0x65, 0x63, 0x61, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x36, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x70, 0x44, 0x65, 0x63, 0x61, 0x70,
	0x4f, 0x76, 0x65, 0x72, 0x56, 0x36, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70, 0x63, 0x5f, 0x6c, 0x69,
	0x73, 0x70, 0x5f, 0x75, 0x63, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x70, 0x63, 0x4c, 0x69, 0x73, 0x70, 0x55, 0x63, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x70,
	0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x08, 0x52, 0x12, 0x66, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x56, 0x69, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x70, 0x63, 0x5f, 0x6e, 0x68, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x66, 0x70, 0x63, 0x4e, 0x68, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x1d, 0x66, 0x70, 0x63, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x77, 0x61, 0x6c, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x66, 0x70, 0x63, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x61, 0x63,
	0x6b, 0x57, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x64, 0x12, 0x59, 0x0a, 0x2b, 0x66, 0x70, 0x63,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6e, 0x68, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24,
	0x66, 0x70, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x4e, 0x68, 0x69, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x70, 0x63, 0x5f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x67, 0x5f, 0x62, 0x6b, 0x75, 0x70, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x70, 0x63, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44,
	0x65, 0x61, 0x67, 0x42, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x70, 0x63, 0x5f, 0x64,
	0x6c, 0x62, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x66, 0x70, 0x63, 0x44, 0x6c, 0x62, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x66, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x66, 0x70, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x66, 0x70,
	0x63, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x66, 0x70, 0x63, 0x53, 0x6c, 0x6f, 0x77, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_goTypes = []interface{}{
	(*FibShMisc_KEYS)(nil),        // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc_KEYS
	(*FibShMisc)(nil),             // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc
	(*FibShObjActionStats)(nil),   // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_obj_action_stats
	(*FibShObjStats)(nil),         // 3: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_obj_stats
	(*FibShPlatfUpdStats)(nil),    // 4: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_platf_upd_stats
	(*FibShGtrieFnTiming)(nil),    // 5: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_gtrie_fn_timing
	(*FibShGtrieTiming)(nil),      // 6: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_gtrie_timing
	(*FibShProtoDebugStats)(nil),  // 7: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_debug_stats
	(*FibShProtoPurgeStats)(nil),  // 8: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_purge_stats
	(*FibShRouteDelTs)(nil),       // 9: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_route_del_ts
	(*FibIssuProtoState)(nil),     // 10: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_issu_proto_state
	(*FibIssuState)(nil),          // 11: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_issu_state
	(*FibShProtoFrrStats)(nil),    // 12: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_frr_stats
	(*FibShPlatCapabilities)(nil), // 13: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_plat_capabilities
}
var file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_depIdxs = []int32{
	7,  // 0: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc.mi_proto_dbg_stats:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_debug_stats
	8,  // 1: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc.mi_idb_purge_cntrs:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_purge_stats
	9,  // 2: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc.mi_del_ts:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_route_del_ts
	11, // 3: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc.mi_issu_state:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_issu_state
	12, // 4: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc.mi_frr_stats:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_frr_stats
	13, // 5: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc.mi_plat_capabilities:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_plat_capabilities
	2,  // 6: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_obj_stats.fos_obj_act_stats:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_obj_action_stats
	3,  // 7: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_platf_upd_stats.fpus_obj_stats:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_obj_stats
	5,  // 8: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_gtrie_timing.fgt_gtrie_fn_timing:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_gtrie_fn_timing
	4,  // 9: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_debug_stats.fpd_platf_upd_stats:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_platf_upd_stats
	6,  // 10: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_debug_stats.fpd_gtrie_timing:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_gtrie_timing
	10, // 11: cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_issu_state.fis_proto_state:type_name -> cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_issu_proto_state
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShMisc_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShMisc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShObjActionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShObjStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShPlatfUpdStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShGtrieFnTiming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShGtrieTiming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShProtoDebugStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShProtoPurgeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShRouteDelTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibIssuProtoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibIssuState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShProtoFrrStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibShPlatCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto = out.File
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc_fib_sh_misc_proto_depIdxs = nil
}
