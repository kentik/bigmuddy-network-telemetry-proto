// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/mpls_forwarding/nodes/node/forwarding_summary/mpls_fwding_summary.proto

package cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MplsFwdingSummary_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *MplsFwdingSummary_KEYS) Reset() {
	*x = MplsFwdingSummary_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsFwdingSummary_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsFwdingSummary_KEYS) ProtoMessage() {}

func (x *MplsFwdingSummary_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsFwdingSummary_KEYS.ProtoReflect.Descriptor instead.
func (*MplsFwdingSummary_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescGZIP(), []int{0}
}

func (x *MplsFwdingSummary_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type MplsFwdingSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of IPv4 imposition entries
	Ipv4ImpositionEntries uint32 `protobuf:"varint,50,opt,name=ipv4_imposition_entries,json=ipv4ImpositionEntries,proto3" json:"ipv4_imposition_entries,omitempty"`
	// Number of reserved label entries
	ReservedLabelEntries uint32 `protobuf:"varint,51,opt,name=reserved_label_entries,json=reservedLabelEntries,proto3" json:"reserved_label_entries,omitempty"`
	// Number of label swap/disposition entries
	LabelSwitchedEntries uint32 `protobuf:"varint,52,opt,name=label_switched_entries,json=labelSwitchedEntries,proto3" json:"label_switched_entries,omitempty"`
	// Number of delete stale label entries
	DeletedStaleEntries uint32 `protobuf:"varint,53,opt,name=deleted_stale_entries,json=deletedStaleEntries,proto3" json:"deleted_stale_entries,omitempty"`
	// Number of TE tunnel head imposition entries
	TeHeadEntries uint32 `protobuf:"varint,54,opt,name=te_head_entries,json=teHeadEntries,proto3" json:"te_head_entries,omitempty"`
	// Number of TE FRR tunnel head imposition entries
	TeFrrHeadEntries uint32 `protobuf:"varint,55,opt,name=te_frr_head_entries,json=teFrrHeadEntries,proto3" json:"te_frr_head_entries,omitempty"`
	// Number of TE FRR protected interface entries
	TeFrrInterfaceEntries uint32 `protobuf:"varint,56,opt,name=te_frr_interface_entries,json=teFrrInterfaceEntries,proto3" json:"te_frr_interface_entries,omitempty"`
	// Number of TE FRR protected next-hop entries
	TeFrrNextHopEntries uint32 `protobuf:"varint,57,opt,name=te_frr_next_hop_entries,json=teFrrNextHopEntries,proto3" json:"te_frr_next_hop_entries,omitempty"`
	// Number of TE MidPoints forwarding entries
	TeMidPointsEntries uint32 `protobuf:"varint,58,opt,name=te_mid_points_entries,json=teMidPointsEntries,proto3" json:"te_mid_points_entries,omitempty"`
	// Number of TE FRR MidPoints forwarding entries
	TeFrrMidPointsEntries uint32 `protobuf:"varint,59,opt,name=te_frr_mid_points_entries,json=teFrrMidPointsEntries,proto3" json:"te_frr_mid_points_entries,omitempty"`
	// Number of TE internal forwarding entries
	TeInternalEntries uint32 `protobuf:"varint,60,opt,name=te_internal_entries,json=teInternalEntries,proto3" json:"te_internal_entries,omitempty"`
	// Number of TE internal forwarding entries
	TeFrrInternalEntries uint32 `protobuf:"varint,61,opt,name=te_frr_internal_entries,json=teFrrInternalEntries,proto3" json:"te_frr_internal_entries,omitempty"`
	// Total forwarding updates from LSD to LFDs
	TotalForwardingUpdates uint32 `protobuf:"varint,62,opt,name=total_forwarding_updates,json=totalForwardingUpdates,proto3" json:"total_forwarding_updates,omitempty"`
	// Total forwarding update messages from LSD to LFDs
	TotalForwardingUpdateMessages uint32 `protobuf:"varint,63,opt,name=total_forwarding_update_messages,json=totalForwardingUpdateMessages,proto3" json:"total_forwarding_update_messages,omitempty"`
	// Total forwarding updates from MRIB to LFDs
	TotalP2MpForwardingUpdates uint32 `protobuf:"varint,64,opt,name=total_p2_mp_forwarding_updates,json=totalP2MpForwardingUpdates,proto3" json:"total_p2_mp_forwarding_updates,omitempty"`
	// Total p2mp forwarding add/modify messages from MRIB to LFDs
	TotalP2MpForwardingAddedOrModifyMessages uint32 `protobuf:"varint,65,opt,name=total_p2_mp_forwarding_added_or_modify_messages,json=totalP2MpForwardingAddedOrModifyMessages,proto3" json:"total_p2_mp_forwarding_added_or_modify_messages,omitempty"`
	// Total p2mp forwarding del messages from MRIB to LFDs
	TotalP2MpForwardingDeleteMessages uint32 `protobuf:"varint,66,opt,name=total_p2_mp_forwarding_delete_messages,json=totalP2MpForwardingDeleteMessages,proto3" json:"total_p2_mp_forwarding_delete_messages,omitempty"`
	// Total p2mp forwarding messages dropped from MRIB to LFDs
	TotalP2MpForwardingDropMessages uint32 `protobuf:"varint,67,opt,name=total_p2_mp_forwarding_drop_messages,json=totalP2MpForwardingDropMessages,proto3" json:"total_p2_mp_forwarding_drop_messages,omitempty"`
	// Total IIR triggered p2mp forwarding MRIB messages dropped
	TotalP2MpIirForwardingDropMessages uint32 `protobuf:"varint,68,opt,name=total_p2_mp_iir_forwarding_drop_messages,json=totalP2MpIirForwardingDropMessages,proto3" json:"total_p2_mp_iir_forwarding_drop_messages,omitempty"`
	// Lowest label in use
	LowestLabel uint32 `protobuf:"varint,69,opt,name=lowest_label,json=lowestLabel,proto3" json:"lowest_label,omitempty"`
	// Highest Label in use
	HighestLabel uint32 `protobuf:"varint,70,opt,name=highest_label,json=highestLabel,proto3" json:"highest_label,omitempty"`
	// Number of TE tunnels treated as non-protected
	IgnoreProtect uint32 `protobuf:"varint,71,opt,name=ignore_protect,json=ignoreProtect,proto3" json:"ignore_protect,omitempty"`
	// Number of MTE tunnel head entries
	MteHeadEntries uint32 `protobuf:"varint,72,opt,name=mte_head_entries,json=mteHeadEntries,proto3" json:"mte_head_entries,omitempty"`
	// Number of MTE local entries
	MteLlEntries uint32 `protobuf:"varint,73,opt,name=mte_ll_entries,json=mteLlEntries,proto3" json:"mte_ll_entries,omitempty"`
	// Number of MTE midpoint entries
	MteMidpointEntries uint32 `protobuf:"varint,74,opt,name=mte_midpoint_entries,json=mteMidpointEntries,proto3" json:"mte_midpoint_entries,omitempty"`
	// Number of global FIB packets dropped
	GlobalDroppedPackets uint64 `protobuf:"varint,75,opt,name=global_dropped_packets,json=globalDroppedPackets,proto3" json:"global_dropped_packets,omitempty"`
	// Number of global FIB packets fragmented
	GlobalFragmentedPackets uint64 `protobuf:"varint,76,opt,name=global_fragmented_packets,json=globalFragmentedPackets,proto3" json:"global_fragmented_packets,omitempty"`
	// Number of global failed lookups
	GlobalFailedLookups uint64 `protobuf:"varint,77,opt,name=global_failed_lookups,json=globalFailedLookups,proto3" json:"global_failed_lookups,omitempty"`
	// Number of labels with RPF
	LrpfEntries uint32 `protobuf:"varint,78,opt,name=lrpf_entries,json=lrpfEntries,proto3" json:"lrpf_entries,omitempty"`
}

func (x *MplsFwdingSummary) Reset() {
	*x = MplsFwdingSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsFwdingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsFwdingSummary) ProtoMessage() {}

func (x *MplsFwdingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsFwdingSummary.ProtoReflect.Descriptor instead.
func (*MplsFwdingSummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescGZIP(), []int{1}
}

func (x *MplsFwdingSummary) GetIpv4ImpositionEntries() uint32 {
	if x != nil {
		return x.Ipv4ImpositionEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetReservedLabelEntries() uint32 {
	if x != nil {
		return x.ReservedLabelEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetLabelSwitchedEntries() uint32 {
	if x != nil {
		return x.LabelSwitchedEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetDeletedStaleEntries() uint32 {
	if x != nil {
		return x.DeletedStaleEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeHeadEntries() uint32 {
	if x != nil {
		return x.TeHeadEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeFrrHeadEntries() uint32 {
	if x != nil {
		return x.TeFrrHeadEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeFrrInterfaceEntries() uint32 {
	if x != nil {
		return x.TeFrrInterfaceEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeFrrNextHopEntries() uint32 {
	if x != nil {
		return x.TeFrrNextHopEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeMidPointsEntries() uint32 {
	if x != nil {
		return x.TeMidPointsEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeFrrMidPointsEntries() uint32 {
	if x != nil {
		return x.TeFrrMidPointsEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeInternalEntries() uint32 {
	if x != nil {
		return x.TeInternalEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTeFrrInternalEntries() uint32 {
	if x != nil {
		return x.TeFrrInternalEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetTotalForwardingUpdates() uint32 {
	if x != nil {
		return x.TotalForwardingUpdates
	}
	return 0
}

func (x *MplsFwdingSummary) GetTotalForwardingUpdateMessages() uint32 {
	if x != nil {
		return x.TotalForwardingUpdateMessages
	}
	return 0
}

func (x *MplsFwdingSummary) GetTotalP2MpForwardingUpdates() uint32 {
	if x != nil {
		return x.TotalP2MpForwardingUpdates
	}
	return 0
}

func (x *MplsFwdingSummary) GetTotalP2MpForwardingAddedOrModifyMessages() uint32 {
	if x != nil {
		return x.TotalP2MpForwardingAddedOrModifyMessages
	}
	return 0
}

func (x *MplsFwdingSummary) GetTotalP2MpForwardingDeleteMessages() uint32 {
	if x != nil {
		return x.TotalP2MpForwardingDeleteMessages
	}
	return 0
}

func (x *MplsFwdingSummary) GetTotalP2MpForwardingDropMessages() uint32 {
	if x != nil {
		return x.TotalP2MpForwardingDropMessages
	}
	return 0
}

func (x *MplsFwdingSummary) GetTotalP2MpIirForwardingDropMessages() uint32 {
	if x != nil {
		return x.TotalP2MpIirForwardingDropMessages
	}
	return 0
}

func (x *MplsFwdingSummary) GetLowestLabel() uint32 {
	if x != nil {
		return x.LowestLabel
	}
	return 0
}

func (x *MplsFwdingSummary) GetHighestLabel() uint32 {
	if x != nil {
		return x.HighestLabel
	}
	return 0
}

func (x *MplsFwdingSummary) GetIgnoreProtect() uint32 {
	if x != nil {
		return x.IgnoreProtect
	}
	return 0
}

func (x *MplsFwdingSummary) GetMteHeadEntries() uint32 {
	if x != nil {
		return x.MteHeadEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetMteLlEntries() uint32 {
	if x != nil {
		return x.MteLlEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetMteMidpointEntries() uint32 {
	if x != nil {
		return x.MteMidpointEntries
	}
	return 0
}

func (x *MplsFwdingSummary) GetGlobalDroppedPackets() uint64 {
	if x != nil {
		return x.GlobalDroppedPackets
	}
	return 0
}

func (x *MplsFwdingSummary) GetGlobalFragmentedPackets() uint64 {
	if x != nil {
		return x.GlobalFragmentedPackets
	}
	return 0
}

func (x *MplsFwdingSummary) GetGlobalFailedLookups() uint64 {
	if x != nil {
		return x.GlobalFailedLookups
	}
	return 0
}

func (x *MplsFwdingSummary) GetLrpfEntries() uint32 {
	if x != nil {
		return x.LrpfEntries
	}
	return 0
}

var File_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDesc = []byte{
	0x0a, 0x64, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x66, 0x77, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4a, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x37, 0x0a, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x77, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x0c, 0x0a, 0x13,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x77, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x65, 0x46, 0x72, 0x72, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x65, 0x46, 0x72, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x65,
	0x46, 0x72, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x74, 0x65, 0x4d, 0x69, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x6d,
	0x69, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x65, 0x46, 0x72, 0x72, 0x4d, 0x69,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x17, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x74, 0x65, 0x46, 0x72, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x32, 0x5f, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x32, 0x4d, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x2f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x32, 0x5f, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x32, 0x4d, 0x70,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4f,
	0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x26, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x32, 0x5f, 0x6d, 0x70, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x32, 0x4d, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x32, 0x5f, 0x6d,
	0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x32, 0x4d, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x28, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x32, 0x5f, 0x6d, 0x70,
	0x5f, 0x69, 0x69, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x32, 0x4d, 0x70, 0x49, 0x69,
	0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x73,
	0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x6f, 0x77, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x74, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x74, 0x65, 0x5f, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x74, 0x65, 0x4c, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x74, 0x65, 0x5f, 0x6d, 0x69,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x74, 0x65, 0x4d, 0x69, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x72, 0x70, 0x66, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x72, 0x70, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_goTypes = []interface{}{
	(*MplsFwdingSummary_KEYS)(nil), // 0: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.forwarding_summary.mpls_fwding_summary_KEYS
	(*MplsFwdingSummary)(nil),      // 1: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.forwarding_summary.mpls_fwding_summary
}
var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsFwdingSummary_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsFwdingSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto = out.File
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_forwarding_summary_mpls_fwding_summary_proto_depIdxs = nil
}
