// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/mpls_forwarding/nodes/node/label_fib/informations/information/mpls_sh_leaf.proto

package cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Information about label leaf
type MplsShLeaf_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName   string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	LabelValue uint32 `protobuf:"varint,2,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty"`
	Eos        string `protobuf:"bytes,3,opt,name=eos,proto3" json:"eos,omitempty"`
}

func (x *MplsShLeaf_KEYS) Reset() {
	*x = MplsShLeaf_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsShLeaf_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsShLeaf_KEYS) ProtoMessage() {}

func (x *MplsShLeaf_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsShLeaf_KEYS.ProtoReflect.Descriptor instead.
func (*MplsShLeaf_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescGZIP(), []int{0}
}

func (x *MplsShLeaf_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *MplsShLeaf_KEYS) GetLabelValue() uint32 {
	if x != nil {
		return x.LabelValue
	}
	return 0
}

func (x *MplsShLeaf_KEYS) GetEos() string {
	if x != nil {
		return x.Eos
	}
	return ""
}

type MplsShLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local label
	LeafLocalLabel uint32 `protobuf:"varint,50,opt,name=leaf_local_label,json=leafLocalLabel,proto3" json:"leaf_local_label,omitempty"`
	// EOS bit
	EosBit uint32 `protobuf:"varint,51,opt,name=eos_bit,json=eosBit,proto3" json:"eos_bit,omitempty"`
	// Label-infos in FIB leaf
	LabelInformation []*MplsAdjInfo `protobuf:"bytes,52,rep,name=label_information,json=labelInformation,proto3" json:"label_information,omitempty"`
	// LDI-info in FIB leaf
	LdiInformation *MplsLdiInfo `protobuf:"bytes,53,opt,name=ldi_information,json=ldiInformation,proto3" json:"ldi_information,omitempty"`
	// Hardware info
	HardwareInformation []byte `protobuf:"bytes,54,opt,name=hardware_information,json=hardwareInformation,proto3" json:"hardware_information,omitempty"`
	// Number of references to the leaf
	LeafReferanceCount uint32 `protobuf:"varint,55,opt,name=leaf_referance_count,json=leafReferanceCount,proto3" json:"leaf_referance_count,omitempty"`
	// The leaf flags
	LeafFlags uint32 `protobuf:"varint,56,opt,name=leaf_flags,json=leafFlags,proto3" json:"leaf_flags,omitempty"`
	// Number of references to the pathlist
	PathListReferanceCount uint32 `protobuf:"varint,57,opt,name=path_list_referance_count,json=pathListReferanceCount,proto3" json:"path_list_referance_count,omitempty"`
	// The pathlist flags
	PathListFlags uint32 `protobuf:"varint,58,opt,name=path_list_flags,json=pathListFlags,proto3" json:"path_list_flags,omitempty"`
	// Number of references to the LDI
	LdiReferanceCount uint32 `protobuf:"varint,59,opt,name=ldi_referance_count,json=ldiReferanceCount,proto3" json:"ldi_referance_count,omitempty"`
	// The LDI flags
	LdiFlags uint32 `protobuf:"varint,60,opt,name=ldi_flags,json=ldiFlags,proto3" json:"ldi_flags,omitempty"`
	// The LDI type
	LdiType uint32 `protobuf:"varint,61,opt,name=ldi_type,json=ldiType,proto3" json:"ldi_type,omitempty"`
	// The pointer to the LDI
	LdiPointer uint32 `protobuf:"varint,62,opt,name=ldi_pointer,json=ldiPointer,proto3" json:"ldi_pointer,omitempty"`
	// The LW-LDI type
	LwLdiType uint32 `protobuf:"varint,63,opt,name=lw_ldi_type,json=lwLdiType,proto3" json:"lw_ldi_type,omitempty"`
	// The pointer to the LW-LDI
	LwLdiPointer uint32 `protobuf:"varint,64,opt,name=lw_ldi_pointer,json=lwLdiPointer,proto3" json:"lw_ldi_pointer,omitempty"`
	// The LW-LDI refcounter
	LwLdiRefernaceCount uint32 `protobuf:"varint,65,opt,name=lw_ldi_refernace_count,json=lwLdiRefernaceCount,proto3" json:"lw_ldi_refernace_count,omitempty"`
	// The pointer to the shared LDI in LW-LDI
	LwSharedLdiPointer uint32 `protobuf:"varint,66,opt,name=lw_shared_ldi_pointer,json=lwSharedLdiPointer,proto3" json:"lw_shared_ldi_pointer,omitempty"`
	// The LSPA flags
	LspaFlags uint32 `protobuf:"varint,67,opt,name=lspa_flags,json=lspaFlags,proto3" json:"lspa_flags,omitempty"`
	// The AFI table ID
	AfiTableId uint32 `protobuf:"varint,68,opt,name=afi_table_id,json=afiTableId,proto3" json:"afi_table_id,omitempty"`
	// The unicast or multicast label
	MulticastLabel bool `protobuf:"varint,69,opt,name=multicast_label,json=multicastLabel,proto3" json:"multicast_label,omitempty"`
	// The multicast info
	MulticastInformation *MplsMcastInfo `protobuf:"bytes,70,opt,name=multicast_information,json=multicastInformation,proto3" json:"multicast_information,omitempty"`
	// The time of last update in msec
	LeafTimeInMilliSeconds uint64 `protobuf:"varint,71,opt,name=leaf_time_in_milli_seconds,json=leafTimeInMilliSeconds,proto3" json:"leaf_time_in_milli_seconds,omitempty"`
}

func (x *MplsShLeaf) Reset() {
	*x = MplsShLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsShLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsShLeaf) ProtoMessage() {}

func (x *MplsShLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsShLeaf.ProtoReflect.Descriptor instead.
func (*MplsShLeaf) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescGZIP(), []int{1}
}

func (x *MplsShLeaf) GetLeafLocalLabel() uint32 {
	if x != nil {
		return x.LeafLocalLabel
	}
	return 0
}

func (x *MplsShLeaf) GetEosBit() uint32 {
	if x != nil {
		return x.EosBit
	}
	return 0
}

func (x *MplsShLeaf) GetLabelInformation() []*MplsAdjInfo {
	if x != nil {
		return x.LabelInformation
	}
	return nil
}

func (x *MplsShLeaf) GetLdiInformation() *MplsLdiInfo {
	if x != nil {
		return x.LdiInformation
	}
	return nil
}

func (x *MplsShLeaf) GetHardwareInformation() []byte {
	if x != nil {
		return x.HardwareInformation
	}
	return nil
}

func (x *MplsShLeaf) GetLeafReferanceCount() uint32 {
	if x != nil {
		return x.LeafReferanceCount
	}
	return 0
}

func (x *MplsShLeaf) GetLeafFlags() uint32 {
	if x != nil {
		return x.LeafFlags
	}
	return 0
}

func (x *MplsShLeaf) GetPathListReferanceCount() uint32 {
	if x != nil {
		return x.PathListReferanceCount
	}
	return 0
}

func (x *MplsShLeaf) GetPathListFlags() uint32 {
	if x != nil {
		return x.PathListFlags
	}
	return 0
}

func (x *MplsShLeaf) GetLdiReferanceCount() uint32 {
	if x != nil {
		return x.LdiReferanceCount
	}
	return 0
}

func (x *MplsShLeaf) GetLdiFlags() uint32 {
	if x != nil {
		return x.LdiFlags
	}
	return 0
}

func (x *MplsShLeaf) GetLdiType() uint32 {
	if x != nil {
		return x.LdiType
	}
	return 0
}

func (x *MplsShLeaf) GetLdiPointer() uint32 {
	if x != nil {
		return x.LdiPointer
	}
	return 0
}

func (x *MplsShLeaf) GetLwLdiType() uint32 {
	if x != nil {
		return x.LwLdiType
	}
	return 0
}

func (x *MplsShLeaf) GetLwLdiPointer() uint32 {
	if x != nil {
		return x.LwLdiPointer
	}
	return 0
}

func (x *MplsShLeaf) GetLwLdiRefernaceCount() uint32 {
	if x != nil {
		return x.LwLdiRefernaceCount
	}
	return 0
}

func (x *MplsShLeaf) GetLwSharedLdiPointer() uint32 {
	if x != nil {
		return x.LwSharedLdiPointer
	}
	return 0
}

func (x *MplsShLeaf) GetLspaFlags() uint32 {
	if x != nil {
		return x.LspaFlags
	}
	return 0
}

func (x *MplsShLeaf) GetAfiTableId() uint32 {
	if x != nil {
		return x.AfiTableId
	}
	return 0
}

func (x *MplsShLeaf) GetMulticastLabel() bool {
	if x != nil {
		return x.MulticastLabel
	}
	return false
}

func (x *MplsShLeaf) GetMulticastInformation() *MplsMcastInfo {
	if x != nil {
		return x.MulticastInformation
	}
	return nil
}

func (x *MplsShLeaf) GetLeafTimeInMilliSeconds() uint64 {
	if x != nil {
		return x.LeafTimeInMilliSeconds
	}
	return 0
}

type MplsFwdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L3 MTU
	L3Mtu uint32 `protobuf:"varint,1,opt,name=l3_mtu,json=l3Mtu,proto3" json:"l3_mtu,omitempty"`
	// Total encapsulation size: L2 + MPLS
	TotalEncapsulationSize uint32 `protobuf:"varint,2,opt,name=total_encapsulation_size,json=totalEncapsulationSize,proto3" json:"total_encapsulation_size,omitempty"`
	// Length of L2 encapsulation
	MacSize uint32 `protobuf:"varint,3,opt,name=mac_size,json=macSize,proto3" json:"mac_size,omitempty"`
	// Label stack
	LabelStack []uint32 `protobuf:"varint,4,rep,packed,name=label_stack,json=labelStack,proto3" json:"label_stack,omitempty"`
	// Number of packets switched
	TransmitNumberOfPacketsSwitched uint64 `protobuf:"varint,5,opt,name=transmit_number_of_packets_switched,json=transmitNumberOfPacketsSwitched,proto3" json:"transmit_number_of_packets_switched,omitempty"`
	// Number of Bytes switched
	TransmitNumberOfBytesSwitched uint64 `protobuf:"varint,6,opt,name=transmit_number_of_bytes_switched,json=transmitNumberOfBytesSwitched,proto3" json:"transmit_number_of_bytes_switched,omitempty"`
	// Status
	Status int32 `protobuf:"zigzag32,7,opt,name=status,proto3" json:"status,omitempty"`
	// Next hop interface
	NextHopInterface string `protobuf:"bytes,8,opt,name=next_hop_interface,json=nextHopInterface,proto3" json:"next_hop_interface,omitempty"`
	// The address family (V4/V6)
	NextHopProtocol string `protobuf:"bytes,9,opt,name=next_hop_protocol,json=nextHopProtocol,proto3" json:"next_hop_protocol,omitempty"`
	// Next hop address in string format
	NextHopString string `protobuf:"bytes,10,opt,name=next_hop_string,json=nextHopString,proto3" json:"next_hop_string,omitempty"`
}

func (x *MplsFwdInfo) Reset() {
	*x = MplsFwdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsFwdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsFwdInfo) ProtoMessage() {}

func (x *MplsFwdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsFwdInfo.ProtoReflect.Descriptor instead.
func (*MplsFwdInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescGZIP(), []int{2}
}

func (x *MplsFwdInfo) GetL3Mtu() uint32 {
	if x != nil {
		return x.L3Mtu
	}
	return 0
}

func (x *MplsFwdInfo) GetTotalEncapsulationSize() uint32 {
	if x != nil {
		return x.TotalEncapsulationSize
	}
	return 0
}

func (x *MplsFwdInfo) GetMacSize() uint32 {
	if x != nil {
		return x.MacSize
	}
	return 0
}

func (x *MplsFwdInfo) GetLabelStack() []uint32 {
	if x != nil {
		return x.LabelStack
	}
	return nil
}

func (x *MplsFwdInfo) GetTransmitNumberOfPacketsSwitched() uint64 {
	if x != nil {
		return x.TransmitNumberOfPacketsSwitched
	}
	return 0
}

func (x *MplsFwdInfo) GetTransmitNumberOfBytesSwitched() uint64 {
	if x != nil {
		return x.TransmitNumberOfBytesSwitched
	}
	return 0
}

func (x *MplsFwdInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MplsFwdInfo) GetNextHopInterface() string {
	if x != nil {
		return x.NextHopInterface
	}
	return ""
}

func (x *MplsFwdInfo) GetNextHopProtocol() string {
	if x != nil {
		return x.NextHopProtocol
	}
	return ""
}

func (x *MplsFwdInfo) GetNextHopString() string {
	if x != nil {
		return x.NextHopString
	}
	return ""
}

type MplsAdjInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label-Info type
	LabelInformationType uint32 `protobuf:"varint,1,opt,name=label_information_type,json=labelInformationType,proto3" json:"label_information_type,omitempty"`
	// Local label
	LocalLabel uint32 `protobuf:"varint,2,opt,name=local_label,json=localLabel,proto3" json:"local_label,omitempty"`
	// Outgoing label
	OutgoingLabel uint32 `protobuf:"varint,3,opt,name=outgoing_label,json=outgoingLabel,proto3" json:"outgoing_label,omitempty"`
	// MPLS Adjacency flags
	MplsAdjacencyFlags uint32 `protobuf:"varint,4,opt,name=mpls_adjacency_flags,json=mplsAdjacencyFlags,proto3" json:"mpls_adjacency_flags,omitempty"`
	// Tunnel id present?
	TunnelIdPresent bool `protobuf:"varint,5,opt,name=tunnel_id_present,json=tunnelIdPresent,proto3" json:"tunnel_id_present,omitempty"`
	// Outgoing interface
	OutgoingInterface string `protobuf:"bytes,6,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"`
	// Outgoing Physical Interface
	OutgoingPhysicalInterface string `protobuf:"bytes,7,opt,name=outgoing_physical_interface,json=outgoingPhysicalInterface,proto3" json:"outgoing_physical_interface,omitempty"`
	// Tunnel Interface
	TunnelInterface string `protobuf:"bytes,8,opt,name=tunnel_interface,json=tunnelInterface,proto3" json:"tunnel_interface,omitempty"`
	// Detail label info
	LabelInformationDetail    *MplsFwdInfo `protobuf:"bytes,9,opt,name=label_information_detail,json=labelInformationDetail,proto3" json:"label_information_detail,omitempty"`
	LabelInformationPathIndex uint32       `protobuf:"varint,10,opt,name=label_information_path_index,json=labelInformationPathIndex,proto3" json:"label_information_path_index,omitempty"`
	// NHinfo Type
	LabelInformationNextHopType string `protobuf:"bytes,11,opt,name=label_information_next_hop_type,json=labelInformationNextHopType,proto3" json:"label_information_next_hop_type,omitempty"`
	// The address family (v4/v6)
	LabelInformationNextHopProtocol string `protobuf:"bytes,12,opt,name=label_information_next_hop_protocol,json=labelInformationNextHopProtocol,proto3" json:"label_information_next_hop_protocol,omitempty"`
	// Bytes transmitted per LSP
	TxBytes uint64 `protobuf:"varint,13,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	// Packets transmitted per LSP
	TxPackets uint64 `protobuf:"varint,14,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	// Output Interface in string format
	OutgoingInterfaceString string `protobuf:"bytes,15,opt,name=outgoing_interface_string,json=outgoingInterfaceString,proto3" json:"outgoing_interface_string,omitempty"`
	// Output Label in string format
	OutgoingLabelString string `protobuf:"bytes,16,opt,name=outgoing_label_string,json=outgoingLabelString,proto3" json:"outgoing_label_string,omitempty"`
	// Prefix Or ID
	PrefixOrId string `protobuf:"bytes,17,opt,name=prefix_or_id,json=prefixOrId,proto3" json:"prefix_or_id,omitempty"`
	// Next hop address in string format
	LabelInformationNextHopString string `protobuf:"bytes,18,opt,name=label_information_next_hop_string,json=labelInformationNextHopString,proto3" json:"label_information_next_hop_string,omitempty"`
	// The version of the route
	LabelInformationRouteVersion uint64 `protobuf:"varint,19,opt,name=label_information_route_version,json=labelInformationRouteVersion,proto3" json:"label_information_route_version,omitempty"`
	// The time of last update in msec
	LabelInformationTimeInMilliSeconds uint64 `protobuf:"varint,20,opt,name=label_information_time_in_milli_seconds,json=labelInformationTimeInMilliSeconds,proto3" json:"label_information_time_in_milli_seconds,omitempty"`
}

func (x *MplsAdjInfo) Reset() {
	*x = MplsAdjInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsAdjInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsAdjInfo) ProtoMessage() {}

func (x *MplsAdjInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsAdjInfo.ProtoReflect.Descriptor instead.
func (*MplsAdjInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescGZIP(), []int{3}
}

func (x *MplsAdjInfo) GetLabelInformationType() uint32 {
	if x != nil {
		return x.LabelInformationType
	}
	return 0
}

func (x *MplsAdjInfo) GetLocalLabel() uint32 {
	if x != nil {
		return x.LocalLabel
	}
	return 0
}

func (x *MplsAdjInfo) GetOutgoingLabel() uint32 {
	if x != nil {
		return x.OutgoingLabel
	}
	return 0
}

func (x *MplsAdjInfo) GetMplsAdjacencyFlags() uint32 {
	if x != nil {
		return x.MplsAdjacencyFlags
	}
	return 0
}

func (x *MplsAdjInfo) GetTunnelIdPresent() bool {
	if x != nil {
		return x.TunnelIdPresent
	}
	return false
}

func (x *MplsAdjInfo) GetOutgoingInterface() string {
	if x != nil {
		return x.OutgoingInterface
	}
	return ""
}

func (x *MplsAdjInfo) GetOutgoingPhysicalInterface() string {
	if x != nil {
		return x.OutgoingPhysicalInterface
	}
	return ""
}

func (x *MplsAdjInfo) GetTunnelInterface() string {
	if x != nil {
		return x.TunnelInterface
	}
	return ""
}

func (x *MplsAdjInfo) GetLabelInformationDetail() *MplsFwdInfo {
	if x != nil {
		return x.LabelInformationDetail
	}
	return nil
}

func (x *MplsAdjInfo) GetLabelInformationPathIndex() uint32 {
	if x != nil {
		return x.LabelInformationPathIndex
	}
	return 0
}

func (x *MplsAdjInfo) GetLabelInformationNextHopType() string {
	if x != nil {
		return x.LabelInformationNextHopType
	}
	return ""
}

func (x *MplsAdjInfo) GetLabelInformationNextHopProtocol() string {
	if x != nil {
		return x.LabelInformationNextHopProtocol
	}
	return ""
}

func (x *MplsAdjInfo) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *MplsAdjInfo) GetTxPackets() uint64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *MplsAdjInfo) GetOutgoingInterfaceString() string {
	if x != nil {
		return x.OutgoingInterfaceString
	}
	return ""
}

func (x *MplsAdjInfo) GetOutgoingLabelString() string {
	if x != nil {
		return x.OutgoingLabelString
	}
	return ""
}

func (x *MplsAdjInfo) GetPrefixOrId() string {
	if x != nil {
		return x.PrefixOrId
	}
	return ""
}

func (x *MplsAdjInfo) GetLabelInformationNextHopString() string {
	if x != nil {
		return x.LabelInformationNextHopString
	}
	return ""
}

func (x *MplsAdjInfo) GetLabelInformationRouteVersion() uint64 {
	if x != nil {
		return x.LabelInformationRouteVersion
	}
	return 0
}

func (x *MplsAdjInfo) GetLabelInformationTimeInMilliSeconds() uint64 {
	if x != nil {
		return x.LabelInformationTimeInMilliSeconds
	}
	return 0
}

// Detailed load sharing information for mpls table entries
type MplsLdiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hardware info
	LdiHardwareInformation []byte `protobuf:"bytes,1,opt,name=ldi_hardware_information,json=ldiHardwareInformation,proto3" json:"ldi_hardware_information,omitempty"`
}

func (x *MplsLdiInfo) Reset() {
	*x = MplsLdiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsLdiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsLdiInfo) ProtoMessage() {}

func (x *MplsLdiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsLdiInfo.ProtoReflect.Descriptor instead.
func (*MplsLdiInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescGZIP(), []int{4}
}

func (x *MplsLdiInfo) GetLdiHardwareInformation() []byte {
	if x != nil {
		return x.LdiHardwareInformation
	}
	return nil
}

// Information for mpls multicast entries
type MplsMcastInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MOL base flags
	MulticastMolBaseFlags uint32 `protobuf:"varint,1,opt,name=multicast_mol_base_flags,json=multicastMolBaseFlags,proto3" json:"multicast_mol_base_flags,omitempty"`
	// MOL flags
	MulticastMolFlags uint32 `protobuf:"varint,2,opt,name=multicast_mol_flags,json=multicastMolFlags,proto3" json:"multicast_mol_flags,omitempty"`
	// MOL refcount
	MulticastMolReferanceCount uint32 `protobuf:"varint,3,opt,name=multicast_mol_referance_count,json=multicastMolReferanceCount,proto3" json:"multicast_mol_referance_count,omitempty"`
	// multicast mpls tunnel
	MulticastTunnelInterfaceHandler string `protobuf:"bytes,4,opt,name=multicast_tunnel_interface_handler,json=multicastTunnelInterfaceHandler,proto3" json:"multicast_tunnel_interface_handler,omitempty"`
	// multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes
	MulticastTunnelId uint32 `protobuf:"varint,5,opt,name=multicast_tunnel_id,json=multicastTunnelId,proto3" json:"multicast_tunnel_id,omitempty"`
	// multicast nhinfo for p2mp TE Head
	MulticastTunnelNextHopInformation uint32 `protobuf:"varint,6,opt,name=multicast_tunnel_next_hop_information,json=multicastTunnelNextHopInformation,proto3" json:"multicast_tunnel_next_hop_information,omitempty"`
	// multicast LSPVIF for MLDP Tunnels
	MulticastTunnelLspvif uint32 `protobuf:"varint,7,opt,name=multicast_tunnel_lspvif,json=multicastTunnelLspvif,proto3" json:"multicast_tunnel_lspvif,omitempty"`
	// num multicast mpls output paths
	MulticastMplsOutputPaths uint32 `protobuf:"varint,8,opt,name=multicast_mpls_output_paths,json=multicastMplsOutputPaths,proto3" json:"multicast_mpls_output_paths,omitempty"`
	// num multicast mpls prot output paths
	MulticastMplsProtocolOutputPaths uint32 `protobuf:"varint,9,opt,name=multicast_mpls_protocol_output_paths,json=multicastMplsProtocolOutputPaths,proto3" json:"multicast_mpls_protocol_output_paths,omitempty"`
	// num multicast mpls local output paths
	MulticastMplsLocalOutputPaths uint32 `protobuf:"varint,10,opt,name=multicast_mpls_local_output_paths,json=multicastMplsLocalOutputPaths,proto3" json:"multicast_mpls_local_output_paths,omitempty"`
	// The multicast RPF-ID
	MulticastRpfId uint32 `protobuf:"varint,11,opt,name=multicast_rpf_id,json=multicastRpfId,proto3" json:"multicast_rpf_id,omitempty"`
	// The multicast ENCAP-ID
	MulticastEncapId uint32 `protobuf:"varint,12,opt,name=multicast_encap_id,json=multicastEncapId,proto3" json:"multicast_encap_id,omitempty"`
	// The multicast platform data len
	MulticastPlatformDataLength uint32 `protobuf:"varint,13,opt,name=multicast_platform_data_length,json=multicastPlatformDataLength,proto3" json:"multicast_platform_data_length,omitempty"`
	// The multicast platform data
	MulticastPlatformData []byte `protobuf:"bytes,14,opt,name=multicast_platform_data,json=multicastPlatformData,proto3" json:"multicast_platform_data,omitempty"`
}

func (x *MplsMcastInfo) Reset() {
	*x = MplsMcastInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsMcastInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsMcastInfo) ProtoMessage() {}

func (x *MplsMcastInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsMcastInfo.ProtoReflect.Descriptor instead.
func (*MplsMcastInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescGZIP(), []int{5}
}

func (x *MplsMcastInfo) GetMulticastMolBaseFlags() uint32 {
	if x != nil {
		return x.MulticastMolBaseFlags
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastMolFlags() uint32 {
	if x != nil {
		return x.MulticastMolFlags
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastMolReferanceCount() uint32 {
	if x != nil {
		return x.MulticastMolReferanceCount
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastTunnelInterfaceHandler() string {
	if x != nil {
		return x.MulticastTunnelInterfaceHandler
	}
	return ""
}

func (x *MplsMcastInfo) GetMulticastTunnelId() uint32 {
	if x != nil {
		return x.MulticastTunnelId
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastTunnelNextHopInformation() uint32 {
	if x != nil {
		return x.MulticastTunnelNextHopInformation
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastTunnelLspvif() uint32 {
	if x != nil {
		return x.MulticastTunnelLspvif
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastMplsOutputPaths() uint32 {
	if x != nil {
		return x.MulticastMplsOutputPaths
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastMplsProtocolOutputPaths() uint32 {
	if x != nil {
		return x.MulticastMplsProtocolOutputPaths
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastMplsLocalOutputPaths() uint32 {
	if x != nil {
		return x.MulticastMplsLocalOutputPaths
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastRpfId() uint32 {
	if x != nil {
		return x.MulticastRpfId
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastEncapId() uint32 {
	if x != nil {
		return x.MulticastEncapId
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastPlatformDataLength() uint32 {
	if x != nil {
		return x.MulticastPlatformDataLength
	}
	return 0
}

func (x *MplsMcastInfo) GetMulticastPlatformData() []byte {
	if x != nil {
		return x.MulticastPlatformData
	}
	return nil
}

var File_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDesc = []byte{
	0x0a, 0x6d, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x66, 0x69, 0x62, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5a, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66,
	0x69, 0x62, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x11, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6f, 0x73,
	0x22, 0xe6, 0x09, 0x0a, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x65, 0x61,
	0x66, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x61,
	0x66, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x6f, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6f,
	0x73, 0x42, 0x69, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x69, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x66, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x92, 0x01,
	0x0a, 0x0f, 0x6c, 0x64, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x64, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x66, 0x52, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x61,
	0x66, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x61, 0x74, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x64, 0x69,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x64, 0x69, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x64, 0x69,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x64,
	0x69, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x64, 0x69, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x64, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x64, 0x69, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x64, 0x69, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x77, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x77, 0x4c, 0x64, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x77, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x77, 0x4c, 0x64,
	0x69, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x77, 0x5f, 0x6c,
	0x64, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x77, 0x4c, 0x64, 0x69, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x6c, 0x77, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x77,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x64, 0x69, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x73, 0x70, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x73, 0x70, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x61, 0x66, 0x69, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x66, 0x69, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0xa0, 0x01, 0x0a, 0x15, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x1a, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x6c, 0x65, 0x61, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xce, 0x03, 0x0a, 0x0d, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6c,
	0x33, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x33, 0x4d,
	0x74, 0x75, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x4c, 0x0a, 0x23, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xb2, 0x09, 0x0a, 0x0d, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x41, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x62, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x1f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4c, 0x0a, 0x23, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x1f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x27, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x22, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x49, 0x0a, 0x0d, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x64, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x38, 0x0a, 0x18, 0x6c, 0x64, 0x69, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x16, 0x6c, 0x64, 0x69, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x06, 0x0a, 0x0f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6c, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6c, 0x42, 0x61,
	0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x22, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x73,
	0x70, 0x76, 0x69, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x73, 0x70, 0x76, 0x69,
	0x66, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x4d, 0x70, 0x6c, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x4e, 0x0a, 0x24, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x48, 0x0a, 0x21, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x70, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x70, 0x66, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_goTypes = []interface{}{
	(*MplsShLeaf_KEYS)(nil), // 0: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_sh_leaf_KEYS
	(*MplsShLeaf)(nil),      // 1: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_sh_leaf
	(*MplsFwdInfo)(nil),     // 2: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_fwd_info
	(*MplsAdjInfo)(nil),     // 3: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_adj_info
	(*MplsLdiInfo)(nil),     // 4: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_ldi_info
	(*MplsMcastInfo)(nil),   // 5: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_mcast_info
}
var file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_depIdxs = []int32{
	3, // 0: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_sh_leaf.label_information:type_name -> cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_adj_info
	4, // 1: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_sh_leaf.ldi_information:type_name -> cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_ldi_info
	5, // 2: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_sh_leaf.multicast_information:type_name -> cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_mcast_info
	2, // 3: cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_adj_info.label_information_detail:type_name -> cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information.mpls_fwd_info
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsShLeaf_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsShLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsFwdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsAdjInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsLdiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsMcastInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto = out.File
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_mpls_forwarding_nodes_node_label_fib_informations_information_mpls_sh_leaf_proto_depIdxs = nil
}
