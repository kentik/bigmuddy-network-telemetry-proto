// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_fib_common_oper/fib_statistics/nodes/node/drops/fib_statistics_bag_drops.proto

package cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FIB drop statistics
type FibStatisticsBagDrops_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *FibStatisticsBagDrops_KEYS) Reset() {
	*x = FibStatisticsBagDrops_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibStatisticsBagDrops_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibStatisticsBagDrops_KEYS) ProtoMessage() {}

func (x *FibStatisticsBagDrops_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibStatisticsBagDrops_KEYS.ProtoReflect.Descriptor instead.
func (*FibStatisticsBagDrops_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescGZIP(), []int{0}
}

func (x *FibStatisticsBagDrops_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type FibStatisticsBagDrops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// no route pkt
	NoRoutePackets uint64 `protobuf:"varint,50,opt,name=no_route_packets,json=noRoutePackets,proto3" json:"no_route_packets,omitempty"`
	// Punt generate unreach pkt
	PuntUnreachablePackets uint64 `protobuf:"varint,51,opt,name=punt_unreachable_packets,json=puntUnreachablePackets,proto3" json:"punt_unreachable_packets,omitempty"`
	// DF unreachable pkt
	DfUnreachablePackets uint64 `protobuf:"varint,52,opt,name=df_unreachable_packets,json=dfUnreachablePackets,proto3" json:"df_unreachable_packets,omitempty"`
	// encapsulation failure pkt
	EncapsulationFailurePackets uint64 `protobuf:"varint,53,opt,name=encapsulation_failure_packets,json=encapsulationFailurePackets,proto3" json:"encapsulation_failure_packets,omitempty"`
	// incomplete adjacency pkt
	IncompleteAdjacencyPackets uint64 `protobuf:"varint,54,opt,name=incomplete_adjacency_packets,json=incompleteAdjacencyPackets,proto3" json:"incomplete_adjacency_packets,omitempty"`
	// unresolved prefix pkt
	UnresolvedPrefixPackets uint64 `protobuf:"varint,55,opt,name=unresolved_prefix_packets,json=unresolvedPrefixPackets,proto3" json:"unresolved_prefix_packets,omitempty"`
	// unsupported feature pkt
	UnsupportedFeaturePackets uint64 `protobuf:"varint,56,opt,name=unsupported_feature_packets,json=unsupportedFeaturePackets,proto3" json:"unsupported_feature_packets,omitempty"`
	// discard pkt
	DiscardPackets uint64 `protobuf:"varint,57,opt,name=discard_packets,json=discardPackets,proto3" json:"discard_packets,omitempty"`
	// checksum error pkt
	ChecksumErrorPackets uint64 `protobuf:"varint,58,opt,name=checksum_error_packets,json=checksumErrorPackets,proto3" json:"checksum_error_packets,omitempty"`
	// frag consumed packet pkt
	FragmenationConsumedPackets uint64 `protobuf:"varint,59,opt,name=fragmenation_consumed_packets,json=fragmenationConsumedPackets,proto3" json:"fragmenation_consumed_packets,omitempty"`
	// fragmenation failure pkt
	FragmenationFailurePackets uint64 `protobuf:"varint,60,opt,name=fragmenation_failure_packets,json=fragmenationFailurePackets,proto3" json:"fragmenation_failure_packets,omitempty"`
	// null0 pkt
	NullPackets uint64 `protobuf:"varint,61,opt,name=null_packets,json=nullPackets,proto3" json:"null_packets,omitempty"`
	// RPF check failures pkt
	RpfCheckFailurePackets uint64 `protobuf:"varint,62,opt,name=rpf_check_failure_packets,json=rpfCheckFailurePackets,proto3" json:"rpf_check_failure_packets,omitempty"`
	// ACL in RPF pkt
	AclInRpfPackets uint64 `protobuf:"varint,63,opt,name=acl_in_rpf_packets,json=aclInRpfPackets,proto3" json:"acl_in_rpf_packets,omitempty"`
	// rp dest drop pkt
	RpDestinationDropPackets uint64 `protobuf:"varint,64,opt,name=rp_destination_drop_packets,json=rpDestinationDropPackets,proto3" json:"rp_destination_drop_packets,omitempty"`
	// the total number of drop pkt
	TotalNumberOfDropPackets uint64 `protobuf:"varint,65,opt,name=total_number_of_drop_packets,json=totalNumberOfDropPackets,proto3" json:"total_number_of_drop_packets,omitempty"`
	// mpls disabled in interface
	MplsDisabledInterface uint64 `protobuf:"varint,66,opt,name=mpls_disabled_interface,json=mplsDisabledInterface,proto3" json:"mpls_disabled_interface,omitempty"`
	// GRE tunnel lookup failed drop pkt
	GreLookupFailedDrop uint64 `protobuf:"varint,67,opt,name=gre_lookup_failed_drop,json=greLookupFailedDrop,proto3" json:"gre_lookup_failed_drop,omitempty"`
	// GRE processing errors
	GreErrorDrop uint64 `protobuf:"varint,68,opt,name=gre_error_drop,json=greErrorDrop,proto3" json:"gre_error_drop,omitempty"`
	// LISP Punt drops
	LispPuntDrops uint64 `protobuf:"varint,69,opt,name=lisp_punt_drops,json=lispPuntDrops,proto3" json:"lisp_punt_drops,omitempty"`
	// Lisp encap error drops
	LispEncapErrorDrops uint64 `protobuf:"varint,70,opt,name=lisp_encap_error_drops,json=lispEncapErrorDrops,proto3" json:"lisp_encap_error_drops,omitempty"`
	// Lisp decap error drops
	LispDecapErrorDrops uint64 `protobuf:"varint,71,opt,name=lisp_decap_error_drops,json=lispDecapErrorDrops,proto3" json:"lisp_decap_error_drops,omitempty"`
	// Drops for the packets with multi[le labels
	MultiLabelDrops uint64 `protobuf:"varint,72,opt,name=multi_label_drops,json=multiLabelDrops,proto3" json:"multi_label_drops,omitempty"`
}

func (x *FibStatisticsBagDrops) Reset() {
	*x = FibStatisticsBagDrops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibStatisticsBagDrops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibStatisticsBagDrops) ProtoMessage() {}

func (x *FibStatisticsBagDrops) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibStatisticsBagDrops.ProtoReflect.Descriptor instead.
func (*FibStatisticsBagDrops) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescGZIP(), []int{1}
}

func (x *FibStatisticsBagDrops) GetNoRoutePackets() uint64 {
	if x != nil {
		return x.NoRoutePackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetPuntUnreachablePackets() uint64 {
	if x != nil {
		return x.PuntUnreachablePackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetDfUnreachablePackets() uint64 {
	if x != nil {
		return x.DfUnreachablePackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetEncapsulationFailurePackets() uint64 {
	if x != nil {
		return x.EncapsulationFailurePackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetIncompleteAdjacencyPackets() uint64 {
	if x != nil {
		return x.IncompleteAdjacencyPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetUnresolvedPrefixPackets() uint64 {
	if x != nil {
		return x.UnresolvedPrefixPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetUnsupportedFeaturePackets() uint64 {
	if x != nil {
		return x.UnsupportedFeaturePackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetDiscardPackets() uint64 {
	if x != nil {
		return x.DiscardPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetChecksumErrorPackets() uint64 {
	if x != nil {
		return x.ChecksumErrorPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetFragmenationConsumedPackets() uint64 {
	if x != nil {
		return x.FragmenationConsumedPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetFragmenationFailurePackets() uint64 {
	if x != nil {
		return x.FragmenationFailurePackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetNullPackets() uint64 {
	if x != nil {
		return x.NullPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetRpfCheckFailurePackets() uint64 {
	if x != nil {
		return x.RpfCheckFailurePackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetAclInRpfPackets() uint64 {
	if x != nil {
		return x.AclInRpfPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetRpDestinationDropPackets() uint64 {
	if x != nil {
		return x.RpDestinationDropPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetTotalNumberOfDropPackets() uint64 {
	if x != nil {
		return x.TotalNumberOfDropPackets
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetMplsDisabledInterface() uint64 {
	if x != nil {
		return x.MplsDisabledInterface
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetGreLookupFailedDrop() uint64 {
	if x != nil {
		return x.GreLookupFailedDrop
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetGreErrorDrop() uint64 {
	if x != nil {
		return x.GreErrorDrop
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetLispPuntDrops() uint64 {
	if x != nil {
		return x.LispPuntDrops
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetLispEncapErrorDrops() uint64 {
	if x != nil {
		return x.LispEncapErrorDrops
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetLispDecapErrorDrops() uint64 {
	if x != nil {
		return x.LispDecapErrorDrops
	}
	return 0
}

func (x *FibStatisticsBagDrops) GetMultiLabelDrops() uint64 {
	if x != nil {
		return x.MultiLabelDrops
	}
	return 0
}

var File_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66,
	0x69, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x2f, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x61,
	0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x66, 0x69, 0x62, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x3c, 0x0a, 0x1d, 0x66,
	0x69, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x61,
	0x67, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf6, 0x09, 0x0a, 0x18, 0x66, 0x69,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x61, 0x67,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6e, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x70, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x70, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x66,
	0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x66, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x42, 0x0a, 0x1d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x75, 0x6e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x1d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6c, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e,
	0x75, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x70,
	0x66, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72,
	0x70, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x6e, 0x5f,
	0x72, 0x70, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x61, 0x63, 0x6c, 0x49, 0x6e, 0x52, 0x70, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x72, 0x65,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x67, 0x72, 0x65, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x72, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x70, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c,
	0x69, 0x73, 0x70, 0x50, 0x75, 0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x6c, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x69,
	0x73, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x70, 0x44, 0x65, 0x63, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescData = file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDesc
)

func file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescData)
	})
	return file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDescData
}

var file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_goTypes = []interface{}{
	(*FibStatisticsBagDrops_KEYS)(nil), // 0: cisco_ios_xr_fib_common_oper.fib_statistics.nodes.node.drops.fib_statistics_bag_drops_KEYS
	(*FibStatisticsBagDrops)(nil),      // 1: cisco_ios_xr_fib_common_oper.fib_statistics.nodes.node.drops.fib_statistics_bag_drops
}
var file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_init()
}
func file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_init() {
	if File_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibStatisticsBagDrops_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibStatisticsBagDrops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto = out.File
	file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_rawDesc = nil
	file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_goTypes = nil
	file_cisco_ios_xr_fib_common_oper_fib_statistics_nodes_node_drops_fib_statistics_bag_drops_proto_depIdxs = nil
}
