// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_acl_oper/ipv6_acl_and_prefix_list/access_list_manager/accesses/access/access_list_sequences/access_list_sequence/ipv6_acl_edm_ace.proto

package cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ACLE bag
type Ipv6AclEdmAce_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessListName string `protobuf:"bytes,1,opt,name=access_list_name,json=accessListName,proto3" json:"access_list_name,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *Ipv6AclEdmAce_KEYS) Reset() {
	*x = Ipv6AclEdmAce_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6AclEdmAce_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6AclEdmAce_KEYS) ProtoMessage() {}

func (x *Ipv6AclEdmAce_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6AclEdmAce_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6AclEdmAce_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6AclEdmAce_KEYS) GetAccessListName() string {
	if x != nil {
		return x.AccessListName
	}
	return ""
}

func (x *Ipv6AclEdmAce_KEYS) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type Ipv6AclEdmAce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ACE type (acl, remark)
	IsAceType string `protobuf:"bytes,50,opt,name=is_ace_type,json=isAceType,proto3" json:"is_ace_type,omitempty"`
	// ACLE sequence number
	IsAceSequenceNumber uint32 `protobuf:"varint,51,opt,name=is_ace_sequence_number,json=isAceSequenceNumber,proto3" json:"is_ace_sequence_number,omitempty"`
	// Grant value permit/deny
	IsPacketAllowOrDeny         string `protobuf:"bytes,52,opt,name=is_packet_allow_or_deny,json=isPacketAllowOrDeny,proto3" json:"is_packet_allow_or_deny,omitempty"`
	IsIpv6ProtocolType          int32  `protobuf:"zigzag32,53,opt,name=is_ipv6_protocol_type,json=isIpv6ProtocolType,proto3" json:"is_ipv6_protocol_type,omitempty"`
	IsSourceAddressInNumbers    string `protobuf:"bytes,54,opt,name=is_source_address_in_numbers,json=isSourceAddressInNumbers,proto3" json:"is_source_address_in_numbers,omitempty"`
	IsSourceAddressPrefixLength uint32 `protobuf:"varint,55,opt,name=is_source_address_prefix_length,json=isSourceAddressPrefixLength,proto3" json:"is_source_address_prefix_length,omitempty"`
	// Source Mask
	SourceMask                       string `protobuf:"bytes,56,opt,name=source_mask,json=sourceMask,proto3" json:"source_mask,omitempty"`
	IsDestinationAddressInNumbers    string `protobuf:"bytes,57,opt,name=is_destination_address_in_numbers,json=isDestinationAddressInNumbers,proto3" json:"is_destination_address_in_numbers,omitempty"`
	IsDestinationAddressPrefixLength uint32 `protobuf:"varint,58,opt,name=is_destination_address_prefix_length,json=isDestinationAddressPrefixLength,proto3" json:"is_destination_address_prefix_length,omitempty"`
	// Destination Mask
	DestinationMask string `protobuf:"bytes,59,opt,name=destination_mask,json=destinationMask,proto3" json:"destination_mask,omitempty"`
	// eq, ne, lt, etc...
	IsSourceOperator string `protobuf:"bytes,60,opt,name=is_source_operator,json=isSourceOperator,proto3" json:"is_source_operator,omitempty"`
	IsSourcePort1    uint32 `protobuf:"varint,61,opt,name=is_source_port1,json=isSourcePort1,proto3" json:"is_source_port1,omitempty"`
	IsSourcePort2    uint32 `protobuf:"varint,62,opt,name=is_source_port2,json=isSourcePort2,proto3" json:"is_source_port2,omitempty"`
	// eq, ne, lt, etc...
	IsDestinationOperator string `protobuf:"bytes,63,opt,name=is_destination_operator,json=isDestinationOperator,proto3" json:"is_destination_operator,omitempty"`
	IsDestinationPort1    uint32 `protobuf:"varint,64,opt,name=is_destination_port1,json=isDestinationPort1,proto3" json:"is_destination_port1,omitempty"`
	IsDestinationPort2    uint32 `protobuf:"varint,65,opt,name=is_destination_port2,json=isDestinationPort2,proto3" json:"is_destination_port2,omitempty"`
	IsLogOption           string `protobuf:"bytes,66,opt,name=is_log_option,json=isLogOption,proto3" json:"is_log_option,omitempty"`
	// Counter name
	CounterName         string `protobuf:"bytes,67,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
	IsTcpBitsOperator   string `protobuf:"bytes,68,opt,name=is_tcp_bits_operator,json=isTcpBitsOperator,proto3" json:"is_tcp_bits_operator,omitempty"`
	IsTcpBits           uint32 `protobuf:"varint,69,opt,name=is_tcp_bits,json=isTcpBits,proto3" json:"is_tcp_bits,omitempty"`
	IsTcpBitsMask       uint32 `protobuf:"varint,70,opt,name=is_tcp_bits_mask,json=isTcpBitsMask,proto3" json:"is_tcp_bits_mask,omitempty"`
	IsDscpPresent       int32  `protobuf:"zigzag32,71,opt,name=is_dscp_present,json=isDscpPresent,proto3" json:"is_dscp_present,omitempty"`
	IsDscpValu          uint32 `protobuf:"varint,72,opt,name=is_dscp_valu,json=isDscpValu,proto3" json:"is_dscp_valu,omitempty"`
	IsPrecedencePresent int32  `protobuf:"zigzag32,73,opt,name=is_precedence_present,json=isPrecedencePresent,proto3" json:"is_precedence_present,omitempty"`
	// range from 0 to 7
	IsPrecedenceValue uint32 `protobuf:"varint,74,opt,name=is_precedence_value,json=isPrecedenceValue,proto3" json:"is_precedence_value,omitempty"`
	// Match if routing header is presant
	IsHeaderMatches uint32 `protobuf:"varint,75,opt,name=is_header_matches,json=isHeaderMatches,proto3" json:"is_header_matches,omitempty"`
	// Match if routing header is presant
	IsPacketLengthOperator string `protobuf:"bytes,76,opt,name=is_packet_length_operator,json=isPacketLengthOperator,proto3" json:"is_packet_length_operator,omitempty"`
	IsPacketLengthStart    uint32 `protobuf:"varint,77,opt,name=is_packet_length_start,json=isPacketLengthStart,proto3" json:"is_packet_length_start,omitempty"`
	IsPacketLengthEnd      uint32 `protobuf:"varint,78,opt,name=is_packet_length_end,json=isPacketLengthEnd,proto3" json:"is_packet_length_end,omitempty"`
	IsTimeToLiveOperator   string `protobuf:"bytes,79,opt,name=is_time_to_live_operator,json=isTimeToLiveOperator,proto3" json:"is_time_to_live_operator,omitempty"`
	IsTimeToLiveStart      uint32 `protobuf:"varint,80,opt,name=is_time_to_live_start,json=isTimeToLiveStart,proto3" json:"is_time_to_live_start,omitempty"`
	IsTimeToLiveEnd        uint32 `protobuf:"varint,81,opt,name=is_time_to_live_end,json=isTimeToLiveEnd,proto3" json:"is_time_to_live_end,omitempty"`
	NoStats                int32  `protobuf:"zigzag32,82,opt,name=no_stats,json=noStats,proto3" json:"no_stats,omitempty"`
	Hits                   uint64 `protobuf:"varint,83,opt,name=hits,proto3" json:"hits,omitempty"`
	// Capture option, TRUE if enabled
	Capture uint32 `protobuf:"varint,84,opt,name=capture,proto3" json:"capture,omitempty"`
	// Don't generate the icmp message
	IsIcmpMessageOff  int32  `protobuf:"zigzag32,85,opt,name=is_icmp_message_off,json=isIcmpMessageOff,proto3" json:"is_icmp_message_off,omitempty"`
	IsCommentForEntry string `protobuf:"bytes,86,opt,name=is_comment_for_entry,json=isCommentForEntry,proto3" json:"is_comment_for_entry,omitempty"`
	// Next hop type
	NextHopType string `protobuf:"bytes,87,opt,name=next_hop_type,json=nextHopType,proto3" json:"next_hop_type,omitempty"`
	// Next hop info
	NextHopInfo []*Ipv6AclBagNhInfo `protobuf:"bytes,88,rep,name=next_hop_info,json=nextHopInfo,proto3" json:"next_hop_info,omitempty"`
	// HW Next hop info
	HwNextHopInfo *Ipv6AclBagHwNhInfo `protobuf:"bytes,89,opt,name=hw_next_hop_info,json=hwNextHopInfo,proto3" json:"hw_next_hop_info,omitempty"`
	IsFlowId      uint32              `protobuf:"varint,90,opt,name=is_flow_id,json=isFlowId,proto3" json:"is_flow_id,omitempty"`
	// Source prefix object-group
	SourcePrefixGroup string `protobuf:"bytes,91,opt,name=source_prefix_group,json=sourcePrefixGroup,proto3" json:"source_prefix_group,omitempty"`
	// Destination prefix object-group
	DestinationPrefixGroup string `protobuf:"bytes,92,opt,name=destination_prefix_group,json=destinationPrefixGroup,proto3" json:"destination_prefix_group,omitempty"`
	// Source port object-group
	SourcePortGroup string `protobuf:"bytes,93,opt,name=source_port_group,json=sourcePortGroup,proto3" json:"source_port_group,omitempty"`
	// Destination port object-group
	DestinationPortGroup string `protobuf:"bytes,94,opt,name=destination_port_group,json=destinationPortGroup,proto3" json:"destination_port_group,omitempty"`
	// ACL Name
	AclName string `protobuf:"bytes,95,opt,name=acl_name,json=aclName,proto3" json:"acl_name,omitempty"`
	// Sequence String
	SequenceStr string `protobuf:"bytes,96,opt,name=sequence_str,json=sequenceStr,proto3" json:"sequence_str,omitempty"`
}

func (x *Ipv6AclEdmAce) Reset() {
	*x = Ipv6AclEdmAce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6AclEdmAce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6AclEdmAce) ProtoMessage() {}

func (x *Ipv6AclEdmAce) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6AclEdmAce.ProtoReflect.Descriptor instead.
func (*Ipv6AclEdmAce) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6AclEdmAce) GetIsAceType() string {
	if x != nil {
		return x.IsAceType
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsAceSequenceNumber() uint32 {
	if x != nil {
		return x.IsAceSequenceNumber
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsPacketAllowOrDeny() string {
	if x != nil {
		return x.IsPacketAllowOrDeny
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsIpv6ProtocolType() int32 {
	if x != nil {
		return x.IsIpv6ProtocolType
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsSourceAddressInNumbers() string {
	if x != nil {
		return x.IsSourceAddressInNumbers
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsSourceAddressPrefixLength() uint32 {
	if x != nil {
		return x.IsSourceAddressPrefixLength
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetSourceMask() string {
	if x != nil {
		return x.SourceMask
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsDestinationAddressInNumbers() string {
	if x != nil {
		return x.IsDestinationAddressInNumbers
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsDestinationAddressPrefixLength() uint32 {
	if x != nil {
		return x.IsDestinationAddressPrefixLength
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetDestinationMask() string {
	if x != nil {
		return x.DestinationMask
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsSourceOperator() string {
	if x != nil {
		return x.IsSourceOperator
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsSourcePort1() uint32 {
	if x != nil {
		return x.IsSourcePort1
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsSourcePort2() uint32 {
	if x != nil {
		return x.IsSourcePort2
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsDestinationOperator() string {
	if x != nil {
		return x.IsDestinationOperator
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsDestinationPort1() uint32 {
	if x != nil {
		return x.IsDestinationPort1
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsDestinationPort2() uint32 {
	if x != nil {
		return x.IsDestinationPort2
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsLogOption() string {
	if x != nil {
		return x.IsLogOption
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsTcpBitsOperator() string {
	if x != nil {
		return x.IsTcpBitsOperator
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsTcpBits() uint32 {
	if x != nil {
		return x.IsTcpBits
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsTcpBitsMask() uint32 {
	if x != nil {
		return x.IsTcpBitsMask
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsDscpPresent() int32 {
	if x != nil {
		return x.IsDscpPresent
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsDscpValu() uint32 {
	if x != nil {
		return x.IsDscpValu
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsPrecedencePresent() int32 {
	if x != nil {
		return x.IsPrecedencePresent
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsPrecedenceValue() uint32 {
	if x != nil {
		return x.IsPrecedenceValue
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsHeaderMatches() uint32 {
	if x != nil {
		return x.IsHeaderMatches
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsPacketLengthOperator() string {
	if x != nil {
		return x.IsPacketLengthOperator
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsPacketLengthStart() uint32 {
	if x != nil {
		return x.IsPacketLengthStart
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsPacketLengthEnd() uint32 {
	if x != nil {
		return x.IsPacketLengthEnd
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsTimeToLiveOperator() string {
	if x != nil {
		return x.IsTimeToLiveOperator
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetIsTimeToLiveStart() uint32 {
	if x != nil {
		return x.IsTimeToLiveStart
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsTimeToLiveEnd() uint32 {
	if x != nil {
		return x.IsTimeToLiveEnd
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetNoStats() int32 {
	if x != nil {
		return x.NoStats
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetHits() uint64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetCapture() uint32 {
	if x != nil {
		return x.Capture
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsIcmpMessageOff() int32 {
	if x != nil {
		return x.IsIcmpMessageOff
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetIsCommentForEntry() string {
	if x != nil {
		return x.IsCommentForEntry
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetNextHopType() string {
	if x != nil {
		return x.NextHopType
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetNextHopInfo() []*Ipv6AclBagNhInfo {
	if x != nil {
		return x.NextHopInfo
	}
	return nil
}

func (x *Ipv6AclEdmAce) GetHwNextHopInfo() *Ipv6AclBagHwNhInfo {
	if x != nil {
		return x.HwNextHopInfo
	}
	return nil
}

func (x *Ipv6AclEdmAce) GetIsFlowId() uint32 {
	if x != nil {
		return x.IsFlowId
	}
	return 0
}

func (x *Ipv6AclEdmAce) GetSourcePrefixGroup() string {
	if x != nil {
		return x.SourcePrefixGroup
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetDestinationPrefixGroup() string {
	if x != nil {
		return x.DestinationPrefixGroup
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetSourcePortGroup() string {
	if x != nil {
		return x.SourcePortGroup
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetDestinationPortGroup() string {
	if x != nil {
		return x.DestinationPortGroup
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetAclName() string {
	if x != nil {
		return x.AclName
	}
	return ""
}

func (x *Ipv6AclEdmAce) GetSequenceStr() string {
	if x != nil {
		return x.SequenceStr
	}
	return ""
}

// NH_Info structure
type Ipv6AclBagNhInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The next hop
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	// Vrf Name
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Track name
	TrackName string `protobuf:"bytes,3,opt,name=track_name,json=trackName,proto3" json:"track_name,omitempty"`
	// The next hop status
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The next hop at status
	AtStatus string `protobuf:"bytes,5,opt,name=at_status,json=atStatus,proto3" json:"at_status,omitempty"`
	// The nexthop exist
	AclNhExist int32 `protobuf:"zigzag32,6,opt,name=acl_nh_exist,json=aclNhExist,proto3" json:"acl_nh_exist,omitempty"`
}

func (x *Ipv6AclBagNhInfo) Reset() {
	*x = Ipv6AclBagNhInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6AclBagNhInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6AclBagNhInfo) ProtoMessage() {}

func (x *Ipv6AclBagNhInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6AclBagNhInfo.ProtoReflect.Descriptor instead.
func (*Ipv6AclBagNhInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv6AclBagNhInfo) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *Ipv6AclBagNhInfo) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ipv6AclBagNhInfo) GetTrackName() string {
	if x != nil {
		return x.TrackName
	}
	return ""
}

func (x *Ipv6AclBagNhInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Ipv6AclBagNhInfo) GetAtStatus() string {
	if x != nil {
		return x.AtStatus
	}
	return ""
}

func (x *Ipv6AclBagNhInfo) GetAclNhExist() int32 {
	if x != nil {
		return x.AclNhExist
	}
	return 0
}

// HW_NH_Info structure
type Ipv6AclBagHwNhInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The next-hop type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The Next Hop
	NextHop string `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	// Table ID
	TableId uint32 `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Vrf Name
	VrfName string `protobuf:"bytes,4,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *Ipv6AclBagHwNhInfo) Reset() {
	*x = Ipv6AclBagHwNhInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6AclBagHwNhInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6AclBagHwNhInfo) ProtoMessage() {}

func (x *Ipv6AclBagHwNhInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6AclBagHwNhInfo.ProtoReflect.Descriptor instead.
func (*Ipv6AclBagHwNhInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv6AclBagHwNhInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Ipv6AclBagHwNhInfo) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *Ipv6AclBagHwNhInfo) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *Ipv6AclBagHwNhInfo) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

var File_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDesc = []byte{
	0x0a, 0x99, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x65,
	0x64, 0x6d, 0x5f, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x82, 0x01, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x63, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x6a, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x61, 0x63, 0x65, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa7, 0x13,
	0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x61,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x41, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x69, 0x73, 0x41, 0x63, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x6e, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x31, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x69, 0x73,
	0x49, 0x70, 0x76, 0x36, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x69, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x48, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x4e, 0x0a, 0x24, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x20, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x31, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x32, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x73, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x31, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x31, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x73, 0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73, 0x54,
	0x63, 0x70, 0x42, 0x69, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x73, 0x54, 0x63, 0x70, 0x42, 0x69, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x63, 0x70, 0x42,
	0x69, 0x74, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x73,
	0x63, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0d, 0x69, 0x73, 0x44, 0x73, 0x63, 0x70, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x69, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x73,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x69, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45,
	0x6e, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x15, 0x69, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6e, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x55, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x10, 0x69, 0x73, 0x49, 0x63, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x66, 0x66, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x58, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x98, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x62,
	0x61, 0x67, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xc5, 0x01, 0x0a, 0x10, 0x68, 0x77, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x9b, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63,
	0x6c, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x68, 0x77, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x68, 0x77, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a,
	0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x63,
	0x6c, 0x5f, 0x6e, 0x68, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0a, 0x61, 0x63, 0x6c, 0x4e, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x7e, 0x0a, 0x17,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x68, 0x77, 0x5f,
	0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescData = file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_goTypes = []interface{}{
	(*Ipv6AclEdmAce_KEYS)(nil), // 0: cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace_KEYS
	(*Ipv6AclEdmAce)(nil),      // 1: cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace
	(*Ipv6AclBagNhInfo)(nil),   // 2: cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_nh_info
	(*Ipv6AclBagHwNhInfo)(nil), // 3: cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_hw_nh_info
}
var file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace.next_hop_info:type_name -> cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_nh_info
	3, // 1: cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace.hw_next_hop_info:type_name -> cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_hw_nh_info
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_init()
}
func file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_init() {
	if File_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6AclEdmAce_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6AclEdmAce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6AclBagNhInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6AclBagHwNhInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto = out.File
	file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence_ipv6_acl_edm_ace_proto_depIdxs = nil
}
