// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_bgp_oper/bgp/config_instances/config_instance/config_vrfs/config_vrf/configuration_inheritances/configuration_inheritance/bgp_config_relatives_bag.proto

package cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// BGP config ancestors/children information
type BgpConfigRelativesBag_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	VrfName         string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	EntityType      string `protobuf:"bytes,3,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	NeighborAddress string `protobuf:"bytes,4,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	EntityName      string `protobuf:"bytes,5,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
}

func (x *BgpConfigRelativesBag_KEYS) Reset() {
	*x = BgpConfigRelativesBag_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpConfigRelativesBag_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfigRelativesBag_KEYS) ProtoMessage() {}

func (x *BgpConfigRelativesBag_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfigRelativesBag_KEYS.ProtoReflect.Descriptor instead.
func (*BgpConfigRelativesBag_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{0}
}

func (x *BgpConfigRelativesBag_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *BgpConfigRelativesBag_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *BgpConfigRelativesBag_KEYS) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *BgpConfigRelativesBag_KEYS) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *BgpConfigRelativesBag_KEYS) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

type BgpConfigRelativesBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor Address
	NeighborAddress *BgpAddrtype `protobuf:"bytes,50,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Entity/group name
	GroupName string `protobuf:"bytes,51,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Entity type
	ConfigurationType string `protobuf:"bytes,52,opt,name=configuration_type,json=configurationType,proto3" json:"configuration_type,omitempty"`
	// AF identifier
	AddressFamilyIdentifier uint32 `protobuf:"varint,53,opt,name=address_family_identifier,json=addressFamilyIdentifier,proto3" json:"address_family_identifier,omitempty"`
	// AF-independent relatives
	AfIndependentRelatives *BgpConfigEntid_ `protobuf:"bytes,54,opt,name=af_independent_relatives,json=afIndependentRelatives,proto3" json:"af_independent_relatives,omitempty"`
	// AF-dependent relatives
	AfDependentRelatives []*BgpConfigEntp `protobuf:"bytes,55,rep,name=af_dependent_relatives,json=afDependentRelatives,proto3" json:"af_dependent_relatives,omitempty"`
}

func (x *BgpConfigRelativesBag) Reset() {
	*x = BgpConfigRelativesBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpConfigRelativesBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfigRelativesBag) ProtoMessage() {}

func (x *BgpConfigRelativesBag) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfigRelativesBag.ProtoReflect.Descriptor instead.
func (*BgpConfigRelativesBag) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{1}
}

func (x *BgpConfigRelativesBag) GetNeighborAddress() *BgpAddrtype {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

func (x *BgpConfigRelativesBag) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *BgpConfigRelativesBag) GetConfigurationType() string {
	if x != nil {
		return x.ConfigurationType
	}
	return ""
}

func (x *BgpConfigRelativesBag) GetAddressFamilyIdentifier() uint32 {
	if x != nil {
		return x.AddressFamilyIdentifier
	}
	return 0
}

func (x *BgpConfigRelativesBag) GetAfIndependentRelatives() *BgpConfigEntid_ {
	if x != nil {
		return x.AfIndependentRelatives
	}
	return nil
}

func (x *BgpConfigRelativesBag) GetAfDependentRelatives() []*BgpConfigEntp {
	if x != nil {
		return x.AfDependentRelatives
	}
	return nil
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPV4TunnelAddressType) Reset() {
	*x = IPV4TunnelAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPV4TunnelAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPV4TunnelAddressType) ProtoMessage() {}

func (x *IPV4TunnelAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPV4TunnelAddressType.ProtoReflect.Descriptor instead.
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{2}
}

func (x *IPV4TunnelAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPV4MDTAddressType) Reset() {
	*x = IPV4MDTAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPV4MDTAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPV4MDTAddressType) ProtoMessage() {}

func (x *IPV4MDTAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPV4MDTAddressType.ProtoReflect.Descriptor instead.
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{3}
}

func (x *IPV4MDTAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RTConstraintAddressType) Reset() {
	*x = RTConstraintAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTConstraintAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTConstraintAddressType) ProtoMessage() {}

func (x *RTConstraintAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTConstraintAddressType.ProtoReflect.Descriptor instead.
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{4}
}

func (x *RTConstraintAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPV6AddressType) Reset() {
	*x = IPV6AddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPV6AddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPV6AddressType) ProtoMessage() {}

func (x *IPV6AddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPV6AddressType.ProtoReflect.Descriptor instead.
func (*IPV6AddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{5}
}

func (x *IPV6AddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BgpL2VpnAddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (x *BgpL2VpnAddrT) Reset() {
	*x = BgpL2VpnAddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpL2VpnAddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpL2VpnAddrT) ProtoMessage() {}

func (x *BgpL2VpnAddrT) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpL2VpnAddrT.ProtoReflect.Descriptor instead.
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{6}
}

func (x *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if x != nil {
		return x.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *L2VPNEVPNAddressType) Reset() {
	*x = L2VPNEVPNAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2VPNEVPNAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2VPNEVPNAddressType) ProtoMessage() {}

func (x *L2VPNEVPNAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2VPNEVPNAddressType.ProtoReflect.Descriptor instead.
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{7}
}

func (x *L2VPNEVPNAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (x *BgpL2VpnMspwAddrT) Reset() {
	*x = BgpL2VpnMspwAddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpL2VpnMspwAddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpL2VpnMspwAddrT) ProtoMessage() {}

func (x *BgpL2VpnMspwAddrT) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpL2VpnMspwAddrT.ProtoReflect.Descriptor instead.
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{8}
}

func (x *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if x != nil {
		return x.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPV6MVPNAddressType) Reset() {
	*x = IPV6MVPNAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPV6MVPNAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPV6MVPNAddressType) ProtoMessage() {}

func (x *IPV6MVPNAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPV6MVPNAddressType.ProtoReflect.Descriptor instead.
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{9}
}

func (x *IPV6MVPNAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPV4MVPNAddressType) Reset() {
	*x = IPV4MVPNAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPV4MVPNAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPV4MVPNAddressType) ProtoMessage() {}

func (x *IPV4MVPNAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPV4MVPNAddressType.ProtoReflect.Descriptor instead.
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{10}
}

func (x *IPV4MVPNAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LS_LSAddressType) Reset() {
	*x = LS_LSAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LS_LSAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LS_LSAddressType) ProtoMessage() {}

func (x *LS_LSAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LS_LSAddressType.ProtoReflect.Descriptor instead.
func (*LS_LSAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{11}
}

func (x *LS_LSAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPv4FlowspecAddressType) Reset() {
	*x = IPv4FlowspecAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4FlowspecAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4FlowspecAddressType) ProtoMessage() {}

func (x *IPv4FlowspecAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4FlowspecAddressType.ProtoReflect.Descriptor instead.
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{12}
}

func (x *IPv4FlowspecAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPv6FlowspecAddressType) Reset() {
	*x = IPv6FlowspecAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv6FlowspecAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6FlowspecAddressType) ProtoMessage() {}

func (x *IPv6FlowspecAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6FlowspecAddressType.ProtoReflect.Descriptor instead.
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{13}
}

func (x *IPv6FlowspecAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BgpAddrtype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Afi string `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress,proto3" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress,proto3" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress,proto3" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress,proto3" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress,proto3" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress,proto3" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress,proto3" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress,proto3" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress,proto3" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress,proto3" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress,proto3" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress,proto3" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress,proto3" json:"ipv6_vpn_flowspec_address,omitempty"`
}

func (x *BgpAddrtype) Reset() {
	*x = BgpAddrtype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAddrtype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddrtype) ProtoMessage() {}

func (x *BgpAddrtype) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddrtype.ProtoReflect.Descriptor instead.
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{14}
}

func (x *BgpAddrtype) GetAfi() string {
	if x != nil {
		return x.Afi
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4McastAddress() string {
	if x != nil {
		return x.Ipv4McastAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4LabelAddress() string {
	if x != nil {
		return x.Ipv4LabelAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if x != nil {
		return x.Ipv4TunnelAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if x != nil {
		return x.Ipv4MdtAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv4VpnAddress() string {
	if x != nil {
		return x.Ipv4VpnAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if x != nil {
		return x.Ipv4VpnaMcastddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if x != nil {
		return x.Ipv6McastAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if x != nil {
		return x.Ipv6LabelAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if x != nil {
		return x.Ipv6VpnAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if x != nil {
		return x.Ipv6VpnMcastAddress
	}
	return nil
}

func (x *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if x != nil {
		return x.L2VpnvplsAddress
	}
	return nil
}

func (x *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if x != nil {
		return x.RtConstraintAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if x != nil {
		return x.Ipv6MvpnAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if x != nil {
		return x.Ipv4MvpnAddress
	}
	return nil
}

func (x *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if x != nil {
		return x.L2VpnEvpnAddress
	}
	return nil
}

func (x *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if x != nil {
		return x.LsLsAddress
	}
	return nil
}

func (x *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if x != nil {
		return x.L2VpnMspwAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if x != nil {
		return x.Ipv4FlowspecAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if x != nil {
		return x.Ipv6FlowspecAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if x != nil {
		return x.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if x != nil {
		return x.Ipv6VpnFlowspecAddress
	}
	return nil
}

type BgpConfigEntid_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next entry in the list
	BgpConfigEntid_ []*BgpConfigEntid_Item `protobuf:"bytes,1,rep,name=bgp_config_entid_,json=bgpConfigEntid,proto3" json:"bgp_config_entid_,omitempty"`
}

func (x *BgpConfigEntid_) Reset() {
	*x = BgpConfigEntid_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpConfigEntid_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfigEntid_) ProtoMessage() {}

func (x *BgpConfigEntid_) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfigEntid_.ProtoReflect.Descriptor instead.
func (*BgpConfigEntid_) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{15}
}

func (x *BgpConfigEntid_) GetBgpConfigEntid_() []*BgpConfigEntid_Item {
	if x != nil {
		return x.BgpConfigEntid_
	}
	return nil
}

type BgpConfigEntid_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address family identfier
	AddressFamilyIdentifier uint32 `protobuf:"varint,1,opt,name=address_family_identifier,json=addressFamilyIdentifier,proto3" json:"address_family_identifier,omitempty"`
	// Entity type
	ConfigurationType string `protobuf:"bytes,2,opt,name=configuration_type,json=configurationType,proto3" json:"configuration_type,omitempty"`
	// Neighbor Address
	NeighborAddress *BgpAddrtype `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Group name
	GroupName string `protobuf:"bytes,4,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *BgpConfigEntid_Item) Reset() {
	*x = BgpConfigEntid_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpConfigEntid_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfigEntid_Item) ProtoMessage() {}

func (x *BgpConfigEntid_Item) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfigEntid_Item.ProtoReflect.Descriptor instead.
func (*BgpConfigEntid_Item) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{16}
}

func (x *BgpConfigEntid_Item) GetAddressFamilyIdentifier() uint32 {
	if x != nil {
		return x.AddressFamilyIdentifier
	}
	return 0
}

func (x *BgpConfigEntid_Item) GetConfigurationType() string {
	if x != nil {
		return x.ConfigurationType
	}
	return ""
}

func (x *BgpConfigEntid_Item) GetNeighborAddress() *BgpAddrtype {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

func (x *BgpConfigEntid_Item) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type BgpConfigEntp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *BgpConfigEntid_ `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BgpConfigEntp) Reset() {
	*x = BgpConfigEntp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpConfigEntp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfigEntp) ProtoMessage() {}

func (x *BgpConfigEntp) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfigEntp.ProtoReflect.Descriptor instead.
func (*BgpConfigEntp) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP(), []int{17}
}

func (x *BgpConfigEntp) GetValue() *BgpConfigEntid_ {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDesc = []byte{
	0x0a, 0xaa, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x62, 0x67,
	0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x62,
	0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x8b, 0x01,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x1d,
	0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x06, 0x0a, 0x18, 0x62,
	0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x67, 0x12, 0xc5, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x99, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd9, 0x01, 0x0a, 0x18, 0x61, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9e, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x52, 0x16, 0x61,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x16, 0x61, 0x66, 0x5f, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x70, 0x52, 0x14, 0x61, 0x66, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x49,
	0x50, 0x56, 0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x49, 0x50,
	0x56, 0x34, 0x4d, 0x44, 0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x52, 0x54, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x49, 0x50, 0x56, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x37, 0x0a, 0x10, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x4c, 0x32, 0x56,
	0x50, 0x4e, 0x45, 0x56, 0x50, 0x4e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x15, 0x62, 0x67, 0x70, 0x5f, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x73, 0x70, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x49, 0x50, 0x56, 0x36, 0x4d, 0x56, 0x50,
	0x4e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x49, 0x50, 0x56, 0x34, 0x4d, 0x56, 0x50, 0x4e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x28, 0x0a, 0x10, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x49, 0x50, 0x76,
	0x34, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x49, 0x50,
	0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5, 0x1f, 0x0a, 0x0c,
	0x62, 0x67, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x66, 0x69, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x70, 0x76, 0x34, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x70, 0x76,
	0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd3, 0x01,
	0x0a, 0x13, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa2, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x56, 0x34, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x69, 0x70, 0x76, 0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x64, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9f,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50,
	0x56, 0x34, 0x4d, 0x44, 0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x64, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34,
	0x56, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x76, 0x70, 0x6e, 0x61, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x56,
	0x70, 0x6e, 0x61, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc0,
	0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0xcb, 0x01, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50,
	0x56, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69,
	0x70, 0x76, 0x36, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0xcb, 0x01, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x56, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x70, 0x76,
	0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc7, 0x01,
	0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67,
	0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x56, 0x70, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9c, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67,
	0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x56, 0x70, 0x6e,
	0x4d, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xcc, 0x01, 0x0a,
	0x12, 0x6c, 0x32, 0x5f, 0x76, 0x70, 0x6e, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9d, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x6c, 0x32, 0x56, 0x70, 0x6e,
	0x76, 0x70, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x15,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa4, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x54, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x13, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6d, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xa0, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x49, 0x50, 0x56, 0x36, 0x4d, 0x56, 0x50, 0x4e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x76, 0x70, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6d, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0xa0, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x49, 0x50, 0x56, 0x34, 0x4d, 0x56, 0x50, 0x4e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x76, 0x70, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x13, 0x6c, 0x32, 0x5f, 0x76,
	0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa1, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x45, 0x56, 0x50, 0x4e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x32, 0x56, 0x70, 0x6e,
	0x45, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x0d,
	0x6c, 0x73, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x9d, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4c, 0x53, 0x5f, 0x4c, 0x53, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x73, 0x4c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0xd2, 0x01, 0x0a, 0x13, 0x6c, 0x32, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x73, 0x70, 0x77,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa2,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x73, 0x70, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x74, 0x52, 0x10, 0x6c, 0x32, 0x56, 0x70, 0x6e, 0x4d, 0x73, 0x70, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa4, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x69, 0x70,
	0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0xd9, 0x01, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xa4, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x50, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xe0, 0x01,
	0x0a, 0x19, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xa4, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x50, 0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x69, 0x70, 0x76, 0x34, 0x56, 0x70,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0xe0, 0x01, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0xa4, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x69, 0x70, 0x76,
	0x36, 0x56, 0x70, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x12, 0xcf, 0x01, 0x0a, 0x11, 0x62, 0x67,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xa3, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x62, 0x67, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x16,
	0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x5f, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0xc5, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x99, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x62, 0x67, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x70, 0x12, 0xb5, 0x01, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9e, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescData = file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_goTypes = []interface{}{
	(*BgpConfigRelativesBag_KEYS)(nil), // 0: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_relatives_bag_KEYS
	(*BgpConfigRelativesBag)(nil),      // 1: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_relatives_bag
	(*IPV4TunnelAddressType)(nil),      // 2: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV4TunnelAddressType
	(*IPV4MDTAddressType)(nil),         // 3: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV4MDTAddressType
	(*RTConstraintAddressType)(nil),    // 4: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.RTConstraintAddressType
	(*IPV6AddressType)(nil),            // 5: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6AddressType
	(*BgpL2VpnAddrT)(nil),              // 6: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_l2vpn_addr_t
	(*L2VPNEVPNAddressType)(nil),       // 7: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.L2VPNEVPNAddressType
	(*BgpL2VpnMspwAddrT)(nil),          // 8: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_l2vpn_mspw_addr_t
	(*IPV6MVPNAddressType)(nil),        // 9: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6MVPNAddressType
	(*IPV4MVPNAddressType)(nil),        // 10: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV4MVPNAddressType
	(*LS_LSAddressType)(nil),           // 11: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.LS_LSAddressType
	(*IPv4FlowspecAddressType)(nil),    // 12: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPv4FlowspecAddressType
	(*IPv6FlowspecAddressType)(nil),    // 13: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPv6FlowspecAddressType
	(*BgpAddrtype)(nil),                // 14: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype
	(*BgpConfigEntid_)(nil),            // 15: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entid_
	(*BgpConfigEntid_Item)(nil),        // 16: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entid__item
	(*BgpConfigEntp)(nil),              // 17: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entp
}
var file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_depIdxs = []int32{
	14, // 0: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_relatives_bag.neighbor_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype
	15, // 1: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_relatives_bag.af_independent_relatives:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entid_
	17, // 2: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_relatives_bag.af_dependent_relatives:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entp
	2,  // 3: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv4_tunnel_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV4TunnelAddressType
	3,  // 4: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv4_mdt_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV4MDTAddressType
	5,  // 5: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6AddressType
	5,  // 6: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_mcast_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6AddressType
	5,  // 7: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_label_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6AddressType
	5,  // 8: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_vpn_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6AddressType
	5,  // 9: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_vpn_mcast_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6AddressType
	6,  // 10: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.l2_vpnvpls_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_l2vpn_addr_t
	4,  // 11: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.rt_constraint_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.RTConstraintAddressType
	9,  // 12: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_mvpn_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV6MVPNAddressType
	10, // 13: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv4_mvpn_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPV4MVPNAddressType
	7,  // 14: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.l2_vpn_evpn_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.L2VPNEVPNAddressType
	11, // 15: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ls_ls_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.LS_LSAddressType
	8,  // 16: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.l2_vpn_mspw_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_l2vpn_mspw_addr_t
	12, // 17: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv4_flowspec_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPv4FlowspecAddressType
	13, // 18: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_flowspec_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPv6FlowspecAddressType
	12, // 19: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv4_vpn_flowspec_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPv4FlowspecAddressType
	13, // 20: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype.ipv6_vpn_flowspec_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.IPv6FlowspecAddressType
	16, // 21: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entid_.bgp_config_entid_:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entid__item
	14, // 22: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entid__item.neighbor_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_addrtype
	15, // 23: cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entp.value:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_vrfs.config_vrf.configuration_inheritances.configuration_inheritance.bgp_config_entid_
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_init()
}
func file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_init() {
	if File_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpConfigRelativesBag_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpConfigRelativesBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPV4TunnelAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPV4MDTAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTConstraintAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPV6AddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpL2VpnAddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2VPNEVPNAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpL2VpnMspwAddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPV6MVPNAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPV4MVPNAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LS_LSAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4FlowspecAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv6FlowspecAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAddrtype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpConfigEntid_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpConfigEntid_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpConfigEntp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto = out.File
	file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_vrfs_config_vrf_configuration_inheritances_configuration_inheritance_bgp_config_relatives_bag_proto_depIdxs = nil
}
