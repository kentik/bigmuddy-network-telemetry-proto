// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ip_rib_ipv6_oper/ipv6_rib_stdby/vrfs/vrf/afs/af/safs/saf/ip_rib_route_table_names/ip_rib_route_table_name/protocol/bgp/as/protocol_routes/protocol_route/ipv6_rib_edm_route.proto

package cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Information of a rib route head and rib proto route
type Ipv6RibEdmRoute_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfName        string `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AfName         string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName        string `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	RouteTableName string `protobuf:"bytes,4,opt,name=route_table_name,json=routeTableName,proto3" json:"route_table_name,omitempty"`
	As             string `protobuf:"bytes,5,opt,name=as,proto3" json:"as,omitempty"`
	Address        string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	PrefixLength   uint32 `protobuf:"varint,7,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *Ipv6RibEdmRoute_KEYS) Reset() {
	*x = Ipv6RibEdmRoute_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6RibEdmRoute_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6RibEdmRoute_KEYS) ProtoMessage() {}

func (x *Ipv6RibEdmRoute_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6RibEdmRoute_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv6RibEdmRoute_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv6RibEdmRoute_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ipv6RibEdmRoute_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *Ipv6RibEdmRoute_KEYS) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *Ipv6RibEdmRoute_KEYS) GetRouteTableName() string {
	if x != nil {
		return x.RouteTableName
	}
	return ""
}

func (x *Ipv6RibEdmRoute_KEYS) GetAs() string {
	if x != nil {
		return x.As
	}
	return ""
}

func (x *Ipv6RibEdmRoute_KEYS) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv6RibEdmRoute_KEYS) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type Ipv6RibEdmRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route prefix
	Prefix string `protobuf:"bytes,50,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Length of prefix
	PrefixLength uint32 `protobuf:"varint,51,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// Route version
	RouteVersion uint32 `protobuf:"varint,52,opt,name=route_version,json=routeVersion,proto3" json:"route_version,omitempty"`
	// Protocol advertising the route
	ProtocolId uint32 `protobuf:"varint,53,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	//  Name of Protocol
	ProtocolName string `protobuf:"bytes,54,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	// Instance name
	Instance string `protobuf:"bytes,55,opt,name=instance,proto3" json:"instance,omitempty"`
	// Client adding the route to RIB
	ClientId uint32 `protobuf:"varint,56,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Route type
	RouteType uint32 `protobuf:"varint,57,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	// Route priority
	Priority uint32 `protobuf:"varint,58,opt,name=priority,proto3" json:"priority,omitempty"`
	// SVD Type of route
	SvdType uint32 `protobuf:"varint,59,opt,name=svd_type,json=svdType,proto3" json:"svd_type,omitempty"`
	// Route flags
	Flags uint32 `protobuf:"varint,60,opt,name=flags,proto3" json:"flags,omitempty"`
	// Extended Route flags
	ExtendedFlags uint64 `protobuf:"varint,61,opt,name=extended_flags,json=extendedFlags,proto3" json:"extended_flags,omitempty"`
	// Opaque proto specific info
	Tag uint32 `protobuf:"varint,62,opt,name=tag,proto3" json:"tag,omitempty"`
	// Distance of the route
	Distance uint32 `protobuf:"varint,63,opt,name=distance,proto3" json:"distance,omitempty"`
	// Diversion distance of the route
	DiversionDistance uint32 `protobuf:"varint,64,opt,name=diversion_distance,json=diversionDistance,proto3" json:"diversion_distance,omitempty"`
	// Route metric
	Metric uint32 `protobuf:"varint,65,opt,name=metric,proto3" json:"metric,omitempty"`
	// Number of paths
	PathsCount uint32 `protobuf:"varint,66,opt,name=paths_count,json=pathsCount,proto3" json:"paths_count,omitempty"`
	// BGP Attribute ID
	AttributeIdentity uint32 `protobuf:"varint,67,opt,name=attribute_identity,json=attributeIdentity,proto3" json:"attribute_identity,omitempty"`
	// BGP Traffic Index
	TrafficIndex uint32 `protobuf:"varint,68,opt,name=traffic_index,json=trafficIndex,proto3" json:"traffic_index,omitempty"`
	// Route ip precedence
	RoutePrecedence uint32 `protobuf:"varint,69,opt,name=route_precedence,json=routePrecedence,proto3" json:"route_precedence,omitempty"`
	// Route qos group
	QosGroup uint32 `protobuf:"varint,70,opt,name=qos_group,json=qosGroup,proto3" json:"qos_group,omitempty"`
	// Flow tag
	FlowTag uint32 `protobuf:"varint,71,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
	// Forward Class
	FwdClass uint32 `protobuf:"varint,72,opt,name=fwd_class,json=fwdClass,proto3" json:"fwd_class,omitempty"`
	// Number of pic paths in this route
	PicCount uint32 `protobuf:"varint,73,opt,name=pic_count,json=picCount,proto3" json:"pic_count,omitempty"`
	// Is the route active or backup
	Active bool `protobuf:"varint,74,opt,name=active,proto3" json:"active,omitempty"`
	// Route has a diversion path
	Diversion bool `protobuf:"varint,75,opt,name=diversion,proto3" json:"diversion,omitempty"`
	// Diversion route protocol name
	DiversionProtoName string `protobuf:"bytes,76,opt,name=diversion_proto_name,json=diversionProtoName,proto3" json:"diversion_proto_name,omitempty"`
	// Age of route (seconds)
	RouteAge uint32 `protobuf:"varint,77,opt,name=route_age,json=routeAge,proto3" json:"route_age,omitempty"`
	// Local label of the route
	RouteLabel uint32 `protobuf:"varint,78,opt,name=route_label,json=routeLabel,proto3" json:"route_label,omitempty"`
	// Route Version
	Version uint32 `protobuf:"varint,79,opt,name=version,proto3" json:"version,omitempty"`
	// Table Version
	TblVersion uint64 `protobuf:"varint,80,opt,name=tbl_version,json=tblVersion,proto3" json:"tbl_version,omitempty"`
	// Route modification time(nanoseconds)
	RouteModifyTime uint64 `protobuf:"varint,81,opt,name=route_modify_time,json=routeModifyTime,proto3" json:"route_modify_time,omitempty"`
	// Path(s) of the route
	RoutePath *Ipv6RibEdmPath `protobuf:"bytes,82,opt,name=route_path,json=routePath,proto3" json:"route_path,omitempty"`
}

func (x *Ipv6RibEdmRoute) Reset() {
	*x = Ipv6RibEdmRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6RibEdmRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6RibEdmRoute) ProtoMessage() {}

func (x *Ipv6RibEdmRoute) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6RibEdmRoute.ProtoReflect.Descriptor instead.
func (*Ipv6RibEdmRoute) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv6RibEdmRoute) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ipv6RibEdmRoute) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetRouteVersion() uint32 {
	if x != nil {
		return x.RouteVersion
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetProtocolId() uint32 {
	if x != nil {
		return x.ProtocolId
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *Ipv6RibEdmRoute) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Ipv6RibEdmRoute) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetRouteType() uint32 {
	if x != nil {
		return x.RouteType
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetSvdType() uint32 {
	if x != nil {
		return x.SvdType
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetExtendedFlags() uint64 {
	if x != nil {
		return x.ExtendedFlags
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetDistance() uint32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetDiversionDistance() uint32 {
	if x != nil {
		return x.DiversionDistance
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetPathsCount() uint32 {
	if x != nil {
		return x.PathsCount
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetAttributeIdentity() uint32 {
	if x != nil {
		return x.AttributeIdentity
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetTrafficIndex() uint32 {
	if x != nil {
		return x.TrafficIndex
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetRoutePrecedence() uint32 {
	if x != nil {
		return x.RoutePrecedence
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetQosGroup() uint32 {
	if x != nil {
		return x.QosGroup
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetFlowTag() uint32 {
	if x != nil {
		return x.FlowTag
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetFwdClass() uint32 {
	if x != nil {
		return x.FwdClass
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetPicCount() uint32 {
	if x != nil {
		return x.PicCount
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Ipv6RibEdmRoute) GetDiversion() bool {
	if x != nil {
		return x.Diversion
	}
	return false
}

func (x *Ipv6RibEdmRoute) GetDiversionProtoName() string {
	if x != nil {
		return x.DiversionProtoName
	}
	return ""
}

func (x *Ipv6RibEdmRoute) GetRouteAge() uint32 {
	if x != nil {
		return x.RouteAge
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetRouteLabel() uint32 {
	if x != nil {
		return x.RouteLabel
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetTblVersion() uint64 {
	if x != nil {
		return x.TblVersion
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetRouteModifyTime() uint64 {
	if x != nil {
		return x.RouteModifyTime
	}
	return 0
}

func (x *Ipv6RibEdmRoute) GetRoutePath() *Ipv6RibEdmPath {
	if x != nil {
		return x.RoutePath
	}
	return nil
}

type Ipv6RibEdmAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Ipv6RibEdmAddr) Reset() {
	*x = Ipv6RibEdmAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6RibEdmAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6RibEdmAddr) ProtoMessage() {}

func (x *Ipv6RibEdmAddr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6RibEdmAddr.ProtoReflect.Descriptor instead.
func (*Ipv6RibEdmAddr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv6RibEdmAddr) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Information of a rib path
type Ipv6RibEdmPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next path
	Ipv6RibEdmPath []*Ipv6RibEdmPathItem `protobuf:"bytes,1,rep,name=ipv6_rib_edm_path,json=ipv6RibEdmPath,proto3" json:"ipv6_rib_edm_path,omitempty"`
}

func (x *Ipv6RibEdmPath) Reset() {
	*x = Ipv6RibEdmPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6RibEdmPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6RibEdmPath) ProtoMessage() {}

func (x *Ipv6RibEdmPath) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6RibEdmPath.ProtoReflect.Descriptor instead.
func (*Ipv6RibEdmPath) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv6RibEdmPath) GetIpv6RibEdmPath() []*Ipv6RibEdmPathItem {
	if x != nil {
		return x.Ipv6RibEdmPath
	}
	return nil
}

type Ipv6RibEdmPathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nexthop
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Infosource
	InformationSource string `protobuf:"bytes,2,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	// V6 nexthop
	V6Nexthop string `protobuf:"bytes,3,opt,name=v6_nexthop,json=v6Nexthop,proto3" json:"v6_nexthop,omitempty"`
	// Interface Name
	InterfaceName string `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Metrics
	Metric uint32 `protobuf:"varint,5,opt,name=metric,proto3" json:"metric,omitempty"`
	// Load Metrics
	LoadMetric uint32 `protobuf:"varint,6,opt,name=load_metric,json=loadMetric,proto3" json:"load_metric,omitempty"`
	// Flags extended to 64 bits
	Flags64 uint64 `protobuf:"varint,7,opt,name=flags64,proto3" json:"flags64,omitempty"`
	// Flags
	Flags uint32 `protobuf:"varint,8,opt,name=flags,proto3" json:"flags,omitempty"`
	// Private Flags
	PrivateFlags uint32 `protobuf:"varint,9,opt,name=private_flags,json=privateFlags,proto3" json:"private_flags,omitempty"`
	// Looping path
	Looped bool `protobuf:"varint,10,opt,name=looped,proto3" json:"looped,omitempty"`
	// Nexthop tableid
	NextHopTableId uint32 `protobuf:"varint,11,opt,name=next_hop_table_id,json=nextHopTableId,proto3" json:"next_hop_table_id,omitempty"`
	// VRF Name of the nh table
	NextHopVrfName string `protobuf:"bytes,12,opt,name=next_hop_vrf_name,json=nextHopVrfName,proto3" json:"next_hop_vrf_name,omitempty"`
	// NH table name
	NextHopTableName string `protobuf:"bytes,13,opt,name=next_hop_table_name,json=nextHopTableName,proto3" json:"next_hop_table_name,omitempty"`
	// NH afi
	NextHopAfi uint32 `protobuf:"varint,14,opt,name=next_hop_afi,json=nextHopAfi,proto3" json:"next_hop_afi,omitempty"`
	// NH safi
	NextHopSafi uint32 `protobuf:"varint,15,opt,name=next_hop_safi,json=nextHopSafi,proto3" json:"next_hop_safi,omitempty"`
	// Label associated with this path
	RouteLabel uint32 `protobuf:"varint,16,opt,name=route_label,json=routeLabel,proto3" json:"route_label,omitempty"`
	// Tunnel ID associated with this path
	TunnelId uint32 `protobuf:"varint,17,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// Path id of this path
	Pathid uint32 `protobuf:"varint,18,opt,name=pathid,proto3" json:"pathid,omitempty"`
	// Path id of this path's backup
	BackupPathid uint32 `protobuf:"varint,19,opt,name=backup_pathid,json=backupPathid,proto3" json:"backup_pathid,omitempty"`
	// Refcnt of backup
	RefCntOfBackup uint32 `protobuf:"varint,20,opt,name=ref_cnt_of_backup,json=refCntOfBackup,proto3" json:"ref_cnt_of_backup,omitempty"`
	// Number of extended communities
	NumberOfExtendedCommunities uint32 `protobuf:"varint,21,opt,name=number_of_extended_communities,json=numberOfExtendedCommunities,proto3" json:"number_of_extended_communities,omitempty"`
	// MVPN attribute present
	MvpnPresent bool `protobuf:"varint,22,opt,name=mvpn_present,json=mvpnPresent,proto3" json:"mvpn_present,omitempty"`
	// Path RT present
	PathrtPresent           bool `protobuf:"varint,23,opt,name=pathrt_present,json=pathrtPresent,proto3" json:"pathrt_present,omitempty"`
	VrfimportrtPresent      bool `protobuf:"varint,24,opt,name=vrfimportrt_present,json=vrfimportrtPresent,proto3" json:"vrfimportrt_present,omitempty"`
	SourceasrtPresent       bool `protobuf:"varint,25,opt,name=sourceasrt_present,json=sourceasrtPresent,proto3" json:"sourceasrt_present,omitempty"`
	SourcerdPresent         bool `protobuf:"varint,26,opt,name=sourcerd_present,json=sourcerdPresent,proto3" json:"sourcerd_present,omitempty"`
	SegmentedNexthopPresent bool `protobuf:"varint,27,opt,name=segmented_nexthop_present,json=segmentedNexthopPresent,proto3" json:"segmented_nexthop_present,omitempty"`
	// NHID associated with this path
	NextHopId uint32 `protobuf:"varint,28,opt,name=next_hop_id,json=nextHopId,proto3" json:"next_hop_id,omitempty"`
	// NHID references
	NextHopIdRefcount uint32 `protobuf:"varint,29,opt,name=next_hop_id_refcount,json=nextHopIdRefcount,proto3" json:"next_hop_id_refcount,omitempty"`
	// OSPF area associated with the path
	OspfAreaId string `protobuf:"bytes,30,opt,name=ospf_area_id,json=ospfAreaId,proto3" json:"ospf_area_id,omitempty"`
	// Remote backup node address
	RemoteBackupAddr []*Ipv6RibEdmAddr `protobuf:"bytes,31,rep,name=remote_backup_addr,json=remoteBackupAddr,proto3" json:"remote_backup_addr,omitempty"`
	// Path has a label stack
	HasLabelstk bool `protobuf:"varint,32,opt,name=has_labelstk,json=hasLabelstk,proto3" json:"has_labelstk,omitempty"`
	// Number of labels in stack
	NumLabels uint32 `protobuf:"varint,33,opt,name=num_labels,json=numLabels,proto3" json:"num_labels,omitempty"`
	// Labels for this path
	Labelstk []uint32 `protobuf:"varint,34,rep,packed,name=labelstk,proto3" json:"labelstk,omitempty"`
	// binding Label for this path
	BindingLabel uint32 `protobuf:"varint,35,opt,name=binding_label,json=bindingLabel,proto3" json:"binding_label,omitempty"`
	// Fib nhid encap id
	NhidFeid uint64 `protobuf:"varint,36,opt,name=nhid_feid,json=nhidFeid,proto3" json:"nhid_feid,omitempty"`
	// Fib mpls encap id
	MplsFeid uint64 `protobuf:"varint,37,opt,name=mpls_feid,json=mplsFeid,proto3" json:"mpls_feid,omitempty"`
}

func (x *Ipv6RibEdmPathItem) Reset() {
	*x = Ipv6RibEdmPathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6RibEdmPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6RibEdmPathItem) ProtoMessage() {}

func (x *Ipv6RibEdmPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6RibEdmPathItem.ProtoReflect.Descriptor instead.
func (*Ipv6RibEdmPathItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescGZIP(), []int{4}
}

func (x *Ipv6RibEdmPathItem) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ipv6RibEdmPathItem) GetInformationSource() string {
	if x != nil {
		return x.InformationSource
	}
	return ""
}

func (x *Ipv6RibEdmPathItem) GetV6Nexthop() string {
	if x != nil {
		return x.V6Nexthop
	}
	return ""
}

func (x *Ipv6RibEdmPathItem) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Ipv6RibEdmPathItem) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetLoadMetric() uint32 {
	if x != nil {
		return x.LoadMetric
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetFlags64() uint64 {
	if x != nil {
		return x.Flags64
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetPrivateFlags() uint32 {
	if x != nil {
		return x.PrivateFlags
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetLooped() bool {
	if x != nil {
		return x.Looped
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetNextHopTableId() uint32 {
	if x != nil {
		return x.NextHopTableId
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetNextHopVrfName() string {
	if x != nil {
		return x.NextHopVrfName
	}
	return ""
}

func (x *Ipv6RibEdmPathItem) GetNextHopTableName() string {
	if x != nil {
		return x.NextHopTableName
	}
	return ""
}

func (x *Ipv6RibEdmPathItem) GetNextHopAfi() uint32 {
	if x != nil {
		return x.NextHopAfi
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetNextHopSafi() uint32 {
	if x != nil {
		return x.NextHopSafi
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetRouteLabel() uint32 {
	if x != nil {
		return x.RouteLabel
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetTunnelId() uint32 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetPathid() uint32 {
	if x != nil {
		return x.Pathid
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetBackupPathid() uint32 {
	if x != nil {
		return x.BackupPathid
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetRefCntOfBackup() uint32 {
	if x != nil {
		return x.RefCntOfBackup
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetNumberOfExtendedCommunities() uint32 {
	if x != nil {
		return x.NumberOfExtendedCommunities
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetMvpnPresent() bool {
	if x != nil {
		return x.MvpnPresent
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetPathrtPresent() bool {
	if x != nil {
		return x.PathrtPresent
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetVrfimportrtPresent() bool {
	if x != nil {
		return x.VrfimportrtPresent
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetSourceasrtPresent() bool {
	if x != nil {
		return x.SourceasrtPresent
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetSourcerdPresent() bool {
	if x != nil {
		return x.SourcerdPresent
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetSegmentedNexthopPresent() bool {
	if x != nil {
		return x.SegmentedNexthopPresent
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetNextHopId() uint32 {
	if x != nil {
		return x.NextHopId
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetNextHopIdRefcount() uint32 {
	if x != nil {
		return x.NextHopIdRefcount
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetOspfAreaId() string {
	if x != nil {
		return x.OspfAreaId
	}
	return ""
}

func (x *Ipv6RibEdmPathItem) GetRemoteBackupAddr() []*Ipv6RibEdmAddr {
	if x != nil {
		return x.RemoteBackupAddr
	}
	return nil
}

func (x *Ipv6RibEdmPathItem) GetHasLabelstk() bool {
	if x != nil {
		return x.HasLabelstk
	}
	return false
}

func (x *Ipv6RibEdmPathItem) GetNumLabels() uint32 {
	if x != nil {
		return x.NumLabels
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetLabelstk() []uint32 {
	if x != nil {
		return x.Labelstk
	}
	return nil
}

func (x *Ipv6RibEdmPathItem) GetBindingLabel() uint32 {
	if x != nil {
		return x.BindingLabel
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetNhidFeid() uint64 {
	if x != nil {
		return x.NhidFeid
	}
	return 0
}

func (x *Ipv6RibEdmPathItem) GetMplsFeid() uint64 {
	if x != nil {
		return x.MplsFeid
	}
	return 0
}

// Information of local label for route head
type RibEdmLocalLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol Name
	ProtocolName string `protobuf:"bytes,1,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	// Client ID
	ClientId uint32 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Stale
	Stale uint32 `protobuf:"varint,3,opt,name=stale,proto3" json:"stale,omitempty"`
	// Mirrored
	Mirrored uint32 `protobuf:"varint,4,opt,name=mirrored,proto3" json:"mirrored,omitempty"`
	// Merge disable
	MergeDisable uint32 `protobuf:"varint,5,opt,name=merge_disable,json=mergeDisable,proto3" json:"merge_disable,omitempty"`
	// Redist only
	RedistOnly uint32 `protobuf:"varint,6,opt,name=redist_only,json=redistOnly,proto3" json:"redist_only,omitempty"`
	// Local label
	Label uint32 `protobuf:"varint,7,opt,name=label,proto3" json:"label,omitempty"`
	// Distance
	Distance uint32 `protobuf:"varint,8,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *RibEdmLocalLabel) Reset() {
	*x = RibEdmLocalLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmLocalLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmLocalLabel) ProtoMessage() {}

func (x *RibEdmLocalLabel) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmLocalLabel.ProtoReflect.Descriptor instead.
func (*RibEdmLocalLabel) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescGZIP(), []int{5}
}

func (x *RibEdmLocalLabel) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *RibEdmLocalLabel) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *RibEdmLocalLabel) GetStale() uint32 {
	if x != nil {
		return x.Stale
	}
	return 0
}

func (x *RibEdmLocalLabel) GetMirrored() uint32 {
	if x != nil {
		return x.Mirrored
	}
	return 0
}

func (x *RibEdmLocalLabel) GetMergeDisable() uint32 {
	if x != nil {
		return x.MergeDisable
	}
	return 0
}

func (x *RibEdmLocalLabel) GetRedistOnly() uint32 {
	if x != nil {
		return x.RedistOnly
	}
	return 0
}

func (x *RibEdmLocalLabel) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *RibEdmLocalLabel) GetDistance() uint32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

var File_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDesc = []byte{
	0x0a, 0xbe, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2f,
	0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x61, 0x66, 0x73, 0x2f, 0x61, 0x66, 0x2f,
	0x73, 0x61, 0x66, 0x73, 0x2f, 0x73, 0x61, 0x66, 0x2f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x2f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0xa5, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66,
	0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xf7, 0x09,
	0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x76, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x71, 0x6f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x71, 0x6f, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x77, 0x64, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x77, 0x64, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x62, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x62, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xd8, 0x01, 0x0a,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xb8, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62,
	0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61,
	0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0xe9, 0x01, 0x0a, 0x11, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0xbd, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x73,
	0x74, 0x64, 0x62, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66,
	0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73, 0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x61, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x52, 0x69, 0x62, 0x45, 0x64, 0x6d,
	0x50, 0x61, 0x74, 0x68, 0x22, 0xae, 0x0c, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x36, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x36,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x36,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f,
	0x6f, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x76, 0x72, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x56, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x66, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x66, 0x69, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x61, 0x66, 0x69, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x74, 0x68, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x61, 0x74, 0x68, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65,
	0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x43, 0x6e, 0x74, 0x4f, 0x66, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x76,
	0x70, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6d, 0x76, 0x70, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x74, 0x68, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x72, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x72, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x76, 0x72, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61,
	0x73, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x73, 0x72, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x19, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x70, 0x66, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0xe7,
	0x01, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xb8, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x73, 0x61, 0x66, 0x73,
	0x2e, 0x73, 0x61, 0x66, 0x2e, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x69, 0x70,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62,
	0x67, 0x70, 0x2e, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x74, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x68, 0x69, 0x64, 0x5f, 0x66, 0x65, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6e, 0x68, 0x69, 0x64, 0x46, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x66, 0x65, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x70, 0x6c,
	0x73, 0x46, 0x65, 0x69, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x13, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescData = file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDesc
)

func file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescData)
	})
	return file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDescData
}

var file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_goTypes = []interface{}{
	(*Ipv6RibEdmRoute_KEYS)(nil), // 0: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_route_KEYS
	(*Ipv6RibEdmRoute)(nil),      // 1: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_route
	(*Ipv6RibEdmAddr)(nil),       // 2: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_addr
	(*Ipv6RibEdmPath)(nil),       // 3: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_path
	(*Ipv6RibEdmPathItem)(nil),   // 4: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_path_item
	(*RibEdmLocalLabel)(nil),     // 5: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.rib_edm_local_label
}
var file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_depIdxs = []int32{
	3, // 0: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_route.route_path:type_name -> cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_path
	4, // 1: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_path.ipv6_rib_edm_path:type_name -> cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_path_item
	2, // 2: cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_path_item.remote_backup_addr:type_name -> cisco_ios_xr_ip_rib_ipv6_oper.ipv6_rib_stdby.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.protocol.bgp.as.protocol_routes.protocol_route.ipv6_rib_edm_addr
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_init()
}
func file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_init() {
	if File_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6RibEdmRoute_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6RibEdmRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6RibEdmAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6RibEdmPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6RibEdmPathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmLocalLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto = out.File
	file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_rawDesc = nil
	file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_goTypes = nil
	file_cisco_ios_xr_ip_rib_ipv6_oper_ipv6_rib_stdby_vrfs_vrf_afs_af_safs_saf_ip_rib_route_table_names_ip_rib_route_table_name_protocol_bgp_as_protocol_routes_protocol_route_ipv6_rib_edm_route_proto_depIdxs = nil
}
