// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_ospf_oper/ospf/processes/process/default_vrf/adjacency_information/neighbors/neighbor/ospf_sh_neighbor.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPF Neighbor Summary Information
type OspfShNeighbor_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName     string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	InterfaceName   string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *OspfShNeighbor_KEYS) Reset() {
	*x = OspfShNeighbor_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShNeighbor_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShNeighbor_KEYS) ProtoMessage() {}

func (x *OspfShNeighbor_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShNeighbor_KEYS.ProtoReflect.Descriptor instead.
func (*OspfShNeighbor_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescGZIP(), []int{0}
}

func (x *OspfShNeighbor_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *OspfShNeighbor_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *OspfShNeighbor_KEYS) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

type OspfShNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor ID
	NeighborId string `protobuf:"bytes,50,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"`
	// Neighbor IP Address
	NeighborAddress string `protobuf:"bytes,51,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Interface via which the neighbor is seen
	NeighborInterfaceName string `protobuf:"bytes,52,opt,name=neighbor_interface_name,json=neighborInterfaceName,proto3" json:"neighbor_interface_name,omitempty"`
	// Neighbor's DR priority
	NeighborDrPriority uint32 `protobuf:"varint,53,opt,name=neighbor_dr_priority,json=neighborDrPriority,proto3" json:"neighbor_dr_priority,omitempty"`
	// Neighbor's state
	NeighborState string `protobuf:"bytes,54,opt,name=neighbor_state,json=neighborState,proto3" json:"neighbor_state,omitempty"`
	// Designated Router state
	DrBdrState string `protobuf:"bytes,55,opt,name=dr_bdr_state,json=drBdrState,proto3" json:"dr_bdr_state,omitempty"`
	// Time until neighbor's dead timer expires (s)
	NeighborDeadTimer uint32 `protobuf:"varint,56,opt,name=neighbor_dead_timer,json=neighborDeadTimer,proto3" json:"neighbor_dead_timer,omitempty"`
	// Amount of time since the adjacency is up (s)
	NeighborUpTime uint32 `protobuf:"varint,57,opt,name=neighbor_up_time,json=neighborUpTime,proto3" json:"neighbor_up_time,omitempty"`
	// Interface is MADJ
	NeighborMadjInterface bool `protobuf:"varint,58,opt,name=neighbor_madj_interface,json=neighborMadjInterface,proto3" json:"neighbor_madj_interface,omitempty"`
	// Neighbor BFD information
	NeighborBfdInformation *OspfShNeighborBfd `protobuf:"bytes,59,opt,name=neighbor_bfd_information,json=neighborBfdInformation,proto3" json:"neighbor_bfd_information,omitempty"`
}

func (x *OspfShNeighbor) Reset() {
	*x = OspfShNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShNeighbor) ProtoMessage() {}

func (x *OspfShNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShNeighbor.ProtoReflect.Descriptor instead.
func (*OspfShNeighbor) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescGZIP(), []int{1}
}

func (x *OspfShNeighbor) GetNeighborId() string {
	if x != nil {
		return x.NeighborId
	}
	return ""
}

func (x *OspfShNeighbor) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *OspfShNeighbor) GetNeighborInterfaceName() string {
	if x != nil {
		return x.NeighborInterfaceName
	}
	return ""
}

func (x *OspfShNeighbor) GetNeighborDrPriority() uint32 {
	if x != nil {
		return x.NeighborDrPriority
	}
	return 0
}

func (x *OspfShNeighbor) GetNeighborState() string {
	if x != nil {
		return x.NeighborState
	}
	return ""
}

func (x *OspfShNeighbor) GetDrBdrState() string {
	if x != nil {
		return x.DrBdrState
	}
	return ""
}

func (x *OspfShNeighbor) GetNeighborDeadTimer() uint32 {
	if x != nil {
		return x.NeighborDeadTimer
	}
	return 0
}

func (x *OspfShNeighbor) GetNeighborUpTime() uint32 {
	if x != nil {
		return x.NeighborUpTime
	}
	return 0
}

func (x *OspfShNeighbor) GetNeighborMadjInterface() bool {
	if x != nil {
		return x.NeighborMadjInterface
	}
	return false
}

func (x *OspfShNeighbor) GetNeighborBfdInformation() *OspfShNeighborBfd {
	if x != nil {
		return x.NeighborBfdInformation
	}
	return nil
}

// OSPF Neighbor BFD information
type OspfShNeighborBfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD enable mode - Default/Strict
	BfdIntfEnableMode uint32 `protobuf:"varint,1,opt,name=bfd_intf_enable_mode,json=bfdIntfEnableMode,proto3" json:"bfd_intf_enable_mode,omitempty"`
	// Status of the BFD Session
	BfdStatusFlag uint32 `protobuf:"varint,2,opt,name=bfd_status_flag,json=bfdStatusFlag,proto3" json:"bfd_status_flag,omitempty"`
}

func (x *OspfShNeighborBfd) Reset() {
	*x = OspfShNeighborBfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShNeighborBfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShNeighborBfd) ProtoMessage() {}

func (x *OspfShNeighborBfd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShNeighborBfd.ProtoReflect.Descriptor instead.
func (*OspfShNeighborBfd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescGZIP(), []int{2}
}

func (x *OspfShNeighborBfd) GetBfdIntfEnableMode() uint32 {
	if x != nil {
		return x.BfdIntfEnableMode
	}
	return 0
}

func (x *OspfShNeighborBfd) GetBfdStatusFlag() uint32 {
	if x != nil {
		return x.BfdStatusFlag
	}
	return 0
}

var File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDesc = []byte{
	0x0a, 0x7e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x67, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x4b,
	0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x10, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x72,
	0x5f, 0x62, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x72, 0x42, 0x64, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x64, 0x6a, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4d, 0x61, 0x64, 0x6a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xb7,
	0x01, 0x0a, 0x18, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62, 0x66, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62, 0x66, 0x64,
	0x52, 0x16, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x42, 0x66, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62, 0x66, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x62, 0x66, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x62, 0x66, 0x64, 0x49, 0x6e, 0x74, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x66, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescData = file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_goTypes = []interface{}{
	(*OspfShNeighbor_KEYS)(nil), // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.adjacency_information.neighbors.neighbor.ospf_sh_neighbor_KEYS
	(*OspfShNeighbor)(nil),      // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.adjacency_information.neighbors.neighbor.ospf_sh_neighbor
	(*OspfShNeighborBfd)(nil),   // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.adjacency_information.neighbors.neighbor.ospf_sh_neighbor_bfd
}
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.adjacency_information.neighbors.neighbor.ospf_sh_neighbor.neighbor_bfd_information:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.adjacency_information.neighbors.neighbor.ospf_sh_neighbor_bfd
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_init()
}
func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_init() {
	if File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShNeighbor_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShNeighborBfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto = out.File
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_adjacency_information_neighbors_neighbor_ospf_sh_neighbor_proto_depIdxs = nil
}
