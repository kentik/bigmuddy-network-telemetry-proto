// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_ospf_oper/ospf/processes/process/default_vrf/process_information/process_areas/process_area/ospf_sh_area.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPF Area Summary Information
type OspfShArea_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	AreaId      uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *OspfShArea_KEYS) Reset() {
	*x = OspfShArea_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShArea_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShArea_KEYS) ProtoMessage() {}

func (x *OspfShArea_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShArea_KEYS.ProtoReflect.Descriptor instead.
func (*OspfShArea_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescGZIP(), []int{0}
}

func (x *OspfShArea_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *OspfShArea_KEYS) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *OspfShArea_KEYS) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type OspfShArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Area ID string
	AreaIdString string `protobuf:"bytes,50,opt,name=area_id_string,json=areaIdString,proto3" json:"area_id_string,omitempty"`
	// If true, Backbone area is active
	BackboneAreaActive bool `protobuf:"varint,51,opt,name=backbone_area_active,json=backboneAreaActive,proto3" json:"backbone_area_active,omitempty"`
	// Number of interfaces in the area
	AreaInterfaceCount uint32 `protobuf:"varint,52,opt,name=area_interface_count,json=areaInterfaceCount,proto3" json:"area_interface_count,omitempty"`
	// If true, stub area
	AreaStub bool `protobuf:"varint,53,opt,name=area_stub,json=areaStub,proto3" json:"area_stub,omitempty"`
	// If true, totally stubby area
	AreaTotalStub bool `protobuf:"varint,54,opt,name=area_total_stub,json=areaTotalStub,proto3" json:"area_total_stub,omitempty"`
	// Default cost for Stub or NSSA area
	StubDefaultCost uint32 `protobuf:"varint,55,opt,name=stub_default_cost,json=stubDefaultCost,proto3" json:"stub_default_cost,omitempty"`
	// If true, area is a NSSA
	AreaNssa bool `protobuf:"varint,56,opt,name=area_nssa,json=areaNssa,proto3" json:"area_nssa,omitempty"`
	// If true, No redistribution into this NSSA area
	NssaNoRedistribution bool `protobuf:"varint,57,opt,name=nssa_no_redistribution,json=nssaNoRedistribution,proto3" json:"nssa_no_redistribution,omitempty"`
	// If true, perform 7/5 translation
	NssaTranslate bool `protobuf:"varint,58,opt,name=nssa_translate,json=nssaTranslate,proto3" json:"nssa_translate,omitempty"`
	// If true, generate NSSA default route
	NssaDefault bool `protobuf:"varint,59,opt,name=nssa_default,json=nssaDefault,proto3" json:"nssa_default,omitempty"`
	// If true, MPLS-TE enabled
	TeEnabled bool `protobuf:"varint,60,opt,name=te_enabled,json=teEnabled,proto3" json:"te_enabled,omitempty"`
	// TE area topology version number
	TeTopologyVersion uint32 `protobuf:"varint,61,opt,name=te_topology_version,json=teTopologyVersion,proto3" json:"te_topology_version,omitempty"`
	// If true, advertise intra-area prefixes as external
	ExternalOut bool `protobuf:"varint,62,opt,name=external_out,json=externalOut,proto3" json:"external_out,omitempty"`
	// If true, advertise redistributedprefixes as summary
	SummaryIn bool `protobuf:"varint,63,opt,name=summary_in,json=summaryIn,proto3" json:"summary_in,omitempty"`
	// If true, Segment Routing enabled
	SegmentRouting uint32 `protobuf:"varint,64,opt,name=segment_routing,json=segmentRouting,proto3" json:"segment_routing,omitempty"`
	// If true, All routers in Area are SR Strict-SPF Capable
	SrStrictSpfCap bool `protobuf:"varint,65,opt,name=sr_strict_spf_cap,json=srStrictSpfCap,proto3" json:"sr_strict_spf_cap,omitempty"`
	// If true, All routers in Area have SR Strict-SPF SIDs
	SrStrictSpfsiDsAvailable bool `protobuf:"varint,66,opt,name=sr_strict_spfsi_ds_available,json=srStrictSpfsiDsAvailable,proto3" json:"sr_strict_spfsi_ds_available,omitempty"`
	// Authentication type
	AuthenticationType string `protobuf:"bytes,67,opt,name=authentication_type,json=authenticationType,proto3" json:"authentication_type,omitempty"`
	// Number of SPF calculations run
	SpfCount uint32 `protobuf:"varint,68,opt,name=spf_count,json=spfCount,proto3" json:"spf_count,omitempty"`
	// If true, inbound policy is configured
	AreaPolicyIn bool `protobuf:"varint,69,opt,name=area_policy_in,json=areaPolicyIn,proto3" json:"area_policy_in,omitempty"`
	// Inbound summary lsa filtering policy
	AreaPolicyInName string `protobuf:"bytes,70,opt,name=area_policy_in_name,json=areaPolicyInName,proto3" json:"area_policy_in_name,omitempty"`
	// If true, outbound policy is configured
	AreaPolicyOut bool `protobuf:"varint,71,opt,name=area_policy_out,json=areaPolicyOut,proto3" json:"area_policy_out,omitempty"`
	// Outbound summary lsa filtering policy
	AreaPolicyOutName string `protobuf:"bytes,72,opt,name=area_policy_out_name,json=areaPolicyOutName,proto3" json:"area_policy_out_name,omitempty"`
	// List of ranges to summarize
	AreaRangeList []*OspfShAreaRange `protobuf:"bytes,73,rep,name=area_range_list,json=areaRangeList,proto3" json:"area_range_list,omitempty"`
	// Number of LSAs in the Area
	AreaLsaCount uint32 `protobuf:"varint,74,opt,name=area_lsa_count,json=areaLsaCount,proto3" json:"area_lsa_count,omitempty"`
	// Sum of all area LSAs checksum
	AreaLsaChecksum uint32 `protobuf:"varint,75,opt,name=area_lsa_checksum,json=areaLsaChecksum,proto3" json:"area_lsa_checksum,omitempty"`
	// Number of Opaque LSAs in the Area
	AreaOpaqueLsaCount uint32 `protobuf:"varint,76,opt,name=area_opaque_lsa_count,json=areaOpaqueLsaCount,proto3" json:"area_opaque_lsa_count,omitempty"`
	// Sum of opaque LSA checksums
	AreaOpaqueLsaChecksum uint32 `protobuf:"varint,77,opt,name=area_opaque_lsa_checksum,json=areaOpaqueLsaChecksum,proto3" json:"area_opaque_lsa_checksum,omitempty"`
	// Number of LSA with demand circuit bit not set
	AreaDcBitlessLsaCount uint32 `protobuf:"varint,78,opt,name=area_dc_bitless_lsa_count,json=areaDcBitlessLsaCount,proto3" json:"area_dc_bitless_lsa_count,omitempty"`
	// Number of indication LSAs
	IndicationLsaCount uint32 `protobuf:"varint,79,opt,name=indication_lsa_count,json=indicationLsaCount,proto3" json:"indication_lsa_count,omitempty"`
	// Number of DoNotAge LSAs
	DnaLsaCount uint32 `protobuf:"varint,80,opt,name=dna_lsa_count,json=dnaLsaCount,proto3" json:"dna_lsa_count,omitempty"`
	// Number of LSAs which need to be flooded
	FloodListLength uint32 `protobuf:"varint,81,opt,name=flood_list_length,json=floodListLength,proto3" json:"flood_list_length,omitempty"`
	// Number of LFA enabled interfaces
	AreaLfaInterfaceCount uint32 `protobuf:"varint,82,opt,name=area_lfa_interface_count,json=areaLfaInterfaceCount,proto3" json:"area_lfa_interface_count,omitempty"`
	// Number of Per Prefix LFA enabled interfaces
	AreaPerPrefixLfaInterfaceCount uint32 `protobuf:"varint,83,opt,name=area_per_prefix_lfa_interface_count,json=areaPerPrefixLfaInterfaceCount,proto3" json:"area_per_prefix_lfa_interface_count,omitempty"`
	// Area LFA revision
	AreaLfaRevision uint32 `protobuf:"varint,84,opt,name=area_lfa_revision,json=areaLfaRevision,proto3" json:"area_lfa_revision,omitempty"`
	// Num of nbrs currently forming
	AreaAdjStagNumNbrForming uint32 `protobuf:"varint,85,opt,name=area_adj_stag_num_nbr_forming,json=areaAdjStagNumNbrForming,proto3" json:"area_adj_stag_num_nbr_forming,omitempty"`
	// Num of full nbrs in area
	AreaNumNbrFull uint32 `protobuf:"varint,86,opt,name=area_num_nbr_full,json=areaNumNbrFull,proto3" json:"area_num_nbr_full,omitempty"`
}

func (x *OspfShArea) Reset() {
	*x = OspfShArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShArea) ProtoMessage() {}

func (x *OspfShArea) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShArea.ProtoReflect.Descriptor instead.
func (*OspfShArea) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescGZIP(), []int{1}
}

func (x *OspfShArea) GetAreaIdString() string {
	if x != nil {
		return x.AreaIdString
	}
	return ""
}

func (x *OspfShArea) GetBackboneAreaActive() bool {
	if x != nil {
		return x.BackboneAreaActive
	}
	return false
}

func (x *OspfShArea) GetAreaInterfaceCount() uint32 {
	if x != nil {
		return x.AreaInterfaceCount
	}
	return 0
}

func (x *OspfShArea) GetAreaStub() bool {
	if x != nil {
		return x.AreaStub
	}
	return false
}

func (x *OspfShArea) GetAreaTotalStub() bool {
	if x != nil {
		return x.AreaTotalStub
	}
	return false
}

func (x *OspfShArea) GetStubDefaultCost() uint32 {
	if x != nil {
		return x.StubDefaultCost
	}
	return 0
}

func (x *OspfShArea) GetAreaNssa() bool {
	if x != nil {
		return x.AreaNssa
	}
	return false
}

func (x *OspfShArea) GetNssaNoRedistribution() bool {
	if x != nil {
		return x.NssaNoRedistribution
	}
	return false
}

func (x *OspfShArea) GetNssaTranslate() bool {
	if x != nil {
		return x.NssaTranslate
	}
	return false
}

func (x *OspfShArea) GetNssaDefault() bool {
	if x != nil {
		return x.NssaDefault
	}
	return false
}

func (x *OspfShArea) GetTeEnabled() bool {
	if x != nil {
		return x.TeEnabled
	}
	return false
}

func (x *OspfShArea) GetTeTopologyVersion() uint32 {
	if x != nil {
		return x.TeTopologyVersion
	}
	return 0
}

func (x *OspfShArea) GetExternalOut() bool {
	if x != nil {
		return x.ExternalOut
	}
	return false
}

func (x *OspfShArea) GetSummaryIn() bool {
	if x != nil {
		return x.SummaryIn
	}
	return false
}

func (x *OspfShArea) GetSegmentRouting() uint32 {
	if x != nil {
		return x.SegmentRouting
	}
	return 0
}

func (x *OspfShArea) GetSrStrictSpfCap() bool {
	if x != nil {
		return x.SrStrictSpfCap
	}
	return false
}

func (x *OspfShArea) GetSrStrictSpfsiDsAvailable() bool {
	if x != nil {
		return x.SrStrictSpfsiDsAvailable
	}
	return false
}

func (x *OspfShArea) GetAuthenticationType() string {
	if x != nil {
		return x.AuthenticationType
	}
	return ""
}

func (x *OspfShArea) GetSpfCount() uint32 {
	if x != nil {
		return x.SpfCount
	}
	return 0
}

func (x *OspfShArea) GetAreaPolicyIn() bool {
	if x != nil {
		return x.AreaPolicyIn
	}
	return false
}

func (x *OspfShArea) GetAreaPolicyInName() string {
	if x != nil {
		return x.AreaPolicyInName
	}
	return ""
}

func (x *OspfShArea) GetAreaPolicyOut() bool {
	if x != nil {
		return x.AreaPolicyOut
	}
	return false
}

func (x *OspfShArea) GetAreaPolicyOutName() string {
	if x != nil {
		return x.AreaPolicyOutName
	}
	return ""
}

func (x *OspfShArea) GetAreaRangeList() []*OspfShAreaRange {
	if x != nil {
		return x.AreaRangeList
	}
	return nil
}

func (x *OspfShArea) GetAreaLsaCount() uint32 {
	if x != nil {
		return x.AreaLsaCount
	}
	return 0
}

func (x *OspfShArea) GetAreaLsaChecksum() uint32 {
	if x != nil {
		return x.AreaLsaChecksum
	}
	return 0
}

func (x *OspfShArea) GetAreaOpaqueLsaCount() uint32 {
	if x != nil {
		return x.AreaOpaqueLsaCount
	}
	return 0
}

func (x *OspfShArea) GetAreaOpaqueLsaChecksum() uint32 {
	if x != nil {
		return x.AreaOpaqueLsaChecksum
	}
	return 0
}

func (x *OspfShArea) GetAreaDcBitlessLsaCount() uint32 {
	if x != nil {
		return x.AreaDcBitlessLsaCount
	}
	return 0
}

func (x *OspfShArea) GetIndicationLsaCount() uint32 {
	if x != nil {
		return x.IndicationLsaCount
	}
	return 0
}

func (x *OspfShArea) GetDnaLsaCount() uint32 {
	if x != nil {
		return x.DnaLsaCount
	}
	return 0
}

func (x *OspfShArea) GetFloodListLength() uint32 {
	if x != nil {
		return x.FloodListLength
	}
	return 0
}

func (x *OspfShArea) GetAreaLfaInterfaceCount() uint32 {
	if x != nil {
		return x.AreaLfaInterfaceCount
	}
	return 0
}

func (x *OspfShArea) GetAreaPerPrefixLfaInterfaceCount() uint32 {
	if x != nil {
		return x.AreaPerPrefixLfaInterfaceCount
	}
	return 0
}

func (x *OspfShArea) GetAreaLfaRevision() uint32 {
	if x != nil {
		return x.AreaLfaRevision
	}
	return 0
}

func (x *OspfShArea) GetAreaAdjStagNumNbrForming() uint32 {
	if x != nil {
		return x.AreaAdjStagNumNbrForming
	}
	return 0
}

func (x *OspfShArea) GetAreaNumNbrFull() uint32 {
	if x != nil {
		return x.AreaNumNbrFull
	}
	return 0
}

// OSPF Area Range Information
type OspfShAreaRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP prefix for summarization
	RangePrefix string `protobuf:"bytes,1,opt,name=range_prefix,json=rangePrefix,proto3" json:"range_prefix,omitempty"`
	// Network mask
	RangeMask string `protobuf:"bytes,2,opt,name=range_mask,json=rangeMask,proto3" json:"range_mask,omitempty"`
	// Cost
	Cost uint32 `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	// Whether to advertise Summary LSAs for this range
	AdvertiseFlag bool `protobuf:"varint,4,opt,name=advertise_flag,json=advertiseFlag,proto3" json:"advertise_flag,omitempty"`
}

func (x *OspfShAreaRange) Reset() {
	*x = OspfShAreaRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShAreaRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShAreaRange) ProtoMessage() {}

func (x *OspfShAreaRange) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShAreaRange.ProtoReflect.Descriptor instead.
func (*OspfShAreaRange) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescGZIP(), []int{2}
}

func (x *OspfShAreaRange) GetRangePrefix() string {
	if x != nil {
		return x.RangePrefix
	}
	return ""
}

func (x *OspfShAreaRange) GetRangeMask() string {
	if x != nil {
		return x.RangeMask
	}
	return ""
}

func (x *OspfShAreaRange) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *OspfShAreaRange) GetAdvertiseFlag() bool {
	if x != nil {
		return x.AdvertiseFlag
	}
	return false
}

var File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDesc = []byte{
	0x0a, 0x80, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6f,
	0x73, 0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x2f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x6d, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x22, 0x69, 0x0a, 0x11, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8c, 0x0e,
	0x0a, 0x0c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x73, 0x74, 0x75, 0x62, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x53, 0x74, 0x75, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x62, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x61, 0x72, 0x65, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x62, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x62, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x4e, 0x73, 0x73, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x73, 0x73, 0x61, 0x5f, 0x6e,
	0x6f, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x73, 0x73, 0x61, 0x4e, 0x6f, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x73, 0x73, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x73, 0x73, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x73, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x73, 0x73, 0x61, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x11, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x70,
	0x66, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x70, 0x66, 0x43, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x1c, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x66, 0x73, 0x69, 0x5f, 0x64,
	0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x73, 0x72, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x70, 0x66, 0x73, 0x69,
	0x44, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x70, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x12,
	0x2d, 0x0a, 0x13, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72,
	0x65, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x72, 0x65, 0x61, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x72, 0x65, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4f, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x49, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x61, 0x72, 0x65, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x72,
	0x65, 0x61, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x72, 0x65, 0x61, 0x4c, 0x73, 0x61, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x72, 0x65,
	0x61, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x12, 0x38, 0x0a, 0x19, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x63, 0x5f, 0x62, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x72, 0x65, 0x61, 0x44, 0x63, 0x42, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x73, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x6e, 0x61, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6e, 0x61, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x37,
	0x0a, 0x18, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x61, 0x72, 0x65, 0x61, 0x4c, 0x66, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x61, 0x72, 0x65, 0x61, 0x50, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x66, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x66, 0x61,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x72, 0x65, 0x61, 0x4c, 0x66, 0x61, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x1d, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x72, 0x65, 0x61, 0x41, 0x64, 0x6a,
	0x53, 0x74, 0x61, 0x67, 0x4e, 0x75, 0x6d, 0x4e, 0x62, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x62,
	0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x72,
	0x65, 0x61, 0x4e, 0x75, 0x6d, 0x4e, 0x62, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x22, 0x91, 0x01, 0x0a,
	0x12, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescData = file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_goTypes = []interface{}{
	(*OspfShArea_KEYS)(nil), // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area_KEYS
	(*OspfShArea)(nil),      // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area
	(*OspfShAreaRange)(nil), // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area_range
}
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area.area_range_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area_range
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_init()
}
func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_init() {
	if File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShArea_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShAreaRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto = out.File
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area_ospf_sh_area_proto_depIdxs = nil
}
