// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_ospf_oper/ospf/processes/process/default_vrf/process_information/process_summary/ospf_sh_summary.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPF Summary
type OspfShSummary_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
}

func (x *OspfShSummary_KEYS) Reset() {
	*x = OspfShSummary_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShSummary_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShSummary_KEYS) ProtoMessage() {}

func (x *OspfShSummary_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShSummary_KEYS.ProtoReflect.Descriptor instead.
func (*OspfShSummary_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{0}
}

func (x *OspfShSummary_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

type OspfShSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, Role is Standby, Active otherwise
	RoleStandby bool `protobuf:"varint,50,opt,name=role_standby,json=roleStandby,proto3" json:"role_standby,omitempty"`
	// Role, V1/V2 Active/Standby
	Role uint32 `protobuf:"varint,51,opt,name=role,proto3" json:"role,omitempty"`
	// If true, NSR is enabled
	NsrEnabled bool `protobuf:"varint,52,opt,name=nsr_enabled,json=nsrEnabled,proto3" json:"nsr_enabled,omitempty"`
	// Trigger RP Switchover on detectable process restart
	NsrSwitchoverOnRestart bool `protobuf:"varint,53,opt,name=nsr_switchover_on_restart,json=nsrSwitchoverOnRestart,proto3" json:"nsr_switchover_on_restart,omitempty"`
	// If true, running in IGP-Intact mode
	IgpIntactOn bool `protobuf:"varint,54,opt,name=igp_intact_on,json=igpIntactOn,proto3" json:"igp_intact_on,omitempty"`
	// Router ID
	RouterId string `protobuf:"bytes,55,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	// Type of Service supported
	TosOptions uint32 `protobuf:"varint,56,opt,name=tos_options,json=tosOptions,proto3" json:"tos_options,omitempty"`
	// Opaque LSA capable
	OpaqueCapable bool `protobuf:"varint,57,opt,name=opaque_capable,json=opaqueCapable,proto3" json:"opaque_capable,omitempty"`
	// If true, is an Area Border Router
	AreaBorderRouter bool `protobuf:"varint,58,opt,name=area_border_router,json=areaBorderRouter,proto3" json:"area_border_router,omitempty"`
	// If true, is an AS Border Router
	AsBorderRouter bool `protobuf:"varint,59,opt,name=as_border_router,json=asBorderRouter,proto3" json:"as_border_router,omitempty"`
	// If true, vrf lite is enabled
	VrfLiteEnabled bool `protobuf:"varint,60,opt,name=vrf_lite_enabled,json=vrfLiteEnabled,proto3" json:"vrf_lite_enabled,omitempty"`
	// If true, originate Router LSA with maximum metric
	MaximumMetricStart bool `protobuf:"varint,61,opt,name=maximum_metric_start,json=maximumMetricStart,proto3" json:"maximum_metric_start,omitempty"`
	// Time remaining for hold down timer (s)
	MaximumMetricStartTimer uint32 `protobuf:"varint,62,opt,name=maximum_metric_start_timer,json=maximumMetricStartTimer,proto3" json:"maximum_metric_start_timer,omitempty"`
	// Max-metric set reason
	MaximumMetricSetReason string `protobuf:"bytes,63,opt,name=maximum_metric_set_reason,json=maximumMetricSetReason,proto3" json:"maximum_metric_set_reason,omitempty"`
	// If true, ABR duties temporarily disabled
	MaximumMetricAbrOffMode bool `protobuf:"varint,64,opt,name=maximum_metric_abr_off_mode,json=maximumMetricAbrOffMode,proto3" json:"maximum_metric_abr_off_mode,omitempty"`
	// Reasons for ABR duties being temporarily disabled
	MaximumMetricAbrOffReasons string `protobuf:"bytes,65,opt,name=maximum_metric_abr_off_reasons,json=maximumMetricAbrOffReasons,proto3" json:"maximum_metric_abr_off_reasons,omitempty"`
	// Buffer time in seconds since last neighbor activity, to remain in max-metric ABR off state
	MaximumMetricAbrOffBufferTime uint32 `protobuf:"varint,66,opt,name=maximum_metric_abr_off_buffer_time,json=maximumMetricAbrOffBufferTime,proto3" json:"maximum_metric_abr_off_buffer_time,omitempty"`
	// Max-metric list
	MaximumMetricList []*OspfShMaxMetric `protobuf:"bytes,67,rep,name=maximum_metric_list,json=maximumMetricList,proto3" json:"maximum_metric_list,omitempty"`
	// Redistribution list
	RedistributionList []*OspfShRedist `protobuf:"bytes,68,rep,name=redistribution_list,json=redistributionList,proto3" json:"redistribution_list,omitempty"`
	// Scheduling delay for SPF (ms) This is valid if configured below 64k Deprecated by SPFStartTimeU32]
	SpfStartTime uint32 `protobuf:"varint,69,opt,name=spf_start_time,json=spfStartTime,proto3" json:"spf_start_time,omitempty"`
	// Minimum delay time between SPF runs (ms) This is valid if configured below 64k Deprecated by SPFHoldTimeU32]
	SpfHoldTime uint32 `protobuf:"varint,70,opt,name=spf_hold_time,json=spfHoldTime,proto3" json:"spf_hold_time,omitempty"`
	// Maximum delay time between SPF runs (ms) This is valid if configured below 64k Deprecated by SPFMaximumTimeU32]
	SpfMaximumTime uint32 `protobuf:"varint,71,opt,name=spf_maximum_time,json=spfMaximumTime,proto3" json:"spf_maximum_time,omitempty"`
	// Scheduling delay for SPF (ms)
	SpfStartTimeU32 uint32 `protobuf:"varint,72,opt,name=spf_start_time_u32,json=spfStartTimeU32,proto3" json:"spf_start_time_u32,omitempty"`
	// Minimum delay time between SPF runs (ms)
	SpfHoldTimeU32 uint32 `protobuf:"varint,73,opt,name=spf_hold_time_u32,json=spfHoldTimeU32,proto3" json:"spf_hold_time_u32,omitempty"`
	// Maximum delay time between SPF runs (ms)
	SpfMaximumTimeU32 uint32 `protobuf:"varint,74,opt,name=spf_maximum_time_u32,json=spfMaximumTimeU32,proto3" json:"spf_maximum_time_u32,omitempty"`
	// If true, prefix-priority policy is configured
	SpfPrefixPriority bool `protobuf:"varint,75,opt,name=spf_prefix_priority,json=spfPrefixPriority,proto3" json:"spf_prefix_priority,omitempty"`
	// SPF Prefix-priority route policy
	SpfPrefixPriorityRoutePolicy string `protobuf:"bytes,76,opt,name=spf_prefix_priority_route_policy,json=spfPrefixPriorityRoutePolicy,proto3" json:"spf_prefix_priority_route_policy,omitempty"`
	// Inital LSA throttle delay (ms)
	LsaStartTime int32 `protobuf:"zigzag32,77,opt,name=lsa_start_time,json=lsaStartTime,proto3" json:"lsa_start_time,omitempty"`
	// Second delay before generating next LSA (ms)
	LsaHoldTime uint32 `protobuf:"varint,78,opt,name=lsa_hold_time,json=lsaHoldTime,proto3" json:"lsa_hold_time,omitempty"`
	// Maximum delay before generating an LSA (ms)
	LsaMaximumTime uint32 `protobuf:"varint,79,opt,name=lsa_maximum_time,json=lsaMaximumTime,proto3" json:"lsa_maximum_time,omitempty"`
	// Minimum time between LSA regeneration (ms) Rel 4.0.1, deprecated by MinimumLSAIntervalU32]
	MinimumLsaInterval uint32 `protobuf:"varint,80,opt,name=minimum_lsa_interval,json=minimumLsaInterval,proto3" json:"minimum_lsa_interval,omitempty"`
	// Minimum time between LSA regeneration (ms)
	MinimumLsaIntervalU32 uint32 `protobuf:"varint,81,opt,name=minimum_lsa_interval_u32,json=minimumLsaIntervalU32,proto3" json:"minimum_lsa_interval_u32,omitempty"`
	// LSA refresh interval (sec)
	LsaRefreshInterval uint32 `protobuf:"varint,82,opt,name=lsa_refresh_interval,json=lsaRefreshInterval,proto3" json:"lsa_refresh_interval,omitempty"`
	// Minimum time between accepting LSAs (ms) Rel 4.0.1, deprecated by MinimumLSAArrivalIntervalU32]
	MinimumLsaArrivalInterval uint32 `protobuf:"varint,83,opt,name=minimum_lsa_arrival_interval,json=minimumLsaArrivalInterval,proto3" json:"minimum_lsa_arrival_interval,omitempty"`
	// Minimum time between accepting LSAs (ms)
	MinimumLsaArrivalIntervalU32 uint32 `protobuf:"varint,84,opt,name=minimum_lsa_arrival_interval_u32,json=minimumLsaArrivalIntervalU32,proto3" json:"minimum_lsa_arrival_interval_u32,omitempty"`
	// Flood pacing timer (ms)
	IfFloodPacingInterval uint32 `protobuf:"varint,85,opt,name=if_flood_pacing_interval,json=ifFloodPacingInterval,proto3" json:"if_flood_pacing_interval,omitempty"`
	// Retransmission pacing timer (ms)
	IfRetransPacingInterval uint32 `protobuf:"varint,86,opt,name=if_retrans_pacing_interval,json=ifRetransPacingInterval,proto3" json:"if_retrans_pacing_interval,omitempty"`
	// Num of nbrs brought up initially per area
	AdjStagInitNumNbr uint32 `protobuf:"varint,87,opt,name=adj_stag_init_num_nbr,json=adjStagInitNumNbr,proto3" json:"adj_stag_init_num_nbr,omitempty"`
	// Max num of nbrs brought up simultaneously per OSPF instance
	AdjStagMaxNumNbr uint32 `protobuf:"varint,88,opt,name=adj_stag_max_num_nbr,json=adjStagMaxNumNbr,proto3" json:"adj_stag_max_num_nbr,omitempty"`
	// If true, OSPF Adjacency Staggering is configured
	AdjStaggerEnabled bool `protobuf:"varint,89,opt,name=adj_stagger_enabled,json=adjStaggerEnabled,proto3" json:"adj_stagger_enabled,omitempty"`
	// Num of nbrs currently forming for OSPF instance
	AdjStagNumNbrForming uint32 `protobuf:"varint,90,opt,name=adj_stag_num_nbr_forming,json=adjStagNumNbrForming,proto3" json:"adj_stag_num_nbr_forming,omitempty"`
	// Num of full nbrs
	NumberNbrsFull uint32 `protobuf:"varint,91,opt,name=number_nbrs_full,json=numberNbrsFull,proto3" json:"number_nbrs_full,omitempty"`
	// Number of AS scope LSAs
	AsLsaCount uint32 `protobuf:"varint,92,opt,name=as_lsa_count,json=asLsaCount,proto3" json:"as_lsa_count,omitempty"`
	// Sum of AS scope LSA checksum
	AsLsaChecksum uint32 `protobuf:"varint,93,opt,name=as_lsa_checksum,json=asLsaChecksum,proto3" json:"as_lsa_checksum,omitempty"`
	// Number of Opaque LSAs
	OpaqueLsaCount uint32 `protobuf:"varint,94,opt,name=opaque_lsa_count,json=opaqueLsaCount,proto3" json:"opaque_lsa_count,omitempty"`
	// Sum of opaque LSA checksum
	OpaqueLsaChecksum uint32 `protobuf:"varint,95,opt,name=opaque_lsa_checksum,json=opaqueLsaChecksum,proto3" json:"opaque_lsa_checksum,omitempty"`
	// Number of External and AS Opaque LSAs with demand circut bit not set
	AsDcBitlessLsaCount uint32 `protobuf:"varint,96,opt,name=as_dc_bitless_lsa_count,json=asDcBitlessLsaCount,proto3" json:"as_dc_bitless_lsa_count,omitempty"`
	// Number of External and AS Opaque LSAs with DoNotAge set
	AsDnaLsaCount uint32 `protobuf:"varint,97,opt,name=as_dna_lsa_count,json=asDnaLsaCount,proto3" json:"as_dna_lsa_count,omitempty"`
	// Number of areas
	AreaCount uint32 `protobuf:"varint,98,opt,name=area_count,json=areaCount,proto3" json:"area_count,omitempty"`
	// Number of normal Areas
	NormalAreaCount uint32 `protobuf:"varint,99,opt,name=normal_area_count,json=normalAreaCount,proto3" json:"normal_area_count,omitempty"`
	// Number of Stub and Total Stub Areas
	StubAreaCount uint32 `protobuf:"varint,100,opt,name=stub_area_count,json=stubAreaCount,proto3" json:"stub_area_count,omitempty"`
	// Number of NSSA Areas
	NssaAreaCount uint32 `protobuf:"varint,101,opt,name=nssa_area_count,json=nssaAreaCount,proto3" json:"nssa_area_count,omitempty"`
	// Maximum number of interfaces
	MaximumInterfaces uint32 `protobuf:"varint,102,opt,name=maximum_interfaces,json=maximumInterfaces,proto3" json:"maximum_interfaces,omitempty"`
	// Length of AS LSAs flood list
	AsLsaFloodListLength uint32 `protobuf:"varint,103,opt,name=as_lsa_flood_list_length,json=asLsaFloodListLength,proto3" json:"as_lsa_flood_list_length,omitempty"`
	// If true, NSF enabled
	NsfEnabled bool `protobuf:"varint,104,opt,name=nsf_enabled,json=nsfEnabled,proto3" json:"nsf_enabled,omitempty"`
	//  Length of time since the last NSF (s)
	LastNsfTime uint32 `protobuf:"varint,105,opt,name=last_nsf_time,json=lastNsfTime,proto3" json:"last_nsf_time,omitempty"`
	// Total time to complete NSF (s)
	NsfTime uint32 `protobuf:"varint,106,opt,name=nsf_time,json=nsfTime,proto3" json:"nsf_time,omitempty"`
	// The number of redistributed prefixes allowed
	RedistributionLimit uint32 `protobuf:"varint,107,opt,name=redistribution_limit,json=redistributionLimit,proto3" json:"redistribution_limit,omitempty"`
	// When the number of redistributed prefixes reaches this threshold, a warning message is issued
	RedistributionThreshold uint32 `protobuf:"varint,108,opt,name=redistribution_threshold,json=redistributionThreshold,proto3" json:"redistribution_threshold,omitempty"`
	// If true, only a syslog message is printed when redistribution prefix limit is reached
	RedistributionLimitWarn bool `protobuf:"varint,109,opt,name=redistribution_limit_warn,json=redistributionLimitWarn,proto3" json:"redistribution_limit_warn,omitempty"`
	// Amount of time routes are retained after graceful shutdown (s)
	GracefulShutdownRetentionTime uint32 `protobuf:"varint,110,opt,name=graceful_shutdown_retention_time,json=gracefulShutdownRetentionTime,proto3" json:"graceful_shutdown_retention_time,omitempty"`
	// State of graceful shutdown
	GracefulShutdownState string `protobuf:"bytes,111,opt,name=graceful_shutdown_state,json=gracefulShutdownState,proto3" json:"graceful_shutdown_state,omitempty"`
	// Domain ID information
	DomainId *OspfShDomainId `protobuf:"bytes,112,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// If true, prefix limit for table has been  reached
	TablePrefixLimitReached bool `protobuf:"varint,113,opt,name=table_prefix_limit_reached,json=tablePrefixLimitReached,proto3" json:"table_prefix_limit_reached,omitempty"`
	// Non self-generated LSA count
	NonSelfLsaCount uint32 `protobuf:"varint,114,opt,name=non_self_lsa_count,json=nonSelfLsaCount,proto3" json:"non_self_lsa_count,omitempty"`
	// If true, max-lsa protection enabled
	MaxLsaEnabled bool `protobuf:"varint,115,opt,name=max_lsa_enabled,json=maxLsaEnabled,proto3" json:"max_lsa_enabled,omitempty"`
	// Maximum allowed number of non self-generated LSAs
	MaxLsaLimit uint32 `protobuf:"varint,116,opt,name=max_lsa_limit,json=maxLsaLimit,proto3" json:"max_lsa_limit,omitempty"`
	// max-lsa protection warning threshold
	MaxLsaTreshold uint32 `protobuf:"varint,117,opt,name=max_lsa_treshold,json=maxLsaTreshold,proto3" json:"max_lsa_treshold,omitempty"`
	// Warning only when max-lsa reached
	MaxLsaWarningOnly bool `protobuf:"varint,118,opt,name=max_lsa_warning_only,json=maxLsaWarningOnly,proto3" json:"max_lsa_warning_only,omitempty"`
	// Time ignoring new LSAs after max-lsa reached
	MaxLsaIgnoreTime uint32 `protobuf:"varint,119,opt,name=max_lsa_ignore_time,json=maxLsaIgnoreTime,proto3" json:"max_lsa_ignore_time,omitempty"`
	// Time after which LSA protection counter is reset
	MaxLsaResetTime uint32 `protobuf:"varint,120,opt,name=max_lsa_reset_time,json=maxLsaResetTime,proto3" json:"max_lsa_reset_time,omitempty"`
	// Max allowed number of entering ignore state
	MaxLsaIgnoreLimit uint32 `protobuf:"varint,121,opt,name=max_lsa_ignore_limit,json=maxLsaIgnoreLimit,proto3" json:"max_lsa_ignore_limit,omitempty"`
	// How many times ignore state has been entered
	MaxLsaIgnoreCount uint32 `protobuf:"varint,122,opt,name=max_lsa_ignore_count,json=maxLsaIgnoreCount,proto3" json:"max_lsa_ignore_count,omitempty"`
	// Remaining time when ignore timer is running
	MaxLsaIgnoreTimer uint32 `protobuf:"varint,123,opt,name=max_lsa_ignore_timer,json=maxLsaIgnoreTimer,proto3" json:"max_lsa_ignore_timer,omitempty"`
	// Remaining time when reset timer is running
	MaxLsaResetTimer uint32 `protobuf:"varint,124,opt,name=max_lsa_reset_timer,json=maxLsaResetTimer,proto3" json:"max_lsa_reset_timer,omitempty"`
	// Context name
	ContextName string `protobuf:"bytes,125,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
	// If true, snmp trap is enabled
	SnmpTrapEnabled bool `protobuf:"varint,126,opt,name=snmp_trap_enabled,json=snmpTrapEnabled,proto3" json:"snmp_trap_enabled,omitempty"`
	// If true, UCMP is enabled
	Ucmp bool `protobuf:"varint,127,opt,name=ucmp,proto3" json:"ucmp,omitempty"`
	// UCMP Prefix-list
	UcmpPrefixList string `protobuf:"bytes,128,opt,name=ucmp_prefix_list,json=ucmpPrefixList,proto3" json:"ucmp_prefix_list,omitempty"`
	// UCMP Variance
	UcmpVariance int32 `protobuf:"zigzag32,129,opt,name=ucmp_variance,json=ucmpVariance,proto3" json:"ucmp_variance,omitempty"`
	// Delay between end of SPF and start of UCMP calculation (ms)
	UcmpDelay uint32 `protobuf:"varint,130,opt,name=ucmp_delay,json=ucmpDelay,proto3" json:"ucmp_delay,omitempty"`
	// True if connected to LSD
	LsdConnected bool `protobuf:"varint,131,opt,name=lsd_connected,json=lsdConnected,proto3" json:"lsd_connected,omitempty"`
	// True if registered with LSD
	LsdRegistered bool `protobuf:"varint,132,opt,name=lsd_registered,json=lsdRegistered,proto3" json:"lsd_registered,omitempty"`
	// True if bound to LSD
	LsdBound bool `protobuf:"varint,133,opt,name=lsd_bound,json=lsdBound,proto3" json:"lsd_bound,omitempty"`
	// LSD Connection Revision
	LsdConnectionRevision uint32 `protobuf:"varint,134,opt,name=lsd_connection_revision,json=lsdConnectionRevision,proto3" json:"lsd_connection_revision,omitempty"`
	// True if Segment Routing Global Block configured
	SrgbConfigured bool `protobuf:"varint,135,opt,name=srgb_configured,json=srgbConfigured,proto3" json:"srgb_configured,omitempty"`
	// Segment Routing Global Block start label value
	SrgbStart uint32 `protobuf:"varint,136,opt,name=srgb_start,json=srgbStart,proto3" json:"srgb_start,omitempty"`
	// Segment Routing Global Block end label value
	SrgbEnd uint32 `protobuf:"varint,137,opt,name=srgb_end,json=srgbEnd,proto3" json:"srgb_end,omitempty"`
	// Segment Routing Global Block allocation status
	SrgbStatus string `protobuf:"bytes,138,opt,name=srgb_status,json=srgbStatus,proto3" json:"srgb_status,omitempty"`
	// True if Segment Routing Strict-SPF capable
	SrStrictSpfCap bool `protobuf:"varint,139,opt,name=sr_strict_spf_cap,json=srStrictSpfCap,proto3" json:"sr_strict_spf_cap,omitempty"`
}

func (x *OspfShSummary) Reset() {
	*x = OspfShSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShSummary) ProtoMessage() {}

func (x *OspfShSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShSummary.ProtoReflect.Descriptor instead.
func (*OspfShSummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{1}
}

func (x *OspfShSummary) GetRoleStandby() bool {
	if x != nil {
		return x.RoleStandby
	}
	return false
}

func (x *OspfShSummary) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *OspfShSummary) GetNsrEnabled() bool {
	if x != nil {
		return x.NsrEnabled
	}
	return false
}

func (x *OspfShSummary) GetNsrSwitchoverOnRestart() bool {
	if x != nil {
		return x.NsrSwitchoverOnRestart
	}
	return false
}

func (x *OspfShSummary) GetIgpIntactOn() bool {
	if x != nil {
		return x.IgpIntactOn
	}
	return false
}

func (x *OspfShSummary) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *OspfShSummary) GetTosOptions() uint32 {
	if x != nil {
		return x.TosOptions
	}
	return 0
}

func (x *OspfShSummary) GetOpaqueCapable() bool {
	if x != nil {
		return x.OpaqueCapable
	}
	return false
}

func (x *OspfShSummary) GetAreaBorderRouter() bool {
	if x != nil {
		return x.AreaBorderRouter
	}
	return false
}

func (x *OspfShSummary) GetAsBorderRouter() bool {
	if x != nil {
		return x.AsBorderRouter
	}
	return false
}

func (x *OspfShSummary) GetVrfLiteEnabled() bool {
	if x != nil {
		return x.VrfLiteEnabled
	}
	return false
}

func (x *OspfShSummary) GetMaximumMetricStart() bool {
	if x != nil {
		return x.MaximumMetricStart
	}
	return false
}

func (x *OspfShSummary) GetMaximumMetricStartTimer() uint32 {
	if x != nil {
		return x.MaximumMetricStartTimer
	}
	return 0
}

func (x *OspfShSummary) GetMaximumMetricSetReason() string {
	if x != nil {
		return x.MaximumMetricSetReason
	}
	return ""
}

func (x *OspfShSummary) GetMaximumMetricAbrOffMode() bool {
	if x != nil {
		return x.MaximumMetricAbrOffMode
	}
	return false
}

func (x *OspfShSummary) GetMaximumMetricAbrOffReasons() string {
	if x != nil {
		return x.MaximumMetricAbrOffReasons
	}
	return ""
}

func (x *OspfShSummary) GetMaximumMetricAbrOffBufferTime() uint32 {
	if x != nil {
		return x.MaximumMetricAbrOffBufferTime
	}
	return 0
}

func (x *OspfShSummary) GetMaximumMetricList() []*OspfShMaxMetric {
	if x != nil {
		return x.MaximumMetricList
	}
	return nil
}

func (x *OspfShSummary) GetRedistributionList() []*OspfShRedist {
	if x != nil {
		return x.RedistributionList
	}
	return nil
}

func (x *OspfShSummary) GetSpfStartTime() uint32 {
	if x != nil {
		return x.SpfStartTime
	}
	return 0
}

func (x *OspfShSummary) GetSpfHoldTime() uint32 {
	if x != nil {
		return x.SpfHoldTime
	}
	return 0
}

func (x *OspfShSummary) GetSpfMaximumTime() uint32 {
	if x != nil {
		return x.SpfMaximumTime
	}
	return 0
}

func (x *OspfShSummary) GetSpfStartTimeU32() uint32 {
	if x != nil {
		return x.SpfStartTimeU32
	}
	return 0
}

func (x *OspfShSummary) GetSpfHoldTimeU32() uint32 {
	if x != nil {
		return x.SpfHoldTimeU32
	}
	return 0
}

func (x *OspfShSummary) GetSpfMaximumTimeU32() uint32 {
	if x != nil {
		return x.SpfMaximumTimeU32
	}
	return 0
}

func (x *OspfShSummary) GetSpfPrefixPriority() bool {
	if x != nil {
		return x.SpfPrefixPriority
	}
	return false
}

func (x *OspfShSummary) GetSpfPrefixPriorityRoutePolicy() string {
	if x != nil {
		return x.SpfPrefixPriorityRoutePolicy
	}
	return ""
}

func (x *OspfShSummary) GetLsaStartTime() int32 {
	if x != nil {
		return x.LsaStartTime
	}
	return 0
}

func (x *OspfShSummary) GetLsaHoldTime() uint32 {
	if x != nil {
		return x.LsaHoldTime
	}
	return 0
}

func (x *OspfShSummary) GetLsaMaximumTime() uint32 {
	if x != nil {
		return x.LsaMaximumTime
	}
	return 0
}

func (x *OspfShSummary) GetMinimumLsaInterval() uint32 {
	if x != nil {
		return x.MinimumLsaInterval
	}
	return 0
}

func (x *OspfShSummary) GetMinimumLsaIntervalU32() uint32 {
	if x != nil {
		return x.MinimumLsaIntervalU32
	}
	return 0
}

func (x *OspfShSummary) GetLsaRefreshInterval() uint32 {
	if x != nil {
		return x.LsaRefreshInterval
	}
	return 0
}

func (x *OspfShSummary) GetMinimumLsaArrivalInterval() uint32 {
	if x != nil {
		return x.MinimumLsaArrivalInterval
	}
	return 0
}

func (x *OspfShSummary) GetMinimumLsaArrivalIntervalU32() uint32 {
	if x != nil {
		return x.MinimumLsaArrivalIntervalU32
	}
	return 0
}

func (x *OspfShSummary) GetIfFloodPacingInterval() uint32 {
	if x != nil {
		return x.IfFloodPacingInterval
	}
	return 0
}

func (x *OspfShSummary) GetIfRetransPacingInterval() uint32 {
	if x != nil {
		return x.IfRetransPacingInterval
	}
	return 0
}

func (x *OspfShSummary) GetAdjStagInitNumNbr() uint32 {
	if x != nil {
		return x.AdjStagInitNumNbr
	}
	return 0
}

func (x *OspfShSummary) GetAdjStagMaxNumNbr() uint32 {
	if x != nil {
		return x.AdjStagMaxNumNbr
	}
	return 0
}

func (x *OspfShSummary) GetAdjStaggerEnabled() bool {
	if x != nil {
		return x.AdjStaggerEnabled
	}
	return false
}

func (x *OspfShSummary) GetAdjStagNumNbrForming() uint32 {
	if x != nil {
		return x.AdjStagNumNbrForming
	}
	return 0
}

func (x *OspfShSummary) GetNumberNbrsFull() uint32 {
	if x != nil {
		return x.NumberNbrsFull
	}
	return 0
}

func (x *OspfShSummary) GetAsLsaCount() uint32 {
	if x != nil {
		return x.AsLsaCount
	}
	return 0
}

func (x *OspfShSummary) GetAsLsaChecksum() uint32 {
	if x != nil {
		return x.AsLsaChecksum
	}
	return 0
}

func (x *OspfShSummary) GetOpaqueLsaCount() uint32 {
	if x != nil {
		return x.OpaqueLsaCount
	}
	return 0
}

func (x *OspfShSummary) GetOpaqueLsaChecksum() uint32 {
	if x != nil {
		return x.OpaqueLsaChecksum
	}
	return 0
}

func (x *OspfShSummary) GetAsDcBitlessLsaCount() uint32 {
	if x != nil {
		return x.AsDcBitlessLsaCount
	}
	return 0
}

func (x *OspfShSummary) GetAsDnaLsaCount() uint32 {
	if x != nil {
		return x.AsDnaLsaCount
	}
	return 0
}

func (x *OspfShSummary) GetAreaCount() uint32 {
	if x != nil {
		return x.AreaCount
	}
	return 0
}

func (x *OspfShSummary) GetNormalAreaCount() uint32 {
	if x != nil {
		return x.NormalAreaCount
	}
	return 0
}

func (x *OspfShSummary) GetStubAreaCount() uint32 {
	if x != nil {
		return x.StubAreaCount
	}
	return 0
}

func (x *OspfShSummary) GetNssaAreaCount() uint32 {
	if x != nil {
		return x.NssaAreaCount
	}
	return 0
}

func (x *OspfShSummary) GetMaximumInterfaces() uint32 {
	if x != nil {
		return x.MaximumInterfaces
	}
	return 0
}

func (x *OspfShSummary) GetAsLsaFloodListLength() uint32 {
	if x != nil {
		return x.AsLsaFloodListLength
	}
	return 0
}

func (x *OspfShSummary) GetNsfEnabled() bool {
	if x != nil {
		return x.NsfEnabled
	}
	return false
}

func (x *OspfShSummary) GetLastNsfTime() uint32 {
	if x != nil {
		return x.LastNsfTime
	}
	return 0
}

func (x *OspfShSummary) GetNsfTime() uint32 {
	if x != nil {
		return x.NsfTime
	}
	return 0
}

func (x *OspfShSummary) GetRedistributionLimit() uint32 {
	if x != nil {
		return x.RedistributionLimit
	}
	return 0
}

func (x *OspfShSummary) GetRedistributionThreshold() uint32 {
	if x != nil {
		return x.RedistributionThreshold
	}
	return 0
}

func (x *OspfShSummary) GetRedistributionLimitWarn() bool {
	if x != nil {
		return x.RedistributionLimitWarn
	}
	return false
}

func (x *OspfShSummary) GetGracefulShutdownRetentionTime() uint32 {
	if x != nil {
		return x.GracefulShutdownRetentionTime
	}
	return 0
}

func (x *OspfShSummary) GetGracefulShutdownState() string {
	if x != nil {
		return x.GracefulShutdownState
	}
	return ""
}

func (x *OspfShSummary) GetDomainId() *OspfShDomainId {
	if x != nil {
		return x.DomainId
	}
	return nil
}

func (x *OspfShSummary) GetTablePrefixLimitReached() bool {
	if x != nil {
		return x.TablePrefixLimitReached
	}
	return false
}

func (x *OspfShSummary) GetNonSelfLsaCount() uint32 {
	if x != nil {
		return x.NonSelfLsaCount
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaEnabled() bool {
	if x != nil {
		return x.MaxLsaEnabled
	}
	return false
}

func (x *OspfShSummary) GetMaxLsaLimit() uint32 {
	if x != nil {
		return x.MaxLsaLimit
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaTreshold() uint32 {
	if x != nil {
		return x.MaxLsaTreshold
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaWarningOnly() bool {
	if x != nil {
		return x.MaxLsaWarningOnly
	}
	return false
}

func (x *OspfShSummary) GetMaxLsaIgnoreTime() uint32 {
	if x != nil {
		return x.MaxLsaIgnoreTime
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaResetTime() uint32 {
	if x != nil {
		return x.MaxLsaResetTime
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaIgnoreLimit() uint32 {
	if x != nil {
		return x.MaxLsaIgnoreLimit
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaIgnoreCount() uint32 {
	if x != nil {
		return x.MaxLsaIgnoreCount
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaIgnoreTimer() uint32 {
	if x != nil {
		return x.MaxLsaIgnoreTimer
	}
	return 0
}

func (x *OspfShSummary) GetMaxLsaResetTimer() uint32 {
	if x != nil {
		return x.MaxLsaResetTimer
	}
	return 0
}

func (x *OspfShSummary) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *OspfShSummary) GetSnmpTrapEnabled() bool {
	if x != nil {
		return x.SnmpTrapEnabled
	}
	return false
}

func (x *OspfShSummary) GetUcmp() bool {
	if x != nil {
		return x.Ucmp
	}
	return false
}

func (x *OspfShSummary) GetUcmpPrefixList() string {
	if x != nil {
		return x.UcmpPrefixList
	}
	return ""
}

func (x *OspfShSummary) GetUcmpVariance() int32 {
	if x != nil {
		return x.UcmpVariance
	}
	return 0
}

func (x *OspfShSummary) GetUcmpDelay() uint32 {
	if x != nil {
		return x.UcmpDelay
	}
	return 0
}

func (x *OspfShSummary) GetLsdConnected() bool {
	if x != nil {
		return x.LsdConnected
	}
	return false
}

func (x *OspfShSummary) GetLsdRegistered() bool {
	if x != nil {
		return x.LsdRegistered
	}
	return false
}

func (x *OspfShSummary) GetLsdBound() bool {
	if x != nil {
		return x.LsdBound
	}
	return false
}

func (x *OspfShSummary) GetLsdConnectionRevision() uint32 {
	if x != nil {
		return x.LsdConnectionRevision
	}
	return 0
}

func (x *OspfShSummary) GetSrgbConfigured() bool {
	if x != nil {
		return x.SrgbConfigured
	}
	return false
}

func (x *OspfShSummary) GetSrgbStart() uint32 {
	if x != nil {
		return x.SrgbStart
	}
	return 0
}

func (x *OspfShSummary) GetSrgbEnd() uint32 {
	if x != nil {
		return x.SrgbEnd
	}
	return 0
}

func (x *OspfShSummary) GetSrgbStatus() string {
	if x != nil {
		return x.SrgbStatus
	}
	return ""
}

func (x *OspfShSummary) GetSrStrictSpfCap() bool {
	if x != nil {
		return x.SrStrictSpfCap
	}
	return false
}

type OspfShTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Second     uint32 `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"`
	Nanosecond uint32 `protobuf:"varint,2,opt,name=nanosecond,proto3" json:"nanosecond,omitempty"`
}

func (x *OspfShTime) Reset() {
	*x = OspfShTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShTime) ProtoMessage() {}

func (x *OspfShTime) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShTime.ProtoReflect.Descriptor instead.
func (*OspfShTime) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{2}
}

func (x *OspfShTime) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *OspfShTime) GetNanosecond() uint32 {
	if x != nil {
		return x.Nanosecond
	}
	return 0
}

type StringType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringType) Reset() {
	*x = StringType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringType) ProtoMessage() {}

func (x *StringType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringType.ProtoReflect.Descriptor instead.
func (*StringType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{3}
}

func (x *StringType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Redistributed protocol instance
type OspfShRedistProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolType string `protobuf:"bytes,1,opt,name=protocol_type,json=protocolType,proto3" json:"protocol_type,omitempty"`
	// ISIS instance identifier
	IsisInstanceId *StringType `protobuf:"bytes,2,opt,name=isis_instance_id,json=isisInstanceId,proto3" json:"isis_instance_id,omitempty"`
	// OSPF process identifier
	OspfProcessId *StringType `protobuf:"bytes,3,opt,name=ospf_process_id,json=ospfProcessId,proto3" json:"ospf_process_id,omitempty"`
	// BGP Autonomous System Number
	BgpAsNumber *StringType `protobuf:"bytes,4,opt,name=bgp_as_number,json=bgpAsNumber,proto3" json:"bgp_as_number,omitempty"`
	// Autonomous System Number
	EigrpAsNumber *StringType `protobuf:"bytes,5,opt,name=eigrp_as_number,json=eigrpAsNumber,proto3" json:"eigrp_as_number,omitempty"`
	// Connected instance name
	ConnectedInstance *StringType `protobuf:"bytes,6,opt,name=connected_instance,json=connectedInstance,proto3" json:"connected_instance,omitempty"`
}

func (x *OspfShRedistProto) Reset() {
	*x = OspfShRedistProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShRedistProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShRedistProto) ProtoMessage() {}

func (x *OspfShRedistProto) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShRedistProto.ProtoReflect.Descriptor instead.
func (*OspfShRedistProto) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{4}
}

func (x *OspfShRedistProto) GetProtocolType() string {
	if x != nil {
		return x.ProtocolType
	}
	return ""
}

func (x *OspfShRedistProto) GetIsisInstanceId() *StringType {
	if x != nil {
		return x.IsisInstanceId
	}
	return nil
}

func (x *OspfShRedistProto) GetOspfProcessId() *StringType {
	if x != nil {
		return x.OspfProcessId
	}
	return nil
}

func (x *OspfShRedistProto) GetBgpAsNumber() *StringType {
	if x != nil {
		return x.BgpAsNumber
	}
	return nil
}

func (x *OspfShRedistProto) GetEigrpAsNumber() *StringType {
	if x != nil {
		return x.EigrpAsNumber
	}
	return nil
}

func (x *OspfShRedistProto) GetConnectedInstance() *StringType {
	if x != nil {
		return x.ConnectedInstance
	}
	return nil
}

// OSPF Redistribution Information
type OspfShRedist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol Information
	RedistributionProtocol *OspfShRedistProto `protobuf:"bytes,1,opt,name=redistribution_protocol,json=redistributionProtocol,proto3" json:"redistribution_protocol,omitempty"`
	// If true, Metric configured
	MetricFlag bool `protobuf:"varint,2,opt,name=metric_flag,json=metricFlag,proto3" json:"metric_flag,omitempty"`
	// Route metric
	Metric uint32 `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	// Whether to use CIDR
	Classless bool `protobuf:"varint,4,opt,name=classless,proto3" json:"classless,omitempty"`
	// To NSSA areas only
	NssaOnly bool `protobuf:"varint,5,opt,name=nssa_only,json=nssaOnly,proto3" json:"nssa_only,omitempty"`
}

func (x *OspfShRedist) Reset() {
	*x = OspfShRedist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShRedist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShRedist) ProtoMessage() {}

func (x *OspfShRedist) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShRedist.ProtoReflect.Descriptor instead.
func (*OspfShRedist) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{5}
}

func (x *OspfShRedist) GetRedistributionProtocol() *OspfShRedistProto {
	if x != nil {
		return x.RedistributionProtocol
	}
	return nil
}

func (x *OspfShRedist) GetMetricFlag() bool {
	if x != nil {
		return x.MetricFlag
	}
	return false
}

func (x *OspfShRedist) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *OspfShRedist) GetClassless() bool {
	if x != nil {
		return x.Classless
	}
	return false
}

func (x *OspfShRedist) GetNssaOnly() bool {
	if x != nil {
		return x.NssaOnly
	}
	return false
}

// OSPF Domain ID
type OspfShDomainIdEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Domain ID Type
	DomainIdType uint32 `protobuf:"varint,1,opt,name=domain_id_type,json=domainIdType,proto3" json:"domain_id_type,omitempty"`
	// Domain ID value
	DomainIdValue []byte `protobuf:"bytes,2,opt,name=domain_id_value,json=domainIdValue,proto3" json:"domain_id_value,omitempty"`
}

func (x *OspfShDomainIdEntry) Reset() {
	*x = OspfShDomainIdEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDomainIdEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDomainIdEntry) ProtoMessage() {}

func (x *OspfShDomainIdEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDomainIdEntry.ProtoReflect.Descriptor instead.
func (*OspfShDomainIdEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{6}
}

func (x *OspfShDomainIdEntry) GetDomainIdType() uint32 {
	if x != nil {
		return x.DomainIdType
	}
	return 0
}

func (x *OspfShDomainIdEntry) GetDomainIdValue() []byte {
	if x != nil {
		return x.DomainIdValue
	}
	return nil
}

// OSPF Domain ID entries
type OspfShDomainId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary Domain ID
	PrimaryDomainId *OspfShDomainIdEntry `protobuf:"bytes,1,opt,name=primary_domain_id,json=primaryDomainId,proto3" json:"primary_domain_id,omitempty"`
	// List of secondary domain IDs
	SecondaryDomainIdList []*OspfShDomainIdEntry `protobuf:"bytes,2,rep,name=secondary_domain_id_list,json=secondaryDomainIdList,proto3" json:"secondary_domain_id_list,omitempty"`
}

func (x *OspfShDomainId) Reset() {
	*x = OspfShDomainId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDomainId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDomainId) ProtoMessage() {}

func (x *OspfShDomainId) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDomainId.ProtoReflect.Descriptor instead.
func (*OspfShDomainId) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{7}
}

func (x *OspfShDomainId) GetPrimaryDomainId() *OspfShDomainIdEntry {
	if x != nil {
		return x.PrimaryDomainId
	}
	return nil
}

func (x *OspfShDomainId) GetSecondaryDomainIdList() []*OspfShDomainIdEntry {
	if x != nil {
		return x.SecondaryDomainIdList
	}
	return nil
}

// OSPF Max-metric Information
type OspfShMaxMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max-metric reason
	MaxMetricReason uint32 `protobuf:"varint,1,opt,name=max_metric_reason,json=maxMetricReason,proto3" json:"max_metric_reason,omitempty"`
	// Max-metric enabled
	MaxMetricEnabled bool `protobuf:"varint,2,opt,name=max_metric_enabled,json=maxMetricEnabled,proto3" json:"max_metric_enabled,omitempty"`
	// If true, BGP is up, no maximum metric Router LSA
	UnsetMaximumMetric bool `protobuf:"varint,3,opt,name=unset_maximum_metric,json=unsetMaximumMetric,proto3" json:"unset_maximum_metric,omitempty"`
	// Saved UnsetMaximumMetric
	SavedUnsetMaximumMetric bool `protobuf:"varint,4,opt,name=saved_unset_maximum_metric,json=savedUnsetMaximumMetric,proto3" json:"saved_unset_maximum_metric,omitempty"`
	// Time remaining until we will start using normal metrics (s)
	MaximumMetricStartTime uint32 `protobuf:"varint,5,opt,name=maximum_metric_start_time,json=maximumMetricStartTime,proto3" json:"maximum_metric_start_time,omitempty"`
	// Hold time configured (s)
	SavedStartupTime uint32 `protobuf:"varint,6,opt,name=saved_startup_time,json=savedStartupTime,proto3" json:"saved_startup_time,omitempty"`
	// If true, set max-metric in stub links
	MaximumMetricIncludeStubs bool `protobuf:"varint,7,opt,name=maximum_metric_include_stubs,json=maximumMetricIncludeStubs,proto3" json:"maximum_metric_include_stubs,omitempty"`
	// If true, advertise max-metric in summary-LSAs
	MaximumMetricSummaryLsa bool `protobuf:"varint,8,opt,name=maximum_metric_summary_lsa,json=maximumMetricSummaryLsa,proto3" json:"maximum_metric_summary_lsa,omitempty"`
	// Max-metric value to advertise in summary-LSAs
	MaximumMetricSummaryLsaMetric uint32 `protobuf:"varint,9,opt,name=maximum_metric_summary_lsa_metric,json=maximumMetricSummaryLsaMetric,proto3" json:"maximum_metric_summary_lsa_metric,omitempty"`
	// If true, advertise max-metric in external-LSAs
	MaximumMetricExternalLsa bool `protobuf:"varint,10,opt,name=maximum_metric_external_lsa,json=maximumMetricExternalLsa,proto3" json:"maximum_metric_external_lsa,omitempty"`
	// Max-metric value to advertise in external-LSAs
	MaximumMetricExternalLsaMetric uint32 `protobuf:"varint,11,opt,name=maximum_metric_external_lsa_metric,json=maximumMetricExternalLsaMetric,proto3" json:"maximum_metric_external_lsa_metric,omitempty"`
	// Time max-metric was used for
	MaximumMetricOriginatedFor uint32 `protobuf:"varint,12,opt,name=maximum_metric_originated_for,json=maximumMetricOriginatedFor,proto3" json:"maximum_metric_originated_for,omitempty"`
	// Time max-metric condition was cleared
	MaximumMetricTimeUnset *OspfShTime `protobuf:"bytes,13,opt,name=maximum_metric_time_unset,json=maximumMetricTimeUnset,proto3" json:"maximum_metric_time_unset,omitempty"`
	// Max-metric unset reason
	MaximumMetricUnsetReason string `protobuf:"bytes,14,opt,name=maximum_metric_unset_reason,json=maximumMetricUnsetReason,proto3" json:"maximum_metric_unset_reason,omitempty"`
}

func (x *OspfShMaxMetric) Reset() {
	*x = OspfShMaxMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMaxMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMaxMetric) ProtoMessage() {}

func (x *OspfShMaxMetric) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMaxMetric.ProtoReflect.Descriptor instead.
func (*OspfShMaxMetric) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP(), []int{8}
}

func (x *OspfShMaxMetric) GetMaxMetricReason() uint32 {
	if x != nil {
		return x.MaxMetricReason
	}
	return 0
}

func (x *OspfShMaxMetric) GetMaxMetricEnabled() bool {
	if x != nil {
		return x.MaxMetricEnabled
	}
	return false
}

func (x *OspfShMaxMetric) GetUnsetMaximumMetric() bool {
	if x != nil {
		return x.UnsetMaximumMetric
	}
	return false
}

func (x *OspfShMaxMetric) GetSavedUnsetMaximumMetric() bool {
	if x != nil {
		return x.SavedUnsetMaximumMetric
	}
	return false
}

func (x *OspfShMaxMetric) GetMaximumMetricStartTime() uint32 {
	if x != nil {
		return x.MaximumMetricStartTime
	}
	return 0
}

func (x *OspfShMaxMetric) GetSavedStartupTime() uint32 {
	if x != nil {
		return x.SavedStartupTime
	}
	return 0
}

func (x *OspfShMaxMetric) GetMaximumMetricIncludeStubs() bool {
	if x != nil {
		return x.MaximumMetricIncludeStubs
	}
	return false
}

func (x *OspfShMaxMetric) GetMaximumMetricSummaryLsa() bool {
	if x != nil {
		return x.MaximumMetricSummaryLsa
	}
	return false
}

func (x *OspfShMaxMetric) GetMaximumMetricSummaryLsaMetric() uint32 {
	if x != nil {
		return x.MaximumMetricSummaryLsaMetric
	}
	return 0
}

func (x *OspfShMaxMetric) GetMaximumMetricExternalLsa() bool {
	if x != nil {
		return x.MaximumMetricExternalLsa
	}
	return false
}

func (x *OspfShMaxMetric) GetMaximumMetricExternalLsaMetric() uint32 {
	if x != nil {
		return x.MaximumMetricExternalLsaMetric
	}
	return 0
}

func (x *OspfShMaxMetric) GetMaximumMetricOriginatedFor() uint32 {
	if x != nil {
		return x.MaximumMetricOriginatedFor
	}
	return 0
}

func (x *OspfShMaxMetric) GetMaximumMetricTimeUnset() *OspfShTime {
	if x != nil {
		return x.MaximumMetricTimeUnset
	}
	return nil
}

func (x *OspfShMaxMetric) GetMaximumMetricUnsetReason() string {
	if x != nil {
		return x.MaximumMetricUnsetReason
	}
	return ""
}

var File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDesc = []byte{
	0x0a, 0x78, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x62, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x39,
	0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xef, 0x22, 0x0a, 0x0f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x73, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x73, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6e, 0x73, 0x72, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6f,
	0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x67, 0x70, 0x49, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x5f, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x72, 0x66, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x72, 0x66,
	0x4c, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a,
	0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x62, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x62, 0x72, 0x4f, 0x66, 0x66, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x62, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x62, 0x72, 0x4f, 0x66, 0x66,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x62, 0x72, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x41, 0x62, 0x72, 0x4f, 0x66, 0x66, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x76, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x13,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x52, 0x12, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x70, 0x66, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x70, 0x66, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x70, 0x66, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x70, 0x66, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x70, 0x66, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x70, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x33, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x70, 0x66, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x70, 0x66, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x33, 0x32, 0x12, 0x2f, 0x0a,
	0x14, 0x73, 0x70, 0x66, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x70, 0x66,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x33, 0x32, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x70, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x70, 0x66,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x20, 0x73, 0x70, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x70, 0x66, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x73, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c,
	0x6c, 0x73, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x73, 0x61, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x73, 0x61, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x73, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x73, 0x61, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x4c, 0x73, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x73, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x55, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x73, 0x61, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x73, 0x61, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x73, 0x61, 0x41, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x33, 0x32,
	0x12, 0x37, 0x0a, 0x18, 0x69, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x55, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x69, 0x66, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x66, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69,
	0x66, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x15, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x62, 0x72, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x67, 0x49, 0x6e,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x4e, 0x62, 0x72, 0x12, 0x2e, 0x0a, 0x14, 0x61, 0x64, 0x6a, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x62, 0x72,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x67, 0x4d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x4e, 0x62, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x6a, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x64, 0x6a, 0x5f,
	0x73, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x64, 0x6a, 0x53,
	0x74, 0x61, 0x67, 0x4e, 0x75, 0x6d, 0x4e, 0x62, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x62, 0x72, 0x73, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x62, 0x72, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73,
	0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x73, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x73, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x73, 0x4c, 0x73, 0x61, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x4c, 0x73, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x34,
	0x0a, 0x17, 0x61, 0x73, 0x5f, 0x64, 0x63, 0x5f, 0x62, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x61, 0x73, 0x44, 0x63, 0x42, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x73, 0x61, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x73, 0x5f, 0x64, 0x6e, 0x61, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x73, 0x44, 0x6e, 0x61, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x75, 0x62,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x73, 0x73, 0x61, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x73, 0x73, 0x61, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x73, 0x5f, 0x6c, 0x73,
	0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x73, 0x4c, 0x73, 0x61,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x73, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x73, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x73, 0x66, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x73, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x73, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x73, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a,
	0x19, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x1a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12,
	0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x66, 0x4c, 0x73, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x73, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4c, 0x73, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x73, 0x61,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x74, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x4c, 0x73, 0x61, 0x54, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x4c, 0x73, 0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x4c, 0x73, 0x61, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x4c, 0x73, 0x61, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4c,
	0x73, 0x61, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x4c, 0x73, 0x61, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x4c, 0x73, 0x61, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x4c, 0x73, 0x61, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6e,
	0x6d, 0x70, 0x54, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x63, 0x6d, 0x70, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x63, 0x6d,
	0x70, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x63, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x63,
	0x6d, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x63, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x81, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x75, 0x63, 0x6d, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x63, 0x6d, 0x70, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x73, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x73, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x73, 0x64, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6c, 0x73, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x73, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x85, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x73, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x37,
	0x0a, 0x17, 0x6c, 0x73, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x6c, 0x73, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x72, 0x67, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x72, 0x67, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x88, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x72, 0x67, 0x62, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x89, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x67, 0x62, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x72, 0x67, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x67, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x66,
	0x5f, 0x63, 0x61, 0x70, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x70, 0x66, 0x43, 0x61, 0x70, 0x22, 0x46, 0x0a, 0x0c, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x22, 0x23, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc2, 0x06, 0x0a, 0x14, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f,
	0x73, 0x70, 0x66, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x93, 0x01, 0x0a,
	0x0d, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x65, 0x69, 0x67, 0x72, 0x70, 0x5f, 0x61, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65,
	0x69, 0x67, 0x72, 0x70, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x9e, 0x01, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb8, 0x02,
	0x0a, 0x0e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74,
	0x12, 0xb1, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x16, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x73, 0x73, 0x61, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x73, 0x73, 0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x67, 0x0a, 0x17, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf4, 0x02, 0x0a, 0x11, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0xa7, 0x01, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0xb4, 0x01, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc9, 0x07, 0x0a, 0x12, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x73, 0x61, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x61, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x62,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x75,
	0x62, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x73, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x73, 0x61, 0x12,
	0x48, 0x0a, 0x21, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4c, 0x73, 0x61, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x73, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x73, 0x61, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x73, 0x61, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0xab, 0x01, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescData = file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_goTypes = []interface{}{
	(*OspfShSummary_KEYS)(nil),  // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_summary_KEYS
	(*OspfShSummary)(nil),       // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_summary
	(*OspfShTime)(nil),          // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_time
	(*StringType)(nil),          // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.string_type
	(*OspfShRedistProto)(nil),   // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto
	(*OspfShRedist)(nil),        // 5: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist
	(*OspfShDomainIdEntry)(nil), // 6: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id_entry
	(*OspfShDomainId)(nil),      // 7: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id
	(*OspfShMaxMetric)(nil),     // 8: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_max_metric
}
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_depIdxs = []int32{
	8,  // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_summary.maximum_metric_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_max_metric
	5,  // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_summary.redistribution_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist
	7,  // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_summary.domain_id:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id
	3,  // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto.isis_instance_id:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.string_type
	3,  // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto.ospf_process_id:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.string_type
	3,  // 5: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto.bgp_as_number:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.string_type
	3,  // 6: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto.eigrp_as_number:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.string_type
	3,  // 7: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto.connected_instance:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.string_type
	4,  // 8: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist.redistribution_protocol:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_redist_proto
	6,  // 9: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id.primary_domain_id:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id_entry
	6,  // 10: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id.secondary_domain_id_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_domain_id_entry
	2,  // 11: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_max_metric.maximum_metric_time_unset:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary.ospf_sh_time
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_init()
}
func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_init() {
	if File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShSummary_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShRedistProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShRedist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDomainIdEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDomainId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMaxMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto = out.File
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_summary_ospf_sh_summary_proto_depIdxs = nil
}
