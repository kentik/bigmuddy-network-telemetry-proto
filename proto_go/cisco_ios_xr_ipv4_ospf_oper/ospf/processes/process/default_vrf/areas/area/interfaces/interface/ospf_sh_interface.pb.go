// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_ospf_oper/ospf/processes/process/default_vrf/areas/area/interfaces/interface/ospf_sh_interface.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPF Interface Information
type OspfShInterface_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName   string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	AreaId        uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *OspfShInterface_KEYS) Reset() {
	*x = OspfShInterface_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShInterface_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShInterface_KEYS) ProtoMessage() {}

func (x *OspfShInterface_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShInterface_KEYS.ProtoReflect.Descriptor instead.
func (*OspfShInterface_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP(), []int{0}
}

func (x *OspfShInterface_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *OspfShInterface_KEYS) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *OspfShInterface_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type OspfShInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface
	InterfaceName string `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Interface state
	InterfaceState string `protobuf:"bytes,51,opt,name=interface_state,json=interfaceState,proto3" json:"interface_state,omitempty"`
	// If true, line protocol is up
	InterfaceLineState bool `protobuf:"varint,52,opt,name=interface_line_state,json=interfaceLineState,proto3" json:"interface_line_state,omitempty"`
	// Interface IP Address
	InterfaceAddress string `protobuf:"bytes,53,opt,name=interface_address,json=interfaceAddress,proto3" json:"interface_address,omitempty"`
	// Interface IP Mask
	InterfaceMask uint32 `protobuf:"varint,54,opt,name=interface_mask,json=interfaceMask,proto3" json:"interface_mask,omitempty"`
	// Area ID string in decimal or dotted-decimal format
	InterfaceArea string `protobuf:"bytes,55,opt,name=interface_area,json=interfaceArea,proto3" json:"interface_area,omitempty"`
	// Interface SID
	InterfaceSid uint32 `protobuf:"varint,56,opt,name=interface_sid,json=interfaceSid,proto3" json:"interface_sid,omitempty"`
	// SID PHP Off
	InterfaceSidPhpOff bool `protobuf:"varint,57,opt,name=interface_sid_php_off,json=interfaceSidPhpOff,proto3" json:"interface_sid_php_off,omitempty"`
	// SID N-Flag Clear
	InterfaceSidNFlagClear bool `protobuf:"varint,58,opt,name=interface_sid_n_flag_clear,json=interfaceSidNFlagClear,proto3" json:"interface_sid_n_flag_clear,omitempty"`
	// Interface Strict-SPF SID
	InterfaceStrictSpfSid uint32 `protobuf:"varint,59,opt,name=interface_strict_spf_sid,json=interfaceStrictSpfSid,proto3" json:"interface_strict_spf_sid,omitempty"`
	// Strict-SPF SID PHP Off
	InterfaceStrictSpfSidPhpOff bool `protobuf:"varint,60,opt,name=interface_strict_spf_sid_php_off,json=interfaceStrictSpfSidPhpOff,proto3" json:"interface_strict_spf_sid_php_off,omitempty"`
	// Strict-SPF SID N-Flag Clear
	InterfaceStrictSpfSidNFlagClear bool `protobuf:"varint,61,opt,name=interface_strict_spf_sid_n_flag_clear,json=interfaceStrictSpfSidNFlagClear,proto3" json:"interface_strict_spf_sid_n_flag_clear,omitempty"`
	// Interface Router ID
	InterfaceRouterId string `protobuf:"bytes,62,opt,name=interface_router_id,json=interfaceRouterId,proto3" json:"interface_router_id,omitempty"`
	// Network type
	NetworkType string `protobuf:"bytes,63,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	// IP MTU
	IpMtu uint32 `protobuf:"varint,64,opt,name=ip_mtu,json=ipMtu,proto3" json:"ip_mtu,omitempty"`
	// Maximum Packet Size
	MaximumPacketSize uint32 `protobuf:"varint,65,opt,name=maximum_packet_size,json=maximumPacketSize,proto3" json:"maximum_packet_size,omitempty"`
	// Interface tunnel flags
	InterfaceTunnelFlags uint32 `protobuf:"varint,66,opt,name=interface_tunnel_flags,json=interfaceTunnelFlags,proto3" json:"interface_tunnel_flags,omitempty"`
	// Interface link cost
	InterfaceLinkCost uint32 `protobuf:"varint,67,opt,name=interface_link_cost,json=interfaceLinkCost,proto3" json:"interface_link_cost,omitempty"`
	// Interface bandwidth
	InterfaceBandwidth uint32 `protobuf:"varint,68,opt,name=interface_bandwidth,json=interfaceBandwidth,proto3" json:"interface_bandwidth,omitempty"`
	// If true, cost fallback is configured
	CfgCostFallback bool `protobuf:"varint,69,opt,name=cfg_cost_fallback,json=cfgCostFallback,proto3" json:"cfg_cost_fallback,omitempty"`
	// Interface fallback cost
	InterfaceCostFallback uint32 `protobuf:"varint,70,opt,name=interface_cost_fallback,json=interfaceCostFallback,proto3" json:"interface_cost_fallback,omitempty"`
	// If true, cost fallback is active
	CostFallbackActive bool `protobuf:"varint,71,opt,name=cost_fallback_active,json=costFallbackActive,proto3" json:"cost_fallback_active,omitempty"`
	// If true, configured as LDP sync
	ConfiguredLdpSync bool `protobuf:"varint,72,opt,name=configured_ldp_sync,json=configuredLdpSync,proto3" json:"configured_ldp_sync,omitempty"`
	// If true, sync igp shortcuts
	ConfiguredLdpSyncIgpShortcuts bool `protobuf:"varint,73,opt,name=configured_ldp_sync_igp_shortcuts,json=configuredLdpSyncIgpShortcuts,proto3" json:"configured_ldp_sync_igp_shortcuts,omitempty"`
	// If true, interface LDP sync is achieved
	InterfaceLdpSync bool `protobuf:"varint,74,opt,name=interface_ldp_sync,json=interfaceLdpSync,proto3" json:"interface_ldp_sync,omitempty"`
	// If true, configured as demand circuit
	ConfiguredDemandCircuit bool `protobuf:"varint,75,opt,name=configured_demand_circuit,json=configuredDemandCircuit,proto3" json:"configured_demand_circuit,omitempty"`
	// If true, interface running as demand circuit
	InterfaceDemandCircuit bool `protobuf:"varint,76,opt,name=interface_demand_circuit,json=interfaceDemandCircuit,proto3" json:"interface_demand_circuit,omitempty"`
	// Number of LSAs with demand circuit bit not set for the area in which the interface is running
	InterfaceDcBitlessLsaCount uint32 `protobuf:"varint,77,opt,name=interface_dc_bitless_lsa_count,json=interfaceDcBitlessLsaCount,proto3" json:"interface_dc_bitless_lsa_count,omitempty"`
	// Interface Transmission delay
	TransmissionDelay uint32 `protobuf:"varint,78,opt,name=transmission_delay,json=transmissionDelay,proto3" json:"transmission_delay,omitempty"`
	// Interface OSPF state
	OspfInterfaceState string `protobuf:"bytes,79,opt,name=ospf_interface_state,json=ospfInterfaceState,proto3" json:"ospf_interface_state,omitempty"`
	// Interface priority
	InterfacePriority uint32 `protobuf:"varint,80,opt,name=interface_priority,json=interfacePriority,proto3" json:"interface_priority,omitempty"`
	// If true, designated router
	DesignatedRouter bool `protobuf:"varint,81,opt,name=designated_router,json=designatedRouter,proto3" json:"designated_router,omitempty"`
	// Designated router ID
	DesignatedRouterId string `protobuf:"bytes,82,opt,name=designated_router_id,json=designatedRouterId,proto3" json:"designated_router_id,omitempty"`
	// Designated router interface address
	DesignatedRouterAddress string `protobuf:"bytes,83,opt,name=designated_router_address,json=designatedRouterAddress,proto3" json:"designated_router_address,omitempty"`
	// If true, backup designated router
	BackupDesignatedRouter bool `protobuf:"varint,84,opt,name=backup_designated_router,json=backupDesignatedRouter,proto3" json:"backup_designated_router,omitempty"`
	// Backup designated router ID
	BackupDesignatedRouterId string `protobuf:"bytes,85,opt,name=backup_designated_router_id,json=backupDesignatedRouterId,proto3" json:"backup_designated_router_id,omitempty"`
	// Backup designated router interface address
	BackupDesignatedRouterAddress string `protobuf:"bytes,86,opt,name=backup_designated_router_address,json=backupDesignatedRouterAddress,proto3" json:"backup_designated_router_address,omitempty"`
	// The amount of time in seconds before flush timer for old network LSA expires
	NetworkLsaFlushTimer uint32 `protobuf:"varint,87,opt,name=network_lsa_flush_timer,json=networkLsaFlushTimer,proto3" json:"network_lsa_flush_timer,omitempty"`
	// Filter is configured for out going LSAs
	InterfaceLsaFilter bool `protobuf:"varint,88,opt,name=interface_lsa_filter,json=interfaceLsaFilter,proto3" json:"interface_lsa_filter,omitempty"`
	// Configured hello interval (s)
	HelloInterval uint32 `protobuf:"varint,89,opt,name=hello_interval,json=helloInterval,proto3" json:"hello_interval,omitempty"`
	// Configured hello interval (ms)
	HelloIntervalMs uint32 `protobuf:"varint,90,opt,name=hello_interval_ms,json=helloIntervalMs,proto3" json:"hello_interval_ms,omitempty"`
	// Configured dead interval (s)
	DeadInterval uint32 `protobuf:"varint,91,opt,name=dead_interval,json=deadInterval,proto3" json:"dead_interval,omitempty"`
	// Configured wait interval (s)
	WaitInterval uint32 `protobuf:"varint,92,opt,name=wait_interval,json=waitInterval,proto3" json:"wait_interval,omitempty"`
	// Configured retransmit interval (s)
	InterfaceRetransmissionInterrval uint32 `protobuf:"varint,93,opt,name=interface_retransmission_interrval,json=interfaceRetransmissionInterrval,proto3" json:"interface_retransmission_interrval,omitempty"`
	// If true, NSF is enabled
	InterfaceNsfEnabled bool `protobuf:"varint,94,opt,name=interface_nsf_enabled,json=interfaceNsfEnabled,proto3" json:"interface_nsf_enabled,omitempty"`
	// If true, NSF restart in progress on this interface
	InterfaceNsf bool `protobuf:"varint,95,opt,name=interface_nsf,json=interfaceNsf,proto3" json:"interface_nsf,omitempty"`
	// Time since last NSF restart (s)
	InterfaceLastNsf uint32 `protobuf:"varint,96,opt,name=interface_last_nsf,json=interfaceLastNsf,proto3" json:"interface_last_nsf,omitempty"`
	// If true, passive interface
	PassiveInterface bool `protobuf:"varint,97,opt,name=passive_interface,json=passiveInterface,proto3" json:"passive_interface,omitempty"`
	// Time until next Hello (s)
	NextHelloTime uint32 `protobuf:"varint,98,opt,name=next_hello_time,json=nextHelloTime,proto3" json:"next_hello_time,omitempty"`
	// Time until next Hello (ms)
	NextHelloTimeMs uint32 `protobuf:"varint,99,opt,name=next_hello_time_ms,json=nextHelloTimeMs,proto3" json:"next_hello_time_ms,omitempty"`
	// Information for neighbors on the interface
	InterfaceNeighborList []*OspfShInterfaceNbr `protobuf:"bytes,100,rep,name=interface_neighbor_list,json=interfaceNeighborList,proto3" json:"interface_neighbor_list,omitempty"`
	// BFD information
	InterfaceBfdInformation *OspfShInterfaceBfd `protobuf:"bytes,101,opt,name=interface_bfd_information,json=interfaceBfdInformation,proto3" json:"interface_bfd_information,omitempty"`
	// TTL security enabled on the interface
	TtlSecurityEnabled bool `protobuf:"varint,102,opt,name=ttl_security_enabled,json=ttlSecurityEnabled,proto3" json:"ttl_security_enabled,omitempty"`
	// TTL security hop counts
	TtlSecurityHopCount uint32 `protobuf:"varint,103,opt,name=ttl_security_hop_count,json=ttlSecurityHopCount,proto3" json:"ttl_security_hop_count,omitempty"`
	// Active interface details
	ActiveInterface *OspfShInterfaceUp `protobuf:"bytes,104,opt,name=active_interface,json=activeInterface,proto3" json:"active_interface,omitempty"`
	// If true, interface is multi-area
	InterfaceisMadj bool `protobuf:"varint,105,opt,name=interfaceis_madj,json=interfaceisMadj,proto3" json:"interfaceis_madj,omitempty"`
	// Total number of multi-area
	InterfaceMadjCount uint32 `protobuf:"varint,106,opt,name=interface_madj_count,json=interfaceMadjCount,proto3" json:"interface_madj_count,omitempty"`
	// Information for multi-area on the interface
	InterfaceMadjList []*OspfShInterfaceMadj `protobuf:"bytes,107,rep,name=interface_madj_list,json=interfaceMadjList,proto3" json:"interface_madj_list,omitempty"`
	// Prefix Suppression for primary addresses
	PrefixSuppressPrimaryAddresses bool `protobuf:"varint,108,opt,name=prefix_suppress_primary_addresses,json=prefixSuppressPrimaryAddresses,proto3" json:"prefix_suppress_primary_addresses,omitempty"`
	// Prefix Suppression for secondary addresses
	PrefixSuppressSecondaryAddresses bool `protobuf:"varint,109,opt,name=prefix_suppress_secondary_addresses,json=prefixSuppressSecondaryAddresses,proto3" json:"prefix_suppress_secondary_addresses,omitempty"`
	// If true, loopback interface is advertised as a stub network
	IsLoopbackStubNetwork bool `protobuf:"varint,110,opt,name=is_loopback_stub_network,json=isLoopbackStubNetwork,proto3" json:"is_loopback_stub_network,omitempty"`
	// Ack List Count
	InterfaceAckListCount uint32 `protobuf:"varint,111,opt,name=interface_ack_list_count,json=interfaceAckListCount,proto3" json:"interface_ack_list_count,omitempty"`
	// Ack List High Watermark
	InterfaceAckListHighWatermark uint32 `protobuf:"varint,112,opt,name=interface_ack_list_high_watermark,json=interfaceAckListHighWatermark,proto3" json:"interface_ack_list_high_watermark,omitempty"`
	// Registered for Link Down Fast Detection
	RegisteredForLinkDownFastDetection bool `protobuf:"varint,113,opt,name=registered_for_link_down_fast_detection,json=registeredForLinkDownFastDetection,proto3" json:"registered_for_link_down_fast_detection,omitempty"`
	// Hold-down time in ms for fast-detect event
	FastDetectHoldDownTime uint32 `protobuf:"varint,114,opt,name=fast_detect_hold_down_time,json=fastDetectHoldDownTime,proto3" json:"fast_detect_hold_down_time,omitempty"`
	// Link in hold-down state due to fast detect event
	InterfaceFastDetectHoldDown bool `protobuf:"varint,115,opt,name=interface_fast_detect_hold_down,json=interfaceFastDetectHoldDown,proto3" json:"interface_fast_detect_hold_down,omitempty"`
	// Remaining hold down time in ms
	FastDetectHoldDownTimeRemaining uint32 `protobuf:"varint,116,opt,name=fast_detect_hold_down_time_remaining,json=fastDetectHoldDownTimeRemaining,proto3" json:"fast_detect_hold_down_time_remaining,omitempty"`
	// IP Fast Reroute Type
	FastRerouteType string `protobuf:"bytes,117,opt,name=fast_reroute_type,json=fastRerouteType,proto3" json:"fast_reroute_type,omitempty"`
	// Topology Independent LFA
	FastRerouteTopologyIndependentLfa bool `protobuf:"varint,118,opt,name=fast_reroute_topology_independent_lfa,json=fastRerouteTopologyIndependentLfa,proto3" json:"fast_reroute_topology_independent_lfa,omitempty"`
	// SRLG Values
	Srlg []uint32 `protobuf:"varint,119,rep,packed,name=srlg,proto3" json:"srlg,omitempty"`
	// IPFRR-Tiebreakers list
	IpfrrTiebreakersList []*OspfShIpfrrTb `protobuf:"bytes,120,rep,name=ipfrr_tiebreakers_list,json=ipfrrTiebreakersList,proto3" json:"ipfrr_tiebreakers_list,omitempty"`
}

func (x *OspfShInterface) Reset() {
	*x = OspfShInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShInterface) ProtoMessage() {}

func (x *OspfShInterface) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShInterface.ProtoReflect.Descriptor instead.
func (*OspfShInterface) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP(), []int{1}
}

func (x *OspfShInterface) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *OspfShInterface) GetInterfaceState() string {
	if x != nil {
		return x.InterfaceState
	}
	return ""
}

func (x *OspfShInterface) GetInterfaceLineState() bool {
	if x != nil {
		return x.InterfaceLineState
	}
	return false
}

func (x *OspfShInterface) GetInterfaceAddress() string {
	if x != nil {
		return x.InterfaceAddress
	}
	return ""
}

func (x *OspfShInterface) GetInterfaceMask() uint32 {
	if x != nil {
		return x.InterfaceMask
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceArea() string {
	if x != nil {
		return x.InterfaceArea
	}
	return ""
}

func (x *OspfShInterface) GetInterfaceSid() uint32 {
	if x != nil {
		return x.InterfaceSid
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceSidPhpOff() bool {
	if x != nil {
		return x.InterfaceSidPhpOff
	}
	return false
}

func (x *OspfShInterface) GetInterfaceSidNFlagClear() bool {
	if x != nil {
		return x.InterfaceSidNFlagClear
	}
	return false
}

func (x *OspfShInterface) GetInterfaceStrictSpfSid() uint32 {
	if x != nil {
		return x.InterfaceStrictSpfSid
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceStrictSpfSidPhpOff() bool {
	if x != nil {
		return x.InterfaceStrictSpfSidPhpOff
	}
	return false
}

func (x *OspfShInterface) GetInterfaceStrictSpfSidNFlagClear() bool {
	if x != nil {
		return x.InterfaceStrictSpfSidNFlagClear
	}
	return false
}

func (x *OspfShInterface) GetInterfaceRouterId() string {
	if x != nil {
		return x.InterfaceRouterId
	}
	return ""
}

func (x *OspfShInterface) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *OspfShInterface) GetIpMtu() uint32 {
	if x != nil {
		return x.IpMtu
	}
	return 0
}

func (x *OspfShInterface) GetMaximumPacketSize() uint32 {
	if x != nil {
		return x.MaximumPacketSize
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceTunnelFlags() uint32 {
	if x != nil {
		return x.InterfaceTunnelFlags
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceLinkCost() uint32 {
	if x != nil {
		return x.InterfaceLinkCost
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceBandwidth() uint32 {
	if x != nil {
		return x.InterfaceBandwidth
	}
	return 0
}

func (x *OspfShInterface) GetCfgCostFallback() bool {
	if x != nil {
		return x.CfgCostFallback
	}
	return false
}

func (x *OspfShInterface) GetInterfaceCostFallback() uint32 {
	if x != nil {
		return x.InterfaceCostFallback
	}
	return 0
}

func (x *OspfShInterface) GetCostFallbackActive() bool {
	if x != nil {
		return x.CostFallbackActive
	}
	return false
}

func (x *OspfShInterface) GetConfiguredLdpSync() bool {
	if x != nil {
		return x.ConfiguredLdpSync
	}
	return false
}

func (x *OspfShInterface) GetConfiguredLdpSyncIgpShortcuts() bool {
	if x != nil {
		return x.ConfiguredLdpSyncIgpShortcuts
	}
	return false
}

func (x *OspfShInterface) GetInterfaceLdpSync() bool {
	if x != nil {
		return x.InterfaceLdpSync
	}
	return false
}

func (x *OspfShInterface) GetConfiguredDemandCircuit() bool {
	if x != nil {
		return x.ConfiguredDemandCircuit
	}
	return false
}

func (x *OspfShInterface) GetInterfaceDemandCircuit() bool {
	if x != nil {
		return x.InterfaceDemandCircuit
	}
	return false
}

func (x *OspfShInterface) GetInterfaceDcBitlessLsaCount() uint32 {
	if x != nil {
		return x.InterfaceDcBitlessLsaCount
	}
	return 0
}

func (x *OspfShInterface) GetTransmissionDelay() uint32 {
	if x != nil {
		return x.TransmissionDelay
	}
	return 0
}

func (x *OspfShInterface) GetOspfInterfaceState() string {
	if x != nil {
		return x.OspfInterfaceState
	}
	return ""
}

func (x *OspfShInterface) GetInterfacePriority() uint32 {
	if x != nil {
		return x.InterfacePriority
	}
	return 0
}

func (x *OspfShInterface) GetDesignatedRouter() bool {
	if x != nil {
		return x.DesignatedRouter
	}
	return false
}

func (x *OspfShInterface) GetDesignatedRouterId() string {
	if x != nil {
		return x.DesignatedRouterId
	}
	return ""
}

func (x *OspfShInterface) GetDesignatedRouterAddress() string {
	if x != nil {
		return x.DesignatedRouterAddress
	}
	return ""
}

func (x *OspfShInterface) GetBackupDesignatedRouter() bool {
	if x != nil {
		return x.BackupDesignatedRouter
	}
	return false
}

func (x *OspfShInterface) GetBackupDesignatedRouterId() string {
	if x != nil {
		return x.BackupDesignatedRouterId
	}
	return ""
}

func (x *OspfShInterface) GetBackupDesignatedRouterAddress() string {
	if x != nil {
		return x.BackupDesignatedRouterAddress
	}
	return ""
}

func (x *OspfShInterface) GetNetworkLsaFlushTimer() uint32 {
	if x != nil {
		return x.NetworkLsaFlushTimer
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceLsaFilter() bool {
	if x != nil {
		return x.InterfaceLsaFilter
	}
	return false
}

func (x *OspfShInterface) GetHelloInterval() uint32 {
	if x != nil {
		return x.HelloInterval
	}
	return 0
}

func (x *OspfShInterface) GetHelloIntervalMs() uint32 {
	if x != nil {
		return x.HelloIntervalMs
	}
	return 0
}

func (x *OspfShInterface) GetDeadInterval() uint32 {
	if x != nil {
		return x.DeadInterval
	}
	return 0
}

func (x *OspfShInterface) GetWaitInterval() uint32 {
	if x != nil {
		return x.WaitInterval
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceRetransmissionInterrval() uint32 {
	if x != nil {
		return x.InterfaceRetransmissionInterrval
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceNsfEnabled() bool {
	if x != nil {
		return x.InterfaceNsfEnabled
	}
	return false
}

func (x *OspfShInterface) GetInterfaceNsf() bool {
	if x != nil {
		return x.InterfaceNsf
	}
	return false
}

func (x *OspfShInterface) GetInterfaceLastNsf() uint32 {
	if x != nil {
		return x.InterfaceLastNsf
	}
	return 0
}

func (x *OspfShInterface) GetPassiveInterface() bool {
	if x != nil {
		return x.PassiveInterface
	}
	return false
}

func (x *OspfShInterface) GetNextHelloTime() uint32 {
	if x != nil {
		return x.NextHelloTime
	}
	return 0
}

func (x *OspfShInterface) GetNextHelloTimeMs() uint32 {
	if x != nil {
		return x.NextHelloTimeMs
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceNeighborList() []*OspfShInterfaceNbr {
	if x != nil {
		return x.InterfaceNeighborList
	}
	return nil
}

func (x *OspfShInterface) GetInterfaceBfdInformation() *OspfShInterfaceBfd {
	if x != nil {
		return x.InterfaceBfdInformation
	}
	return nil
}

func (x *OspfShInterface) GetTtlSecurityEnabled() bool {
	if x != nil {
		return x.TtlSecurityEnabled
	}
	return false
}

func (x *OspfShInterface) GetTtlSecurityHopCount() uint32 {
	if x != nil {
		return x.TtlSecurityHopCount
	}
	return 0
}

func (x *OspfShInterface) GetActiveInterface() *OspfShInterfaceUp {
	if x != nil {
		return x.ActiveInterface
	}
	return nil
}

func (x *OspfShInterface) GetInterfaceisMadj() bool {
	if x != nil {
		return x.InterfaceisMadj
	}
	return false
}

func (x *OspfShInterface) GetInterfaceMadjCount() uint32 {
	if x != nil {
		return x.InterfaceMadjCount
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceMadjList() []*OspfShInterfaceMadj {
	if x != nil {
		return x.InterfaceMadjList
	}
	return nil
}

func (x *OspfShInterface) GetPrefixSuppressPrimaryAddresses() bool {
	if x != nil {
		return x.PrefixSuppressPrimaryAddresses
	}
	return false
}

func (x *OspfShInterface) GetPrefixSuppressSecondaryAddresses() bool {
	if x != nil {
		return x.PrefixSuppressSecondaryAddresses
	}
	return false
}

func (x *OspfShInterface) GetIsLoopbackStubNetwork() bool {
	if x != nil {
		return x.IsLoopbackStubNetwork
	}
	return false
}

func (x *OspfShInterface) GetInterfaceAckListCount() uint32 {
	if x != nil {
		return x.InterfaceAckListCount
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceAckListHighWatermark() uint32 {
	if x != nil {
		return x.InterfaceAckListHighWatermark
	}
	return 0
}

func (x *OspfShInterface) GetRegisteredForLinkDownFastDetection() bool {
	if x != nil {
		return x.RegisteredForLinkDownFastDetection
	}
	return false
}

func (x *OspfShInterface) GetFastDetectHoldDownTime() uint32 {
	if x != nil {
		return x.FastDetectHoldDownTime
	}
	return 0
}

func (x *OspfShInterface) GetInterfaceFastDetectHoldDown() bool {
	if x != nil {
		return x.InterfaceFastDetectHoldDown
	}
	return false
}

func (x *OspfShInterface) GetFastDetectHoldDownTimeRemaining() uint32 {
	if x != nil {
		return x.FastDetectHoldDownTimeRemaining
	}
	return 0
}

func (x *OspfShInterface) GetFastRerouteType() string {
	if x != nil {
		return x.FastRerouteType
	}
	return ""
}

func (x *OspfShInterface) GetFastRerouteTopologyIndependentLfa() bool {
	if x != nil {
		return x.FastRerouteTopologyIndependentLfa
	}
	return false
}

func (x *OspfShInterface) GetSrlg() []uint32 {
	if x != nil {
		return x.Srlg
	}
	return nil
}

func (x *OspfShInterface) GetIpfrrTiebreakersList() []*OspfShIpfrrTb {
	if x != nil {
		return x.IpfrrTiebreakersList
	}
	return nil
}

// OSPF IPFRR Tiebreakers
type OspfShIpfrrTb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tiebreaker Type
	TiebreakerType string `protobuf:"bytes,1,opt,name=tiebreaker_type,json=tiebreakerType,proto3" json:"tiebreaker_type,omitempty"`
	// Tiebreaker Index
	TiebreakerIndex uint32 `protobuf:"varint,2,opt,name=tiebreaker_index,json=tiebreakerIndex,proto3" json:"tiebreaker_index,omitempty"`
}

func (x *OspfShIpfrrTb) Reset() {
	*x = OspfShIpfrrTb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShIpfrrTb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShIpfrrTb) ProtoMessage() {}

func (x *OspfShIpfrrTb) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShIpfrrTb.ProtoReflect.Descriptor instead.
func (*OspfShIpfrrTb) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP(), []int{2}
}

func (x *OspfShIpfrrTb) GetTiebreakerType() string {
	if x != nil {
		return x.TiebreakerType
	}
	return ""
}

func (x *OspfShIpfrrTb) GetTiebreakerIndex() uint32 {
	if x != nil {
		return x.TiebreakerIndex
	}
	return 0
}

// Interface BFD information
type OspfShInterfaceBfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD enable mode - Default/Strict
	BfdIntfEnableMode uint32 `protobuf:"varint,1,opt,name=bfd_intf_enable_mode,json=bfdIntfEnableMode,proto3" json:"bfd_intf_enable_mode,omitempty"`
	// BFD interval (ms)
	Interval uint32 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// BFD detection multiplier
	DetectionMultiplier uint32 `protobuf:"varint,3,opt,name=detection_multiplier,json=detectionMultiplier,proto3" json:"detection_multiplier,omitempty"`
}

func (x *OspfShInterfaceBfd) Reset() {
	*x = OspfShInterfaceBfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShInterfaceBfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShInterfaceBfd) ProtoMessage() {}

func (x *OspfShInterfaceBfd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShInterfaceBfd.ProtoReflect.Descriptor instead.
func (*OspfShInterfaceBfd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP(), []int{3}
}

func (x *OspfShInterfaceBfd) GetBfdIntfEnableMode() uint32 {
	if x != nil {
		return x.BfdIntfEnableMode
	}
	return 0
}

func (x *OspfShInterfaceBfd) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *OspfShInterfaceBfd) GetDetectionMultiplier() uint32 {
	if x != nil {
		return x.DetectionMultiplier
	}
	return 0
}

// OSPF Interface Neighbor Information
type OspfShInterfaceNbr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor Router ID
	InterfaceNeighborId string `protobuf:"bytes,1,opt,name=interface_neighbor_id,json=interfaceNeighborId,proto3" json:"interface_neighbor_id,omitempty"`
	// Cost of link to neighbor
	InterfaceNeighborCost uint32 `protobuf:"varint,2,opt,name=interface_neighbor_cost,json=interfaceNeighborCost,proto3" json:"interface_neighbor_cost,omitempty"`
	// If true, Designated router
	NeighborDr bool `protobuf:"varint,3,opt,name=neighbor_dr,json=neighborDr,proto3" json:"neighbor_dr,omitempty"`
	// If true, Backup designated router
	NeighborBdr bool `protobuf:"varint,4,opt,name=neighbor_bdr,json=neighborBdr,proto3" json:"neighbor_bdr,omitempty"`
	// If true, hellos suppressed
	SuppressHello bool `protobuf:"varint,5,opt,name=suppress_hello,json=suppressHello,proto3" json:"suppress_hello,omitempty"`
}

func (x *OspfShInterfaceNbr) Reset() {
	*x = OspfShInterfaceNbr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShInterfaceNbr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShInterfaceNbr) ProtoMessage() {}

func (x *OspfShInterfaceNbr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShInterfaceNbr.ProtoReflect.Descriptor instead.
func (*OspfShInterfaceNbr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP(), []int{4}
}

func (x *OspfShInterfaceNbr) GetInterfaceNeighborId() string {
	if x != nil {
		return x.InterfaceNeighborId
	}
	return ""
}

func (x *OspfShInterfaceNbr) GetInterfaceNeighborCost() uint32 {
	if x != nil {
		return x.InterfaceNeighborCost
	}
	return 0
}

func (x *OspfShInterfaceNbr) GetNeighborDr() bool {
	if x != nil {
		return x.NeighborDr
	}
	return false
}

func (x *OspfShInterfaceNbr) GetNeighborBdr() bool {
	if x != nil {
		return x.NeighborBdr
	}
	return false
}

func (x *OspfShInterfaceNbr) GetSuppressHello() bool {
	if x != nil {
		return x.SuppressHello
	}
	return false
}

// OSPF Interface Multi-Area Information
type OspfShInterfaceMadj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Area ID string in decimal or dotted-decimal format
	InterfaceArea string `protobuf:"bytes,1,opt,name=interface_area,json=interfaceArea,proto3" json:"interface_area,omitempty"`
	// Area ID
	MadjAreaId uint32 `protobuf:"varint,2,opt,name=madj_area_id,json=madjAreaId,proto3" json:"madj_area_id,omitempty"`
	// Number of Neighbors
	InterfaceNeighborCount uint32 `protobuf:"varint,3,opt,name=interface_neighbor_count,json=interfaceNeighborCount,proto3" json:"interface_neighbor_count,omitempty"`
	// Total number of Adjacent Neighbors
	InterfaceAdjNeighborCount uint32 `protobuf:"varint,4,opt,name=interface_adj_neighbor_count,json=interfaceAdjNeighborCount,proto3" json:"interface_adj_neighbor_count,omitempty"`
	// Interface link cost
	InterfaceLinkCost uint32 `protobuf:"varint,5,opt,name=interface_link_cost,json=interfaceLinkCost,proto3" json:"interface_link_cost,omitempty"`
	// Interface OSPF state
	OspfInterfaceState string `protobuf:"bytes,6,opt,name=ospf_interface_state,json=ospfInterfaceState,proto3" json:"ospf_interface_state,omitempty"`
}

func (x *OspfShInterfaceMadj) Reset() {
	*x = OspfShInterfaceMadj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShInterfaceMadj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShInterfaceMadj) ProtoMessage() {}

func (x *OspfShInterfaceMadj) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShInterfaceMadj.ProtoReflect.Descriptor instead.
func (*OspfShInterfaceMadj) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP(), []int{5}
}

func (x *OspfShInterfaceMadj) GetInterfaceArea() string {
	if x != nil {
		return x.InterfaceArea
	}
	return ""
}

func (x *OspfShInterfaceMadj) GetMadjAreaId() uint32 {
	if x != nil {
		return x.MadjAreaId
	}
	return 0
}

func (x *OspfShInterfaceMadj) GetInterfaceNeighborCount() uint32 {
	if x != nil {
		return x.InterfaceNeighborCount
	}
	return 0
}

func (x *OspfShInterfaceMadj) GetInterfaceAdjNeighborCount() uint32 {
	if x != nil {
		return x.InterfaceAdjNeighborCount
	}
	return 0
}

func (x *OspfShInterfaceMadj) GetInterfaceLinkCost() uint32 {
	if x != nil {
		return x.InterfaceLinkCost
	}
	return 0
}

func (x *OspfShInterfaceMadj) GetOspfInterfaceState() string {
	if x != nil {
		return x.OspfInterfaceState
	}
	return ""
}

// OSPF Interface Up-only Information
type OspfShInterfaceUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wait time for DR/BDR selection (s)
	WaitTime uint32 `protobuf:"varint,1,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	// Area scope LSAs flood index
	InterfaceAreaFloodIndex uint32 `protobuf:"varint,2,opt,name=interface_area_flood_index,json=interfaceAreaFloodIndex,proto3" json:"interface_area_flood_index,omitempty"`
	// AS scope LSAs flood index
	InterfaceAsFloodIndex uint32 `protobuf:"varint,3,opt,name=interface_as_flood_index,json=interfaceAsFloodIndex,proto3" json:"interface_as_flood_index,omitempty"`
	// Flood queue length
	InterfaceFloodLength uint32 `protobuf:"varint,4,opt,name=interface_flood_length,json=interfaceFloodLength,proto3" json:"interface_flood_length,omitempty"`
	// Next LSA to flood (Area scope)
	InterfaceAreaNextFlood uint32 `protobuf:"varint,5,opt,name=interface_area_next_flood,json=interfaceAreaNextFlood,proto3" json:"interface_area_next_flood,omitempty"`
	// Index of next LSA to flood (Area scope)
	InterfaceAreaNextFloodIndex uint32 `protobuf:"varint,6,opt,name=interface_area_next_flood_index,json=interfaceAreaNextFloodIndex,proto3" json:"interface_area_next_flood_index,omitempty"`
	// Next LSA to flood (AS scope)
	InterfaceAsNextFlood uint32 `protobuf:"varint,7,opt,name=interface_as_next_flood,json=interfaceAsNextFlood,proto3" json:"interface_as_next_flood,omitempty"`
	// Index of next LSA to flood (AS scope)
	InterfaceAsNextFloodIndex uint32 `protobuf:"varint,8,opt,name=interface_as_next_flood_index,json=interfaceAsNextFloodIndex,proto3" json:"interface_as_next_flood_index,omitempty"`
	// Last flood scan length
	FloodScanLength uint32 `protobuf:"varint,9,opt,name=flood_scan_length,json=floodScanLength,proto3" json:"flood_scan_length,omitempty"`
	// Maximum flood length
	MaximumFloodLength uint32 `protobuf:"varint,10,opt,name=maximum_flood_length,json=maximumFloodLength,proto3" json:"maximum_flood_length,omitempty"`
	// Last flood scan time (ms)
	LastFloodTime uint32 `protobuf:"varint,11,opt,name=last_flood_time,json=lastFloodTime,proto3" json:"last_flood_time,omitempty"`
	// Maximum flood time (ms)
	MaximumFloodTime uint32 `protobuf:"varint,12,opt,name=maximum_flood_time,json=maximumFloodTime,proto3" json:"maximum_flood_time,omitempty"`
	// Time until next flood pacing timer (ms)
	InterfaceFloodPacingTimer uint32 `protobuf:"varint,13,opt,name=interface_flood_pacing_timer,json=interfaceFloodPacingTimer,proto3" json:"interface_flood_pacing_timer,omitempty"`
	// Total number of Neighbors
	InterfaceNeighborCount uint32 `protobuf:"varint,14,opt,name=interface_neighbor_count,json=interfaceNeighborCount,proto3" json:"interface_neighbor_count,omitempty"`
	// Number of neighbors for which hellos are suppressed
	SuppressHelloCount uint32 `protobuf:"varint,15,opt,name=suppress_hello_count,json=suppressHelloCount,proto3" json:"suppress_hello_count,omitempty"`
	// Authentication type
	InterfaceAuthenticationType string `protobuf:"bytes,16,opt,name=interface_authentication_type,json=interfaceAuthenticationType,proto3" json:"interface_authentication_type,omitempty"`
	// If true, MD key is configured
	YoungestMdKey bool `protobuf:"varint,17,opt,name=youngest_md_key,json=youngestMdKey,proto3" json:"youngest_md_key,omitempty"`
	// Number of neighbors using the old key (if rollover in progress)
	OldMd5KeyNeighborCount uint32 `protobuf:"varint,18,opt,name=old_md5_key_neighbor_count,json=oldMd5KeyNeighborCount,proto3" json:"old_md5_key_neighbor_count,omitempty"`
	// Youngest MD key ID
	YoungestMdKeyId uint32 `protobuf:"varint,19,opt,name=youngest_md_key_id,json=youngestMdKeyId,proto3" json:"youngest_md_key_id,omitempty"`
	// List of old MD keys
	MdKeysList []uint32 `protobuf:"varint,20,rep,packed,name=md_keys_list,json=mdKeysList,proto3" json:"md_keys_list,omitempty"`
	// Keychain ID
	KeychainId uint64 `protobuf:"varint,21,opt,name=keychain_id,json=keychainId,proto3" json:"keychain_id,omitempty"`
}

func (x *OspfShInterfaceUp) Reset() {
	*x = OspfShInterfaceUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShInterfaceUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShInterfaceUp) ProtoMessage() {}

func (x *OspfShInterfaceUp) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShInterfaceUp.ProtoReflect.Descriptor instead.
func (*OspfShInterfaceUp) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP(), []int{6}
}

func (x *OspfShInterfaceUp) GetWaitTime() uint32 {
	if x != nil {
		return x.WaitTime
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceAreaFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAreaFloodIndex
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceAsFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAsFloodIndex
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceFloodLength() uint32 {
	if x != nil {
		return x.InterfaceFloodLength
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceAreaNextFlood() uint32 {
	if x != nil {
		return x.InterfaceAreaNextFlood
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceAreaNextFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAreaNextFloodIndex
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceAsNextFlood() uint32 {
	if x != nil {
		return x.InterfaceAsNextFlood
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceAsNextFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAsNextFloodIndex
	}
	return 0
}

func (x *OspfShInterfaceUp) GetFloodScanLength() uint32 {
	if x != nil {
		return x.FloodScanLength
	}
	return 0
}

func (x *OspfShInterfaceUp) GetMaximumFloodLength() uint32 {
	if x != nil {
		return x.MaximumFloodLength
	}
	return 0
}

func (x *OspfShInterfaceUp) GetLastFloodTime() uint32 {
	if x != nil {
		return x.LastFloodTime
	}
	return 0
}

func (x *OspfShInterfaceUp) GetMaximumFloodTime() uint32 {
	if x != nil {
		return x.MaximumFloodTime
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceFloodPacingTimer() uint32 {
	if x != nil {
		return x.InterfaceFloodPacingTimer
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceNeighborCount() uint32 {
	if x != nil {
		return x.InterfaceNeighborCount
	}
	return 0
}

func (x *OspfShInterfaceUp) GetSuppressHelloCount() uint32 {
	if x != nil {
		return x.SuppressHelloCount
	}
	return 0
}

func (x *OspfShInterfaceUp) GetInterfaceAuthenticationType() string {
	if x != nil {
		return x.InterfaceAuthenticationType
	}
	return ""
}

func (x *OspfShInterfaceUp) GetYoungestMdKey() bool {
	if x != nil {
		return x.YoungestMdKey
	}
	return false
}

func (x *OspfShInterfaceUp) GetOldMd5KeyNeighborCount() uint32 {
	if x != nil {
		return x.OldMd5KeyNeighborCount
	}
	return 0
}

func (x *OspfShInterfaceUp) GetYoungestMdKeyId() uint32 {
	if x != nil {
		return x.YoungestMdKeyId
	}
	return 0
}

func (x *OspfShInterfaceUp) GetMdKeysList() []uint32 {
	if x != nil {
		return x.MdKeysList
	}
	return nil
}

func (x *OspfShInterfaceUp) GetKeychainId() uint64 {
	if x != nil {
		return x.KeychainId
	}
	return 0
}

var File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDesc = []byte{
	0x0a, 0x76, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x61,
	0x72, 0x65, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x16, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x22, 0x0a, 0x11, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x70,
	0x68, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x69, 0x64, 0x50, 0x68, 0x70, 0x4f, 0x66, 0x66,
	0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x5f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x69, 0x64, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x18,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53,
	0x70, 0x66, 0x53, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x69,
	0x64, 0x5f, 0x70, 0x68, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x70, 0x66, 0x53, 0x69, 0x64, 0x50, 0x68, 0x70, 0x4f, 0x66, 0x66, 0x12, 0x4e, 0x0a, 0x25,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x70, 0x66, 0x53,
	0x69, 0x64, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x70, 0x4d, 0x74, 0x75, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x66, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x66, 0x67, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x64, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x64, 0x70, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x64, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x67, 0x70, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x64, 0x70, 0x53, 0x79, 0x6e,
	0x63, 0x49, 0x67, 0x70, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x64, 0x70, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4c, 0x64, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3a, 0x0a, 0x19, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x12, 0x42, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64,
	0x63, 0x5f, 0x62, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x63, 0x42, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x73, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x56, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x73,
	0x61, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x73, 0x61, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4c, 0x73, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x59, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x5d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x73, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x66, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x73, 0x66, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x73, 0x66, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x73, 0x66, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12,
	0xad, 0x01, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x75, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x62, 0x72, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0xb1, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x66,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x66, 0x64, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x66, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x61, 0x72, 0x65,
	0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x64, 0x6a,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x69, 0x73, 0x4d, 0x61, 0x64, 0x6a, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x6a, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4d, 0x61, 0x64, 0x6a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x61,
	0x72, 0x65, 0x61, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x6a, 0x52,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x64, 0x6a, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x23, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x75, 0x62,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x69, 0x73, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x75, 0x62, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x53, 0x0a, 0x27, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e,
	0x46, 0x61, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x1a, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x66, 0x61, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x73, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x61, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x4d, 0x0a, 0x24, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x66,
	0x61, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x66, 0x61, 0x18, 0x76, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x66, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x66, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x72, 0x6c, 0x67, 0x18, 0x77, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x72, 0x6c, 0x67,
	0x12, 0xa6, 0x01, 0x0a, 0x16, 0x69, 0x70, 0x66, 0x72, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x78, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x70, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x66, 0x72, 0x72,
	0x5f, 0x74, 0x62, 0x52, 0x14, 0x69, 0x70, 0x66, 0x72, 0x72, 0x54, 0x69, 0x65, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x10, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x66, 0x72, 0x72, 0x5f, 0x74, 0x62, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x66, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x62,
	0x66, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x66, 0x64, 0x49, 0x6e,
	0x74, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xee, 0x01, 0x0a, 0x15,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x62, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x44, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x42, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x22, 0xbe, 0x02, 0x0a,
	0x16, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x64, 0x6a, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x61, 0x64, 0x6a, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x64, 0x6a, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x73, 0x70, 0x66, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd2, 0x08,
	0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x4d, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x64,
	0x35, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6f, 0x6c, 0x64, 0x4d,
	0x64, 0x35, 0x4b, 0x65, 0x79, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x64, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescData = file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_goTypes = []interface{}{
	(*OspfShInterface_KEYS)(nil), // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_KEYS
	(*OspfShInterface)(nil),      // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface
	(*OspfShIpfrrTb)(nil),        // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_ipfrr_tb
	(*OspfShInterfaceBfd)(nil),   // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_bfd
	(*OspfShInterfaceNbr)(nil),   // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_nbr
	(*OspfShInterfaceMadj)(nil),  // 5: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_madj
	(*OspfShInterfaceUp)(nil),    // 6: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_up
}
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_depIdxs = []int32{
	4, // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface.interface_neighbor_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_nbr
	3, // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface.interface_bfd_information:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_bfd
	6, // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface.active_interface:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_up
	5, // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface.interface_madj_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface_madj
	2, // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_interface.ipfrr_tiebreakers_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.areas.area.interfaces.interface.ospf_sh_ipfrr_tb
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_init()
}
func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_init() {
	if File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShInterface_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShIpfrrTb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShInterfaceBfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShInterfaceNbr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShInterfaceMadj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShInterfaceUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto = out.File
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_areas_area_interfaces_interface_ospf_sh_interface_proto_depIdxs = nil
}
