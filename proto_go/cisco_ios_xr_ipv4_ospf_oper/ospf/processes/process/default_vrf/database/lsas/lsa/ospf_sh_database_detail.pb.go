// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_ospf_oper/ospf/processes/process/default_vrf/database/lsas/lsa/ospf_sh_database_detail.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPF Database Information
type OspfShDatabaseDetail_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName       string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	AreaId            uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	LsType            string `protobuf:"bytes,3,opt,name=ls_type,json=lsType,proto3" json:"ls_type,omitempty"`
	LsId              string `protobuf:"bytes,4,opt,name=ls_id,json=lsId,proto3" json:"ls_id,omitempty"`
	AdvertisingRouter string `protobuf:"bytes,5,opt,name=advertising_router,json=advertisingRouter,proto3" json:"advertising_router,omitempty"`
	InterfaceName     string `protobuf:"bytes,6,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *OspfShDatabaseDetail_KEYS) Reset() {
	*x = OspfShDatabaseDetail_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDatabaseDetail_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDatabaseDetail_KEYS) ProtoMessage() {}

func (x *OspfShDatabaseDetail_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDatabaseDetail_KEYS.ProtoReflect.Descriptor instead.
func (*OspfShDatabaseDetail_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{0}
}

func (x *OspfShDatabaseDetail_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *OspfShDatabaseDetail_KEYS) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *OspfShDatabaseDetail_KEYS) GetLsType() string {
	if x != nil {
		return x.LsType
	}
	return ""
}

func (x *OspfShDatabaseDetail_KEYS) GetLsId() string {
	if x != nil {
		return x.LsId
	}
	return ""
}

func (x *OspfShDatabaseDetail_KEYS) GetAdvertisingRouter() string {
	if x != nil {
		return x.AdvertisingRouter
	}
	return ""
}

func (x *OspfShDatabaseDetail_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type OspfShDatabaseDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *OspfShDbHeader `protobuf:"bytes,50,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA Information
	LsaDetailData *OspfShDbDetail `protobuf:"bytes,51,opt,name=lsa_detail_data,json=lsaDetailData,proto3" json:"lsa_detail_data,omitempty"`
	// Information pertaining to a specific LSA type
	LsaInternalData *OspfLsaInternalUnion `protobuf:"bytes,52,opt,name=lsa_internal_data,json=lsaInternalData,proto3" json:"lsa_internal_data,omitempty"`
}

func (x *OspfShDatabaseDetail) Reset() {
	*x = OspfShDatabaseDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDatabaseDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDatabaseDetail) ProtoMessage() {}

func (x *OspfShDatabaseDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDatabaseDetail.ProtoReflect.Descriptor instead.
func (*OspfShDatabaseDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{1}
}

func (x *OspfShDatabaseDetail) GetLsaHeader() *OspfShDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *OspfShDatabaseDetail) GetLsaDetailData() *OspfShDbDetail {
	if x != nil {
		return x.LsaDetailData
	}
	return nil
}

func (x *OspfShDatabaseDetail) GetLsaInternalData() *OspfLsaInternalUnion {
	if x != nil {
		return x.LsaInternalData
	}
	return nil
}

type OspfShTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Second     uint32 `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"`
	Nanosecond uint32 `protobuf:"varint,2,opt,name=nanosecond,proto3" json:"nanosecond,omitempty"`
}

func (x *OspfShTime) Reset() {
	*x = OspfShTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShTime) ProtoMessage() {}

func (x *OspfShTime) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShTime.ProtoReflect.Descriptor instead.
func (*OspfShTime) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{2}
}

func (x *OspfShTime) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *OspfShTime) GetNanosecond() uint32 {
	if x != nil {
		return x.Nanosecond
	}
	return 0
}

// Reason why LSA is not deleted
type OspfShDbNotDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of time since the last check was made to free this LSA (s)
	FreeTime uint32 `protobuf:"varint,1,opt,name=free_time,json=freeTime,proto3" json:"free_time,omitempty"`
	// If true, the reason not to delete this LSA is because delete flag not set on this LSA
	NoDelete bool `protobuf:"varint,2,opt,name=no_delete,json=noDelete,proto3" json:"no_delete,omitempty"`
	// If true, the reason  not to delete this LSA is because neighbor is in exchange state
	NeighborExchange bool `protobuf:"varint,3,opt,name=neighbor_exchange,json=neighborExchange,proto3" json:"neighbor_exchange,omitempty"`
	// If true, the reason  not to delete this LSA is because it has a contributing entry in the routing table
	RoutingTable bool `protobuf:"varint,4,opt,name=routing_table,json=routingTable,proto3" json:"routing_table,omitempty"`
	// If true, the reason not to delete this LSA is because it's Acknowledgement list is not empty
	Acknowledgement bool `protobuf:"varint,5,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
	// If true, the reason not to delete this LSA is because it is in Maxage Queue
	MaximumAge bool `protobuf:"varint,6,opt,name=maximum_age,json=maximumAge,proto3" json:"maximum_age,omitempty"`
	// If true, the reason not to delete this LSA is because it is in partial SPF queue
	PartialSpf bool `protobuf:"varint,7,opt,name=partial_spf,json=partialSpf,proto3" json:"partial_spf,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for flooding or retransmission
	FloodPending bool `protobuf:"varint,8,opt,name=flood_pending,json=floodPending,proto3" json:"flood_pending,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for next wait-interval to expire
	RateLimit bool `protobuf:"varint,9,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// If true, the reason not to delete this LSA is because NSR ACK from standby is pending
	NsrAckPending bool `protobuf:"varint,10,opt,name=nsr_ack_pending,json=nsrAckPending,proto3" json:"nsr_ack_pending,omitempty"`
	// If true, the reason not to delete this LSA is because it is pending summary LSA originating
	SumOrigPending bool `protobuf:"varint,11,opt,name=sum_orig_pending,json=sumOrigPending,proto3" json:"sum_orig_pending,omitempty"`
	// If true, the reason not to delete this LSA is because it is pending flooding on switchover
	NsrFloodRequired bool `protobuf:"varint,12,opt,name=nsr_flood_required,json=nsrFloodRequired,proto3" json:"nsr_flood_required,omitempty"`
}

func (x *OspfShDbNotDelete) Reset() {
	*x = OspfShDbNotDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDbNotDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDbNotDelete) ProtoMessage() {}

func (x *OspfShDbNotDelete) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDbNotDelete.ProtoReflect.Descriptor instead.
func (*OspfShDbNotDelete) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{3}
}

func (x *OspfShDbNotDelete) GetFreeTime() uint32 {
	if x != nil {
		return x.FreeTime
	}
	return 0
}

func (x *OspfShDbNotDelete) GetNoDelete() bool {
	if x != nil {
		return x.NoDelete
	}
	return false
}

func (x *OspfShDbNotDelete) GetNeighborExchange() bool {
	if x != nil {
		return x.NeighborExchange
	}
	return false
}

func (x *OspfShDbNotDelete) GetRoutingTable() bool {
	if x != nil {
		return x.RoutingTable
	}
	return false
}

func (x *OspfShDbNotDelete) GetAcknowledgement() bool {
	if x != nil {
		return x.Acknowledgement
	}
	return false
}

func (x *OspfShDbNotDelete) GetMaximumAge() bool {
	if x != nil {
		return x.MaximumAge
	}
	return false
}

func (x *OspfShDbNotDelete) GetPartialSpf() bool {
	if x != nil {
		return x.PartialSpf
	}
	return false
}

func (x *OspfShDbNotDelete) GetFloodPending() bool {
	if x != nil {
		return x.FloodPending
	}
	return false
}

func (x *OspfShDbNotDelete) GetRateLimit() bool {
	if x != nil {
		return x.RateLimit
	}
	return false
}

func (x *OspfShDbNotDelete) GetNsrAckPending() bool {
	if x != nil {
		return x.NsrAckPending
	}
	return false
}

func (x *OspfShDbNotDelete) GetSumOrigPending() bool {
	if x != nil {
		return x.SumOrigPending
	}
	return false
}

func (x *OspfShDbNotDelete) GetNsrFloodRequired() bool {
	if x != nil {
		return x.NsrFloodRequired
	}
	return false
}

// OSPF LSA throttle timer table information
type OspfShDbThrottleTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timer table
	TimerLocation string `protobuf:"bytes,1,opt,name=timer_location,json=timerLocation,proto3" json:"timer_location,omitempty"`
	// Timer type
	TimerType string `protobuf:"bytes,2,opt,name=timer_type,json=timerType,proto3" json:"timer_type,omitempty"`
	// Second table index
	SecondTableIndex uint32 `protobuf:"varint,3,opt,name=second_table_index,json=secondTableIndex,proto3" json:"second_table_index,omitempty"`
	// Minute table index
	MinuteTableIndex uint32 `protobuf:"varint,4,opt,name=minute_table_index,json=minuteTableIndex,proto3" json:"minute_table_index,omitempty"`
	// Last Second table index processed
	LastInstSecondTableIndex uint32 `protobuf:"varint,5,opt,name=last_inst_second_table_index,json=lastInstSecondTableIndex,proto3" json:"last_inst_second_table_index,omitempty"`
	// Last Minute table index processed
	LastInstMinuteTableIndex uint32 `protobuf:"varint,6,opt,name=last_inst_minute_table_index,json=lastInstMinuteTableIndex,proto3" json:"last_inst_minute_table_index,omitempty"`
}

func (x *OspfShDbThrottleTimer) Reset() {
	*x = OspfShDbThrottleTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDbThrottleTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDbThrottleTimer) ProtoMessage() {}

func (x *OspfShDbThrottleTimer) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDbThrottleTimer.ProtoReflect.Descriptor instead.
func (*OspfShDbThrottleTimer) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{4}
}

func (x *OspfShDbThrottleTimer) GetTimerLocation() string {
	if x != nil {
		return x.TimerLocation
	}
	return ""
}

func (x *OspfShDbThrottleTimer) GetTimerType() string {
	if x != nil {
		return x.TimerType
	}
	return ""
}

func (x *OspfShDbThrottleTimer) GetSecondTableIndex() uint32 {
	if x != nil {
		return x.SecondTableIndex
	}
	return 0
}

func (x *OspfShDbThrottleTimer) GetMinuteTableIndex() uint32 {
	if x != nil {
		return x.MinuteTableIndex
	}
	return 0
}

func (x *OspfShDbThrottleTimer) GetLastInstSecondTableIndex() uint32 {
	if x != nil {
		return x.LastInstSecondTableIndex
	}
	return 0
}

func (x *OspfShDbThrottleTimer) GetLastInstMinuteTableIndex() uint32 {
	if x != nil {
		return x.LastInstMinuteTableIndex
	}
	return 0
}

// OSPF LSA Database Header
type OspfShDbHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LSA type
	LsType string `protobuf:"bytes,1,opt,name=ls_type,json=lsType,proto3" json:"ls_type,omitempty"`
	// LS ID
	Lsid string `protobuf:"bytes,2,opt,name=lsid,proto3" json:"lsid,omitempty"`
	// Router ID of Advertising Router
	AdvertisingRouter string `protobuf:"bytes,3,opt,name=advertising_router,json=advertisingRouter,proto3" json:"advertising_router,omitempty"`
	// Area ID in decimal or dotted-decimal format
	LsaAreaId string `protobuf:"bytes,4,opt,name=lsa_area_id,json=lsaAreaId,proto3" json:"lsa_area_id,omitempty"`
	// LSA's Age (s)
	LsaAge uint32 `protobuf:"varint,5,opt,name=lsa_age,json=lsaAge,proto3" json:"lsa_age,omitempty"`
	// If true, Do Not Age this LSA
	DnAgeLsa bool `protobuf:"varint,6,opt,name=dn_age_lsa,json=dnAgeLsa,proto3" json:"dn_age_lsa,omitempty"`
	// If true,  LSA received from neighbor during NSF
	Nsf bool `protobuf:"varint,7,opt,name=nsf,proto3" json:"nsf,omitempty"`
	// Current Sequence number
	SequenceNumber uint32 `protobuf:"varint,8,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Checksum value
	Checksum uint32 `protobuf:"varint,9,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *OspfShDbHeader) Reset() {
	*x = OspfShDbHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDbHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDbHeader) ProtoMessage() {}

func (x *OspfShDbHeader) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDbHeader.ProtoReflect.Descriptor instead.
func (*OspfShDbHeader) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{5}
}

func (x *OspfShDbHeader) GetLsType() string {
	if x != nil {
		return x.LsType
	}
	return ""
}

func (x *OspfShDbHeader) GetLsid() string {
	if x != nil {
		return x.Lsid
	}
	return ""
}

func (x *OspfShDbHeader) GetAdvertisingRouter() string {
	if x != nil {
		return x.AdvertisingRouter
	}
	return ""
}

func (x *OspfShDbHeader) GetLsaAreaId() string {
	if x != nil {
		return x.LsaAreaId
	}
	return ""
}

func (x *OspfShDbHeader) GetLsaAge() uint32 {
	if x != nil {
		return x.LsaAge
	}
	return 0
}

func (x *OspfShDbHeader) GetDnAgeLsa() bool {
	if x != nil {
		return x.DnAgeLsa
	}
	return false
}

func (x *OspfShDbHeader) GetNsf() bool {
	if x != nil {
		return x.Nsf
	}
	return false
}

func (x *OspfShDbHeader) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *OspfShDbHeader) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

// OSPF Detailed LSA Database Information
type OspfShDbDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, type of service capable indicated by LSA's option field
	TosCapable bool `protobuf:"varint,1,opt,name=tos_capable,json=tosCapable,proto3" json:"tos_capable,omitempty"`
	// If true,  capable of type 7 to 5 translation indicated by LSA's option field
	NssaTranslation bool `protobuf:"varint,2,opt,name=nssa_translation,json=nssaTranslation,proto3" json:"nssa_translation,omitempty"`
	// If true, capable of demand circuit as indicated by LSA's option field
	DemandCircuit bool `protobuf:"varint,3,opt,name=demand_circuit,json=demandCircuit,proto3" json:"demand_circuit,omitempty"`
	// if true, DN bit set on the summary LSA indicated by LSA's option field
	DnBit bool `protobuf:"varint,4,opt,name=dn_bit,json=dnBit,proto3" json:"dn_bit,omitempty"`
	// LSA throttle timer table information
	LsaThrottleTimer *OspfShDbThrottleTimer `protobuf:"bytes,5,opt,name=lsa_throttle_timer,json=lsaThrottleTimer,proto3" json:"lsa_throttle_timer,omitempty"`
	// Time LSA was last updated
	LsaLastUpdatedTime *OspfShTime `protobuf:"bytes,6,opt,name=lsa_last_updated_time,json=lsaLastUpdatedTime,proto3" json:"lsa_last_updated_time,omitempty"`
	// Current time stamp
	LsadbBaseTimeStamp *OspfShTime `protobuf:"bytes,7,opt,name=lsadb_base_time_stamp,json=lsadbBaseTimeStamp,proto3" json:"lsadb_base_time_stamp,omitempty"`
	// Due time for rate-limit timer (ms)
	LsaRateLimitDueTime uint32 `protobuf:"varint,8,opt,name=lsa_rate_limit_due_time,json=lsaRateLimitDueTime,proto3" json:"lsa_rate_limit_due_time,omitempty"`
	// Clock stamp since boot
	LsadbBaseClock uint64 `protobuf:"varint,9,opt,name=lsadb_base_clock,json=lsadbBaseClock,proto3" json:"lsadb_base_clock,omitempty"`
	// If true, Routing Bit set on the LSA
	RoutingBit bool `protobuf:"varint,10,opt,name=routing_bit,json=routingBit,proto3" json:"routing_bit,omitempty"`
	// If true, Advertising Router is reachable
	AdvertisingRouterReachable bool `protobuf:"varint,11,opt,name=advertising_router_reachable,json=advertisingRouterReachable,proto3" json:"advertising_router_reachable,omitempty"`
	// Reason why LSA is not deleted
	NotDelete *OspfShDbNotDelete `protobuf:"bytes,12,opt,name=not_delete,json=notDelete,proto3" json:"not_delete,omitempty"`
	// Length of the LSA
	Length uint32 `protobuf:"varint,13,opt,name=length,proto3" json:"length,omitempty"`
	// Summary Origin
	SumOrigin uint32 `protobuf:"varint,14,opt,name=sum_origin,json=sumOrigin,proto3" json:"sum_origin,omitempty"`
	// External Origin
	AseOrigin uint32 `protobuf:"varint,15,opt,name=ase_origin,json=aseOrigin,proto3" json:"ase_origin,omitempty"`
	// Not In Sync With Active
	InSync uint32 `protobuf:"varint,16,opt,name=in_sync,json=inSync,proto3" json:"in_sync,omitempty"`
	// Current LSA prefix priority
	LsaPrefixPriority uint32 `protobuf:"varint,17,opt,name=lsa_prefix_priority,json=lsaPrefixPriority,proto3" json:"lsa_prefix_priority,omitempty"`
	// New LSA prefix priority
	NewLsaPrefixPriority uint32 `protobuf:"varint,18,opt,name=new_lsa_prefix_priority,json=newLsaPrefixPriority,proto3" json:"new_lsa_prefix_priority,omitempty"`
	// LSA flood required after FO
	LsaFloodRequiredPostFailOver bool `protobuf:"varint,19,opt,name=lsa_flood_required_post_fail_over,json=lsaFloodRequiredPostFailOver,proto3" json:"lsa_flood_required_post_fail_over,omitempty"`
}

func (x *OspfShDbDetail) Reset() {
	*x = OspfShDbDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShDbDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShDbDetail) ProtoMessage() {}

func (x *OspfShDbDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShDbDetail.ProtoReflect.Descriptor instead.
func (*OspfShDbDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{6}
}

func (x *OspfShDbDetail) GetTosCapable() bool {
	if x != nil {
		return x.TosCapable
	}
	return false
}

func (x *OspfShDbDetail) GetNssaTranslation() bool {
	if x != nil {
		return x.NssaTranslation
	}
	return false
}

func (x *OspfShDbDetail) GetDemandCircuit() bool {
	if x != nil {
		return x.DemandCircuit
	}
	return false
}

func (x *OspfShDbDetail) GetDnBit() bool {
	if x != nil {
		return x.DnBit
	}
	return false
}

func (x *OspfShDbDetail) GetLsaThrottleTimer() *OspfShDbThrottleTimer {
	if x != nil {
		return x.LsaThrottleTimer
	}
	return nil
}

func (x *OspfShDbDetail) GetLsaLastUpdatedTime() *OspfShTime {
	if x != nil {
		return x.LsaLastUpdatedTime
	}
	return nil
}

func (x *OspfShDbDetail) GetLsadbBaseTimeStamp() *OspfShTime {
	if x != nil {
		return x.LsadbBaseTimeStamp
	}
	return nil
}

func (x *OspfShDbDetail) GetLsaRateLimitDueTime() uint32 {
	if x != nil {
		return x.LsaRateLimitDueTime
	}
	return 0
}

func (x *OspfShDbDetail) GetLsadbBaseClock() uint64 {
	if x != nil {
		return x.LsadbBaseClock
	}
	return 0
}

func (x *OspfShDbDetail) GetRoutingBit() bool {
	if x != nil {
		return x.RoutingBit
	}
	return false
}

func (x *OspfShDbDetail) GetAdvertisingRouterReachable() bool {
	if x != nil {
		return x.AdvertisingRouterReachable
	}
	return false
}

func (x *OspfShDbDetail) GetNotDelete() *OspfShDbNotDelete {
	if x != nil {
		return x.NotDelete
	}
	return nil
}

func (x *OspfShDbDetail) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *OspfShDbDetail) GetSumOrigin() uint32 {
	if x != nil {
		return x.SumOrigin
	}
	return 0
}

func (x *OspfShDbDetail) GetAseOrigin() uint32 {
	if x != nil {
		return x.AseOrigin
	}
	return 0
}

func (x *OspfShDbDetail) GetInSync() uint32 {
	if x != nil {
		return x.InSync
	}
	return 0
}

func (x *OspfShDbDetail) GetLsaPrefixPriority() uint32 {
	if x != nil {
		return x.LsaPrefixPriority
	}
	return 0
}

func (x *OspfShDbDetail) GetNewLsaPrefixPriority() uint32 {
	if x != nil {
		return x.NewLsaPrefixPriority
	}
	return 0
}

func (x *OspfShDbDetail) GetLsaFloodRequiredPostFailOver() bool {
	if x != nil {
		return x.LsaFloodRequiredPostFailOver
	}
	return false
}

// OSPF External Type of service specific Information
type OspfShLsaExTos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cost of this route
	ExternalMetric uint32 `protobuf:"varint,1,opt,name=external_metric,json=externalMetric,proto3" json:"external_metric,omitempty"`
	// External LSA metric type
	ExternalMetricType string `protobuf:"bytes,2,opt,name=external_metric_type,json=externalMetricType,proto3" json:"external_metric_type,omitempty"`
	// Type of Service
	ExternalTos uint32 `protobuf:"varint,3,opt,name=external_tos,json=externalTos,proto3" json:"external_tos,omitempty"`
	// Forwarding Address
	ForwardingAddress string `protobuf:"bytes,4,opt,name=forwarding_address,json=forwardingAddress,proto3" json:"forwarding_address,omitempty"`
	// Route Tag
	ExternalTag uint32 `protobuf:"varint,5,opt,name=external_tag,json=externalTag,proto3" json:"external_tag,omitempty"`
}

func (x *OspfShLsaExTos) Reset() {
	*x = OspfShLsaExTos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaExTos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaExTos) ProtoMessage() {}

func (x *OspfShLsaExTos) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaExTos.ProtoReflect.Descriptor instead.
func (*OspfShLsaExTos) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{7}
}

func (x *OspfShLsaExTos) GetExternalMetric() uint32 {
	if x != nil {
		return x.ExternalMetric
	}
	return 0
}

func (x *OspfShLsaExTos) GetExternalMetricType() string {
	if x != nil {
		return x.ExternalMetricType
	}
	return ""
}

func (x *OspfShLsaExTos) GetExternalTos() uint32 {
	if x != nil {
		return x.ExternalTos
	}
	return 0
}

func (x *OspfShLsaExTos) GetForwardingAddress() string {
	if x != nil {
		return x.ForwardingAddress
	}
	return ""
}

func (x *OspfShLsaExTos) GetExternalTag() uint32 {
	if x != nil {
		return x.ExternalTag
	}
	return 0
}

// OSPF External LSA
type OspfShLsaExternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prefix length
	ExternalPrefixLength uint32 `protobuf:"varint,1,opt,name=external_prefix_length,json=externalPrefixLength,proto3" json:"external_prefix_length,omitempty"`
	// If true, internal max-metric LSA
	InternalExternalLsa bool `protobuf:"varint,2,opt,name=internal_external_lsa,json=internalExternalLsa,proto3" json:"internal_external_lsa,omitempty"`
	// Type of service information
	ExternalTosMetric []*OspfShLsaExTos `protobuf:"bytes,3,rep,name=external_tos_metric,json=externalTosMetric,proto3" json:"external_tos_metric,omitempty"`
}

func (x *OspfShLsaExternal) Reset() {
	*x = OspfShLsaExternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaExternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaExternal) ProtoMessage() {}

func (x *OspfShLsaExternal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaExternal.ProtoReflect.Descriptor instead.
func (*OspfShLsaExternal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{8}
}

func (x *OspfShLsaExternal) GetExternalPrefixLength() uint32 {
	if x != nil {
		return x.ExternalPrefixLength
	}
	return 0
}

func (x *OspfShLsaExternal) GetInternalExternalLsa() bool {
	if x != nil {
		return x.InternalExternalLsa
	}
	return false
}

func (x *OspfShLsaExternal) GetExternalTosMetric() []*OspfShLsaExTos {
	if x != nil {
		return x.ExternalTosMetric
	}
	return nil
}

// OSPF Network LSA
type OspfShLsaNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network prefix length
	NetworkPrefixLength uint32 `protobuf:"varint,1,opt,name=network_prefix_length,json=networkPrefixLength,proto3" json:"network_prefix_length,omitempty"`
	// Neighbor router list
	NeighborRouterList [][]byte `protobuf:"bytes,2,rep,name=neighbor_router_list,json=neighborRouterList,proto3" json:"neighbor_router_list,omitempty"`
}

func (x *OspfShLsaNetwork) Reset() {
	*x = OspfShLsaNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaNetwork) ProtoMessage() {}

func (x *OspfShLsaNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaNetwork.ProtoReflect.Descriptor instead.
func (*OspfShLsaNetwork) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{9}
}

func (x *OspfShLsaNetwork) GetNetworkPrefixLength() uint32 {
	if x != nil {
		return x.NetworkPrefixLength
	}
	return 0
}

func (x *OspfShLsaNetwork) GetNeighborRouterList() [][]byte {
	if x != nil {
		return x.NeighborRouterList
	}
	return nil
}

// OSPF Opaque LSA Sub-TLV Information
type OspfShOpqSubtlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of sub TLV
	SubTlvType string `protobuf:"bytes,1,opt,name=sub_tlv_type,json=subTlvType,proto3" json:"sub_tlv_type,omitempty"`
	// Length of sub TLV
	SubTlvLength uint32 `protobuf:"varint,2,opt,name=sub_tlv_length,json=subTlvLength,proto3" json:"sub_tlv_length,omitempty"`
	// Value of sub TLV
	SubTlvValue []byte `protobuf:"bytes,3,opt,name=sub_tlv_value,json=subTlvValue,proto3" json:"sub_tlv_value,omitempty"`
	// List of Sub-TLVs
	SubTlvSubTlv []*OspfShOpqSubtlv `protobuf:"bytes,4,rep,name=sub_tlv_sub_tlv,json=subTlvSubTlv,proto3" json:"sub_tlv_sub_tlv,omitempty"`
}

func (x *OspfShOpqSubtlv) Reset() {
	*x = OspfShOpqSubtlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqSubtlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqSubtlv) ProtoMessage() {}

func (x *OspfShOpqSubtlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqSubtlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqSubtlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{10}
}

func (x *OspfShOpqSubtlv) GetSubTlvType() string {
	if x != nil {
		return x.SubTlvType
	}
	return ""
}

func (x *OspfShOpqSubtlv) GetSubTlvLength() uint32 {
	if x != nil {
		return x.SubTlvLength
	}
	return 0
}

func (x *OspfShOpqSubtlv) GetSubTlvValue() []byte {
	if x != nil {
		return x.SubTlvValue
	}
	return nil
}

func (x *OspfShOpqSubtlv) GetSubTlvSubTlv() []*OspfShOpqSubtlv {
	if x != nil {
		return x.SubTlvSubTlv
	}
	return nil
}

// OSPF Opaque LSA TLV Information
type OspfShOpqTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of top-level TLV
	TlvType uint32 `protobuf:"varint,1,opt,name=tlv_type,json=tlvType,proto3" json:"tlv_type,omitempty"`
	// Length of top-level TLV
	TlvLength uint32 `protobuf:"varint,2,opt,name=tlv_length,json=tlvLength,proto3" json:"tlv_length,omitempty"`
	// MPLS-TE Router ID
	MplsRouterId uint32 `protobuf:"varint,3,opt,name=mpls_router_id,json=mplsRouterId,proto3" json:"mpls_router_id,omitempty"`
	// MPLS DS-TE supported
	MplsDsteLink bool `protobuf:"varint,4,opt,name=mpls_dste_link,json=mplsDsteLink,proto3" json:"mpls_dste_link,omitempty"`
	// TLV direct data
	TlvData []byte `protobuf:"bytes,5,opt,name=tlv_data,json=tlvData,proto3" json:"tlv_data,omitempty"`
	// List of Sub-TLVs
	TeLinkSubTlv []*OspfShOpqSubtlv `protobuf:"bytes,6,rep,name=te_link_sub_tlv,json=teLinkSubTlv,proto3" json:"te_link_sub_tlv,omitempty"`
}

func (x *OspfShOpqTlv) Reset() {
	*x = OspfShOpqTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqTlv) ProtoMessage() {}

func (x *OspfShOpqTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqTlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{11}
}

func (x *OspfShOpqTlv) GetTlvType() uint32 {
	if x != nil {
		return x.TlvType
	}
	return 0
}

func (x *OspfShOpqTlv) GetTlvLength() uint32 {
	if x != nil {
		return x.TlvLength
	}
	return 0
}

func (x *OspfShOpqTlv) GetMplsRouterId() uint32 {
	if x != nil {
		return x.MplsRouterId
	}
	return 0
}

func (x *OspfShOpqTlv) GetMplsDsteLink() bool {
	if x != nil {
		return x.MplsDsteLink
	}
	return false
}

func (x *OspfShOpqTlv) GetTlvData() []byte {
	if x != nil {
		return x.TlvData
	}
	return nil
}

func (x *OspfShOpqTlv) GetTeLinkSubTlv() []*OspfShOpqSubtlv {
	if x != nil {
		return x.TeLinkSubTlv
	}
	return nil
}

// OSPF Opaque-link LSA Information
type OspfShLsaOpqLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface on which the Opaque link LSA is received
	OpaqueInterfaceName string `protobuf:"bytes,1,opt,name=opaque_interface_name,json=opaqueInterfaceName,proto3" json:"opaque_interface_name,omitempty"`
}

func (x *OspfShLsaOpqLink) Reset() {
	*x = OspfShLsaOpqLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaOpqLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaOpqLink) ProtoMessage() {}

func (x *OspfShLsaOpqLink) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaOpqLink.ProtoReflect.Descriptor instead.
func (*OspfShLsaOpqLink) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{12}
}

func (x *OspfShLsaOpqLink) GetOpaqueInterfaceName() string {
	if x != nil {
		return x.OpaqueInterfaceName
	}
	return ""
}

// OSPF Opaque-area type 1 MPLS-TE LSA Information
type OspfShLsaOpqRrr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of TLVs
	TlvList []*OspfShOpqTlv `protobuf:"bytes,1,rep,name=tlv_list,json=tlvList,proto3" json:"tlv_list,omitempty"`
}

func (x *OspfShLsaOpqRrr) Reset() {
	*x = OspfShLsaOpqRrr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaOpqRrr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaOpqRrr) ProtoMessage() {}

func (x *OspfShLsaOpqRrr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaOpqRrr.ProtoReflect.Descriptor instead.
func (*OspfShLsaOpqRrr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{13}
}

func (x *OspfShLsaOpqRrr) GetTlvList() []*OspfShOpqTlv {
	if x != nil {
		return x.TlvList
	}
	return nil
}

// OSPF Opaque-area type 128 ExtendedPrefix LSA Information
type OspfShLsaOpqEpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of TLVs
	TlvList []*OspfShOpqTlv `protobuf:"bytes,1,rep,name=tlv_list,json=tlvList,proto3" json:"tlv_list,omitempty"`
}

func (x *OspfShLsaOpqEpl) Reset() {
	*x = OspfShLsaOpqEpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaOpqEpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaOpqEpl) ProtoMessage() {}

func (x *OspfShLsaOpqEpl) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaOpqEpl.ProtoReflect.Descriptor instead.
func (*OspfShLsaOpqEpl) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{14}
}

func (x *OspfShLsaOpqEpl) GetTlvList() []*OspfShOpqTlv {
	if x != nil {
		return x.TlvList
	}
	return nil
}

// OSPF Opaque-area type 8 ExtendedLink LSA Information
type OspfShLsaOpqEll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of TLVs
	TlvList []*OspfShOpqTlv `protobuf:"bytes,1,rep,name=tlv_list,json=tlvList,proto3" json:"tlv_list,omitempty"`
}

func (x *OspfShLsaOpqEll) Reset() {
	*x = OspfShLsaOpqEll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaOpqEll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaOpqEll) ProtoMessage() {}

func (x *OspfShLsaOpqEll) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaOpqEll.ProtoReflect.Descriptor instead.
func (*OspfShLsaOpqEll) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{15}
}

func (x *OspfShLsaOpqEll) GetTlvList() []*OspfShOpqTlv {
	if x != nil {
		return x.TlvList
	}
	return nil
}

// OSPF Opaque Router Information TLV
type OspfShOpqRiUnknownTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of TLV
	RiGenTlvType uint32 `protobuf:"varint,1,opt,name=ri_gen_tlv_type,json=riGenTlvType,proto3" json:"ri_gen_tlv_type,omitempty"`
	// Length of TLV
	RiGenTlvLength uint32 `protobuf:"varint,2,opt,name=ri_gen_tlv_length,json=riGenTlvLength,proto3" json:"ri_gen_tlv_length,omitempty"`
	// Data in TLV
	RiGenValue []byte `protobuf:"bytes,3,opt,name=ri_gen_value,json=riGenValue,proto3" json:"ri_gen_value,omitempty"`
}

func (x *OspfShOpqRiUnknownTlv) Reset() {
	*x = OspfShOpqRiUnknownTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiUnknownTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiUnknownTlv) ProtoMessage() {}

func (x *OspfShOpqRiUnknownTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiUnknownTlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiUnknownTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{16}
}

func (x *OspfShOpqRiUnknownTlv) GetRiGenTlvType() uint32 {
	if x != nil {
		return x.RiGenTlvType
	}
	return 0
}

func (x *OspfShOpqRiUnknownTlv) GetRiGenTlvLength() uint32 {
	if x != nil {
		return x.RiGenTlvLength
	}
	return 0
}

func (x *OspfShOpqRiUnknownTlv) GetRiGenValue() []byte {
	if x != nil {
		return x.RiGenValue
	}
	return nil
}

// OSPF Router Capabilities TLV
type OspfShOpqRiRtrcapTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Length of TLV
	RtrCapTlvLength uint32 `protobuf:"varint,1,opt,name=rtr_cap_tlv_length,json=rtrCapTlvLength,proto3" json:"rtr_cap_tlv_length,omitempty"`
	// Graceful Restart Capability
	RtrCapGracefulRestart bool `protobuf:"varint,2,opt,name=rtr_cap_graceful_restart,json=rtrCapGracefulRestart,proto3" json:"rtr_cap_graceful_restart,omitempty"`
	// Graceful Restart Helper Capability
	RtrCapGracefulRestartHelper bool `protobuf:"varint,3,opt,name=rtr_cap_graceful_restart_helper,json=rtrCapGracefulRestartHelper,proto3" json:"rtr_cap_graceful_restart_helper,omitempty"`
	// Stub Router capability
	RtrCapStubRtr bool `protobuf:"varint,4,opt,name=rtr_cap_stub_rtr,json=rtrCapStubRtr,proto3" json:"rtr_cap_stub_rtr,omitempty"`
	// Traffic Engineering capability of area
	RtrCapAreaTe bool `protobuf:"varint,5,opt,name=rtr_cap_area_te,json=rtrCapAreaTe,proto3" json:"rtr_cap_area_te,omitempty"`
	// P2P LAN Capability
	RtrCapP2Plan bool `protobuf:"varint,6,opt,name=rtr_cap_p2_plan,json=rtrCapP2Plan,proto3" json:"rtr_cap_p2_plan,omitempty"`
	// TE Experimental bit
	RtrCapTeExp bool `protobuf:"varint,7,opt,name=rtr_cap_te_exp,json=rtrCapTeExp,proto3" json:"rtr_cap_te_exp,omitempty"`
	// All capability bits
	RtrCapAllBits uint32 `protobuf:"varint,8,opt,name=rtr_cap_all_bits,json=rtrCapAllBits,proto3" json:"rtr_cap_all_bits,omitempty"`
	// Additional Information in TLV
	RtrCapAdditionalInfo []byte `protobuf:"bytes,9,opt,name=rtr_cap_additional_info,json=rtrCapAdditionalInfo,proto3" json:"rtr_cap_additional_info,omitempty"`
}

func (x *OspfShOpqRiRtrcapTlv) Reset() {
	*x = OspfShOpqRiRtrcapTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiRtrcapTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiRtrcapTlv) ProtoMessage() {}

func (x *OspfShOpqRiRtrcapTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiRtrcapTlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiRtrcapTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{17}
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapTlvLength() uint32 {
	if x != nil {
		return x.RtrCapTlvLength
	}
	return 0
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapGracefulRestart() bool {
	if x != nil {
		return x.RtrCapGracefulRestart
	}
	return false
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapGracefulRestartHelper() bool {
	if x != nil {
		return x.RtrCapGracefulRestartHelper
	}
	return false
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapStubRtr() bool {
	if x != nil {
		return x.RtrCapStubRtr
	}
	return false
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapAreaTe() bool {
	if x != nil {
		return x.RtrCapAreaTe
	}
	return false
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapP2Plan() bool {
	if x != nil {
		return x.RtrCapP2Plan
	}
	return false
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapTeExp() bool {
	if x != nil {
		return x.RtrCapTeExp
	}
	return false
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapAllBits() uint32 {
	if x != nil {
		return x.RtrCapAllBits
	}
	return 0
}

func (x *OspfShOpqRiRtrcapTlv) GetRtrCapAdditionalInfo() []byte {
	if x != nil {
		return x.RtrCapAdditionalInfo
	}
	return nil
}

// PCE IPv4 Address SubTLV
type OspfShOpqRiPceIpv4AddrStlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PCE IPv4 Address
	PceIpv4Addr string `protobuf:"bytes,1,opt,name=pce_ipv4_addr,json=pceIpv4Addr,proto3" json:"pce_ipv4_addr,omitempty"`
}

func (x *OspfShOpqRiPceIpv4AddrStlv) Reset() {
	*x = OspfShOpqRiPceIpv4AddrStlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiPceIpv4AddrStlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiPceIpv4AddrStlv) ProtoMessage() {}

func (x *OspfShOpqRiPceIpv4AddrStlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiPceIpv4AddrStlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiPceIpv4AddrStlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{18}
}

func (x *OspfShOpqRiPceIpv4AddrStlv) GetPceIpv4Addr() string {
	if x != nil {
		return x.PceIpv4Addr
	}
	return ""
}

// PCE IPv6 Address SubTLV
type OspfShOpqRiPceIpv6AddrStlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PCE IPv6 Address
	PceIpv6Addr string `protobuf:"bytes,1,opt,name=pce_ipv6_addr,json=pceIpv6Addr,proto3" json:"pce_ipv6_addr,omitempty"`
}

func (x *OspfShOpqRiPceIpv6AddrStlv) Reset() {
	*x = OspfShOpqRiPceIpv6AddrStlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiPceIpv6AddrStlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiPceIpv6AddrStlv) ProtoMessage() {}

func (x *OspfShOpqRiPceIpv6AddrStlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiPceIpv6AddrStlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiPceIpv6AddrStlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{19}
}

func (x *OspfShOpqRiPceIpv6AddrStlv) GetPceIpv6Addr() string {
	if x != nil {
		return x.PceIpv6Addr
	}
	return ""
}

// OSPF PCE Address SubTLVs
type OspfShOpqRiPceAddrStlvsUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PceAddrType string `protobuf:"bytes,1,opt,name=pce_addr_type,json=pceAddrType,proto3" json:"pce_addr_type,omitempty"`
	// Unknown PCE Addr TLV
	PceAddrUnknownTlv *OspfShOpqRiUnknownTlv `protobuf:"bytes,2,opt,name=pce_addr_unknown_tlv,json=pceAddrUnknownTlv,proto3" json:"pce_addr_unknown_tlv,omitempty"`
	// IPv4 PCE Address
	Ipv4PceAddr *OspfShOpqRiPceIpv4AddrStlv `protobuf:"bytes,3,opt,name=ipv4_pce_addr,json=ipv4PceAddr,proto3" json:"ipv4_pce_addr,omitempty"`
	// IPv6 PCE Address
	Ipv6PceAddr *OspfShOpqRiPceIpv6AddrStlv `protobuf:"bytes,4,opt,name=ipv6_pce_addr,json=ipv6PceAddr,proto3" json:"ipv6_pce_addr,omitempty"`
}

func (x *OspfShOpqRiPceAddrStlvsUnion) Reset() {
	*x = OspfShOpqRiPceAddrStlvsUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiPceAddrStlvsUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiPceAddrStlvsUnion) ProtoMessage() {}

func (x *OspfShOpqRiPceAddrStlvsUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiPceAddrStlvsUnion.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiPceAddrStlvsUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{20}
}

func (x *OspfShOpqRiPceAddrStlvsUnion) GetPceAddrType() string {
	if x != nil {
		return x.PceAddrType
	}
	return ""
}

func (x *OspfShOpqRiPceAddrStlvsUnion) GetPceAddrUnknownTlv() *OspfShOpqRiUnknownTlv {
	if x != nil {
		return x.PceAddrUnknownTlv
	}
	return nil
}

func (x *OspfShOpqRiPceAddrStlvsUnion) GetIpv4PceAddr() *OspfShOpqRiPceIpv4AddrStlv {
	if x != nil {
		return x.Ipv4PceAddr
	}
	return nil
}

func (x *OspfShOpqRiPceAddrStlvsUnion) GetIpv6PceAddr() *OspfShOpqRiPceIpv6AddrStlv {
	if x != nil {
		return x.Ipv6PceAddr
	}
	return nil
}

// OSPF PCE-Discovery PCE Scope SubTLV
type OspfShOpqRiPcedScopeStlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L Bit
	LBit bool `protobuf:"varint,1,opt,name=l_bit,json=lBit,proto3" json:"l_bit,omitempty"`
	// R Bit
	RBit bool `protobuf:"varint,2,opt,name=r_bit,json=rBit,proto3" json:"r_bit,omitempty"`
	// Rd Bit
	RdBit bool `protobuf:"varint,3,opt,name=rd_bit,json=rdBit,proto3" json:"rd_bit,omitempty"`
	// S Bit
	SBit bool `protobuf:"varint,4,opt,name=s_bit,json=sBit,proto3" json:"s_bit,omitempty"`
	// Sd Bit
	SdBit bool `protobuf:"varint,5,opt,name=sd_bit,json=sdBit,proto3" json:"sd_bit,omitempty"`
	// Y Bit
	YBit bool `protobuf:"varint,6,opt,name=y_bit,json=yBit,proto3" json:"y_bit,omitempty"`
	// Pref L
	PrefL uint32 `protobuf:"varint,7,opt,name=pref_l,json=prefL,proto3" json:"pref_l,omitempty"`
	// Pref R
	PrefR uint32 `protobuf:"varint,8,opt,name=pref_r,json=prefR,proto3" json:"pref_r,omitempty"`
	// Pref S
	PrefS uint32 `protobuf:"varint,9,opt,name=pref_s,json=prefS,proto3" json:"pref_s,omitempty"`
	// Pref Y
	PrefY uint32 `protobuf:"varint,10,opt,name=pref_y,json=prefY,proto3" json:"pref_y,omitempty"`
	// PCE Scope Information
	AllScopeInfoBits uint32 `protobuf:"varint,11,opt,name=all_scope_info_bits,json=allScopeInfoBits,proto3" json:"all_scope_info_bits,omitempty"`
}

func (x *OspfShOpqRiPcedScopeStlv) Reset() {
	*x = OspfShOpqRiPcedScopeStlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiPcedScopeStlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiPcedScopeStlv) ProtoMessage() {}

func (x *OspfShOpqRiPcedScopeStlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiPcedScopeStlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiPcedScopeStlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{21}
}

func (x *OspfShOpqRiPcedScopeStlv) GetLBit() bool {
	if x != nil {
		return x.LBit
	}
	return false
}

func (x *OspfShOpqRiPcedScopeStlv) GetRBit() bool {
	if x != nil {
		return x.RBit
	}
	return false
}

func (x *OspfShOpqRiPcedScopeStlv) GetRdBit() bool {
	if x != nil {
		return x.RdBit
	}
	return false
}

func (x *OspfShOpqRiPcedScopeStlv) GetSBit() bool {
	if x != nil {
		return x.SBit
	}
	return false
}

func (x *OspfShOpqRiPcedScopeStlv) GetSdBit() bool {
	if x != nil {
		return x.SdBit
	}
	return false
}

func (x *OspfShOpqRiPcedScopeStlv) GetYBit() bool {
	if x != nil {
		return x.YBit
	}
	return false
}

func (x *OspfShOpqRiPcedScopeStlv) GetPrefL() uint32 {
	if x != nil {
		return x.PrefL
	}
	return 0
}

func (x *OspfShOpqRiPcedScopeStlv) GetPrefR() uint32 {
	if x != nil {
		return x.PrefR
	}
	return 0
}

func (x *OspfShOpqRiPcedScopeStlv) GetPrefS() uint32 {
	if x != nil {
		return x.PrefS
	}
	return 0
}

func (x *OspfShOpqRiPcedScopeStlv) GetPrefY() uint32 {
	if x != nil {
		return x.PrefY
	}
	return 0
}

func (x *OspfShOpqRiPcedScopeStlv) GetAllScopeInfoBits() uint32 {
	if x != nil {
		return x.AllScopeInfoBits
	}
	return 0
}

// OSPF PCE Discovery TLV
type OspfShOpqRiPcedTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Length of TLV
	PcedtlvLength uint32 `protobuf:"varint,1,opt,name=pcedtlv_length,json=pcedtlvLength,proto3" json:"pcedtlv_length,omitempty"`
	// PCE Address
	PcedAddr *OspfShOpqRiPceAddrStlvsUnion `protobuf:"bytes,2,opt,name=pced_addr,json=pcedAddr,proto3" json:"pced_addr,omitempty"`
	// PCE Scope Information
	PcedScope *OspfShOpqRiPcedScopeStlv `protobuf:"bytes,3,opt,name=pced_scope,json=pcedScope,proto3" json:"pced_scope,omitempty"`
}

func (x *OspfShOpqRiPcedTlv) Reset() {
	*x = OspfShOpqRiPcedTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiPcedTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiPcedTlv) ProtoMessage() {}

func (x *OspfShOpqRiPcedTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiPcedTlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiPcedTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{22}
}

func (x *OspfShOpqRiPcedTlv) GetPcedtlvLength() uint32 {
	if x != nil {
		return x.PcedtlvLength
	}
	return 0
}

func (x *OspfShOpqRiPcedTlv) GetPcedAddr() *OspfShOpqRiPceAddrStlvsUnion {
	if x != nil {
		return x.PcedAddr
	}
	return nil
}

func (x *OspfShOpqRiPcedTlv) GetPcedScope() *OspfShOpqRiPcedScopeStlv {
	if x != nil {
		return x.PcedScope
	}
	return nil
}

// OSPF SR Algorithm TLV
type OspfShOpqRiSrAlgoTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Length of TLV
	SrAlgoLength uint32 `protobuf:"varint,1,opt,name=sr_algo_length,json=srAlgoLength,proto3" json:"sr_algo_length,omitempty"`
	// SR Algorithms
	SrAlgoValue []byte `protobuf:"bytes,2,opt,name=sr_algo_value,json=srAlgoValue,proto3" json:"sr_algo_value,omitempty"`
}

func (x *OspfShOpqRiSrAlgoTlv) Reset() {
	*x = OspfShOpqRiSrAlgoTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiSrAlgoTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiSrAlgoTlv) ProtoMessage() {}

func (x *OspfShOpqRiSrAlgoTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiSrAlgoTlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiSrAlgoTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{23}
}

func (x *OspfShOpqRiSrAlgoTlv) GetSrAlgoLength() uint32 {
	if x != nil {
		return x.SrAlgoLength
	}
	return 0
}

func (x *OspfShOpqRiSrAlgoTlv) GetSrAlgoValue() []byte {
	if x != nil {
		return x.SrAlgoValue
	}
	return nil
}

// OSPF PCE-Discovery PCE Scope SubTLV
type OspfShSrSidStlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Length of sub-TLV
	SrSidLength uint32 `protobuf:"varint,1,opt,name=sr_sid_length,json=srSidLength,proto3" json:"sr_sid_length,omitempty"`
	// SID Value
	SrSidValue uint32 `protobuf:"varint,2,opt,name=sr_sid_value,json=srSidValue,proto3" json:"sr_sid_value,omitempty"`
}

func (x *OspfShSrSidStlv) Reset() {
	*x = OspfShSrSidStlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShSrSidStlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShSrSidStlv) ProtoMessage() {}

func (x *OspfShSrSidStlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShSrSidStlv.ProtoReflect.Descriptor instead.
func (*OspfShSrSidStlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{24}
}

func (x *OspfShSrSidStlv) GetSrSidLength() uint32 {
	if x != nil {
		return x.SrSidLength
	}
	return 0
}

func (x *OspfShSrSidStlv) GetSrSidValue() uint32 {
	if x != nil {
		return x.SrSidValue
	}
	return 0
}

// OSPF SR Range TLV
type OspfShOpqRiSrRangeTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Length of TLV
	SrRangeLength uint32 `protobuf:"varint,1,opt,name=sr_range_length,json=srRangeLength,proto3" json:"sr_range_length,omitempty"`
	// SR Range Size
	SrRangeSize uint32 `protobuf:"varint,2,opt,name=sr_range_size,json=srRangeSize,proto3" json:"sr_range_size,omitempty"`
	// SID sub-TLV
	Sidtlv *OspfShSrSidStlv `protobuf:"bytes,3,opt,name=sidtlv,proto3" json:"sidtlv,omitempty"`
}

func (x *OspfShOpqRiSrRangeTlv) Reset() {
	*x = OspfShOpqRiSrRangeTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiSrRangeTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiSrRangeTlv) ProtoMessage() {}

func (x *OspfShOpqRiSrRangeTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiSrRangeTlv.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiSrRangeTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{25}
}

func (x *OspfShOpqRiSrRangeTlv) GetSrRangeLength() uint32 {
	if x != nil {
		return x.SrRangeLength
	}
	return 0
}

func (x *OspfShOpqRiSrRangeTlv) GetSrRangeSize() uint32 {
	if x != nil {
		return x.SrRangeSize
	}
	return 0
}

func (x *OspfShOpqRiSrRangeTlv) GetSidtlv() *OspfShSrSidStlv {
	if x != nil {
		return x.Sidtlv
	}
	return nil
}

// OSPF Router Information TLVs
type OspfShOpqRiTlvsUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RitlvInternalType string `protobuf:"bytes,1,opt,name=ritlv_internal_type,json=ritlvInternalType,proto3" json:"ritlv_internal_type,omitempty"`
	// Unknown Rtr Info TLV
	UnknownTlv *OspfShOpqRiUnknownTlv `protobuf:"bytes,2,opt,name=unknown_tlv,json=unknownTlv,proto3" json:"unknown_tlv,omitempty"`
	// Rtr Cap TLV
	RtrCapTlv *OspfShOpqRiRtrcapTlv `protobuf:"bytes,3,opt,name=rtr_cap_tlv,json=rtrCapTlv,proto3" json:"rtr_cap_tlv,omitempty"`
	// PCE Discovery TLV
	Pcedtlv *OspfShOpqRiPcedTlv `protobuf:"bytes,4,opt,name=pcedtlv,proto3" json:"pcedtlv,omitempty"`
	// SR Algorithm TLV
	SrAlgoTlv *OspfShOpqRiSrAlgoTlv `protobuf:"bytes,5,opt,name=sr_algo_tlv,json=srAlgoTlv,proto3" json:"sr_algo_tlv,omitempty"`
	// SR Range TLV
	SrRangeTlv *OspfShOpqRiSrRangeTlv `protobuf:"bytes,6,opt,name=sr_range_tlv,json=srRangeTlv,proto3" json:"sr_range_tlv,omitempty"`
}

func (x *OspfShOpqRiTlvsUnion) Reset() {
	*x = OspfShOpqRiTlvsUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShOpqRiTlvsUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShOpqRiTlvsUnion) ProtoMessage() {}

func (x *OspfShOpqRiTlvsUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShOpqRiTlvsUnion.ProtoReflect.Descriptor instead.
func (*OspfShOpqRiTlvsUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{26}
}

func (x *OspfShOpqRiTlvsUnion) GetRitlvInternalType() string {
	if x != nil {
		return x.RitlvInternalType
	}
	return ""
}

func (x *OspfShOpqRiTlvsUnion) GetUnknownTlv() *OspfShOpqRiUnknownTlv {
	if x != nil {
		return x.UnknownTlv
	}
	return nil
}

func (x *OspfShOpqRiTlvsUnion) GetRtrCapTlv() *OspfShOpqRiRtrcapTlv {
	if x != nil {
		return x.RtrCapTlv
	}
	return nil
}

func (x *OspfShOpqRiTlvsUnion) GetPcedtlv() *OspfShOpqRiPcedTlv {
	if x != nil {
		return x.Pcedtlv
	}
	return nil
}

func (x *OspfShOpqRiTlvsUnion) GetSrAlgoTlv() *OspfShOpqRiSrAlgoTlv {
	if x != nil {
		return x.SrAlgoTlv
	}
	return nil
}

func (x *OspfShOpqRiTlvsUnion) GetSrRangeTlv() *OspfShOpqRiSrRangeTlv {
	if x != nil {
		return x.SrRangeTlv
	}
	return nil
}

// OSPF Router Information LSA
type OspfShLsaOpqRi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque LSA flooding scope, a.k.a., Opaque LSA Type
	OpaqueRilsaScope string `protobuf:"bytes,1,opt,name=opaque_rilsa_scope,json=opaqueRilsaScope,proto3" json:"opaque_rilsa_scope,omitempty"`
	// Interface on which this Link-Local Opaque link LSA is received
	OpaqueRiInterfaceName string `protobuf:"bytes,2,opt,name=opaque_ri_interface_name,json=opaqueRiInterfaceName,proto3" json:"opaque_ri_interface_name,omitempty"`
	// Router Information TLV
	OpaqueRitlv []*OspfShOpqRiTlvsUnion `protobuf:"bytes,3,rep,name=opaque_ritlv,json=opaqueRitlv,proto3" json:"opaque_ritlv,omitempty"`
}

func (x *OspfShLsaOpqRi) Reset() {
	*x = OspfShLsaOpqRi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaOpqRi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaOpqRi) ProtoMessage() {}

func (x *OspfShLsaOpqRi) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaOpqRi.ProtoReflect.Descriptor instead.
func (*OspfShLsaOpqRi) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{27}
}

func (x *OspfShLsaOpqRi) GetOpaqueRilsaScope() string {
	if x != nil {
		return x.OpaqueRilsaScope
	}
	return ""
}

func (x *OspfShLsaOpqRi) GetOpaqueRiInterfaceName() string {
	if x != nil {
		return x.OpaqueRiInterfaceName
	}
	return ""
}

func (x *OspfShLsaOpqRi) GetOpaqueRitlv() []*OspfShOpqRiTlvsUnion {
	if x != nil {
		return x.OpaqueRitlv
	}
	return nil
}

// OSPF Opaque-link type 3 grace LSA Information
type OspfShLsaOpqGrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of time the router's neighbor should advertise it fully adjacent (s)
	GracePeriod uint32 `protobuf:"varint,1,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	// Reason for router restart
	GraceReason string `protobuf:"bytes,2,opt,name=grace_reason,json=graceReason,proto3" json:"grace_reason,omitempty"`
	// IP interface address on the subnet associated with the grace LSA
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *OspfShLsaOpqGrace) Reset() {
	*x = OspfShLsaOpqGrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaOpqGrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaOpqGrace) ProtoMessage() {}

func (x *OspfShLsaOpqGrace) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaOpqGrace.ProtoReflect.Descriptor instead.
func (*OspfShLsaOpqGrace) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{28}
}

func (x *OspfShLsaOpqGrace) GetGracePeriod() uint32 {
	if x != nil {
		return x.GracePeriod
	}
	return 0
}

func (x *OspfShLsaOpqGrace) GetGraceReason() string {
	if x != nil {
		return x.GraceReason
	}
	return ""
}

func (x *OspfShLsaOpqGrace) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

// OSPF Router LSA TOS Metric
type OspfShTosMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Service
	RouterTos uint32 `protobuf:"varint,1,opt,name=router_tos,json=routerTos,proto3" json:"router_tos,omitempty"`
	// Type of service specific metric
	TosCost uint32 `protobuf:"varint,2,opt,name=tos_cost,json=tosCost,proto3" json:"tos_cost,omitempty"`
}

func (x *OspfShTosMetric) Reset() {
	*x = OspfShTosMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShTosMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShTosMetric) ProtoMessage() {}

func (x *OspfShTosMetric) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShTosMetric.ProtoReflect.Descriptor instead.
func (*OspfShTosMetric) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{29}
}

func (x *OspfShTosMetric) GetRouterTos() uint32 {
	if x != nil {
		return x.RouterTos
	}
	return 0
}

func (x *OspfShTosMetric) GetTosCost() uint32 {
	if x != nil {
		return x.TosCost
	}
	return 0
}

// OSPF Router LSA Links
type OspfShLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link ID
	LinkId string `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Link Data
	LinkData string `protobuf:"bytes,2,opt,name=link_data,json=linkData,proto3" json:"link_data,omitempty"`
	// Type of link
	LinkType string `protobuf:"bytes,3,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	// Cost for using this link
	LinkMetric uint32 `protobuf:"varint,4,opt,name=link_metric,json=linkMetric,proto3" json:"link_metric,omitempty"`
	// List of type of service metrics
	LinkTosList []*OspfShTosMetric `protobuf:"bytes,5,rep,name=link_tos_list,json=linkTosList,proto3" json:"link_tos_list,omitempty"`
}

func (x *OspfShLink) Reset() {
	*x = OspfShLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLink) ProtoMessage() {}

func (x *OspfShLink) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLink.ProtoReflect.Descriptor instead.
func (*OspfShLink) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{30}
}

func (x *OspfShLink) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *OspfShLink) GetLinkData() string {
	if x != nil {
		return x.LinkData
	}
	return ""
}

func (x *OspfShLink) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *OspfShLink) GetLinkMetric() uint32 {
	if x != nil {
		return x.LinkMetric
	}
	return 0
}

func (x *OspfShLink) GetLinkTosList() []*OspfShTosMetric {
	if x != nil {
		return x.LinkTosList
	}
	return nil
}

// OSPF Router LSA
type OspfShLsaRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If True, router is an Autonomous system Border Router
	RouterAsbr bool `protobuf:"varint,1,opt,name=router_asbr,json=routerAsbr,proto3" json:"router_asbr,omitempty"`
	// If True, router is an Area Border Router
	RouterAbr bool `protobuf:"varint,2,opt,name=router_abr,json=routerAbr,proto3" json:"router_abr,omitempty"`
	// If true, internal LSA
	InternalLsa bool `protobuf:"varint,3,opt,name=internal_lsa,json=internalLsa,proto3" json:"internal_lsa,omitempty"`
	// List of links in this LSA
	LinkList []*OspfShLink `protobuf:"bytes,4,rep,name=link_list,json=linkList,proto3" json:"link_list,omitempty"`
	// List of links for internal LSA
	InternalLinks []*OspfShLink `protobuf:"bytes,5,rep,name=internal_links,json=internalLinks,proto3" json:"internal_links,omitempty"`
}

func (x *OspfShLsaRouter) Reset() {
	*x = OspfShLsaRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaRouter) ProtoMessage() {}

func (x *OspfShLsaRouter) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaRouter.ProtoReflect.Descriptor instead.
func (*OspfShLsaRouter) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{31}
}

func (x *OspfShLsaRouter) GetRouterAsbr() bool {
	if x != nil {
		return x.RouterAsbr
	}
	return false
}

func (x *OspfShLsaRouter) GetRouterAbr() bool {
	if x != nil {
		return x.RouterAbr
	}
	return false
}

func (x *OspfShLsaRouter) GetInternalLsa() bool {
	if x != nil {
		return x.InternalLsa
	}
	return false
}

func (x *OspfShLsaRouter) GetLinkList() []*OspfShLink {
	if x != nil {
		return x.LinkList
	}
	return nil
}

func (x *OspfShLsaRouter) GetInternalLinks() []*OspfShLink {
	if x != nil {
		return x.InternalLinks
	}
	return nil
}

// OSPF Summary LSA
type OspfShLsaSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary LSA prefix length
	SummaryPrefixLength uint32 `protobuf:"varint,1,opt,name=summary_prefix_length,json=summaryPrefixLength,proto3" json:"summary_prefix_length,omitempty"`
	// Metric
	SummaryLsaMetric []uint32 `protobuf:"varint,2,rep,packed,name=summary_lsa_metric,json=summaryLsaMetric,proto3" json:"summary_lsa_metric,omitempty"`
	// If true, internal max-metric LSA
	InternalSumLsa bool `protobuf:"varint,3,opt,name=internal_sum_lsa,json=internalSumLsa,proto3" json:"internal_sum_lsa,omitempty"`
}

func (x *OspfShLsaSummary) Reset() {
	*x = OspfShLsaSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShLsaSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShLsaSummary) ProtoMessage() {}

func (x *OspfShLsaSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShLsaSummary.ProtoReflect.Descriptor instead.
func (*OspfShLsaSummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{32}
}

func (x *OspfShLsaSummary) GetSummaryPrefixLength() uint32 {
	if x != nil {
		return x.SummaryPrefixLength
	}
	return 0
}

func (x *OspfShLsaSummary) GetSummaryLsaMetric() []uint32 {
	if x != nil {
		return x.SummaryLsaMetric
	}
	return nil
}

func (x *OspfShLsaSummary) GetInternalSumLsa() bool {
	if x != nil {
		return x.InternalSumLsa
	}
	return false
}

// LSA internal information for an LSA
type OspfLsaInternalUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalLsaType string `protobuf:"bytes,1,opt,name=internal_lsa_type,json=internalLsaType,proto3" json:"internal_lsa_type,omitempty"`
	// Router LSA
	RouterLsaType *OspfShLsaRouter `protobuf:"bytes,2,opt,name=router_lsa_type,json=routerLsaType,proto3" json:"router_lsa_type,omitempty"`
	// Network LSA
	NetworkLsaType *OspfShLsaNetwork `protobuf:"bytes,3,opt,name=network_lsa_type,json=networkLsaType,proto3" json:"network_lsa_type,omitempty"`
	// Summary LSA
	SummaryLsaType *OspfShLsaSummary `protobuf:"bytes,4,opt,name=summary_lsa_type,json=summaryLsaType,proto3" json:"summary_lsa_type,omitempty"`
	// External LSA
	ExternalLsaType *OspfShLsaExternal `protobuf:"bytes,5,opt,name=external_lsa_type,json=externalLsaType,proto3" json:"external_lsa_type,omitempty"`
	// Opaque-Link LSA
	OpaqueLinkLsaType *OspfShLsaOpqLink `protobuf:"bytes,6,opt,name=opaque_link_lsa_type,json=opaqueLinkLsaType,proto3" json:"opaque_link_lsa_type,omitempty"`
	// Opaque-Area, opaque type 1 LSA
	OpaqueMplsTeLsaType *OspfShLsaOpqRrr `protobuf:"bytes,7,opt,name=opaque_mpls_te_lsa_type,json=opaqueMplsTeLsaType,proto3" json:"opaque_mpls_te_lsa_type,omitempty"`
	// Opaque-link, opaque type 3 Grace LSA
	OpaqueGraceLsa *OspfShLsaOpqGrace `protobuf:"bytes,8,opt,name=opaque_grace_lsa,json=opaqueGraceLsa,proto3" json:"opaque_grace_lsa,omitempty"`
	// Opaque Router Information LSA
	OpaqueRouterInfoLsaType *OspfShLsaOpqRi `protobuf:"bytes,9,opt,name=opaque_router_info_lsa_type,json=opaqueRouterInfoLsaType,proto3" json:"opaque_router_info_lsa_type,omitempty"`
	// Extende Prefix LSA type
	OpaqueEpLsaType *OspfShLsaOpqEpl `protobuf:"bytes,10,opt,name=opaque_ep_lsa_type,json=opaqueEpLsaType,proto3" json:"opaque_ep_lsa_type,omitempty"`
	// Extended Link LSA type
	OpaqueElLsaType *OspfShLsaOpqEll `protobuf:"bytes,11,opt,name=opaque_el_lsa_type,json=opaqueElLsaType,proto3" json:"opaque_el_lsa_type,omitempty"`
}

func (x *OspfLsaInternalUnion) Reset() {
	*x = OspfLsaInternalUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfLsaInternalUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfLsaInternalUnion) ProtoMessage() {}

func (x *OspfLsaInternalUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfLsaInternalUnion.ProtoReflect.Descriptor instead.
func (*OspfLsaInternalUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP(), []int{33}
}

func (x *OspfLsaInternalUnion) GetInternalLsaType() string {
	if x != nil {
		return x.InternalLsaType
	}
	return ""
}

func (x *OspfLsaInternalUnion) GetRouterLsaType() *OspfShLsaRouter {
	if x != nil {
		return x.RouterLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetNetworkLsaType() *OspfShLsaNetwork {
	if x != nil {
		return x.NetworkLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetSummaryLsaType() *OspfShLsaSummary {
	if x != nil {
		return x.SummaryLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetExternalLsaType() *OspfShLsaExternal {
	if x != nil {
		return x.ExternalLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetOpaqueLinkLsaType() *OspfShLsaOpqLink {
	if x != nil {
		return x.OpaqueLinkLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetOpaqueMplsTeLsaType() *OspfShLsaOpqRrr {
	if x != nil {
		return x.OpaqueMplsTeLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetOpaqueGraceLsa() *OspfShLsaOpqGrace {
	if x != nil {
		return x.OpaqueGraceLsa
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetOpaqueRouterInfoLsaType() *OspfShLsaOpqRi {
	if x != nil {
		return x.OpaqueRouterInfoLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetOpaqueEpLsaType() *OspfShLsaOpqEpl {
	if x != nil {
		return x.OpaqueEpLsaType
	}
	return nil
}

func (x *OspfLsaInternalUnion) GetOpaqueElLsaType() *OspfShLsaOpqEll {
	if x != nil {
		return x.OpaqueElLsaType
	}
	return nil
}

var File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDesc = []byte{
	0x0a, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6c, 0x73, 0x61, 0x73, 0x2f, 0x6c,
	0x73, 0x61, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x50, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c,
	0x73, 0x61, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x4b,
	0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xc4, 0x03, 0x0a, 0x17, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x82, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73,
	0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0d, 0x6c, 0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73,
	0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x73, 0x61, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x0c, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0xd3, 0x03, 0x0a, 0x15, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64,
	0x62, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x41, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x70, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x70, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x73, 0x72, 0x5f,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6e, 0x73, 0x72, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x4f,
	0x72, 0x69, 0x67, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x73,
	0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x73, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x19, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x62, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9d, 0x02, 0x0a, 0x11, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x73, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x73, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x73,
	0x61, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x73, 0x61, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x73,
	0x61, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x73, 0x61,
	0x41, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x73,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6e, 0x41, 0x67, 0x65, 0x4c, 0x73,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6e, 0x73, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xcc, 0x09, 0x0a, 0x11, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x6e, 0x73, 0x73, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x73, 0x73, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x6e, 0x42, 0x69, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x6c, 0x73, 0x61,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x64, 0x62, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x10, 0x6c, 0x73, 0x61, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x6c, 0x73, 0x61, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x73, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x6c, 0x73, 0x61,
	0x64, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x73, 0x61, 0x64, 0x62, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x17,
	0x6c, 0x73, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64,
	0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c,
	0x73, 0x61, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x73, 0x61, 0x64, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x73,
	0x61, 0x64, 0x62, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x12, 0x40, 0x0a,
	0x1c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x64, 0x62, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x73, 0x61, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x73, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x4c, 0x73, 0x61,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47,
	0x0a, 0x21, 0x6c, 0x73, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6c, 0x73, 0x61, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x65, 0x78, 0x5f, 0x74, 0x6f, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x22, 0x97,
	0x02, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6c, 0x73, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x73,
	0x61, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c,
	0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x65,
	0x78, 0x5f, 0x74, 0x6f, 0x73, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54,
	0x6f, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x7b, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x32, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x12, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x54, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70,
	0x71, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x54, 0x6c, 0x76,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x22, 0xc0, 0x02, 0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x74, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c,
	0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6c,
	0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6c, 0x76, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x64, 0x73, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x44, 0x73, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x6c, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x8b, 0x01, 0x0a, 0x0f,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x52, 0x0c, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x22, 0x4a, 0x0a, 0x14, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x72, 0x72, 0x12, 0x7c, 0x0a,
	0x08, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c,
	0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x74,
	0x6c, 0x76, 0x52, 0x07, 0x74, 0x6c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x13,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6f, 0x70, 0x71, 0x5f,
	0x65, 0x70, 0x6c, 0x12, 0x7c, 0x0a, 0x08, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x07, 0x74, 0x6c, 0x76, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73,
	0x61, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x65, 0x6c, 0x6c, 0x12, 0x7c, 0x0a, 0x08, 0x74, 0x6c, 0x76,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x07,
	0x74, 0x6c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x69, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x69, 0x47, 0x65, 0x6e, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x11, 0x72, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x69, 0x47, 0x65, 0x6e, 0x54,
	0x6c, 0x76, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x69, 0x5f, 0x67,
	0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x72, 0x69, 0x47, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x19, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x72, 0x74,
	0x72, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x6c, 0x76, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x74, 0x72, 0x5f,
	0x63, 0x61, 0x70, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x74, 0x72, 0x43, 0x61, 0x70, 0x54, 0x6c, 0x76, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x61, 0x70,
	0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x74, 0x72, 0x43, 0x61, 0x70, 0x47,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44,
	0x0a, 0x1f, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x74, 0x72, 0x43, 0x61, 0x70, 0x47,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x75, 0x62, 0x5f, 0x72, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x74, 0x72, 0x43, 0x61, 0x70, 0x53, 0x74, 0x75, 0x62, 0x52, 0x74, 0x72, 0x12, 0x25, 0x0a,
	0x0f, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x74, 0x72, 0x43, 0x61, 0x70, 0x41, 0x72,
	0x65, 0x61, 0x54, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x70, 0x32, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72,
	0x74, 0x72, 0x43, 0x61, 0x70, 0x50, 0x32, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x72,
	0x74, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x74, 0x72, 0x43, 0x61, 0x70, 0x54, 0x65, 0x45, 0x78, 0x70,
	0x12, 0x27, 0x0a, 0x10, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x74, 0x72, 0x43,
	0x61, 0x70, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x74, 0x72,
	0x5f, 0x63, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x72, 0x74, 0x72, 0x43,
	0x61, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x47, 0x0a, 0x21, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f,
	0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x73, 0x74, 0x6c, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x63,
	0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x22, 0x47, 0x0a, 0x21, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x6c, 0x76, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x22, 0x9d, 0x04, 0x0a, 0x23, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f,
	0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9d,
	0x01, 0x0a, 0x14, 0x70, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x11, 0x70, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x12, 0x97,
	0x01, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x6c, 0x76, 0x52, 0x0b, 0x69, 0x70, 0x76,
	0x34, 0x50, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x73, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e,
	0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f,
	0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x73, 0x74, 0x6c, 0x76, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x50, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x22, 0xad, 0x02, 0x0a, 0x1e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f,
	0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x5f, 0x73, 0x74, 0x6c, 0x76, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x42, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x5f,
	0x62, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x42, 0x69, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x64, 0x42, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x42, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x64, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x64, 0x42,
	0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x79, 0x42, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x5f,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x65, 0x66, 0x4c, 0x12, 0x15,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x70, 0x72, 0x65, 0x66, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x65, 0x66, 0x53, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x5f, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72,
	0x65, 0x66, 0x59, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69,
	0x74, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x17, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f,
	0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x63, 0x65, 0x64, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x63, 0x65, 0x64, 0x74, 0x6c, 0x76, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x92, 0x01, 0x0a, 0x09, 0x70, 0x63, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x70, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x63, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x70,
	0x63, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x70, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c,
	0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72,
	0x69, 0x5f, 0x70, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x6c,
	0x76, 0x52, 0x09, 0x70, 0x63, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x66, 0x0a, 0x1a,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x73,
	0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x74, 0x6c, 0x76, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x73, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x6c, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x72, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x72, 0x53, 0x69, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x72, 0x53, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xe8, 0x01, 0x0a, 0x1b, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70,
	0x71, 0x5f, 0x72, 0x69, 0x5f, 0x73, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6c,
	0x76, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x7d, 0x0a,
	0x06, 0x73, 0x69, 0x64, 0x74, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x6c, 0x76, 0x52, 0x06, 0x73, 0x69, 0x64, 0x74, 0x6c, 0x76, 0x22, 0x90, 0x06, 0x0a,
	0x19, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f,
	0x74, 0x6c, 0x76, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x69,
	0x74, 0x6c, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x69, 0x74, 0x6c, 0x76, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e,
	0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f,
	0x72, 0x69, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x0a,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x72,
	0x74, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e,
	0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f,
	0x72, 0x69, 0x5f, 0x72, 0x74, 0x72, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x09, 0x72,
	0x74, 0x72, 0x43, 0x61, 0x70, 0x54, 0x6c, 0x76, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x70, 0x63, 0x65,
	0x64, 0x74, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x70, 0x63, 0x65,
	0x64, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x07, 0x70, 0x63, 0x65, 0x64, 0x74, 0x6c, 0x76, 0x12, 0x8c,
	0x01, 0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x74,
	0x6c, 0x76, 0x52, 0x09, 0x73, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x54, 0x6c, 0x76, 0x12, 0x8f, 0x01,
	0x0a, 0x0c, 0x73, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x73, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x6c, 0x76, 0x52, 0x0a, 0x73, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6c, 0x76, 0x22,
	0x8c, 0x02, 0x0a, 0x12, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f,
	0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x5f, 0x72, 0x69, 0x6c, 0x73, 0x61, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x69, 0x6c, 0x73, 0x61, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x72,
	0x69, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x69,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8e, 0x01,
	0x0a, 0x0c, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x69, 0x74, 0x6c, 0x76, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x69, 0x74, 0x6c, 0x76, 0x22, 0x7c,
	0x0a, 0x15, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6f, 0x70,
	0x71, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x12,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x8d, 0x02, 0x0a,
	0x0c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfc, 0x02, 0x0a,
	0x12, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x73,
	0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x73, 0x62, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x62, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x73, 0x61, 0x12, 0x7b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x13,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x73, 0x61, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x4c, 0x73, 0x61, 0x22,
	0xa8, 0x0c, 0x0a, 0x17, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73,
	0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c,
	0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73,
	0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73,
	0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x14, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73,
	0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6f, 0x70,
	0x71, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x11, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x17, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72,
	0x72, 0x72, 0x52, 0x13, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65,
	0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73,
	0x61, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x73, 0x61, 0x12, 0xa2, 0x01, 0x0a, 0x1b,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73,
	0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x72, 0x69, 0x52, 0x17, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x92, 0x01, 0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x65, 0x70, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x73, 0x2e, 0x6c, 0x73, 0x61,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6f, 0x70, 0x71,
	0x5f, 0x65, 0x70, 0x6c, 0x52, 0x0f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x45, 0x70, 0x4c, 0x73,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x5f, 0x65, 0x6c, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x73, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73,
	0x61, 0x5f, 0x6f, 0x70, 0x71, 0x5f, 0x65, 0x6c, 0x6c, 0x52, 0x0f, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x45, 0x6c, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescData = file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_goTypes = []interface{}{
	(*OspfShDatabaseDetail_KEYS)(nil),    // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_database_detail_KEYS
	(*OspfShDatabaseDetail)(nil),         // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_database_detail
	(*OspfShTime)(nil),                   // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_time
	(*OspfShDbNotDelete)(nil),            // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_not_delete
	(*OspfShDbThrottleTimer)(nil),        // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_throttle_timer
	(*OspfShDbHeader)(nil),               // 5: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_header
	(*OspfShDbDetail)(nil),               // 6: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_detail
	(*OspfShLsaExTos)(nil),               // 7: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_ex_tos
	(*OspfShLsaExternal)(nil),            // 8: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_external
	(*OspfShLsaNetwork)(nil),             // 9: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_network
	(*OspfShOpqSubtlv)(nil),              // 10: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_subtlv
	(*OspfShOpqTlv)(nil),                 // 11: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_tlv
	(*OspfShLsaOpqLink)(nil),             // 12: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_link
	(*OspfShLsaOpqRrr)(nil),              // 13: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_rrr
	(*OspfShLsaOpqEpl)(nil),              // 14: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_epl
	(*OspfShLsaOpqEll)(nil),              // 15: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_ell
	(*OspfShOpqRiUnknownTlv)(nil),        // 16: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_unknown_tlv
	(*OspfShOpqRiRtrcapTlv)(nil),         // 17: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_rtrcap_tlv
	(*OspfShOpqRiPceIpv4AddrStlv)(nil),   // 18: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_ipv4_addr_stlv
	(*OspfShOpqRiPceIpv6AddrStlv)(nil),   // 19: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_ipv6_addr_stlv
	(*OspfShOpqRiPceAddrStlvsUnion)(nil), // 20: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_addr_stlvs_union
	(*OspfShOpqRiPcedScopeStlv)(nil),     // 21: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pced_scope_stlv
	(*OspfShOpqRiPcedTlv)(nil),           // 22: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pced_tlv
	(*OspfShOpqRiSrAlgoTlv)(nil),         // 23: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_sr_algo_tlv
	(*OspfShSrSidStlv)(nil),              // 24: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_sr_sid_stlv
	(*OspfShOpqRiSrRangeTlv)(nil),        // 25: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_sr_range_tlv
	(*OspfShOpqRiTlvsUnion)(nil),         // 26: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_tlvs_union
	(*OspfShLsaOpqRi)(nil),               // 27: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_ri
	(*OspfShLsaOpqGrace)(nil),            // 28: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_grace
	(*OspfShTosMetric)(nil),              // 29: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_tos_metric
	(*OspfShLink)(nil),                   // 30: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_link
	(*OspfShLsaRouter)(nil),              // 31: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_router
	(*OspfShLsaSummary)(nil),             // 32: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_summary
	(*OspfLsaInternalUnion)(nil),         // 33: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union
}
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_depIdxs = []int32{
	5,  // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_database_detail.lsa_header:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_header
	6,  // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_database_detail.lsa_detail_data:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_detail
	33, // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_database_detail.lsa_internal_data:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union
	4,  // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_detail.lsa_throttle_timer:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_throttle_timer
	2,  // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_detail.lsa_last_updated_time:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_time
	2,  // 5: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_detail.lsadb_base_time_stamp:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_time
	3,  // 6: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_detail.not_delete:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_db_not_delete
	7,  // 7: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_external.external_tos_metric:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_ex_tos
	10, // 8: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_subtlv.sub_tlv_sub_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_subtlv
	10, // 9: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_tlv.te_link_sub_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_subtlv
	11, // 10: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_rrr.tlv_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_tlv
	11, // 11: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_epl.tlv_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_tlv
	11, // 12: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_ell.tlv_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_tlv
	16, // 13: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_addr_stlvs_union.pce_addr_unknown_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_unknown_tlv
	18, // 14: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_addr_stlvs_union.ipv4_pce_addr:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_ipv4_addr_stlv
	19, // 15: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_addr_stlvs_union.ipv6_pce_addr:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_ipv6_addr_stlv
	20, // 16: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pced_tlv.pced_addr:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pce_addr_stlvs_union
	21, // 17: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pced_tlv.pced_scope:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pced_scope_stlv
	24, // 18: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_sr_range_tlv.sidtlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_sr_sid_stlv
	16, // 19: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_tlvs_union.unknown_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_unknown_tlv
	17, // 20: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_tlvs_union.rtr_cap_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_rtrcap_tlv
	22, // 21: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_tlvs_union.pcedtlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_pced_tlv
	23, // 22: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_tlvs_union.sr_algo_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_sr_algo_tlv
	25, // 23: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_tlvs_union.sr_range_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_sr_range_tlv
	26, // 24: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_ri.opaque_ritlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_opq_ri_tlvs_union
	29, // 25: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_link.link_tos_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_tos_metric
	30, // 26: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_router.link_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_link
	30, // 27: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_router.internal_links:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_link
	31, // 28: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.router_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_router
	9,  // 29: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.network_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_network
	32, // 30: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.summary_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_summary
	8,  // 31: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.external_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_external
	12, // 32: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.opaque_link_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_link
	13, // 33: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.opaque_mpls_te_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_rrr
	28, // 34: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.opaque_grace_lsa:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_grace
	27, // 35: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.opaque_router_info_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_ri
	14, // 36: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.opaque_ep_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_epl
	15, // 37: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_lsa_internal_union.opaque_el_lsa_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.database.lsas.lsa.ospf_sh_lsa_opq_ell
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_init()
}
func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_init() {
	if File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDatabaseDetail_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDatabaseDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDbNotDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDbThrottleTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDbHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShDbDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaExTos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaExternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqSubtlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaOpqLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaOpqRrr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaOpqEpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaOpqEll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiUnknownTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiRtrcapTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiPceIpv4AddrStlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiPceIpv6AddrStlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiPceAddrStlvsUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiPcedScopeStlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiPcedTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiSrAlgoTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShSrSidStlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiSrRangeTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShOpqRiTlvsUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaOpqRi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaOpqGrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShTosMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShLsaSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfLsaInternalUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto = out.File
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_database_lsas_lsa_ospf_sh_database_detail_proto_depIdxs = nil
}
