// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_ospf_oper/ospf/processes/process/vrfs/vrf/mpls_te/mpls_te_fragments/mpls_te_fragment/ospf_sh_mpls.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPF MPLS-TE Information
type OspfShMpls_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	VrfName     string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AreaId      uint32 `protobuf:"varint,3,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (x *OspfShMpls_KEYS) Reset() {
	*x = OspfShMpls_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMpls_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMpls_KEYS) ProtoMessage() {}

func (x *OspfShMpls_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMpls_KEYS.ProtoReflect.Descriptor instead.
func (*OspfShMpls_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{0}
}

func (x *OspfShMpls_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *OspfShMpls_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *OspfShMpls_KEYS) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type OspfShMpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OSPF MPLS-TE router ID
	MplsTeRouterId string `protobuf:"bytes,50,opt,name=mpls_te_router_id,json=mplsTeRouterId,proto3" json:"mpls_te_router_id,omitempty"`
	// If true, MPLS-TE enabled in area
	MplsTeEnabled bool `protobuf:"varint,51,opt,name=mpls_te_enabled,json=mplsTeEnabled,proto3" json:"mpls_te_enabled,omitempty"`
	// If true, MPLS-TE initialized in the area
	MplsTeInitialized bool `protobuf:"varint,52,opt,name=mpls_te_initialized,json=mplsTeInitialized,proto3" json:"mpls_te_initialized,omitempty"`
	// Area ID string in decimal or dotted decimal format
	MplsTeAreaId string `protobuf:"bytes,53,opt,name=mpls_te_area_id,json=mplsTeAreaId,proto3" json:"mpls_te_area_id,omitempty"`
	// Area information instance
	MplsTeAreaInstance uint32 `protobuf:"varint,54,opt,name=mpls_te_area_instance,json=mplsTeAreaInstance,proto3" json:"mpls_te_area_instance,omitempty"`
	// MPLS-TE router address
	MplsTeRouterAddress string `protobuf:"bytes,55,opt,name=mpls_te_router_address,json=mplsTeRouterAddress,proto3" json:"mpls_te_router_address,omitempty"`
	// MPLS-TE links in the area
	MplsTeLinks []*OspfShMplsLink `protobuf:"bytes,56,rep,name=mpls_te_links,json=mplsTeLinks,proto3" json:"mpls_te_links,omitempty"`
	// Next MPLS-TE fragment ID
	MplsTeNextFragmentId uint32 `protobuf:"varint,57,opt,name=mpls_te_next_fragment_id,json=mplsTeNextFragmentId,proto3" json:"mpls_te_next_fragment_id,omitempty"`
	// If true, fragment has space for next link
	SpaciousFragment bool `protobuf:"varint,58,opt,name=spacious_fragment,json=spaciousFragment,proto3" json:"spacious_fragment,omitempty"`
	// MPLS TE fragments in the area
	MplsTeFragment []*OspfShMplsFragment `protobuf:"bytes,59,rep,name=mpls_te_fragment,json=mplsTeFragment,proto3" json:"mpls_te_fragment,omitempty"`
}

func (x *OspfShMpls) Reset() {
	*x = OspfShMpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMpls) ProtoMessage() {}

func (x *OspfShMpls) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMpls.ProtoReflect.Descriptor instead.
func (*OspfShMpls) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{1}
}

func (x *OspfShMpls) GetMplsTeRouterId() string {
	if x != nil {
		return x.MplsTeRouterId
	}
	return ""
}

func (x *OspfShMpls) GetMplsTeEnabled() bool {
	if x != nil {
		return x.MplsTeEnabled
	}
	return false
}

func (x *OspfShMpls) GetMplsTeInitialized() bool {
	if x != nil {
		return x.MplsTeInitialized
	}
	return false
}

func (x *OspfShMpls) GetMplsTeAreaId() string {
	if x != nil {
		return x.MplsTeAreaId
	}
	return ""
}

func (x *OspfShMpls) GetMplsTeAreaInstance() uint32 {
	if x != nil {
		return x.MplsTeAreaInstance
	}
	return 0
}

func (x *OspfShMpls) GetMplsTeRouterAddress() string {
	if x != nil {
		return x.MplsTeRouterAddress
	}
	return ""
}

func (x *OspfShMpls) GetMplsTeLinks() []*OspfShMplsLink {
	if x != nil {
		return x.MplsTeLinks
	}
	return nil
}

func (x *OspfShMpls) GetMplsTeNextFragmentId() uint32 {
	if x != nil {
		return x.MplsTeNextFragmentId
	}
	return 0
}

func (x *OspfShMpls) GetSpaciousFragment() bool {
	if x != nil {
		return x.SpaciousFragment
	}
	return false
}

func (x *OspfShMpls) GetMplsTeFragment() []*OspfShMplsFragment {
	if x != nil {
		return x.MplsTeFragment
	}
	return nil
}

// Link switching capability
type OspfShMplsIxcdCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link Switching Capability
	LinkSwitchingCapability uint32 `protobuf:"varint,1,opt,name=link_switching_capability,json=linkSwitchingCapability,proto3" json:"link_switching_capability,omitempty"`
	// Link Encoding
	LinkEncoding uint32 `protobuf:"varint,2,opt,name=link_encoding,json=linkEncoding,proto3" json:"link_encoding,omitempty"`
	// Maximum LSP bandwidth for each priority (bytes/s)
	MaximumLspBwPerPriority []uint64 `protobuf:"varint,3,rep,packed,name=maximum_lsp_bw_per_priority,json=maximumLspBwPerPriority,proto3" json:"maximum_lsp_bw_per_priority,omitempty"`
	// Minimum LSP bandwidth (bytes/s)
	MinimumLspBw uint64 `protobuf:"varint,4,opt,name=minimum_lsp_bw,json=minimumLspBw,proto3" json:"minimum_lsp_bw,omitempty"`
	// Link MTU size (bytes)
	LinkMtu uint32 `protobuf:"varint,5,opt,name=link_mtu,json=linkMtu,proto3" json:"link_mtu,omitempty"`
}

func (x *OspfShMplsIxcdCap) Reset() {
	*x = OspfShMplsIxcdCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMplsIxcdCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMplsIxcdCap) ProtoMessage() {}

func (x *OspfShMplsIxcdCap) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMplsIxcdCap.ProtoReflect.Descriptor instead.
func (*OspfShMplsIxcdCap) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{2}
}

func (x *OspfShMplsIxcdCap) GetLinkSwitchingCapability() uint32 {
	if x != nil {
		return x.LinkSwitchingCapability
	}
	return 0
}

func (x *OspfShMplsIxcdCap) GetLinkEncoding() uint32 {
	if x != nil {
		return x.LinkEncoding
	}
	return 0
}

func (x *OspfShMplsIxcdCap) GetMaximumLspBwPerPriority() []uint64 {
	if x != nil {
		return x.MaximumLspBwPerPriority
	}
	return nil
}

func (x *OspfShMplsIxcdCap) GetMinimumLspBw() uint64 {
	if x != nil {
		return x.MinimumLspBw
	}
	return 0
}

func (x *OspfShMplsIxcdCap) GetLinkMtu() uint32 {
	if x != nil {
		return x.LinkMtu
	}
	return 0
}

// Link protocol and priority capability
type OspfShMplsLinkProtoprio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link protocol capability
	LinkProtocolCapability uint32 `protobuf:"varint,1,opt,name=link_protocol_capability,json=linkProtocolCapability,proto3" json:"link_protocol_capability,omitempty"`
	// Link protocol priority
	LinkProtocolPriority uint32 `protobuf:"varint,2,opt,name=link_protocol_priority,json=linkProtocolPriority,proto3" json:"link_protocol_priority,omitempty"`
}

func (x *OspfShMplsLinkProtoprio) Reset() {
	*x = OspfShMplsLinkProtoprio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMplsLinkProtoprio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMplsLinkProtoprio) ProtoMessage() {}

func (x *OspfShMplsLinkProtoprio) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMplsLinkProtoprio.ProtoReflect.Descriptor instead.
func (*OspfShMplsLinkProtoprio) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{3}
}

func (x *OspfShMplsLinkProtoprio) GetLinkProtocolCapability() uint32 {
	if x != nil {
		return x.LinkProtocolCapability
	}
	return 0
}

func (x *OspfShMplsLinkProtoprio) GetLinkProtocolPriority() uint32 {
	if x != nil {
		return x.LinkProtocolPriority
	}
	return 0
}

// Available bandwidth for each priority level
type OspfShMplsBw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unreserved bandwidth for each priority (bytes/s)
	BwPerPriority []uint64 `protobuf:"varint,1,rep,packed,name=bw_per_priority,json=bwPerPriority,proto3" json:"bw_per_priority,omitempty"`
}

func (x *OspfShMplsBw) Reset() {
	*x = OspfShMplsBw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMplsBw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMplsBw) ProtoMessage() {}

func (x *OspfShMplsBw) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMplsBw.ProtoReflect.Descriptor instead.
func (*OspfShMplsBw) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{4}
}

func (x *OspfShMplsBw) GetBwPerPriority() []uint64 {
	if x != nil {
		return x.BwPerPriority
	}
	return nil
}

// EXTENDED administrative group TLVs
type OspfShMplsEag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the extended admin group
	ExtendedAdminSize uint32 `protobuf:"varint,1,opt,name=extended_admin_size,json=extendedAdminSize,proto3" json:"extended_admin_size,omitempty"`
	// Value of Extended Admin Group
	ExtAdminData []uint32 `protobuf:"varint,2,rep,packed,name=ext_admin_data,json=extAdminData,proto3" json:"ext_admin_data,omitempty"`
}

func (x *OspfShMplsEag) Reset() {
	*x = OspfShMplsEag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMplsEag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMplsEag) ProtoMessage() {}

func (x *OspfShMplsEag) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMplsEag.ProtoReflect.Descriptor instead.
func (*OspfShMplsEag) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{5}
}

func (x *OspfShMplsEag) GetExtendedAdminSize() uint32 {
	if x != nil {
		return x.ExtendedAdminSize
	}
	return 0
}

func (x *OspfShMplsEag) GetExtAdminData() []uint32 {
	if x != nil {
		return x.ExtAdminData
	}
	return nil
}

// MPLS TE Link Optional TLV BC Data
type MplsTelOptBcVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allocation Model ID
	ModelId uint32 `protobuf:"varint,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Value of BC TLV
	MplsteLinkBcBandwidth []uint64 `protobuf:"varint,2,rep,packed,name=mplste_link_bc_bandwidth,json=mplsteLinkBcBandwidth,proto3" json:"mplste_link_bc_bandwidth,omitempty"`
	// Number of BC TLVs
	NumBCs uint32 `protobuf:"varint,3,opt,name=num_b_cs,json=numBCs,proto3" json:"num_b_cs,omitempty"`
}

func (x *MplsTelOptBcVal) Reset() {
	*x = MplsTelOptBcVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsTelOptBcVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsTelOptBcVal) ProtoMessage() {}

func (x *MplsTelOptBcVal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsTelOptBcVal.ProtoReflect.Descriptor instead.
func (*MplsTelOptBcVal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{6}
}

func (x *MplsTelOptBcVal) GetModelId() uint32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *MplsTelOptBcVal) GetMplsteLinkBcBandwidth() []uint64 {
	if x != nil {
		return x.MplsteLinkBcBandwidth
	}
	return nil
}

func (x *MplsTelOptBcVal) GetNumBCs() uint32 {
	if x != nil {
		return x.NumBCs
	}
	return 0
}

// MPLS TE Link Optional TLV SRLG Data
type MplsTelOptSrlgVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Length of SRLG TLV
	SrlgLen uint32 `protobuf:"varint,1,opt,name=srlg_len,json=srlgLen,proto3" json:"srlg_len,omitempty"`
	// Number of SRLG TLVs
	NumSrlGs uint32 `protobuf:"varint,2,opt,name=num_srl_gs,json=numSrlGs,proto3" json:"num_srl_gs,omitempty"`
	// Value of SRLG TLV
	MplsteLinkSrlgData []uint32 `protobuf:"varint,3,rep,packed,name=mplste_link_srlg_data,json=mplsteLinkSrlgData,proto3" json:"mplste_link_srlg_data,omitempty"`
}

func (x *MplsTelOptSrlgVal) Reset() {
	*x = MplsTelOptSrlgVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsTelOptSrlgVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsTelOptSrlgVal) ProtoMessage() {}

func (x *MplsTelOptSrlgVal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsTelOptSrlgVal.ProtoReflect.Descriptor instead.
func (*MplsTelOptSrlgVal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{7}
}

func (x *MplsTelOptSrlgVal) GetSrlgLen() uint32 {
	if x != nil {
		return x.SrlgLen
	}
	return 0
}

func (x *MplsTelOptSrlgVal) GetNumSrlGs() uint32 {
	if x != nil {
		return x.NumSrlGs
	}
	return 0
}

func (x *MplsTelOptSrlgVal) GetMplsteLinkSrlgData() []uint32 {
	if x != nil {
		return x.MplsteLinkSrlgData
	}
	return nil
}

// Common values in both Fixed and Flex Sub TLV
type BwSubTlvValueCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal Type
	SignalType uint32 `protobuf:"varint,1,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
	// Number of stages
	NumStages uint32 `protobuf:"varint,2,opt,name=num_stages,json=numStages,proto3" json:"num_stages,omitempty"`
	// T Bit
	TBit uint32 `protobuf:"varint,3,opt,name=t_bit,json=tBit,proto3" json:"t_bit,omitempty"`
	// S Bit
	SBit uint32 `protobuf:"varint,4,opt,name=s_bit,json=sBit,proto3" json:"s_bit,omitempty"`
	// TSG
	Tsg uint32 `protobuf:"varint,5,opt,name=tsg,proto3" json:"tsg,omitempty"`
	// Res
	Res uint32 `protobuf:"varint,6,opt,name=res,proto3" json:"res,omitempty"`
	// Priority 0
	PriorityBit0 uint32 `protobuf:"varint,7,opt,name=priority_bit0,json=priorityBit0,proto3" json:"priority_bit0,omitempty"`
	// Priority 1
	PriorityBit1 uint32 `protobuf:"varint,8,opt,name=priority_bit1,json=priorityBit1,proto3" json:"priority_bit1,omitempty"`
	// Priority 2
	PriorityBit2 uint32 `protobuf:"varint,9,opt,name=priority_bit2,json=priorityBit2,proto3" json:"priority_bit2,omitempty"`
	// Priority 3
	PriorityBit3 uint32 `protobuf:"varint,10,opt,name=priority_bit3,json=priorityBit3,proto3" json:"priority_bit3,omitempty"`
	// Priority 4
	PriorityBit4 uint32 `protobuf:"varint,11,opt,name=priority_bit4,json=priorityBit4,proto3" json:"priority_bit4,omitempty"`
	// Priority 5
	PriorityBit5 uint32 `protobuf:"varint,12,opt,name=priority_bit5,json=priorityBit5,proto3" json:"priority_bit5,omitempty"`
	// Priority 6
	PriorityBit6 uint32 `protobuf:"varint,13,opt,name=priority_bit6,json=priorityBit6,proto3" json:"priority_bit6,omitempty"`
	// Priority 7
	PriorityBit7 uint32 `protobuf:"varint,14,opt,name=priority_bit7,json=priorityBit7,proto3" json:"priority_bit7,omitempty"`
	// Array of Stages
	Stage []byte `protobuf:"bytes,15,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (x *BwSubTlvValueCommon) Reset() {
	*x = BwSubTlvValueCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwSubTlvValueCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwSubTlvValueCommon) ProtoMessage() {}

func (x *BwSubTlvValueCommon) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwSubTlvValueCommon.ProtoReflect.Descriptor instead.
func (*BwSubTlvValueCommon) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{8}
}

func (x *BwSubTlvValueCommon) GetSignalType() uint32 {
	if x != nil {
		return x.SignalType
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetNumStages() uint32 {
	if x != nil {
		return x.NumStages
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetTBit() uint32 {
	if x != nil {
		return x.TBit
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetSBit() uint32 {
	if x != nil {
		return x.SBit
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetTsg() uint32 {
	if x != nil {
		return x.Tsg
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetRes() uint32 {
	if x != nil {
		return x.Res
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit0() uint32 {
	if x != nil {
		return x.PriorityBit0
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit1() uint32 {
	if x != nil {
		return x.PriorityBit1
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit2() uint32 {
	if x != nil {
		return x.PriorityBit2
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit3() uint32 {
	if x != nil {
		return x.PriorityBit3
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit4() uint32 {
	if x != nil {
		return x.PriorityBit4
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit5() uint32 {
	if x != nil {
		return x.PriorityBit5
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit6() uint32 {
	if x != nil {
		return x.PriorityBit6
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetPriorityBit7() uint32 {
	if x != nil {
		return x.PriorityBit7
	}
	return 0
}

func (x *BwSubTlvValueCommon) GetStage() []byte {
	if x != nil {
		return x.Stage
	}
	return nil
}

// Value of Fixed Sub TLV
type BwFixedSubtlvValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of Fixed Sub TLV
	FixedSubTlvValue *BwSubTlvValueCommon `protobuf:"bytes,1,opt,name=fixed_sub_tlv_value,json=fixedSubTlvValue,proto3" json:"fixed_sub_tlv_value,omitempty"`
	// Array of Unres Oduj Prio
	UnresOdujPrio []uint32 `protobuf:"varint,2,rep,packed,name=unres_oduj_prio,json=unresOdujPrio,proto3" json:"unres_oduj_prio,omitempty"`
}

func (x *BwFixedSubtlvValue) Reset() {
	*x = BwFixedSubtlvValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwFixedSubtlvValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwFixedSubtlvValue) ProtoMessage() {}

func (x *BwFixedSubtlvValue) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwFixedSubtlvValue.ProtoReflect.Descriptor instead.
func (*BwFixedSubtlvValue) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{9}
}

func (x *BwFixedSubtlvValue) GetFixedSubTlvValue() *BwSubTlvValueCommon {
	if x != nil {
		return x.FixedSubTlvValue
	}
	return nil
}

func (x *BwFixedSubtlvValue) GetUnresOdujPrio() []uint32 {
	if x != nil {
		return x.UnresOdujPrio
	}
	return nil
}

// Value of Flex Sub TLV
type BwFlexSubtlvValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flex Sub TLV Value
	FlexSubTlvValueCommon *BwSubTlvValueCommon `protobuf:"bytes,1,opt,name=flex_sub_tlv_value_common,json=flexSubTlvValueCommon,proto3" json:"flex_sub_tlv_value_common,omitempty"`
	// Array of Unres LSP BW
	UnresLspbw []uint64 `protobuf:"varint,2,rep,packed,name=unres_lspbw,json=unresLspbw,proto3" json:"unres_lspbw,omitempty"`
	// Max LSP BW Array
	MaxLspbw []uint64 `protobuf:"varint,3,rep,packed,name=max_lspbw,json=maxLspbw,proto3" json:"max_lspbw,omitempty"`
}

func (x *BwFlexSubtlvValue) Reset() {
	*x = BwFlexSubtlvValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BwFlexSubtlvValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BwFlexSubtlvValue) ProtoMessage() {}

func (x *BwFlexSubtlvValue) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BwFlexSubtlvValue.ProtoReflect.Descriptor instead.
func (*BwFlexSubtlvValue) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{10}
}

func (x *BwFlexSubtlvValue) GetFlexSubTlvValueCommon() *BwSubTlvValueCommon {
	if x != nil {
		return x.FlexSubTlvValueCommon
	}
	return nil
}

func (x *BwFlexSubtlvValue) GetUnresLspbw() []uint64 {
	if x != nil {
		return x.UnresLspbw
	}
	return nil
}

func (x *BwFlexSubtlvValue) GetMaxLspbw() []uint64 {
	if x != nil {
		return x.MaxLspbw
	}
	return nil
}

// Sub Tlv values for IXCD Bandwidth
type IxcdBwSubTlvValueUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IxcdbwSubTlvType uint32 `protobuf:"varint,1,opt,name=ixcdbw_sub_tlv_type,json=ixcdbwSubTlvType,proto3" json:"ixcdbw_sub_tlv_type,omitempty"`
	// Value of Fixed Sub TLV
	FixedBwSubTlvValue *BwFixedSubtlvValue `protobuf:"bytes,2,opt,name=fixed_bw_sub_tlv_value,json=fixedBwSubTlvValue,proto3" json:"fixed_bw_sub_tlv_value,omitempty"`
	// Value of Flex Sub TLV
	FlexBwSubTlvValue *BwFlexSubtlvValue `protobuf:"bytes,3,opt,name=flex_bw_sub_tlv_value,json=flexBwSubTlvValue,proto3" json:"flex_bw_sub_tlv_value,omitempty"`
}

func (x *IxcdBwSubTlvValueUnion) Reset() {
	*x = IxcdBwSubTlvValueUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IxcdBwSubTlvValueUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IxcdBwSubTlvValueUnion) ProtoMessage() {}

func (x *IxcdBwSubTlvValueUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IxcdBwSubTlvValueUnion.ProtoReflect.Descriptor instead.
func (*IxcdBwSubTlvValueUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{11}
}

func (x *IxcdBwSubTlvValueUnion) GetIxcdbwSubTlvType() uint32 {
	if x != nil {
		return x.IxcdbwSubTlvType
	}
	return 0
}

func (x *IxcdBwSubTlvValueUnion) GetFixedBwSubTlvValue() *BwFixedSubtlvValue {
	if x != nil {
		return x.FixedBwSubTlvValue
	}
	return nil
}

func (x *IxcdBwSubTlvValueUnion) GetFlexBwSubTlvValue() *BwFlexSubtlvValue {
	if x != nil {
		return x.FlexBwSubTlvValue
	}
	return nil
}

// IXCD BW sub tlv
type IxcdBwSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Sub TLV
	BwSubTlvType uint32 `protobuf:"varint,1,opt,name=bw_sub_tlv_type,json=bwSubTlvType,proto3" json:"bw_sub_tlv_type,omitempty"`
	// Length of BW Sub TLV
	BwSubTlvLength uint32 `protobuf:"varint,2,opt,name=bw_sub_tlv_length,json=bwSubTlvLength,proto3" json:"bw_sub_tlv_length,omitempty"`
	// Value of BW Sub TLV
	BwSubTlvValue *IxcdBwSubTlvValueUnion `protobuf:"bytes,3,opt,name=bw_sub_tlv_value,json=bwSubTlvValue,proto3" json:"bw_sub_tlv_value,omitempty"`
}

func (x *IxcdBwSubTlv) Reset() {
	*x = IxcdBwSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IxcdBwSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IxcdBwSubTlv) ProtoMessage() {}

func (x *IxcdBwSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IxcdBwSubTlv.ProtoReflect.Descriptor instead.
func (*IxcdBwSubTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{12}
}

func (x *IxcdBwSubTlv) GetBwSubTlvType() uint32 {
	if x != nil {
		return x.BwSubTlvType
	}
	return 0
}

func (x *IxcdBwSubTlv) GetBwSubTlvLength() uint32 {
	if x != nil {
		return x.BwSubTlvLength
	}
	return 0
}

func (x *IxcdBwSubTlv) GetBwSubTlvValue() *IxcdBwSubTlvValueUnion {
	if x != nil {
		return x.BwSubTlvValue
	}
	return nil
}

// IXCD LE PSC information
type IxcdLePscInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Min LSP bandwidth
	MinLspBandwidth uint64 `protobuf:"varint,1,opt,name=min_lsp_bandwidth,json=minLspBandwidth,proto3" json:"min_lsp_bandwidth,omitempty"`
	//  Interface MTU
	PscInterfaceMtu uint32 `protobuf:"varint,2,opt,name=psc_interface_mtu,json=pscInterfaceMtu,proto3" json:"psc_interface_mtu,omitempty"`
}

func (x *IxcdLePscInfo) Reset() {
	*x = IxcdLePscInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IxcdLePscInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IxcdLePscInfo) ProtoMessage() {}

func (x *IxcdLePscInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IxcdLePscInfo.ProtoReflect.Descriptor instead.
func (*IxcdLePscInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{13}
}

func (x *IxcdLePscInfo) GetMinLspBandwidth() uint64 {
	if x != nil {
		return x.MinLspBandwidth
	}
	return 0
}

func (x *IxcdLePscInfo) GetPscInterfaceMtu() uint32 {
	if x != nil {
		return x.PscInterfaceMtu
	}
	return 0
}

// Array of BW Sub TLVs
type IxcdBwSubTlvArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of sub tlvs
	ArrBwSubTlVs []*IxcdBwSubTlv `protobuf:"bytes,1,rep,name=arr_bw_sub_tl_vs,json=arrBwSubTlVs,proto3" json:"arr_bw_sub_tl_vs,omitempty"`
}

func (x *IxcdBwSubTlvArr) Reset() {
	*x = IxcdBwSubTlvArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IxcdBwSubTlvArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IxcdBwSubTlvArr) ProtoMessage() {}

func (x *IxcdBwSubTlvArr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IxcdBwSubTlvArr.ProtoReflect.Descriptor instead.
func (*IxcdBwSubTlvArr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{14}
}

func (x *IxcdBwSubTlvArr) GetArrBwSubTlVs() []*IxcdBwSubTlv {
	if x != nil {
		return x.ArrBwSubTlVs
	}
	return nil
}

// Switching Cap values
type IxcdTlvSwitchingcapValueUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchingCapType uint32 `protobuf:"varint,1,opt,name=switching_cap_type,json=switchingCapType,proto3" json:"switching_cap_type,omitempty"`
	// IXCD PSC information
	IxcdpscInfo *IxcdLePscInfo `protobuf:"bytes,2,opt,name=ixcdpsc_info,json=ixcdpscInfo,proto3" json:"ixcdpsc_info,omitempty"`
	// Sub-TLVs
	IxcdbwSubTlv *IxcdBwSubTlvArr `protobuf:"bytes,3,opt,name=ixcdbw_sub_tlv,json=ixcdbwSubTlv,proto3" json:"ixcdbw_sub_tlv,omitempty"`
}

func (x *IxcdTlvSwitchingcapValueUnion) Reset() {
	*x = IxcdTlvSwitchingcapValueUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IxcdTlvSwitchingcapValueUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IxcdTlvSwitchingcapValueUnion) ProtoMessage() {}

func (x *IxcdTlvSwitchingcapValueUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IxcdTlvSwitchingcapValueUnion.ProtoReflect.Descriptor instead.
func (*IxcdTlvSwitchingcapValueUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{15}
}

func (x *IxcdTlvSwitchingcapValueUnion) GetSwitchingCapType() uint32 {
	if x != nil {
		return x.SwitchingCapType
	}
	return 0
}

func (x *IxcdTlvSwitchingcapValueUnion) GetIxcdpscInfo() *IxcdLePscInfo {
	if x != nil {
		return x.IxcdpscInfo
	}
	return nil
}

func (x *IxcdTlvSwitchingcapValueUnion) GetIxcdbwSubTlv() *IxcdBwSubTlvArr {
	if x != nil {
		return x.IxcdbwSubTlv
	}
	return nil
}

// MPLS TE Link Optional TLV IXCD Data
type MplsTelOptIxcdVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SCap
	SwitchingCap uint32 `protobuf:"varint,1,opt,name=switching_cap,json=switchingCap,proto3" json:"switching_cap,omitempty"`
	// Rile LenCode
	RileLenCode uint32 `protobuf:"varint,2,opt,name=rile_len_code,json=rileLenCode,proto3" json:"rile_len_code,omitempty"`
	// Max LSP bandwidth array
	MaxLspbw []int64 `protobuf:"zigzag64,3,rep,packed,name=max_lspbw,json=maxLspbw,proto3" json:"max_lspbw,omitempty"`
	// Fixed SCSI count
	FixedScsiCount uint32 `protobuf:"varint,4,opt,name=fixed_scsi_count,json=fixedScsiCount,proto3" json:"fixed_scsi_count,omitempty"`
	// Flexible SCSI count
	FlexScsiCount uint32 `protobuf:"varint,5,opt,name=flex_scsi_count,json=flexScsiCount,proto3" json:"flex_scsi_count,omitempty"`
	// Switching Cap type
	IxcdSwitchingCapType *IxcdTlvSwitchingcapValueUnion `protobuf:"bytes,6,opt,name=ixcd_switching_cap_type,json=ixcdSwitchingCapType,proto3" json:"ixcd_switching_cap_type,omitempty"`
}

func (x *MplsTelOptIxcdVal) Reset() {
	*x = MplsTelOptIxcdVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsTelOptIxcdVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsTelOptIxcdVal) ProtoMessage() {}

func (x *MplsTelOptIxcdVal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsTelOptIxcdVal.ProtoReflect.Descriptor instead.
func (*MplsTelOptIxcdVal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{16}
}

func (x *MplsTelOptIxcdVal) GetSwitchingCap() uint32 {
	if x != nil {
		return x.SwitchingCap
	}
	return 0
}

func (x *MplsTelOptIxcdVal) GetRileLenCode() uint32 {
	if x != nil {
		return x.RileLenCode
	}
	return 0
}

func (x *MplsTelOptIxcdVal) GetMaxLspbw() []int64 {
	if x != nil {
		return x.MaxLspbw
	}
	return nil
}

func (x *MplsTelOptIxcdVal) GetFixedScsiCount() uint32 {
	if x != nil {
		return x.FixedScsiCount
	}
	return 0
}

func (x *MplsTelOptIxcdVal) GetFlexScsiCount() uint32 {
	if x != nil {
		return x.FlexScsiCount
	}
	return 0
}

func (x *MplsTelOptIxcdVal) GetIxcdSwitchingCapType() *IxcdTlvSwitchingcapValueUnion {
	if x != nil {
		return x.IxcdSwitchingCapType
	}
	return nil
}

// MPLS TE Link Optional TLV IXCD Data
type MplsTelOptUnidVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uni Dir Delay
	UniDirDelay uint32 `protobuf:"varint,1,opt,name=uni_dir_delay,json=uniDirDelay,proto3" json:"uni_dir_delay,omitempty"`
}

func (x *MplsTelOptUnidVal) Reset() {
	*x = MplsTelOptUnidVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsTelOptUnidVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsTelOptUnidVal) ProtoMessage() {}

func (x *MplsTelOptUnidVal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsTelOptUnidVal.ProtoReflect.Descriptor instead.
func (*MplsTelOptUnidVal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{17}
}

func (x *MplsTelOptUnidVal) GetUniDirDelay() uint32 {
	if x != nil {
		return x.UniDirDelay
	}
	return 0
}

// Value of TLVs
type MplstelTlvValueUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpaqueTlvType string `protobuf:"bytes,1,opt,name=opaque_tlv_type,json=opaqueTlvType,proto3" json:"opaque_tlv_type,omitempty"`
	// Value of Bandwidth Constraints TLV
	BctlvValue *MplsTelOptBcVal `protobuf:"bytes,2,opt,name=bctlv_value,json=bctlvValue,proto3" json:"bctlv_value,omitempty"`
	// Value of SRLG TLV
	SrlgtlvValue *MplsTelOptSrlgVal `protobuf:"bytes,3,opt,name=srlgtlv_value,json=srlgtlvValue,proto3" json:"srlgtlv_value,omitempty"`
	// Value of IXCD TLV
	IxcdtlvValue *MplsTelOptIxcdVal `protobuf:"bytes,4,opt,name=ixcdtlv_value,json=ixcdtlvValue,proto3" json:"ixcdtlv_value,omitempty"`
	// Value of Uni Delay TLV
	UnidtlvValue *MplsTelOptUnidVal `protobuf:"bytes,5,opt,name=unidtlv_value,json=unidtlvValue,proto3" json:"unidtlv_value,omitempty"`
}

func (x *MplstelTlvValueUnion) Reset() {
	*x = MplstelTlvValueUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplstelTlvValueUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplstelTlvValueUnion) ProtoMessage() {}

func (x *MplstelTlvValueUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplstelTlvValueUnion.ProtoReflect.Descriptor instead.
func (*MplstelTlvValueUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{18}
}

func (x *MplstelTlvValueUnion) GetOpaqueTlvType() string {
	if x != nil {
		return x.OpaqueTlvType
	}
	return ""
}

func (x *MplstelTlvValueUnion) GetBctlvValue() *MplsTelOptBcVal {
	if x != nil {
		return x.BctlvValue
	}
	return nil
}

func (x *MplstelTlvValueUnion) GetSrlgtlvValue() *MplsTelOptSrlgVal {
	if x != nil {
		return x.SrlgtlvValue
	}
	return nil
}

func (x *MplstelTlvValueUnion) GetIxcdtlvValue() *MplsTelOptIxcdVal {
	if x != nil {
		return x.IxcdtlvValue
	}
	return nil
}

func (x *MplstelTlvValueUnion) GetUnidtlvValue() *MplsTelOptUnidVal {
	if x != nil {
		return x.UnidtlvValue
	}
	return nil
}

// MPLS TE Link Optional TLVs
type OspfShMplsTelOptTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Opt TLV
	MplsteLinkOptTlvType string `protobuf:"bytes,1,opt,name=mplste_link_opt_tlv_type,json=mplsteLinkOptTlvType,proto3" json:"mplste_link_opt_tlv_type,omitempty"`
	// Length of Opt TLV
	MplsteLinkOptTlvLen uint32 `protobuf:"varint,2,opt,name=mplste_link_opt_tlv_len,json=mplsteLinkOptTlvLen,proto3" json:"mplste_link_opt_tlv_len,omitempty"`
	// Value of Opt TLV
	MplsteLinkOptTlvValue []*MplstelTlvValueUnion `protobuf:"bytes,3,rep,name=mplste_link_opt_tlv_value,json=mplsteLinkOptTlvValue,proto3" json:"mplste_link_opt_tlv_value,omitempty"`
}

func (x *OspfShMplsTelOptTlv) Reset() {
	*x = OspfShMplsTelOptTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMplsTelOptTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMplsTelOptTlv) ProtoMessage() {}

func (x *OspfShMplsTelOptTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMplsTelOptTlv.ProtoReflect.Descriptor instead.
func (*OspfShMplsTelOptTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{19}
}

func (x *OspfShMplsTelOptTlv) GetMplsteLinkOptTlvType() string {
	if x != nil {
		return x.MplsteLinkOptTlvType
	}
	return ""
}

func (x *OspfShMplsTelOptTlv) GetMplsteLinkOptTlvLen() uint32 {
	if x != nil {
		return x.MplsteLinkOptTlvLen
	}
	return 0
}

func (x *OspfShMplsTelOptTlv) GetMplsteLinkOptTlvValue() []*MplstelTlvValueUnion {
	if x != nil {
		return x.MplsteLinkOptTlvValue
	}
	return nil
}

// OSPF MPLS-TE link Information
type OspfShMplsLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, Link is new
	NewLink bool `protobuf:"varint,1,opt,name=new_link,json=newLink,proto3" json:"new_link,omitempty"`
	// Fragment ID for this link
	FragmentId uint32 `protobuf:"varint,2,opt,name=fragment_id,json=fragmentId,proto3" json:"fragment_id,omitempty"`
	// Link instance
	MplsLinkInstance uint32 `protobuf:"varint,3,opt,name=mpls_link_instance,json=mplsLinkInstance,proto3" json:"mpls_link_instance,omitempty"`
	// Type of link
	MplsLinkType string `protobuf:"bytes,4,opt,name=mpls_link_type,json=mplsLinkType,proto3" json:"mpls_link_type,omitempty"`
	// Neighbor system ID
	NeighborSystemId string `protobuf:"bytes,5,opt,name=neighbor_system_id,json=neighborSystemId,proto3" json:"neighbor_system_id,omitempty"`
	// The local interface address
	LinkAddress string `protobuf:"bytes,6,opt,name=link_address,json=linkAddress,proto3" json:"link_address,omitempty"`
	// Neighbor IP address.
	NeighborIpAddress string `protobuf:"bytes,7,opt,name=neighbor_ip_address,json=neighborIpAddress,proto3" json:"neighbor_ip_address,omitempty"`
	// Link IGP metric
	IgpMetric uint32 `protobuf:"varint,8,opt,name=igp_metric,json=igpMetric,proto3" json:"igp_metric,omitempty"`
	// Link TE metric
	TeMetric uint32 `protobuf:"varint,9,opt,name=te_metric,json=teMetric,proto3" json:"te_metric,omitempty"`
	// Maximum link bandwidth (bytes/s)
	MaximumLinkBw uint32 `protobuf:"varint,10,opt,name=maximum_link_bw,json=maximumLinkBw,proto3" json:"maximum_link_bw,omitempty"`
	// Maximum link global pool reservable bandwidth (bytes/s)
	MaximumLinkReservableBw uint32 `protobuf:"varint,11,opt,name=maximum_link_reservable_bw,json=maximumLinkReservableBw,proto3" json:"maximum_link_reservable_bw,omitempty"`
	// Maximum link subpool reservable bandwidth (bytes/s)
	MaximumLinkSubReservableBw uint32 `protobuf:"varint,12,opt,name=maximum_link_sub_reservable_bw,json=maximumLinkSubReservableBw,proto3" json:"maximum_link_sub_reservable_bw,omitempty"`
	// Number of priorities.
	PriorityCount int32 `protobuf:"zigzag32,13,opt,name=priority_count,json=priorityCount,proto3" json:"priority_count,omitempty"`
	// Global pool unreserved bandwidth for each priority (bytes/s)
	GlobalUnreserveBwPerPriority *OspfShMplsBw `protobuf:"bytes,14,opt,name=global_unreserve_bw_per_priority,json=globalUnreserveBwPerPriority,proto3" json:"global_unreserve_bw_per_priority,omitempty"`
	// Sub pool unreserved bandwidth for each priority (bytes/s)
	SubPoolUnreserveBwPerPriority *OspfShMplsBw `protobuf:"bytes,15,opt,name=sub_pool_unreserve_bw_per_priority,json=subPoolUnreserveBwPerPriority,proto3" json:"sub_pool_unreserve_bw_per_priority,omitempty"`
	// Affinity
	Affinity uint32 `protobuf:"varint,16,opt,name=affinity,proto3" json:"affinity,omitempty"`
	// Output interface ID
	OutputInterfaceId uint32 `protobuf:"varint,17,opt,name=output_interface_id,json=outputInterfaceId,proto3" json:"output_interface_id,omitempty"`
	// Input interface ID
	InputInterfaceId uint32 `protobuf:"varint,18,opt,name=input_interface_id,json=inputInterfaceId,proto3" json:"input_interface_id,omitempty"`
	// Link protocol and protocol priority capability
	LinkProtocolPriorityCapability *OspfShMplsLinkProtoprio `protobuf:"bytes,19,opt,name=link_protocol_priority_capability,json=linkProtocolPriorityCapability,proto3" json:"link_protocol_priority_capability,omitempty"`
	// Link switching capability
	LinkSwCapability *OspfShMplsIxcdCap `protobuf:"bytes,20,opt,name=link_sw_capability,json=linkSwCapability,proto3" json:"link_sw_capability,omitempty"`
	// A DS-TE Allocation Model in use
	DsteInUse bool `protobuf:"varint,21,opt,name=dste_in_use,json=dsteInUse,proto3" json:"dste_in_use,omitempty"`
	// DS-TE Allocation Model ID
	DsteAllocationModelId string `protobuf:"bytes,22,opt,name=dste_allocation_model_id,json=dsteAllocationModelId,proto3" json:"dste_allocation_model_id,omitempty"`
	// Number of Optional TLVs
	NumberOfOptionalTlVs uint32 `protobuf:"varint,23,opt,name=number_of_optional_tl_vs,json=numberOfOptionalTlVs,proto3" json:"number_of_optional_tl_vs,omitempty"`
	// List of Optional TLVs
	MplsteLinkOptTlv []*OspfShMplsTelOptTlv `protobuf:"bytes,24,rep,name=mplste_link_opt_tlv,json=mplsteLinkOptTlv,proto3" json:"mplste_link_opt_tlv,omitempty"`
	// Extended Admin Group
	ExtendedAdminGroupList *OspfShMplsEag `protobuf:"bytes,25,opt,name=extended_admin_group_list,json=extendedAdminGroupList,proto3" json:"extended_admin_group_list,omitempty"`
}

func (x *OspfShMplsLink) Reset() {
	*x = OspfShMplsLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMplsLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMplsLink) ProtoMessage() {}

func (x *OspfShMplsLink) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMplsLink.ProtoReflect.Descriptor instead.
func (*OspfShMplsLink) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{20}
}

func (x *OspfShMplsLink) GetNewLink() bool {
	if x != nil {
		return x.NewLink
	}
	return false
}

func (x *OspfShMplsLink) GetFragmentId() uint32 {
	if x != nil {
		return x.FragmentId
	}
	return 0
}

func (x *OspfShMplsLink) GetMplsLinkInstance() uint32 {
	if x != nil {
		return x.MplsLinkInstance
	}
	return 0
}

func (x *OspfShMplsLink) GetMplsLinkType() string {
	if x != nil {
		return x.MplsLinkType
	}
	return ""
}

func (x *OspfShMplsLink) GetNeighborSystemId() string {
	if x != nil {
		return x.NeighborSystemId
	}
	return ""
}

func (x *OspfShMplsLink) GetLinkAddress() string {
	if x != nil {
		return x.LinkAddress
	}
	return ""
}

func (x *OspfShMplsLink) GetNeighborIpAddress() string {
	if x != nil {
		return x.NeighborIpAddress
	}
	return ""
}

func (x *OspfShMplsLink) GetIgpMetric() uint32 {
	if x != nil {
		return x.IgpMetric
	}
	return 0
}

func (x *OspfShMplsLink) GetTeMetric() uint32 {
	if x != nil {
		return x.TeMetric
	}
	return 0
}

func (x *OspfShMplsLink) GetMaximumLinkBw() uint32 {
	if x != nil {
		return x.MaximumLinkBw
	}
	return 0
}

func (x *OspfShMplsLink) GetMaximumLinkReservableBw() uint32 {
	if x != nil {
		return x.MaximumLinkReservableBw
	}
	return 0
}

func (x *OspfShMplsLink) GetMaximumLinkSubReservableBw() uint32 {
	if x != nil {
		return x.MaximumLinkSubReservableBw
	}
	return 0
}

func (x *OspfShMplsLink) GetPriorityCount() int32 {
	if x != nil {
		return x.PriorityCount
	}
	return 0
}

func (x *OspfShMplsLink) GetGlobalUnreserveBwPerPriority() *OspfShMplsBw {
	if x != nil {
		return x.GlobalUnreserveBwPerPriority
	}
	return nil
}

func (x *OspfShMplsLink) GetSubPoolUnreserveBwPerPriority() *OspfShMplsBw {
	if x != nil {
		return x.SubPoolUnreserveBwPerPriority
	}
	return nil
}

func (x *OspfShMplsLink) GetAffinity() uint32 {
	if x != nil {
		return x.Affinity
	}
	return 0
}

func (x *OspfShMplsLink) GetOutputInterfaceId() uint32 {
	if x != nil {
		return x.OutputInterfaceId
	}
	return 0
}

func (x *OspfShMplsLink) GetInputInterfaceId() uint32 {
	if x != nil {
		return x.InputInterfaceId
	}
	return 0
}

func (x *OspfShMplsLink) GetLinkProtocolPriorityCapability() *OspfShMplsLinkProtoprio {
	if x != nil {
		return x.LinkProtocolPriorityCapability
	}
	return nil
}

func (x *OspfShMplsLink) GetLinkSwCapability() *OspfShMplsIxcdCap {
	if x != nil {
		return x.LinkSwCapability
	}
	return nil
}

func (x *OspfShMplsLink) GetDsteInUse() bool {
	if x != nil {
		return x.DsteInUse
	}
	return false
}

func (x *OspfShMplsLink) GetDsteAllocationModelId() string {
	if x != nil {
		return x.DsteAllocationModelId
	}
	return ""
}

func (x *OspfShMplsLink) GetNumberOfOptionalTlVs() uint32 {
	if x != nil {
		return x.NumberOfOptionalTlVs
	}
	return 0
}

func (x *OspfShMplsLink) GetMplsteLinkOptTlv() []*OspfShMplsTelOptTlv {
	if x != nil {
		return x.MplsteLinkOptTlv
	}
	return nil
}

func (x *OspfShMplsLink) GetExtendedAdminGroupList() *OspfShMplsEag {
	if x != nil {
		return x.ExtendedAdminGroupList
	}
	return nil
}

// OSPF MPLS-TE Fragment Information
type OspfShMplsFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fragment instance
	FragmentInstance uint32 `protobuf:"varint,1,opt,name=fragment_instance,json=fragmentInstance,proto3" json:"fragment_instance,omitempty"`
	// Fragment ID
	FragmentId uint32 `protobuf:"varint,2,opt,name=fragment_id,json=fragmentId,proto3" json:"fragment_id,omitempty"`
	// DS-TE Allocation Model ID
	DsteModelId uint32 `protobuf:"varint,3,opt,name=dste_model_id,json=dsteModelId,proto3" json:"dste_model_id,omitempty"`
	// Number of fragment links which haven't changed since the last update
	SameFragmentCount uint32 `protobuf:"varint,4,opt,name=same_fragment_count,json=sameFragmentCount,proto3" json:"same_fragment_count,omitempty"`
	// List of fragment links
	MplsTeLinks []*OspfShMplsLink `protobuf:"bytes,5,rep,name=mpls_te_links,json=mplsTeLinks,proto3" json:"mpls_te_links,omitempty"`
}

func (x *OspfShMplsFragment) Reset() {
	*x = OspfShMplsFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShMplsFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShMplsFragment) ProtoMessage() {}

func (x *OspfShMplsFragment) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShMplsFragment.ProtoReflect.Descriptor instead.
func (*OspfShMplsFragment) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP(), []int{21}
}

func (x *OspfShMplsFragment) GetFragmentInstance() uint32 {
	if x != nil {
		return x.FragmentInstance
	}
	return 0
}

func (x *OspfShMplsFragment) GetFragmentId() uint32 {
	if x != nil {
		return x.FragmentId
	}
	return 0
}

func (x *OspfShMplsFragment) GetDsteModelId() uint32 {
	if x != nil {
		return x.DsteModelId
	}
	return 0
}

func (x *OspfShMplsFragment) GetSameFragmentCount() uint32 {
	if x != nil {
		return x.SameFragmentCount
	}
	return 0
}

func (x *OspfShMplsFragment) GetMplsTeLinks() []*OspfShMplsLink {
	if x != nil {
		return x.MplsTeLinks
	}
	return nil
}

var File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDesc = []byte{
	0x0a, 0x79, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6f, 0x73,
	0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x11, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22,
	0xcf, 0x05, 0x0a, 0x0c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x12, 0x29, 0x0a, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x70, 0x6c,
	0x73, 0x54, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x70,
	0x61, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x19, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x1b,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x62, 0x77, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x73, 0x70, 0x42, 0x77, 0x50,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x62, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x73, 0x70, 0x42, 0x77,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x74, 0x75, 0x22, 0x8d, 0x01, 0x0a, 0x1b,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x72, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x18, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x39, 0x0a, 0x0f, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x62, 0x77, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x77, 0x50, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x68, 0x0a, 0x10, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78,
	0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x83, 0x01, 0x0a, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70,
	0x74, 0x5f, 0x62, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x62, 0x63, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x42, 0x63, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x08,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x5f, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x42, 0x43, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x6c, 0x67, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x5f, 0x73, 0x72, 0x6c, 0x5f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x75, 0x6d, 0x53, 0x72, 0x6c, 0x47, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x70, 0x6c,
	0x73, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x72, 0x6c, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x03, 0x0a,
	0x17, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x5f, 0x62, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x42, 0x69, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x42,
	0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x30, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x31, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x31,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x74,
	0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x42, 0x69, 0x74, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x69, 0x74, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x33, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x34, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x35,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x69, 0x74, 0x35, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x62, 0x69, 0x74, 0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x36, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x37, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x37, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x15, 0x62, 0x77, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xae,
	0x01, 0x0a, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x10, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x64, 0x75, 0x6a, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x4f,
	0x64, 0x75, 0x6a, 0x50, 0x72, 0x69, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x14, 0x62, 0x77, 0x5f, 0x66,
	0x6c, 0x65, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0xb9, 0x01, 0x0a, 0x19, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c,
	0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x77,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x15, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x75, 0x62, 0x54, 0x6c,
	0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x6e, 0x72, 0x65, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x62, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x4c, 0x73, 0x70, 0x62, 0x77, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x70, 0x62, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x73, 0x70, 0x62, 0x77, 0x22, 0xb1, 0x03, 0x0a, 0x1b, 0x69,
	0x78, 0x63, 0x64, 0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x78,
	0x63, 0x64, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x78, 0x63, 0x64, 0x62, 0x77, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x62, 0x77, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x42, 0x77, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xae, 0x01,
	0x0a, 0x15, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c,
	0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x77, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x6c, 0x65,
	0x78, 0x42, 0x77, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93,
	0x02, 0x0a, 0x0f, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x6c, 0x76, 0x12, 0x25, 0x0a, 0x0f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x77, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x77, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x77, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0xad, 0x01, 0x0a, 0x10, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x83, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x62,
	0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x77, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x10, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x6c, 0x65, 0x5f,
	0x70, 0x73, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x73, 0x70, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x4c, 0x73, 0x70, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x73, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x73, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x74, 0x75,
	0x22, 0xb7, 0x01, 0x0a, 0x13, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x61, 0x72, 0x72, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x61, 0x72, 0x72,
	0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x5f, 0x76, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x78, 0x63,
	0x64, 0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x0c, 0x61, 0x72,
	0x72, 0x42, 0x77, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x56, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x21, 0x69,
	0x78, 0x63, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x63, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9b,
	0x01, 0x0a, 0x0c, 0x69, 0x78, 0x63, 0x64, 0x70, 0x73, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69,
	0x78, 0x63, 0x64, 0x5f, 0x6c, 0x65, 0x5f, 0x70, 0x73, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x69, 0x78, 0x63, 0x64, 0x70, 0x73, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xa1, 0x01, 0x0a,
	0x0e, 0x69, 0x78, 0x63, 0x64, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69,
	0x78, 0x63, 0x64, 0x5f, 0x62, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x61,
	0x72, 0x72, 0x52, 0x0c, 0x69, 0x78, 0x63, 0x64, 0x62, 0x77, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76,
	0x22, 0x93, 0x03, 0x0a, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70,
	0x74, 0x5f, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x73, 0x70, 0x62, 0x77,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x12, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x73, 0x70, 0x62, 0x77,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c,
	0x65, 0x78, 0x5f, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x63, 0x73, 0x69, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x17, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69,
	0x78, 0x63, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x63, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x69, 0x78, 0x63, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x44, 0x69, 0x72, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x22, 0xcf, 0x05, 0x0a, 0x17, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x6c, 0x5f,
	0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0b, 0x62, 0x63, 0x74, 0x6c,
	0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x5f,
	0x6f, 0x70, 0x74, 0x5f, 0x62, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x52, 0x0a, 0x62, 0x63, 0x74, 0x6c,
	0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x73, 0x72, 0x6c, 0x67, 0x74,
	0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x6c,
	0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x73,
	0x72, 0x6c, 0x67, 0x74, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0d,
	0x69, 0x78, 0x63, 0x64, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x52, 0x0c, 0x69, 0x78, 0x63, 0x64, 0x74, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x64, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x64, 0x74, 0x6c, 0x76,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x74,
	0x6c, 0x76, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x4f, 0x70, 0x74, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x70,
	0x6c, 0x73, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x74, 0x6c,
	0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x70, 0x6c,
	0x73, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x54, 0x6c, 0x76, 0x4c, 0x65, 0x6e,
	0x12, 0xb9, 0x01, 0x0a, 0x19, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x74, 0x65, 0x6c, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x4f, 0x70, 0x74, 0x54, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x0f, 0x0a,
	0x11, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x70, 0x6c, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x62, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x77, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x77, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x75, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0xbf, 0x01, 0x0a, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x62, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x62, 0x77, 0x52, 0x1c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x42, 0x77, 0x50, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0xc2, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x62, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x62, 0x77, 0x52, 0x1d, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x6f, 0x6c,
	0x55, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x77, 0x50, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0xcf, 0x01, 0x0a, 0x21, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x72,
	0x69, 0x6f, 0x52, 0x1e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x77, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x69, 0x78, 0x63, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x52, 0x10,
	0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x77, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x73, 0x74, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x64, 0x73, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x73, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x6c, 0x5f, 0x76, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x6c, 0x56,
	0x73, 0x12, 0xb0, 0x01, 0x0a, 0x13, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x80, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x74,
	0x6c, 0x76, 0x52, 0x10, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70,
	0x74, 0x54, 0x6c, 0x76, 0x12, 0xb3, 0x01, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65,
	0x61, 0x67, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x15, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x79,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x65, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescData = file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_goTypes = []interface{}{
	(*OspfShMpls_KEYS)(nil),               // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_KEYS
	(*OspfShMpls)(nil),                    // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls
	(*OspfShMplsIxcdCap)(nil),             // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_ixcd_cap
	(*OspfShMplsLinkProtoprio)(nil),       // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link_protoprio
	(*OspfShMplsBw)(nil),                  // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_bw
	(*OspfShMplsEag)(nil),                 // 5: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_eag
	(*MplsTelOptBcVal)(nil),               // 6: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_bc_val
	(*MplsTelOptSrlgVal)(nil),             // 7: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_srlg_val
	(*BwSubTlvValueCommon)(nil),           // 8: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_sub_tlv_value_common
	(*BwFixedSubtlvValue)(nil),            // 9: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_fixed_subtlv_value
	(*BwFlexSubtlvValue)(nil),             // 10: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_flex_subtlv_value
	(*IxcdBwSubTlvValueUnion)(nil),        // 11: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_value_union
	(*IxcdBwSubTlv)(nil),                  // 12: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv
	(*IxcdLePscInfo)(nil),                 // 13: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_le_psc_info
	(*IxcdBwSubTlvArr)(nil),               // 14: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_arr
	(*IxcdTlvSwitchingcapValueUnion)(nil), // 15: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_tlv_switchingcap_value_union
	(*MplsTelOptIxcdVal)(nil),             // 16: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_ixcd_val
	(*MplsTelOptUnidVal)(nil),             // 17: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_unid_val
	(*MplstelTlvValueUnion)(nil),          // 18: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mplstel_tlv_value_union
	(*OspfShMplsTelOptTlv)(nil),           // 19: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_tel_opt_tlv
	(*OspfShMplsLink)(nil),                // 20: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link
	(*OspfShMplsFragment)(nil),            // 21: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_fragment
}
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_depIdxs = []int32{
	20, // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls.mpls_te_links:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link
	21, // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls.mpls_te_fragment:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_fragment
	8,  // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_fixed_subtlv_value.fixed_sub_tlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_sub_tlv_value_common
	8,  // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_flex_subtlv_value.flex_sub_tlv_value_common:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_sub_tlv_value_common
	9,  // 4: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_value_union.fixed_bw_sub_tlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_fixed_subtlv_value
	10, // 5: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_value_union.flex_bw_sub_tlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.bw_flex_subtlv_value
	11, // 6: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv.bw_sub_tlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_value_union
	12, // 7: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_arr.arr_bw_sub_tl_vs:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv
	13, // 8: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_tlv_switchingcap_value_union.ixcdpsc_info:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_le_psc_info
	14, // 9: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_tlv_switchingcap_value_union.ixcdbw_sub_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_bw_sub_tlv_arr
	15, // 10: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_ixcd_val.ixcd_switching_cap_type:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ixcd_tlv_switchingcap_value_union
	6,  // 11: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mplstel_tlv_value_union.bctlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_bc_val
	7,  // 12: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mplstel_tlv_value_union.srlgtlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_srlg_val
	16, // 13: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mplstel_tlv_value_union.ixcdtlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_ixcd_val
	17, // 14: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mplstel_tlv_value_union.unidtlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mpls_tel_opt_unid_val
	18, // 15: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_tel_opt_tlv.mplste_link_opt_tlv_value:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.mplstel_tlv_value_union
	4,  // 16: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link.global_unreserve_bw_per_priority:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_bw
	4,  // 17: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link.sub_pool_unreserve_bw_per_priority:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_bw
	3,  // 18: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link.link_protocol_priority_capability:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link_protoprio
	2,  // 19: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link.link_sw_capability:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_ixcd_cap
	19, // 20: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link.mplste_link_opt_tlv:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_tel_opt_tlv
	5,  // 21: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link.extended_admin_group_list:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_eag
	20, // 22: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_fragment.mpls_te_links:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment.ospf_sh_mpls_link
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_init()
}
func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_init() {
	if File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMpls_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMplsIxcdCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMplsLinkProtoprio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMplsBw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMplsEag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsTelOptBcVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsTelOptSrlgVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwSubTlvValueCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwFixedSubtlvValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BwFlexSubtlvValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IxcdBwSubTlvValueUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IxcdBwSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IxcdLePscInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IxcdBwSubTlvArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IxcdTlvSwitchingcapValueUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsTelOptIxcdVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsTelOptUnidVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplstelTlvValueUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMplsTelOptTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMplsLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShMplsFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto = out.File
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_mpls_te_mpls_te_fragments_mpls_te_fragment_ospf_sh_mpls_proto_depIdxs = nil
}
