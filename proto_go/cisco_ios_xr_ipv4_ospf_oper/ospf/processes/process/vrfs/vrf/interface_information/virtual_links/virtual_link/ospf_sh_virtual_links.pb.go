// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_ospf_oper/ospf/processes/process/vrfs/vrf/interface_information/virtual_links/virtual_link/ospf_sh_virtual_links.proto

package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPF Virtual Link
type OspfShVirtualLinks_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName     string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	VrfName         string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	VirtualLinkName string `protobuf:"bytes,3,opt,name=virtual_link_name,json=virtualLinkName,proto3" json:"virtual_link_name,omitempty"`
}

func (x *OspfShVirtualLinks_KEYS) Reset() {
	*x = OspfShVirtualLinks_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShVirtualLinks_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShVirtualLinks_KEYS) ProtoMessage() {}

func (x *OspfShVirtualLinks_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShVirtualLinks_KEYS.ProtoReflect.Descriptor instead.
func (*OspfShVirtualLinks_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescGZIP(), []int{0}
}

func (x *OspfShVirtualLinks_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *OspfShVirtualLinks_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *OspfShVirtualLinks_KEYS) GetVirtualLinkName() string {
	if x != nil {
		return x.VirtualLinkName
	}
	return ""
}

type OspfShVirtualLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Virtual link name
	VirtualLinkName string `protobuf:"bytes,50,opt,name=virtual_link_name,json=virtualLinkName,proto3" json:"virtual_link_name,omitempty"`
	// Neighbor on other end of this virtual link
	VirtualLinkNeighborId string `protobuf:"bytes,51,opt,name=virtual_link_neighbor_id,json=virtualLinkNeighborId,proto3" json:"virtual_link_neighbor_id,omitempty"`
	// OSPF interface state for the virtual link
	VirtualLinkState string `protobuf:"bytes,52,opt,name=virtual_link_state,json=virtualLinkState,proto3" json:"virtual_link_state,omitempty"`
	// If true, the link runs as demand circuit
	VirtualLinkDemandCircuit bool `protobuf:"varint,53,opt,name=virtual_link_demand_circuit,json=virtualLinkDemandCircuit,proto3" json:"virtual_link_demand_circuit,omitempty"`
	// Number of LSA's with demand circuit bit not set
	VirtualLinkDcBitlessLsa uint32 `protobuf:"varint,54,opt,name=virtual_link_dc_bitless_lsa,json=virtualLinkDcBitlessLsa,proto3" json:"virtual_link_dc_bitless_lsa,omitempty"`
	// Transit area id
	TransitArea string `protobuf:"bytes,55,opt,name=transit_area,json=transitArea,proto3" json:"transit_area,omitempty"`
	// Interface on which this virtual link is formed
	VirtualLinkInterfaceName string `protobuf:"bytes,56,opt,name=virtual_link_interface_name,json=virtualLinkInterfaceName,proto3" json:"virtual_link_interface_name,omitempty"`
	// Cost of the virtual link
	VirtualLinkCost uint32 `protobuf:"varint,57,opt,name=virtual_link_cost,json=virtualLinkCost,proto3" json:"virtual_link_cost,omitempty"`
	// Transmission delay in seconds
	VirualLinkTransmissionDelay uint32 `protobuf:"varint,58,opt,name=virual_link_transmission_delay,json=virualLinkTransmissionDelay,proto3" json:"virual_link_transmission_delay,omitempty"`
	// Hello interval (s)
	VirtualLinkHelloInterval uint32 `protobuf:"varint,59,opt,name=virtual_link_hello_interval,json=virtualLinkHelloInterval,proto3" json:"virtual_link_hello_interval,omitempty"`
	// Hello interval (ms)
	VirtualLinkHelloIntervalMs uint32 `protobuf:"varint,60,opt,name=virtual_link_hello_interval_ms,json=virtualLinkHelloIntervalMs,proto3" json:"virtual_link_hello_interval_ms,omitempty"`
	// Dead interval (s)
	VirtualLinkDeadInterval uint32 `protobuf:"varint,61,opt,name=virtual_link_dead_interval,json=virtualLinkDeadInterval,proto3" json:"virtual_link_dead_interval,omitempty"`
	// Wait interval (s)
	VirtualLinkWaitInterval uint32 `protobuf:"varint,62,opt,name=virtual_link_wait_interval,json=virtualLinkWaitInterval,proto3" json:"virtual_link_wait_interval,omitempty"`
	// Retransmission interval (s)
	VirtaulLinkRetransmissionInterval uint32 `protobuf:"varint,63,opt,name=virtaul_link_retransmission_interval,json=virtaulLinkRetransmissionInterval,proto3" json:"virtaul_link_retransmission_interval,omitempty"`
	// Time until next hello (s)
	VirtualLinkNextHello uint32 `protobuf:"varint,64,opt,name=virtual_link_next_hello,json=virtualLinkNextHello,proto3" json:"virtual_link_next_hello,omitempty"`
	// Time until next hello (ms)
	VirtualLinkNextHelloMs uint32 `protobuf:"varint,65,opt,name=virtual_link_next_hello_ms,json=virtualLinkNextHelloMs,proto3" json:"virtual_link_next_hello_ms,omitempty"`
	// If true, interface is passive
	VirtualLinkPassive bool `protobuf:"varint,66,opt,name=virtual_link_passive,json=virtualLinkPassive,proto3" json:"virtual_link_passive,omitempty"`
	// Authentication type
	VirtualLinkAuthenticationType string `protobuf:"bytes,67,opt,name=virtual_link_authentication_type,json=virtualLinkAuthenticationType,proto3" json:"virtual_link_authentication_type,omitempty"`
	// If true, MD key configured
	VirtualLinkYoungestMdKey bool `protobuf:"varint,68,opt,name=virtual_link_youngest_md_key,json=virtualLinkYoungestMdKey,proto3" json:"virtual_link_youngest_md_key,omitempty"`
	// Youngest MD key ID
	VirtualLinkYoungestMdKeyId uint32 `protobuf:"varint,69,opt,name=virtual_link_youngest_md_key_id,json=virtualLinkYoungestMdKeyId,proto3" json:"virtual_link_youngest_md_key_id,omitempty"`
	// Number of neighbors still using the old key (rollover in progress)
	VirtualLinkOldMdKeyCount uint32 `protobuf:"varint,70,opt,name=virtual_link_old_md_key_count,json=virtualLinkOldMdKeyCount,proto3" json:"virtual_link_old_md_key_count,omitempty"`
	// List of old MD keys (if any)
	VirtualLinkMdKeyList []uint32 `protobuf:"varint,71,rep,packed,name=virtual_link_md_key_list,json=virtualLinkMdKeyList,proto3" json:"virtual_link_md_key_list,omitempty"`
	// Virtual Link Keychain ID
	VirtualLinkKeychainId uint64 `protobuf:"varint,72,opt,name=virtual_link_keychain_id,json=virtualLinkKeychainId,proto3" json:"virtual_link_keychain_id,omitempty"`
	// If true, NSF enabled
	VirtualLinkNsfEnabled bool `protobuf:"varint,73,opt,name=virtual_link_nsf_enabled,json=virtualLinkNsfEnabled,proto3" json:"virtual_link_nsf_enabled,omitempty"`
	// If true, NSF restart in progress on the virtual link
	VirtualLinkNsf bool `protobuf:"varint,74,opt,name=virtual_link_nsf,json=virtualLinkNsf,proto3" json:"virtual_link_nsf,omitempty"`
	// Time in seconds since last NSF
	VirtualLinkLastNsf uint32 `protobuf:"varint,75,opt,name=virtual_link_last_nsf,json=virtualLinkLastNsf,proto3" json:"virtual_link_last_nsf,omitempty"`
	// Neighbor information
	VirtualLinkNeighbor *OspfShVlinkNeighbor `protobuf:"bytes,76,opt,name=virtual_link_neighbor,json=virtualLinkNeighbor,proto3" json:"virtual_link_neighbor,omitempty"`
}

func (x *OspfShVirtualLinks) Reset() {
	*x = OspfShVirtualLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShVirtualLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShVirtualLinks) ProtoMessage() {}

func (x *OspfShVirtualLinks) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShVirtualLinks.ProtoReflect.Descriptor instead.
func (*OspfShVirtualLinks) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescGZIP(), []int{1}
}

func (x *OspfShVirtualLinks) GetVirtualLinkName() string {
	if x != nil {
		return x.VirtualLinkName
	}
	return ""
}

func (x *OspfShVirtualLinks) GetVirtualLinkNeighborId() string {
	if x != nil {
		return x.VirtualLinkNeighborId
	}
	return ""
}

func (x *OspfShVirtualLinks) GetVirtualLinkState() string {
	if x != nil {
		return x.VirtualLinkState
	}
	return ""
}

func (x *OspfShVirtualLinks) GetVirtualLinkDemandCircuit() bool {
	if x != nil {
		return x.VirtualLinkDemandCircuit
	}
	return false
}

func (x *OspfShVirtualLinks) GetVirtualLinkDcBitlessLsa() uint32 {
	if x != nil {
		return x.VirtualLinkDcBitlessLsa
	}
	return 0
}

func (x *OspfShVirtualLinks) GetTransitArea() string {
	if x != nil {
		return x.TransitArea
	}
	return ""
}

func (x *OspfShVirtualLinks) GetVirtualLinkInterfaceName() string {
	if x != nil {
		return x.VirtualLinkInterfaceName
	}
	return ""
}

func (x *OspfShVirtualLinks) GetVirtualLinkCost() uint32 {
	if x != nil {
		return x.VirtualLinkCost
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirualLinkTransmissionDelay() uint32 {
	if x != nil {
		return x.VirualLinkTransmissionDelay
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkHelloInterval() uint32 {
	if x != nil {
		return x.VirtualLinkHelloInterval
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkHelloIntervalMs() uint32 {
	if x != nil {
		return x.VirtualLinkHelloIntervalMs
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkDeadInterval() uint32 {
	if x != nil {
		return x.VirtualLinkDeadInterval
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkWaitInterval() uint32 {
	if x != nil {
		return x.VirtualLinkWaitInterval
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtaulLinkRetransmissionInterval() uint32 {
	if x != nil {
		return x.VirtaulLinkRetransmissionInterval
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkNextHello() uint32 {
	if x != nil {
		return x.VirtualLinkNextHello
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkNextHelloMs() uint32 {
	if x != nil {
		return x.VirtualLinkNextHelloMs
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkPassive() bool {
	if x != nil {
		return x.VirtualLinkPassive
	}
	return false
}

func (x *OspfShVirtualLinks) GetVirtualLinkAuthenticationType() string {
	if x != nil {
		return x.VirtualLinkAuthenticationType
	}
	return ""
}

func (x *OspfShVirtualLinks) GetVirtualLinkYoungestMdKey() bool {
	if x != nil {
		return x.VirtualLinkYoungestMdKey
	}
	return false
}

func (x *OspfShVirtualLinks) GetVirtualLinkYoungestMdKeyId() uint32 {
	if x != nil {
		return x.VirtualLinkYoungestMdKeyId
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkOldMdKeyCount() uint32 {
	if x != nil {
		return x.VirtualLinkOldMdKeyCount
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkMdKeyList() []uint32 {
	if x != nil {
		return x.VirtualLinkMdKeyList
	}
	return nil
}

func (x *OspfShVirtualLinks) GetVirtualLinkKeychainId() uint64 {
	if x != nil {
		return x.VirtualLinkKeychainId
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkNsfEnabled() bool {
	if x != nil {
		return x.VirtualLinkNsfEnabled
	}
	return false
}

func (x *OspfShVirtualLinks) GetVirtualLinkNsf() bool {
	if x != nil {
		return x.VirtualLinkNsf
	}
	return false
}

func (x *OspfShVirtualLinks) GetVirtualLinkLastNsf() uint32 {
	if x != nil {
		return x.VirtualLinkLastNsf
	}
	return 0
}

func (x *OspfShVirtualLinks) GetVirtualLinkNeighbor() *OspfShVlinkNeighbor {
	if x != nil {
		return x.VirtualLinkNeighbor
	}
	return nil
}

// OSPF Neighbor Retransmission Information
type OspfShNeighborRetrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of DBD retransmissions during last exchange
	DbdRetransmissionCount uint32 `protobuf:"varint,1,opt,name=dbd_retransmission_count,json=dbdRetransmissionCount,proto3" json:"dbd_retransmission_count,omitempty"`
	// Total number of DBD retransmissions for this neighbor
	DbdRetransmissionTotalCount uint32 `protobuf:"varint,2,opt,name=dbd_retransmission_total_count,json=dbdRetransmissionTotalCount,proto3" json:"dbd_retransmission_total_count,omitempty"`
	// Area scope LSA's flood index
	AreaFloodingIndex uint32 `protobuf:"varint,3,opt,name=area_flooding_index,json=areaFloodingIndex,proto3" json:"area_flooding_index,omitempty"`
	// AS scope LSA's flood index
	AsFloodIndex uint32 `protobuf:"varint,4,opt,name=as_flood_index,json=asFloodIndex,proto3" json:"as_flood_index,omitempty"`
	// Retransmission queue length
	NeighborRetransmissionCount uint32 `protobuf:"varint,5,opt,name=neighbor_retransmission_count,json=neighborRetransmissionCount,proto3" json:"neighbor_retransmission_count,omitempty"`
	// Number of retransmissions for this neighbor
	NumberOfRetransmissions uint32 `protobuf:"varint,6,opt,name=number_of_retransmissions,json=numberOfRetransmissions,proto3" json:"number_of_retransmissions,omitempty"`
	// First flood item for area scope LSAs
	AreaFirstFloodInformation uint32 `protobuf:"varint,7,opt,name=area_first_flood_information,json=areaFirstFloodInformation,proto3" json:"area_first_flood_information,omitempty"`
	// Index of the first flood item for area scope LSAs
	AreaFirstFloodInformationIndex uint32 `protobuf:"varint,8,opt,name=area_first_flood_information_index,json=areaFirstFloodInformationIndex,proto3" json:"area_first_flood_information_index,omitempty"`
	// First flood item for AS scope LSAs
	AsFirstFloodInformation uint32 `protobuf:"varint,9,opt,name=as_first_flood_information,json=asFirstFloodInformation,proto3" json:"as_first_flood_information,omitempty"`
	// Index for first flood item for AS scope LSAs
	AsFirstFloodInformationIndex uint32 `protobuf:"varint,10,opt,name=as_first_flood_information_index,json=asFirstFloodInformationIndex,proto3" json:"as_first_flood_information_index,omitempty"`
	// Next flood item for area scope LSAs
	AreaNextFloodInformation uint32 `protobuf:"varint,11,opt,name=area_next_flood_information,json=areaNextFloodInformation,proto3" json:"area_next_flood_information,omitempty"`
	// Index of next flood item for Area scope LSAs
	AreaNextFloodInformationIndex uint32 `protobuf:"varint,12,opt,name=area_next_flood_information_index,json=areaNextFloodInformationIndex,proto3" json:"area_next_flood_information_index,omitempty"`
	// Next flood item for AS scope LSAs
	AsNextFloodInformation uint32 `protobuf:"varint,13,opt,name=as_next_flood_information,json=asNextFloodInformation,proto3" json:"as_next_flood_information,omitempty"`
	// Index of next flood item for AS scope LSAs
	AsNextFloodInformationIndex uint32 `protobuf:"varint,14,opt,name=as_next_flood_information_index,json=asNextFloodInformationIndex,proto3" json:"as_next_flood_information_index,omitempty"`
	// Number of LSAs sent in last retransmission
	LastRetransmissionLength uint32 `protobuf:"varint,15,opt,name=last_retransmission_length,json=lastRetransmissionLength,proto3" json:"last_retransmission_length,omitempty"`
	// Maximum number of LSAs sent in a retransmission
	MaximumRetransmissionLength uint32 `protobuf:"varint,16,opt,name=maximum_retransmission_length,json=maximumRetransmissionLength,proto3" json:"maximum_retransmission_length,omitempty"`
	// Last retransmission scan time (ms)
	LastRetransmissionTime uint32 `protobuf:"varint,17,opt,name=last_retransmission_time,json=lastRetransmissionTime,proto3" json:"last_retransmission_time,omitempty"`
	// Maximum retransmission scan time (ms)
	MaximumRetransmissionTime uint32 `protobuf:"varint,18,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime,proto3" json:"maximum_retransmission_time,omitempty"`
	// Time until next LSA retransmission (ms)
	LsaRetransmissionTimer uint32 `protobuf:"varint,19,opt,name=lsa_retransmission_timer,json=lsaRetransmissionTimer,proto3" json:"lsa_retransmission_timer,omitempty"`
}

func (x *OspfShNeighborRetrans) Reset() {
	*x = OspfShNeighborRetrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShNeighborRetrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShNeighborRetrans) ProtoMessage() {}

func (x *OspfShNeighborRetrans) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShNeighborRetrans.ProtoReflect.Descriptor instead.
func (*OspfShNeighborRetrans) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescGZIP(), []int{2}
}

func (x *OspfShNeighborRetrans) GetDbdRetransmissionCount() uint32 {
	if x != nil {
		return x.DbdRetransmissionCount
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetDbdRetransmissionTotalCount() uint32 {
	if x != nil {
		return x.DbdRetransmissionTotalCount
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAreaFloodingIndex() uint32 {
	if x != nil {
		return x.AreaFloodingIndex
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAsFloodIndex() uint32 {
	if x != nil {
		return x.AsFloodIndex
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetNeighborRetransmissionCount() uint32 {
	if x != nil {
		return x.NeighborRetransmissionCount
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetNumberOfRetransmissions() uint32 {
	if x != nil {
		return x.NumberOfRetransmissions
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAreaFirstFloodInformation() uint32 {
	if x != nil {
		return x.AreaFirstFloodInformation
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAreaFirstFloodInformationIndex() uint32 {
	if x != nil {
		return x.AreaFirstFloodInformationIndex
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAsFirstFloodInformation() uint32 {
	if x != nil {
		return x.AsFirstFloodInformation
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAsFirstFloodInformationIndex() uint32 {
	if x != nil {
		return x.AsFirstFloodInformationIndex
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAreaNextFloodInformation() uint32 {
	if x != nil {
		return x.AreaNextFloodInformation
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAreaNextFloodInformationIndex() uint32 {
	if x != nil {
		return x.AreaNextFloodInformationIndex
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAsNextFloodInformation() uint32 {
	if x != nil {
		return x.AsNextFloodInformation
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetAsNextFloodInformationIndex() uint32 {
	if x != nil {
		return x.AsNextFloodInformationIndex
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetLastRetransmissionLength() uint32 {
	if x != nil {
		return x.LastRetransmissionLength
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetMaximumRetransmissionLength() uint32 {
	if x != nil {
		return x.MaximumRetransmissionLength
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetLastRetransmissionTime() uint32 {
	if x != nil {
		return x.LastRetransmissionTime
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetMaximumRetransmissionTime() uint32 {
	if x != nil {
		return x.MaximumRetransmissionTime
	}
	return 0
}

func (x *OspfShNeighborRetrans) GetLsaRetransmissionTimer() uint32 {
	if x != nil {
		return x.LsaRetransmissionTimer
	}
	return 0
}

// Virtual Link Neighbor Information
type OspfShVlinkNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true Hellos suppressed
	VirtualLinkSuppressHello bool `protobuf:"varint,1,opt,name=virtual_link_suppress_hello,json=virtualLinkSuppressHello,proto3" json:"virtual_link_suppress_hello,omitempty"`
	// Adjacency state
	VirtualLinkState string `protobuf:"bytes,2,opt,name=virtual_link_state,json=virtualLinkState,proto3" json:"virtual_link_state,omitempty"`
	// Neighbor retransmission info
	VirtualLinkRetransmissoin *OspfShNeighborRetrans `protobuf:"bytes,3,opt,name=virtual_link_retransmissoin,json=virtualLinkRetransmissoin,proto3" json:"virtual_link_retransmissoin,omitempty"`
}

func (x *OspfShVlinkNeighbor) Reset() {
	*x = OspfShVlinkNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShVlinkNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShVlinkNeighbor) ProtoMessage() {}

func (x *OspfShVlinkNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShVlinkNeighbor.ProtoReflect.Descriptor instead.
func (*OspfShVlinkNeighbor) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescGZIP(), []int{3}
}

func (x *OspfShVlinkNeighbor) GetVirtualLinkSuppressHello() bool {
	if x != nil {
		return x.VirtualLinkSuppressHello
	}
	return false
}

func (x *OspfShVlinkNeighbor) GetVirtualLinkState() string {
	if x != nil {
		return x.VirtualLinkState
	}
	return ""
}

func (x *OspfShVlinkNeighbor) GetVirtualLinkRetransmissoin() *OspfShNeighborRetrans {
	if x != nil {
		return x.VirtualLinkRetransmissoin
	}
	return nil
}

var File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDesc = []byte{
	0x0a, 0x88, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x6f,
	0x73, 0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xbf, 0x0d, 0x0a, 0x15, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x3c,
	0x0a, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64,
	0x63, 0x5f, 0x62, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x61, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x44, 0x63, 0x42, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x73, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x3d, 0x0a, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x76, 0x69,
	0x72, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x76, 0x69, 0x72, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x3d, 0x0a, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x42,
	0x0a, 0x1e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x3b, 0x0a, 0x1a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x57, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x24,
	0x76, 0x69, 0x72, 0x74, 0x61, 0x75, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x76, 0x69, 0x72, 0x74,
	0x61, 0x75, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x35, 0x0a,
	0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x3a, 0x0a, 0x1a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f,
	0x6d, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x79, 0x6f, 0x75, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x59, 0x6f,
	0x75, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x1f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x79, 0x6f, 0x75, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x64, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x1d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x6c, 0x64, 0x4d, 0x64, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6d, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x47, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x64, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6e, 0x73, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x4e, 0x73, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x73, 0x66, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x4e, 0x73, 0x66, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x73, 0x66, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x73, 0x66, 0x12, 0xb9, 0x01, 0x0a, 0x15, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52,
	0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x22, 0xc1, 0x09, 0x0a, 0x18, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x62, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x62, 0x64, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x64,
	0x62, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x64, 0x62, 0x64, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61,
	0x72, 0x65, 0x61, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x73, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x1d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x72,
	0x65, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1e, 0x61, 0x72, 0x65, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x20, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61, 0x73, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61,
	0x72, 0x65, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x21, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1d, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1f,
	0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x42, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x6c, 0x73, 0x61, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x22, 0xcf, 0x02, 0x0a, 0x16, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x68, 0x5f, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xc7, 0x01, 0x0a, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x52,
	0x19, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescData = file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_goTypes = []interface{}{
	(*OspfShVirtualLinks_KEYS)(nil), // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_virtual_links_KEYS
	(*OspfShVirtualLinks)(nil),      // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_virtual_links
	(*OspfShNeighborRetrans)(nil),   // 2: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_neighbor_retrans
	(*OspfShVlinkNeighbor)(nil),     // 3: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_vlink_neighbor
}
var file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_depIdxs = []int32{
	3, // 0: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_virtual_links.virtual_link_neighbor:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_vlink_neighbor
	2, // 1: cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_vlink_neighbor.virtual_link_retransmissoin:type_name -> cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.interface_information.virtual_links.virtual_link.ospf_sh_neighbor_retrans
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_init()
}
func file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_init() {
	if File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShVirtualLinks_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShVirtualLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShNeighborRetrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShVlinkNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto = out.File
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_vrfs_vrf_interface_information_virtual_links_virtual_link_ospf_sh_virtual_links_proto_depIdxs = nil
}
