// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_io_oper/ipv4_network/nodes/node/interface_data/vrfs/vrf/details/detail/ipv4_if_detail.proto

package cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Detailed Info of IP Interface
type Ipv4IfDetail_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	VrfName       string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *Ipv4IfDetail_KEYS) Reset() {
	*x = Ipv4IfDetail_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4IfDetail_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4IfDetail_KEYS) ProtoMessage() {}

func (x *Ipv4IfDetail_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4IfDetail_KEYS.ProtoReflect.Descriptor instead.
func (*Ipv4IfDetail_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{0}
}

func (x *Ipv4IfDetail_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Ipv4IfDetail_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ipv4IfDetail_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type Ipv4IfDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary address
	PrimaryAddress string `protobuf:"bytes,50,opt,name=primary_address,json=primaryAddress,proto3" json:"primary_address,omitempty"`
	// VRF ID of the interface
	VrfId uint32 `protobuf:"varint,51,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// Line state of the interface
	LineState string `protobuf:"bytes,52,opt,name=line_state,json=lineState,proto3" json:"line_state,omitempty"`
	// Prefix length of primary address
	PrefixLength uint32 `protobuf:"varint,53,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// Route tag associated with the primary address (0 = no tag)
	RouteTag uint32 `protobuf:"varint,54,opt,name=route_tag,json=routeTag,proto3" json:"route_tag,omitempty"`
	// Multicast groups joined on the interface
	MulticastGroups []*McastGroup `protobuf:"bytes,55,rep,name=multicast_groups,json=multicastGroups,proto3" json:"multicast_groups,omitempty"`
	// IP MTU of the interface
	Mtu uint32 `protobuf:"varint,56,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Are ICMP unreachables sent on the interface?
	Unreachable bool `protobuf:"varint,57,opt,name=unreachable,proto3" json:"unreachable,omitempty"`
	// Are ICMP redirects sent on the interface?
	Redirect bool `protobuf:"varint,58,opt,name=redirect,proto3" json:"redirect,omitempty"`
	// Are direct broadcasts sent on the interface?
	DirectBroadcast bool `protobuf:"varint,59,opt,name=direct_broadcast,json=directBroadcast,proto3" json:"direct_broadcast,omitempty"`
	// Are mask replies sent on the interface?
	MaskReply bool `protobuf:"varint,60,opt,name=mask_reply,json=maskReply,proto3" json:"mask_reply,omitempty"`
	// Does ICCP RG ID exist on the interface?
	RgIdExists bool `protobuf:"varint,61,opt,name=rg_id_exists,json=rgIdExists,proto3" json:"rg_id_exists,omitempty"`
	// Is mLACP state Active (valid if RG ID exists)
	MLacpActive bool `protobuf:"varint,62,opt,name=m_lacp_active,json=mLacpActive,proto3" json:"m_lacp_active,omitempty"`
	// Name of referenced interface (valid if unnumbered)
	UnnumberedInterfaceName string `protobuf:"bytes,63,opt,name=unnumbered_interface_name,json=unnumberedInterfaceName,proto3" json:"unnumbered_interface_name,omitempty"`
	// Secondary addresses on the interface
	SecondaryAddress []*IpAddrNode `protobuf:"bytes,64,rep,name=secondary_address,json=secondaryAddress,proto3" json:"secondary_address,omitempty"`
	// Is Proxy ARP disabled on the interface?
	ProxyArpDisabled bool `protobuf:"varint,65,opt,name=proxy_arp_disabled,json=proxyArpDisabled,proto3" json:"proxy_arp_disabled,omitempty"`
	// ACLs configured on the interface
	Acl *AclConfig `protobuf:"bytes,66,opt,name=acl,proto3" json:"acl,omitempty"`
	// Multi ACLs configured on the interface
	MultiAcl *MultiAclConfig `protobuf:"bytes,67,opt,name=multi_acl,json=multiAcl,proto3" json:"multi_acl,omitempty"`
	// Helper Addresses configured on the interface
	HelperAddress *HaddrArray `protobuf:"bytes,68,opt,name=helper_address,json=helperAddress,proto3" json:"helper_address,omitempty"`
	// RPF config on the interface
	Rpf *RpfConfig `protobuf:"bytes,69,opt,name=rpf,proto3" json:"rpf,omitempty"`
	// BGP PA config on the interface
	BgpPa *BgpPaConfig `protobuf:"bytes,70,opt,name=bgp_pa,json=bgpPa,proto3" json:"bgp_pa,omitempty"`
	// Is BGP Flow Tag Source is enable
	FlowTagSrc bool `protobuf:"varint,71,opt,name=flow_tag_src,json=flowTagSrc,proto3" json:"flow_tag_src,omitempty"`
	// Is BGP Flow Tag Destination is enable
	FlowTagDst bool `protobuf:"varint,72,opt,name=flow_tag_dst,json=flowTagDst,proto3" json:"flow_tag_dst,omitempty"`
	// Address Publish Time
	PubUtime *TimevalEntry `protobuf:"bytes,73,opt,name=pub_utime,json=pubUtime,proto3" json:"pub_utime,omitempty"`
	// IDB Create Time
	IdbUtime *TimevalEntry `protobuf:"bytes,74,opt,name=idb_utime,json=idbUtime,proto3" json:"idb_utime,omitempty"`
	// CAPS Add Time
	CapsUtime *TimevalEntry `protobuf:"bytes,75,opt,name=caps_utime,json=capsUtime,proto3" json:"caps_utime,omitempty"`
	// FWD ENABLE Time
	FwdEnUtime *TimevalEntry `protobuf:"bytes,76,opt,name=fwd_en_utime,json=fwdEnUtime,proto3" json:"fwd_en_utime,omitempty"`
	// FWD DISABLE Time
	FwdDisUtime *TimevalEntry `protobuf:"bytes,77,opt,name=fwd_dis_utime,json=fwdDisUtime,proto3" json:"fwd_dis_utime,omitempty"`
}

func (x *Ipv4IfDetail) Reset() {
	*x = Ipv4IfDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4IfDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4IfDetail) ProtoMessage() {}

func (x *Ipv4IfDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4IfDetail.ProtoReflect.Descriptor instead.
func (*Ipv4IfDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{1}
}

func (x *Ipv4IfDetail) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *Ipv4IfDetail) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *Ipv4IfDetail) GetLineState() string {
	if x != nil {
		return x.LineState
	}
	return ""
}

func (x *Ipv4IfDetail) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ipv4IfDetail) GetRouteTag() uint32 {
	if x != nil {
		return x.RouteTag
	}
	return 0
}

func (x *Ipv4IfDetail) GetMulticastGroups() []*McastGroup {
	if x != nil {
		return x.MulticastGroups
	}
	return nil
}

func (x *Ipv4IfDetail) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Ipv4IfDetail) GetUnreachable() bool {
	if x != nil {
		return x.Unreachable
	}
	return false
}

func (x *Ipv4IfDetail) GetRedirect() bool {
	if x != nil {
		return x.Redirect
	}
	return false
}

func (x *Ipv4IfDetail) GetDirectBroadcast() bool {
	if x != nil {
		return x.DirectBroadcast
	}
	return false
}

func (x *Ipv4IfDetail) GetMaskReply() bool {
	if x != nil {
		return x.MaskReply
	}
	return false
}

func (x *Ipv4IfDetail) GetRgIdExists() bool {
	if x != nil {
		return x.RgIdExists
	}
	return false
}

func (x *Ipv4IfDetail) GetMLacpActive() bool {
	if x != nil {
		return x.MLacpActive
	}
	return false
}

func (x *Ipv4IfDetail) GetUnnumberedInterfaceName() string {
	if x != nil {
		return x.UnnumberedInterfaceName
	}
	return ""
}

func (x *Ipv4IfDetail) GetSecondaryAddress() []*IpAddrNode {
	if x != nil {
		return x.SecondaryAddress
	}
	return nil
}

func (x *Ipv4IfDetail) GetProxyArpDisabled() bool {
	if x != nil {
		return x.ProxyArpDisabled
	}
	return false
}

func (x *Ipv4IfDetail) GetAcl() *AclConfig {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *Ipv4IfDetail) GetMultiAcl() *MultiAclConfig {
	if x != nil {
		return x.MultiAcl
	}
	return nil
}

func (x *Ipv4IfDetail) GetHelperAddress() *HaddrArray {
	if x != nil {
		return x.HelperAddress
	}
	return nil
}

func (x *Ipv4IfDetail) GetRpf() *RpfConfig {
	if x != nil {
		return x.Rpf
	}
	return nil
}

func (x *Ipv4IfDetail) GetBgpPa() *BgpPaConfig {
	if x != nil {
		return x.BgpPa
	}
	return nil
}

func (x *Ipv4IfDetail) GetFlowTagSrc() bool {
	if x != nil {
		return x.FlowTagSrc
	}
	return false
}

func (x *Ipv4IfDetail) GetFlowTagDst() bool {
	if x != nil {
		return x.FlowTagDst
	}
	return false
}

func (x *Ipv4IfDetail) GetPubUtime() *TimevalEntry {
	if x != nil {
		return x.PubUtime
	}
	return nil
}

func (x *Ipv4IfDetail) GetIdbUtime() *TimevalEntry {
	if x != nil {
		return x.IdbUtime
	}
	return nil
}

func (x *Ipv4IfDetail) GetCapsUtime() *TimevalEntry {
	if x != nil {
		return x.CapsUtime
	}
	return nil
}

func (x *Ipv4IfDetail) GetFwdEnUtime() *TimevalEntry {
	if x != nil {
		return x.FwdEnUtime
	}
	return nil
}

func (x *Ipv4IfDetail) GetFwdDisUtime() *TimevalEntry {
	if x != nil {
		return x.FwdDisUtime
	}
	return nil
}

type Str struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Str) Reset() {
	*x = Str{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Str) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Str) ProtoMessage() {}

func (x *Str) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Str.ProtoReflect.Descriptor instead.
func (*Str) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{2}
}

func (x *Str) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MCast Group List
type McastGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of multicast group
	GroupAddress string `protobuf:"bytes,1,opt,name=group_address,json=groupAddress,proto3" json:"group_address,omitempty"`
}

func (x *McastGroup) Reset() {
	*x = McastGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McastGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McastGroup) ProtoMessage() {}

func (x *McastGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McastGroup.ProtoReflect.Descriptor instead.
func (*McastGroup) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{3}
}

func (x *McastGroup) GetGroupAddress() string {
	if x != nil {
		return x.GroupAddress
	}
	return ""
}

// List of IP Addresses
type IpAddrNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Prefix length of address
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// Route Tag associated with this address (0 = no tag)
	RouteTag uint32 `protobuf:"varint,3,opt,name=route_tag,json=routeTag,proto3" json:"route_tag,omitempty"`
}

func (x *IpAddrNode) Reset() {
	*x = IpAddrNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddrNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddrNode) ProtoMessage() {}

func (x *IpAddrNode) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddrNode.ProtoReflect.Descriptor instead.
func (*IpAddrNode) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{4}
}

func (x *IpAddrNode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IpAddrNode) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *IpAddrNode) GetRouteTag() uint32 {
	if x != nil {
		return x.RouteTag
	}
	return 0
}

// ACL config information
type AclConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ACL applied to incoming packets
	Inbound string `protobuf:"bytes,1,opt,name=inbound,proto3" json:"inbound,omitempty"`
	// ACL applied to outgoing packets
	Outbound string `protobuf:"bytes,2,opt,name=outbound,proto3" json:"outbound,omitempty"`
	// Common ACL applied to incoming packets
	CommonInBound string `protobuf:"bytes,3,opt,name=common_in_bound,json=commonInBound,proto3" json:"common_in_bound,omitempty"`
	// Common ACL applied to outgoing packets
	CommonOutBound string `protobuf:"bytes,4,opt,name=common_out_bound,json=commonOutBound,proto3" json:"common_out_bound,omitempty"`
}

func (x *AclConfig) Reset() {
	*x = AclConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclConfig) ProtoMessage() {}

func (x *AclConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclConfig.ProtoReflect.Descriptor instead.
func (*AclConfig) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{5}
}

func (x *AclConfig) GetInbound() string {
	if x != nil {
		return x.Inbound
	}
	return ""
}

func (x *AclConfig) GetOutbound() string {
	if x != nil {
		return x.Outbound
	}
	return ""
}

func (x *AclConfig) GetCommonInBound() string {
	if x != nil {
		return x.CommonInBound
	}
	return ""
}

func (x *AclConfig) GetCommonOutBound() string {
	if x != nil {
		return x.CommonOutBound
	}
	return ""
}

// Multi ACL config information
type MultiAclConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inbound ACLs
	Inbound []*Str `protobuf:"bytes,1,rep,name=inbound,proto3" json:"inbound,omitempty"`
	// Outbound ACLs
	Outbound []*Str `protobuf:"bytes,2,rep,name=outbound,proto3" json:"outbound,omitempty"`
	// Common ACLs
	Common []*Str `protobuf:"bytes,3,rep,name=common,proto3" json:"common,omitempty"`
}

func (x *MultiAclConfig) Reset() {
	*x = MultiAclConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAclConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAclConfig) ProtoMessage() {}

func (x *MultiAclConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAclConfig.ProtoReflect.Descriptor instead.
func (*MultiAclConfig) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{6}
}

func (x *MultiAclConfig) GetInbound() []*Str {
	if x != nil {
		return x.Inbound
	}
	return nil
}

func (x *MultiAclConfig) GetOutbound() []*Str {
	if x != nil {
		return x.Outbound
	}
	return nil
}

func (x *MultiAclConfig) GetCommon() []*Str {
	if x != nil {
		return x.Common
	}
	return nil
}

// Helper Address List
type HaddrArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Helper address
	AddressArray [][]byte `protobuf:"bytes,1,rep,name=address_array,json=addressArray,proto3" json:"address_array,omitempty"`
}

func (x *HaddrArray) Reset() {
	*x = HaddrArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HaddrArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HaddrArray) ProtoMessage() {}

func (x *HaddrArray) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HaddrArray.ProtoReflect.Descriptor instead.
func (*HaddrArray) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{7}
}

func (x *HaddrArray) GetAddressArray() [][]byte {
	if x != nil {
		return x.AddressArray
	}
	return nil
}

// RPF config information
type RpfConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable RPF config
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Allow Default Route
	AllowDefaultRoute bool `protobuf:"varint,2,opt,name=allow_default_route,json=allowDefaultRoute,proto3" json:"allow_default_route,omitempty"`
	// Allow Self Ping
	AllowSelfPing bool `protobuf:"varint,3,opt,name=allow_self_ping,json=allowSelfPing,proto3" json:"allow_self_ping,omitempty"`
	// RPF Mode (loose/strict)
	Mode string `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *RpfConfig) Reset() {
	*x = RpfConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpfConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpfConfig) ProtoMessage() {}

func (x *RpfConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpfConfig.ProtoReflect.Descriptor instead.
func (*RpfConfig) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{8}
}

func (x *RpfConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *RpfConfig) GetAllowDefaultRoute() bool {
	if x != nil {
		return x.AllowDefaultRoute
	}
	return false
}

func (x *RpfConfig) GetAllowSelfPing() bool {
	if x != nil {
		return x.AllowSelfPing
	}
	return false
}

func (x *RpfConfig) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

// BGP PA config for ingress/egress direction
type BgpPaDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable BGP PA for ingress/egress
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Enable source accouting
	Source bool `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
	// Enable destination accouting
	Destination bool `protobuf:"varint,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *BgpPaDir) Reset() {
	*x = BgpPaDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPaDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPaDir) ProtoMessage() {}

func (x *BgpPaDir) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPaDir.ProtoReflect.Descriptor instead.
func (*BgpPaDir) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{9}
}

func (x *BgpPaDir) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *BgpPaDir) GetSource() bool {
	if x != nil {
		return x.Source
	}
	return false
}

func (x *BgpPaDir) GetDestination() bool {
	if x != nil {
		return x.Destination
	}
	return false
}

// BGP PA config information
type BgpPaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP PA input config
	Input *BgpPaDir `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// BGP PA output config
	Output *BgpPaDir `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *BgpPaConfig) Reset() {
	*x = BgpPaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPaConfig) ProtoMessage() {}

func (x *BgpPaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPaConfig.ProtoReflect.Descriptor instead.
func (*BgpPaConfig) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{10}
}

func (x *BgpPaConfig) GetInput() *BgpPaDir {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *BgpPaConfig) GetOutput() *BgpPaDir {
	if x != nil {
		return x.Output
	}
	return nil
}

// Creation or Update Time
type TimevalEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimevalEntry) Reset() {
	*x = TimevalEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimevalEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimevalEntry) ProtoMessage() {}

func (x *TimevalEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimevalEntry.ProtoReflect.Descriptor instead.
func (*TimevalEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP(), []int{11}
}

var File_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDesc = []byte{
	0x0a, 0x6d, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x2f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x69, 0x66, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x58, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x74, 0x0a, 0x13, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xa2, 0x11, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76,
	0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x12, 0x90, 0x01, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x20, 0x0a, 0x0c, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x67, 0x49, 0x64, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x4c, 0x61, 0x63, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x72, 0x70, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x61,
	0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x87,
	0x01, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x63, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x0e, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x68, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x76, 0x0a, 0x03, 0x72, 0x70, 0x66, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x72, 0x70, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x72, 0x70, 0x66, 0x12,
	0x7e, 0x0a, 0x06, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x70,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x62, 0x67, 0x70, 0x50, 0x61, 0x12,
	0x20, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x72, 0x63, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x53, 0x72,
	0x63, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x64, 0x73,
	0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67,
	0x44, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x5f, 0x75, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x75, 0x62, 0x55, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x69,
	0x64, 0x62, 0x5f, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x64, 0x62, 0x55, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x73, 0x5f, 0x75, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x63, 0x61, 0x70, 0x73, 0x55, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x66,
	0x77, 0x64, 0x5f, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x77, 0x64, 0x45,
	0x6e, 0x55, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x66, 0x77, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x5f, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x77, 0x64, 0x44, 0x69, 0x73, 0x55,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x32, 0x0a, 0x0b, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x61, 0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x10, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a,
	0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x73, 0x74, 0x72, 0x52, 0x07, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x79, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x73, 0x74, 0x72, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x75, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x73, 0x74, 0x72,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x0b, 0x68, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x90, 0x01, 0x0a,
	0x0a, 0x72, 0x70, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x5e, 0x0a, 0x0a, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x89, 0x02, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x7a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x70, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x7c, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x5f,
	0x64, 0x69, 0x72, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescData = file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_goTypes = []interface{}{
	(*Ipv4IfDetail_KEYS)(nil), // 0: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail_KEYS
	(*Ipv4IfDetail)(nil),      // 1: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail
	(*Str)(nil),               // 2: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.str
	(*McastGroup)(nil),        // 3: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.mcast_group
	(*IpAddrNode)(nil),        // 4: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ip_addr_node
	(*AclConfig)(nil),         // 5: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.acl_config
	(*MultiAclConfig)(nil),    // 6: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.multi_acl_config
	(*HaddrArray)(nil),        // 7: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.haddr_array
	(*RpfConfig)(nil),         // 8: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.rpf_config
	(*BgpPaDir)(nil),          // 9: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.bgp_pa_dir
	(*BgpPaConfig)(nil),       // 10: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.bgp_pa_config
	(*TimevalEntry)(nil),      // 11: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.timeval_entry
}
var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_depIdxs = []int32{
	3,  // 0: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.multicast_groups:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.mcast_group
	4,  // 1: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.secondary_address:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ip_addr_node
	5,  // 2: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.acl:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.acl_config
	6,  // 3: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.multi_acl:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.multi_acl_config
	7,  // 4: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.helper_address:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.haddr_array
	8,  // 5: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.rpf:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.rpf_config
	10, // 6: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.bgp_pa:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.bgp_pa_config
	11, // 7: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.pub_utime:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.timeval_entry
	11, // 8: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.idb_utime:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.timeval_entry
	11, // 9: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.caps_utime:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.timeval_entry
	11, // 10: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.fwd_en_utime:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.timeval_entry
	11, // 11: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.ipv4_if_detail.fwd_dis_utime:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.timeval_entry
	2,  // 12: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.multi_acl_config.inbound:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.str
	2,  // 13: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.multi_acl_config.outbound:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.str
	2,  // 14: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.multi_acl_config.common:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.str
	9,  // 15: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.bgp_pa_config.input:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.bgp_pa_dir
	9,  // 16: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.bgp_pa_config.output:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.interface_data.vrfs.vrf.details.detail.bgp_pa_dir
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_init()
}
func file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_init() {
	if File_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4IfDetail_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4IfDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Str); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McastGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddrNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAclConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HaddrArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpfConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPaDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimevalEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto = out.File
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_interface_data_vrfs_vrf_details_detail_ipv4_if_detail_proto_depIdxs = nil
}
