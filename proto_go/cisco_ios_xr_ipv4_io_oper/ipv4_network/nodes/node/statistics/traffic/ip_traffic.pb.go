// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_io_oper/ipv4_network/nodes/node/statistics/traffic/ip_traffic.proto

package cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IP and ICMP Traffic Information
type IpTraffic_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *IpTraffic_KEYS) Reset() {
	*x = IpTraffic_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTraffic_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTraffic_KEYS) ProtoMessage() {}

func (x *IpTraffic_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTraffic_KEYS.ProtoReflect.Descriptor instead.
func (*IpTraffic_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescGZIP(), []int{0}
}

func (x *IpTraffic_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type IpTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 Network Stats
	Ipv4Stats *Ipv4IoTraffic `protobuf:"bytes,50,opt,name=ipv4_stats,json=ipv4Stats,proto3" json:"ipv4_stats,omitempty"`
	// ICMP Stats
	IcmpStats *Ipv4IoIcmpTraffic `protobuf:"bytes,51,opt,name=icmp_stats,json=icmpStats,proto3" json:"icmp_stats,omitempty"`
}

func (x *IpTraffic) Reset() {
	*x = IpTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTraffic) ProtoMessage() {}

func (x *IpTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTraffic.ProtoReflect.Descriptor instead.
func (*IpTraffic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescGZIP(), []int{1}
}

func (x *IpTraffic) GetIpv4Stats() *Ipv4IoTraffic {
	if x != nil {
		return x.Ipv4Stats
	}
	return nil
}

func (x *IpTraffic) GetIcmpStats() *Ipv4IoIcmpTraffic {
	if x != nil {
		return x.IcmpStats
	}
	return nil
}

// IP Traffic Information
type Ipv4IoTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input Packets
	InputPackets uint32 `protobuf:"varint,1,opt,name=input_packets,json=inputPackets,proto3" json:"input_packets,omitempty"`
	// Received Packets
	ReceivedPackets uint32 `protobuf:"varint,2,opt,name=received_packets,json=receivedPackets,proto3" json:"received_packets,omitempty"`
	// Format Errors
	FormatErrors uint32 `protobuf:"varint,3,opt,name=format_errors,json=formatErrors,proto3" json:"format_errors,omitempty"`
	// Bad Hop Count
	BadHopCount uint32 `protobuf:"varint,4,opt,name=bad_hop_count,json=badHopCount,proto3" json:"bad_hop_count,omitempty"`
	// Bad Source Address
	BadSourceAddress uint32 `protobuf:"varint,5,opt,name=bad_source_address,json=badSourceAddress,proto3" json:"bad_source_address,omitempty"`
	// Bad Header
	BadHeader uint32 `protobuf:"varint,6,opt,name=bad_header,json=badHeader,proto3" json:"bad_header,omitempty"`
	// No Protocol
	NoProtocol uint32 `protobuf:"varint,7,opt,name=no_protocol,json=noProtocol,proto3" json:"no_protocol,omitempty"`
	// No Gateway
	NoGateway uint32 `protobuf:"varint,8,opt,name=no_gateway,json=noGateway,proto3" json:"no_gateway,omitempty"`
	// RaInput
	ReassembleInput uint32 `protobuf:"varint,9,opt,name=reassemble_input,json=reassembleInput,proto3" json:"reassemble_input,omitempty"`
	// Reassembled
	Reassembled uint32 `protobuf:"varint,10,opt,name=reassembled,proto3" json:"reassembled,omitempty"`
	// Reassembly Timeout
	ReassembleTimeout uint32 `protobuf:"varint,11,opt,name=reassemble_timeout,json=reassembleTimeout,proto3" json:"reassemble_timeout,omitempty"`
	// Reassembly Max Drop
	ReassembleMaxDrop uint32 `protobuf:"varint,12,opt,name=reassemble_max_drop,json=reassembleMaxDrop,proto3" json:"reassemble_max_drop,omitempty"`
	// Reassembly Failed
	ReassembleFailed uint32 `protobuf:"varint,13,opt,name=reassemble_failed,json=reassembleFailed,proto3" json:"reassemble_failed,omitempty"`
	// IP Options Present
	OptionsPresent uint32 `protobuf:"varint,14,opt,name=options_present,json=optionsPresent,proto3" json:"options_present,omitempty"`
	// Bad Option
	BadOption uint32 `protobuf:"varint,15,opt,name=bad_option,json=badOption,proto3" json:"bad_option,omitempty"`
	// Unknown Option
	UnknownOption uint32 `protobuf:"varint,16,opt,name=unknown_option,json=unknownOption,proto3" json:"unknown_option,omitempty"`
	// Bad Security Option
	BadSecurityOption uint32 `protobuf:"varint,17,opt,name=bad_security_option,json=badSecurityOption,proto3" json:"bad_security_option,omitempty"`
	// Basic Security Option
	BasicSecurityOption uint32 `protobuf:"varint,18,opt,name=basic_security_option,json=basicSecurityOption,proto3" json:"basic_security_option,omitempty"`
	// Extended Security Option
	ExtendedSecurityOption uint32 `protobuf:"varint,19,opt,name=extended_security_option,json=extendedSecurityOption,proto3" json:"extended_security_option,omitempty"`
	// Cipso Option
	CipsoOption uint32 `protobuf:"varint,20,opt,name=cipso_option,json=cipsoOption,proto3" json:"cipso_option,omitempty"`
	// Strict Source Route Option
	StrictSourceRouteOption uint32 `protobuf:"varint,21,opt,name=strict_source_route_option,json=strictSourceRouteOption,proto3" json:"strict_source_route_option,omitempty"`
	// Loose Source Route Option
	LooseSourceRouteOption uint32 `protobuf:"varint,22,opt,name=loose_source_route_option,json=looseSourceRouteOption,proto3" json:"loose_source_route_option,omitempty"`
	// Record Route Option
	RecordRouteOption uint32 `protobuf:"varint,23,opt,name=record_route_option,json=recordRouteOption,proto3" json:"record_route_option,omitempty"`
	// SID Option
	SidOption uint32 `protobuf:"varint,24,opt,name=sid_option,json=sidOption,proto3" json:"sid_option,omitempty"`
	// Timestamp Option
	TimestampOption uint32 `protobuf:"varint,25,opt,name=timestamp_option,json=timestampOption,proto3" json:"timestamp_option,omitempty"`
	// Router Alert Option
	RouterAlertOption uint32 `protobuf:"varint,26,opt,name=router_alert_option,json=routerAlertOption,proto3" json:"router_alert_option,omitempty"`
	// Noop Option
	NoopOption uint32 `protobuf:"varint,27,opt,name=noop_option,json=noopOption,proto3" json:"noop_option,omitempty"`
	// End Option
	EndOption uint32 `protobuf:"varint,28,opt,name=end_option,json=endOption,proto3" json:"end_option,omitempty"`
	// Packets Output
	PacketsOutput uint32 `protobuf:"varint,29,opt,name=packets_output,json=packetsOutput,proto3" json:"packets_output,omitempty"`
	// Packets Forwarded
	PacketsForwarded uint32 `protobuf:"varint,30,opt,name=packets_forwarded,json=packetsForwarded,proto3" json:"packets_forwarded,omitempty"`
	// Packets Fragmented
	PacketsFragmented uint32 `protobuf:"varint,31,opt,name=packets_fragmented,json=packetsFragmented,proto3" json:"packets_fragmented,omitempty"`
	// Fragment Count
	FragmentCount uint32 `protobuf:"varint,32,opt,name=fragment_count,json=fragmentCount,proto3" json:"fragment_count,omitempty"`
	// Encapsulation Failed
	EncapsulationFailed uint32 `protobuf:"varint,33,opt,name=encapsulation_failed,json=encapsulationFailed,proto3" json:"encapsulation_failed,omitempty"`
	// No Router
	NoRouter uint32 `protobuf:"varint,34,opt,name=no_router,json=noRouter,proto3" json:"no_router,omitempty"`
	// Packet Too Big
	PacketTooBig uint32 `protobuf:"varint,35,opt,name=packet_too_big,json=packetTooBig,proto3" json:"packet_too_big,omitempty"`
	// Multicast In
	MulticastIn uint32 `protobuf:"varint,36,opt,name=multicast_in,json=multicastIn,proto3" json:"multicast_in,omitempty"`
	// Multicast Out
	MulticastOut uint32 `protobuf:"varint,37,opt,name=multicast_out,json=multicastOut,proto3" json:"multicast_out,omitempty"`
	// Broadcast In
	BroadcastIn uint32 `protobuf:"varint,38,opt,name=broadcast_in,json=broadcastIn,proto3" json:"broadcast_in,omitempty"`
	// Broadcast Out
	BroadcastOut uint32 `protobuf:"varint,39,opt,name=broadcast_out,json=broadcastOut,proto3" json:"broadcast_out,omitempty"`
	// Lisp IPv4 encapped packets
	LispV4Encap uint32 `protobuf:"varint,40,opt,name=lisp_v4_encap,json=lispV4Encap,proto3" json:"lisp_v4_encap,omitempty"`
	// Lisp IPv4 decapped packets
	LispV4Decap uint32 `protobuf:"varint,41,opt,name=lisp_v4_decap,json=lispV4Decap,proto3" json:"lisp_v4_decap,omitempty"`
	// Lisp IPv6 encapped packets
	LispV6Encap uint32 `protobuf:"varint,42,opt,name=lisp_v6_encap,json=lispV6Encap,proto3" json:"lisp_v6_encap,omitempty"`
	// Lisp IPv6 decapped packets
	LispV6Decap uint32 `protobuf:"varint,43,opt,name=lisp_v6_decap,json=lispV6Decap,proto3" json:"lisp_v6_decap,omitempty"`
	// Lisp encap errors
	LispEncapError uint32 `protobuf:"varint,44,opt,name=lisp_encap_error,json=lispEncapError,proto3" json:"lisp_encap_error,omitempty"`
	// Lisp decap errors
	LispDecapError uint32 `protobuf:"varint,45,opt,name=lisp_decap_error,json=lispDecapError,proto3" json:"lisp_decap_error,omitempty"`
}

func (x *Ipv4IoTraffic) Reset() {
	*x = Ipv4IoTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4IoTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4IoTraffic) ProtoMessage() {}

func (x *Ipv4IoTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4IoTraffic.ProtoReflect.Descriptor instead.
func (*Ipv4IoTraffic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv4IoTraffic) GetInputPackets() uint32 {
	if x != nil {
		return x.InputPackets
	}
	return 0
}

func (x *Ipv4IoTraffic) GetReceivedPackets() uint32 {
	if x != nil {
		return x.ReceivedPackets
	}
	return 0
}

func (x *Ipv4IoTraffic) GetFormatErrors() uint32 {
	if x != nil {
		return x.FormatErrors
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBadHopCount() uint32 {
	if x != nil {
		return x.BadHopCount
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBadSourceAddress() uint32 {
	if x != nil {
		return x.BadSourceAddress
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBadHeader() uint32 {
	if x != nil {
		return x.BadHeader
	}
	return 0
}

func (x *Ipv4IoTraffic) GetNoProtocol() uint32 {
	if x != nil {
		return x.NoProtocol
	}
	return 0
}

func (x *Ipv4IoTraffic) GetNoGateway() uint32 {
	if x != nil {
		return x.NoGateway
	}
	return 0
}

func (x *Ipv4IoTraffic) GetReassembleInput() uint32 {
	if x != nil {
		return x.ReassembleInput
	}
	return 0
}

func (x *Ipv4IoTraffic) GetReassembled() uint32 {
	if x != nil {
		return x.Reassembled
	}
	return 0
}

func (x *Ipv4IoTraffic) GetReassembleTimeout() uint32 {
	if x != nil {
		return x.ReassembleTimeout
	}
	return 0
}

func (x *Ipv4IoTraffic) GetReassembleMaxDrop() uint32 {
	if x != nil {
		return x.ReassembleMaxDrop
	}
	return 0
}

func (x *Ipv4IoTraffic) GetReassembleFailed() uint32 {
	if x != nil {
		return x.ReassembleFailed
	}
	return 0
}

func (x *Ipv4IoTraffic) GetOptionsPresent() uint32 {
	if x != nil {
		return x.OptionsPresent
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBadOption() uint32 {
	if x != nil {
		return x.BadOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetUnknownOption() uint32 {
	if x != nil {
		return x.UnknownOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBadSecurityOption() uint32 {
	if x != nil {
		return x.BadSecurityOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBasicSecurityOption() uint32 {
	if x != nil {
		return x.BasicSecurityOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetExtendedSecurityOption() uint32 {
	if x != nil {
		return x.ExtendedSecurityOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetCipsoOption() uint32 {
	if x != nil {
		return x.CipsoOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetStrictSourceRouteOption() uint32 {
	if x != nil {
		return x.StrictSourceRouteOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetLooseSourceRouteOption() uint32 {
	if x != nil {
		return x.LooseSourceRouteOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetRecordRouteOption() uint32 {
	if x != nil {
		return x.RecordRouteOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetSidOption() uint32 {
	if x != nil {
		return x.SidOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetTimestampOption() uint32 {
	if x != nil {
		return x.TimestampOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetRouterAlertOption() uint32 {
	if x != nil {
		return x.RouterAlertOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetNoopOption() uint32 {
	if x != nil {
		return x.NoopOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetEndOption() uint32 {
	if x != nil {
		return x.EndOption
	}
	return 0
}

func (x *Ipv4IoTraffic) GetPacketsOutput() uint32 {
	if x != nil {
		return x.PacketsOutput
	}
	return 0
}

func (x *Ipv4IoTraffic) GetPacketsForwarded() uint32 {
	if x != nil {
		return x.PacketsForwarded
	}
	return 0
}

func (x *Ipv4IoTraffic) GetPacketsFragmented() uint32 {
	if x != nil {
		return x.PacketsFragmented
	}
	return 0
}

func (x *Ipv4IoTraffic) GetFragmentCount() uint32 {
	if x != nil {
		return x.FragmentCount
	}
	return 0
}

func (x *Ipv4IoTraffic) GetEncapsulationFailed() uint32 {
	if x != nil {
		return x.EncapsulationFailed
	}
	return 0
}

func (x *Ipv4IoTraffic) GetNoRouter() uint32 {
	if x != nil {
		return x.NoRouter
	}
	return 0
}

func (x *Ipv4IoTraffic) GetPacketTooBig() uint32 {
	if x != nil {
		return x.PacketTooBig
	}
	return 0
}

func (x *Ipv4IoTraffic) GetMulticastIn() uint32 {
	if x != nil {
		return x.MulticastIn
	}
	return 0
}

func (x *Ipv4IoTraffic) GetMulticastOut() uint32 {
	if x != nil {
		return x.MulticastOut
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBroadcastIn() uint32 {
	if x != nil {
		return x.BroadcastIn
	}
	return 0
}

func (x *Ipv4IoTraffic) GetBroadcastOut() uint32 {
	if x != nil {
		return x.BroadcastOut
	}
	return 0
}

func (x *Ipv4IoTraffic) GetLispV4Encap() uint32 {
	if x != nil {
		return x.LispV4Encap
	}
	return 0
}

func (x *Ipv4IoTraffic) GetLispV4Decap() uint32 {
	if x != nil {
		return x.LispV4Decap
	}
	return 0
}

func (x *Ipv4IoTraffic) GetLispV6Encap() uint32 {
	if x != nil {
		return x.LispV6Encap
	}
	return 0
}

func (x *Ipv4IoTraffic) GetLispV6Decap() uint32 {
	if x != nil {
		return x.LispV6Decap
	}
	return 0
}

func (x *Ipv4IoTraffic) GetLispEncapError() uint32 {
	if x != nil {
		return x.LispEncapError
	}
	return 0
}

func (x *Ipv4IoTraffic) GetLispDecapError() uint32 {
	if x != nil {
		return x.LispDecapError
	}
	return 0
}

// ICMP Traffic Information
type Ipv4IoIcmpTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ICMP Received
	Received uint32 `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	// ICMP Checksum Errors
	ChecksumError uint32 `protobuf:"varint,2,opt,name=checksum_error,json=checksumError,proto3" json:"checksum_error,omitempty"`
	// ICMP Unknown
	Unknown uint32 `protobuf:"varint,3,opt,name=unknown,proto3" json:"unknown,omitempty"`
	// ICMP Transmitted
	Output uint32 `protobuf:"varint,4,opt,name=output,proto3" json:"output,omitempty"`
	// ICMP Admin Unreachable Sent
	AdminUnreachableSent uint32 `protobuf:"varint,5,opt,name=admin_unreachable_sent,json=adminUnreachableSent,proto3" json:"admin_unreachable_sent,omitempty"`
	// ICMP Network Unreachable Sent
	NetworkUnreachableSent uint32 `protobuf:"varint,6,opt,name=network_unreachable_sent,json=networkUnreachableSent,proto3" json:"network_unreachable_sent,omitempty"`
	// ICMP Host Unreachable Sent
	HostUnreachableSent uint32 `protobuf:"varint,7,opt,name=host_unreachable_sent,json=hostUnreachableSent,proto3" json:"host_unreachable_sent,omitempty"`
	// ICMP Protocol Unreachable Sent
	ProtocolUnreachableSent uint32 `protobuf:"varint,8,opt,name=protocol_unreachable_sent,json=protocolUnreachableSent,proto3" json:"protocol_unreachable_sent,omitempty"`
	// ICMP Port Unreachable Sent
	PortUnreachableSent uint32 `protobuf:"varint,9,opt,name=port_unreachable_sent,json=portUnreachableSent,proto3" json:"port_unreachable_sent,omitempty"`
	// ICMP Fragment Unreachable Sent
	FragmentUnreachableSent uint32 `protobuf:"varint,10,opt,name=fragment_unreachable_sent,json=fragmentUnreachableSent,proto3" json:"fragment_unreachable_sent,omitempty"`
	// ICMP Admin Unreachable Received
	AdminUnreachableReceived uint32 `protobuf:"varint,11,opt,name=admin_unreachable_received,json=adminUnreachableReceived,proto3" json:"admin_unreachable_received,omitempty"`
	// ICMP Network Unreachable Received
	NetworkUnreachableReceived uint32 `protobuf:"varint,12,opt,name=network_unreachable_received,json=networkUnreachableReceived,proto3" json:"network_unreachable_received,omitempty"`
	// ICMP Host Unreachable Received
	HostUnreachableReceived uint32 `protobuf:"varint,13,opt,name=host_unreachable_received,json=hostUnreachableReceived,proto3" json:"host_unreachable_received,omitempty"`
	// ICMP Protocol Unreachable Received
	ProtocolUnreachableReceived uint32 `protobuf:"varint,14,opt,name=protocol_unreachable_received,json=protocolUnreachableReceived,proto3" json:"protocol_unreachable_received,omitempty"`
	// ICMP Port Unreachable Received
	PortUnreachableReceived uint32 `protobuf:"varint,15,opt,name=port_unreachable_received,json=portUnreachableReceived,proto3" json:"port_unreachable_received,omitempty"`
	// ICMP Fragment Unreachable Received
	FragmentUnreachableReceived uint32 `protobuf:"varint,16,opt,name=fragment_unreachable_received,json=fragmentUnreachableReceived,proto3" json:"fragment_unreachable_received,omitempty"`
	// ICMP Hopcount Sent
	HopcountSent uint32 `protobuf:"varint,17,opt,name=hopcount_sent,json=hopcountSent,proto3" json:"hopcount_sent,omitempty"`
	// ICMP Reassembly Sent
	ReassemblySent uint32 `protobuf:"varint,18,opt,name=reassembly_sent,json=reassemblySent,proto3" json:"reassembly_sent,omitempty"`
	// ICMP Hopcount Received
	HopcountReceived uint32 `protobuf:"varint,19,opt,name=hopcount_received,json=hopcountReceived,proto3" json:"hopcount_received,omitempty"`
	// ICMP Reassembly Received
	ReasseblyReceived uint32 `protobuf:"varint,20,opt,name=reassebly_received,json=reasseblyReceived,proto3" json:"reassebly_received,omitempty"`
	// ICMP Parameter Error Received
	ParamErrorReceived uint32 `protobuf:"varint,21,opt,name=param_error_received,json=paramErrorReceived,proto3" json:"param_error_received,omitempty"`
	// ICMP Parameter Error Sent
	ParamErrorSend uint32 `protobuf:"varint,22,opt,name=param_error_send,json=paramErrorSend,proto3" json:"param_error_send,omitempty"`
	// ICMP Echo Request Sent
	EchoRequestSent uint32 `protobuf:"varint,23,opt,name=echo_request_sent,json=echoRequestSent,proto3" json:"echo_request_sent,omitempty"`
	// ICMP Echo Request Sent
	EchoRequestReceived uint32 `protobuf:"varint,24,opt,name=echo_request_received,json=echoRequestReceived,proto3" json:"echo_request_received,omitempty"`
	// ICMP Echo Reply Sent
	EchoReplySent uint32 `protobuf:"varint,25,opt,name=echo_reply_sent,json=echoReplySent,proto3" json:"echo_reply_sent,omitempty"`
	// ICMP Echo Reply Received
	EchoReplyReceived uint32 `protobuf:"varint,26,opt,name=echo_reply_received,json=echoReplyReceived,proto3" json:"echo_reply_received,omitempty"`
	// ICMP Mask Sent
	MaskRequestSent uint32 `protobuf:"varint,27,opt,name=mask_request_sent,json=maskRequestSent,proto3" json:"mask_request_sent,omitempty"`
	// ICMP Mask Received
	MaskRequestReceived uint32 `protobuf:"varint,28,opt,name=mask_request_received,json=maskRequestReceived,proto3" json:"mask_request_received,omitempty"`
	// ICMP Mask Sent
	MaskReplySent uint32 `protobuf:"varint,29,opt,name=mask_reply_sent,json=maskReplySent,proto3" json:"mask_reply_sent,omitempty"`
	// ICMP Mask Received
	MaskReplyReceived uint32 `protobuf:"varint,30,opt,name=mask_reply_received,json=maskReplyReceived,proto3" json:"mask_reply_received,omitempty"`
	// ICMP Source Quench
	SourceQuenchReceived uint32 `protobuf:"varint,31,opt,name=source_quench_received,json=sourceQuenchReceived,proto3" json:"source_quench_received,omitempty"`
	// ICMP Redirect Received
	RedirectReceived uint32 `protobuf:"varint,32,opt,name=redirect_received,json=redirectReceived,proto3" json:"redirect_received,omitempty"`
	// ICMP Redirect Sent
	RedirectSend uint32 `protobuf:"varint,33,opt,name=redirect_send,json=redirectSend,proto3" json:"redirect_send,omitempty"`
	// ICMP Timestamp Received
	TimestampReceived uint32 `protobuf:"varint,34,opt,name=timestamp_received,json=timestampReceived,proto3" json:"timestamp_received,omitempty"`
	// ICMP Timestamp Reply Received
	TimestampReplyReceived uint32 `protobuf:"varint,35,opt,name=timestamp_reply_received,json=timestampReplyReceived,proto3" json:"timestamp_reply_received,omitempty"`
	// ICMP Router Advertisement Received
	RouterAdvertReceived uint32 `protobuf:"varint,36,opt,name=router_advert_received,json=routerAdvertReceived,proto3" json:"router_advert_received,omitempty"`
	// ICMP Router Solicited Received
	RouterSolicitReceived uint32 `protobuf:"varint,37,opt,name=router_solicit_received,json=routerSolicitReceived,proto3" json:"router_solicit_received,omitempty"`
}

func (x *Ipv4IoIcmpTraffic) Reset() {
	*x = Ipv4IoIcmpTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4IoIcmpTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4IoIcmpTraffic) ProtoMessage() {}

func (x *Ipv4IoIcmpTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4IoIcmpTraffic.ProtoReflect.Descriptor instead.
func (*Ipv4IoIcmpTraffic) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv4IoIcmpTraffic) GetReceived() uint32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetChecksumError() uint32 {
	if x != nil {
		return x.ChecksumError
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetUnknown() uint32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetOutput() uint32 {
	if x != nil {
		return x.Output
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetAdminUnreachableSent() uint32 {
	if x != nil {
		return x.AdminUnreachableSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetNetworkUnreachableSent() uint32 {
	if x != nil {
		return x.NetworkUnreachableSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetHostUnreachableSent() uint32 {
	if x != nil {
		return x.HostUnreachableSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetProtocolUnreachableSent() uint32 {
	if x != nil {
		return x.ProtocolUnreachableSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetPortUnreachableSent() uint32 {
	if x != nil {
		return x.PortUnreachableSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetFragmentUnreachableSent() uint32 {
	if x != nil {
		return x.FragmentUnreachableSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetAdminUnreachableReceived() uint32 {
	if x != nil {
		return x.AdminUnreachableReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetNetworkUnreachableReceived() uint32 {
	if x != nil {
		return x.NetworkUnreachableReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetHostUnreachableReceived() uint32 {
	if x != nil {
		return x.HostUnreachableReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetProtocolUnreachableReceived() uint32 {
	if x != nil {
		return x.ProtocolUnreachableReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetPortUnreachableReceived() uint32 {
	if x != nil {
		return x.PortUnreachableReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetFragmentUnreachableReceived() uint32 {
	if x != nil {
		return x.FragmentUnreachableReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetHopcountSent() uint32 {
	if x != nil {
		return x.HopcountSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetReassemblySent() uint32 {
	if x != nil {
		return x.ReassemblySent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetHopcountReceived() uint32 {
	if x != nil {
		return x.HopcountReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetReasseblyReceived() uint32 {
	if x != nil {
		return x.ReasseblyReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetParamErrorReceived() uint32 {
	if x != nil {
		return x.ParamErrorReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetParamErrorSend() uint32 {
	if x != nil {
		return x.ParamErrorSend
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetEchoRequestSent() uint32 {
	if x != nil {
		return x.EchoRequestSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetEchoRequestReceived() uint32 {
	if x != nil {
		return x.EchoRequestReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetEchoReplySent() uint32 {
	if x != nil {
		return x.EchoReplySent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetEchoReplyReceived() uint32 {
	if x != nil {
		return x.EchoReplyReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetMaskRequestSent() uint32 {
	if x != nil {
		return x.MaskRequestSent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetMaskRequestReceived() uint32 {
	if x != nil {
		return x.MaskRequestReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetMaskReplySent() uint32 {
	if x != nil {
		return x.MaskReplySent
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetMaskReplyReceived() uint32 {
	if x != nil {
		return x.MaskReplyReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetSourceQuenchReceived() uint32 {
	if x != nil {
		return x.SourceQuenchReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetRedirectReceived() uint32 {
	if x != nil {
		return x.RedirectReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetRedirectSend() uint32 {
	if x != nil {
		return x.RedirectSend
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetTimestampReceived() uint32 {
	if x != nil {
		return x.TimestampReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetTimestampReplyReceived() uint32 {
	if x != nil {
		return x.TimestampReplyReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetRouterAdvertReceived() uint32 {
	if x != nil {
		return x.RouterAdvertReceived
	}
	return 0
}

func (x *Ipv4IoIcmpTraffic) GetRouterSolicitReceived() uint32 {
	if x != nil {
		return x.RouterSolicitReceived
	}
	return 0
}

var File_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDesc = []byte{
	0x0a, 0x55, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2f, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x44, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0x2e, 0x0a,
	0x0f, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfd, 0x01,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x74, 0x0a, 0x0a,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x79, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb6, 0x0e,
	0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x64, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62,
	0x61, 0x64, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61,
	0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x6f,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x44,
	0x72, 0x6f, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x61,
	0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x15, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x69, 0x70, 0x73, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x69, 0x70, 0x73, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x19, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x64, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x69,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6f, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x6f, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x62, 0x69, 0x67, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x42,
	0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x76, 0x34, 0x5f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x70, 0x56,
	0x34, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x76,
	0x34, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x69, 0x73, 0x70, 0x56, 0x34, 0x44, 0x65, 0x63, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x69,
	0x73, 0x70, 0x5f, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x70, 0x56, 0x36, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x76, 0x36, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x70, 0x56, 0x36, 0x44, 0x65, 0x63,
	0x61, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69,
	0x73, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x70, 0x44, 0x65, 0x63, 0x61,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb0, 0x0e, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x69, 0x6f, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x42, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x42, 0x0a, 0x1d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x6f, 0x70,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x6f, 0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68,
	0x6f, 0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x62, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x61,
	0x73, 0x73, 0x65, 0x62, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x63,
	0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x63,
	0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescData = file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_goTypes = []interface{}{
	(*IpTraffic_KEYS)(nil),    // 0: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ip_traffic_KEYS
	(*IpTraffic)(nil),         // 1: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ip_traffic
	(*Ipv4IoTraffic)(nil),     // 2: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ipv4_io_traffic
	(*Ipv4IoIcmpTraffic)(nil), // 3: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ipv4_io_icmp_traffic
}
var file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ip_traffic.ipv4_stats:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ipv4_io_traffic
	3, // 1: cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ip_traffic.icmp_stats:type_name -> cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic.ipv4_io_icmp_traffic
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_init()
}
func file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_init() {
	if File_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTraffic_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4IoTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4IoIcmpTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto = out.File
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_io_oper_ipv4_network_nodes_node_statistics_traffic_ip_traffic_proto_depIdxs = nil
}
