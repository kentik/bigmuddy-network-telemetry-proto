// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ip_rib_ipv4_oper/rib_stdby/rib_table_ids/rib_table_id/summary_protos/summary_proto/rib_edm_proto_route_summ_detail.proto

package cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Details of Protocol route types
type RibEdmProtoRouteSummDetail_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tableid uint32 `protobuf:"varint,1,opt,name=tableid,proto3" json:"tableid,omitempty"`
	Protoid uint32 `protobuf:"varint,2,opt,name=protoid,proto3" json:"protoid,omitempty"`
}

func (x *RibEdmProtoRouteSummDetail_KEYS) Reset() {
	*x = RibEdmProtoRouteSummDetail_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmProtoRouteSummDetail_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmProtoRouteSummDetail_KEYS) ProtoMessage() {}

func (x *RibEdmProtoRouteSummDetail_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmProtoRouteSummDetail_KEYS.ProtoReflect.Descriptor instead.
func (*RibEdmProtoRouteSummDetail_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescGZIP(), []int{0}
}

func (x *RibEdmProtoRouteSummDetail_KEYS) GetTableid() uint32 {
	if x != nil {
		return x.Tableid
	}
	return 0
}

func (x *RibEdmProtoRouteSummDetail_KEYS) GetProtoid() uint32 {
	if x != nil {
		return x.Protoid
	}
	return 0
}

type RibEdmProtoRouteSummDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proto name
	Name string `protobuf:"bytes,50,opt,name=name,proto3" json:"name,omitempty"`
	// Instance
	Instance string `protobuf:"bytes,51,opt,name=instance,proto3" json:"instance,omitempty"`
	// Count for proto. instance
	ProtoRouteCount *RibEdmRouteCount `protobuf:"bytes,52,opt,name=proto_route_count,json=protoRouteCount,proto3" json:"proto_route_count,omitempty"`
	// No route type
	RtypeNone *RibEdmRouteCount `protobuf:"bytes,53,opt,name=rtype_none,json=rtypeNone,proto3" json:"rtype_none,omitempty"`
	// Unknown route type
	RtypeOther *RibEdmRouteCount `protobuf:"bytes,54,opt,name=rtype_other,json=rtypeOther,proto3" json:"rtype_other,omitempty"`
	// OSPF route within an area
	RtypeOspfIntra *RibEdmRouteCount `protobuf:"bytes,55,opt,name=rtype_ospf_intra,json=rtypeOspfIntra,proto3" json:"rtype_ospf_intra,omitempty"`
	// OSPF route across diff. areas
	RtypeOspfInter *RibEdmRouteCount `protobuf:"bytes,56,opt,name=rtype_ospf_inter,json=rtypeOspfInter,proto3" json:"rtype_ospf_inter,omitempty"`
	// OSPF external route of type 1
	RtypeOspfExtern1 *RibEdmRouteCount `protobuf:"bytes,57,opt,name=rtype_ospf_extern1,json=rtypeOspfExtern1,proto3" json:"rtype_ospf_extern1,omitempty"`
	// OSPF external route of type 2
	RtypeOspfExtern2 *RibEdmRouteCount `protobuf:"bytes,58,opt,name=rtype_ospf_extern2,json=rtypeOspfExtern2,proto3" json:"rtype_ospf_extern2,omitempty"`
	// IS-IS summary route
	RtypeIsisSum *RibEdmRouteCount `protobuf:"bytes,59,opt,name=rtype_isis_sum,json=rtypeIsisSum,proto3" json:"rtype_isis_sum,omitempty"`
	// IS-IS level 1 route
	RtypeIsisL1 *RibEdmRouteCount `protobuf:"bytes,60,opt,name=rtype_isis_l1,json=rtypeIsisL1,proto3" json:"rtype_isis_l1,omitempty"`
	// IS-IS level 2 route
	RtypeIsisL2 *RibEdmRouteCount `protobuf:"bytes,61,opt,name=rtype_isis_l2,json=rtypeIsisL2,proto3" json:"rtype_isis_l2,omitempty"`
	// IS-IS level1 inter-area route
	RtypeIsisL1Ia *RibEdmRouteCount `protobuf:"bytes,62,opt,name=rtype_isis_l1_ia,json=rtypeIsisL1Ia,proto3" json:"rtype_isis_l1_ia,omitempty"`
	// iBGP route
	RtypeBgpInt *RibEdmRouteCount `protobuf:"bytes,63,opt,name=rtype_bgp_int,json=rtypeBgpInt,proto3" json:"rtype_bgp_int,omitempty"`
	// eBGP route
	RtypeBgpExt *RibEdmRouteCount `protobuf:"bytes,64,opt,name=rtype_bgp_ext,json=rtypeBgpExt,proto3" json:"rtype_bgp_ext,omitempty"`
	// BGP local route
	RtypeBgpLoc *RibEdmRouteCount `protobuf:"bytes,65,opt,name=rtype_bgp_loc,json=rtypeBgpLoc,proto3" json:"rtype_bgp_loc,omitempty"`
	// OSPF NSSA ext. route type 1
	RtypeOspfNssa1 *RibEdmRouteCount `protobuf:"bytes,66,opt,name=rtype_ospf_nssa1,json=rtypeOspfNssa1,proto3" json:"rtype_ospf_nssa1,omitempty"`
	// OSPF NSSA ext. route type 2
	RtypeOspfNssa2 *RibEdmRouteCount `protobuf:"bytes,67,opt,name=rtype_ospf_nssa2,json=rtypeOspfNssa2,proto3" json:"rtype_ospf_nssa2,omitempty"`
	// EIGRP internal route
	RtypeIgrp2Int *RibEdmRouteCount `protobuf:"bytes,68,opt,name=rtype_igrp2_int,json=rtypeIgrp2Int,proto3" json:"rtype_igrp2_int,omitempty"`
	// EIGRP external route
	RtypeIgrp2Ext *RibEdmRouteCount `protobuf:"bytes,69,opt,name=rtype_igrp2_ext,json=rtypeIgrp2Ext,proto3" json:"rtype_igrp2_ext,omitempty"`
}

func (x *RibEdmProtoRouteSummDetail) Reset() {
	*x = RibEdmProtoRouteSummDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmProtoRouteSummDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmProtoRouteSummDetail) ProtoMessage() {}

func (x *RibEdmProtoRouteSummDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmProtoRouteSummDetail.ProtoReflect.Descriptor instead.
func (*RibEdmProtoRouteSummDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescGZIP(), []int{1}
}

func (x *RibEdmProtoRouteSummDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RibEdmProtoRouteSummDetail) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *RibEdmProtoRouteSummDetail) GetProtoRouteCount() *RibEdmRouteCount {
	if x != nil {
		return x.ProtoRouteCount
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeNone() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeNone
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeOther() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeOther
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeOspfIntra() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeOspfIntra
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeOspfInter() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeOspfInter
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeOspfExtern1() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeOspfExtern1
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeOspfExtern2() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeOspfExtern2
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeIsisSum() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeIsisSum
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeIsisL1() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeIsisL1
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeIsisL2() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeIsisL2
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeIsisL1Ia() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeIsisL1Ia
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeBgpInt() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeBgpInt
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeBgpExt() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeBgpExt
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeBgpLoc() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeBgpLoc
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeOspfNssa1() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeOspfNssa1
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeOspfNssa2() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeOspfNssa2
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeIgrp2Int() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeIgrp2Int
	}
	return nil
}

func (x *RibEdmProtoRouteSummDetail) GetRtypeIgrp2Ext() *RibEdmRouteCount {
	if x != nil {
		return x.RtypeIgrp2Ext
	}
	return nil
}

// Specifics of route count
type RibEdmRouteCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of active routes
	ActiveRoutesCount uint32 `protobuf:"varint,1,opt,name=active_routes_count,json=activeRoutesCount,proto3" json:"active_routes_count,omitempty"`
	// Number of backup (inactive) routes
	NumBackupRoutes uint32 `protobuf:"varint,2,opt,name=num_backup_routes,json=numBackupRoutes,proto3" json:"num_backup_routes,omitempty"`
	// Number of paths to active routes
	NumActivePaths uint32 `protobuf:"varint,3,opt,name=num_active_paths,json=numActivePaths,proto3" json:"num_active_paths,omitempty"`
	// Number of paths to backup routes
	NumBackupPaths uint32 `protobuf:"varint,4,opt,name=num_backup_paths,json=numBackupPaths,proto3" json:"num_backup_paths,omitempty"`
}

func (x *RibEdmRouteCount) Reset() {
	*x = RibEdmRouteCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibEdmRouteCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibEdmRouteCount) ProtoMessage() {}

func (x *RibEdmRouteCount) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibEdmRouteCount.ProtoReflect.Descriptor instead.
func (*RibEdmRouteCount) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescGZIP(), []int{2}
}

func (x *RibEdmRouteCount) GetActiveRoutesCount() uint32 {
	if x != nil {
		return x.ActiveRoutesCount
	}
	return 0
}

func (x *RibEdmRouteCount) GetNumBackupRoutes() uint32 {
	if x != nil {
		return x.NumBackupRoutes
	}
	return 0
}

func (x *RibEdmRouteCount) GetNumActivePaths() uint32 {
	if x != nil {
		return x.NumActivePaths
	}
	return 0
}

func (x *RibEdmRouteCount) GetNumBackupPaths() uint32 {
	if x != nil {
		return x.NumBackupPaths
	}
	return 0
}

var File_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDesc = []byte{
	0x0a, 0x85, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2f, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2f, 0x72, 0x69, 0x62, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2f, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62,
	0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x24, 0x72, 0x69, 0x62,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x4b, 0x45, 0x59,
	0x53, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x69, 0x64, 0x22, 0xf2, 0x16, 0x0a, 0x1f, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69,
	0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x93, 0x01, 0x0a,
	0x0a, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f,
	0x6e, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0b, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64,
	0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65,
	0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69,
	0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x12, 0x9e, 0x01, 0x0a, 0x10,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79,
	0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x12, 0xa2, 0x01, 0x0a,
	0x12, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x31, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74,
	0x64, 0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x10, 0x72, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x31, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x32, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x72, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x32, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x74, 0x79, 0x70, 0x65, 0x49, 0x73, 0x69, 0x73,
	0x53, 0x75, 0x6d, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6c, 0x31, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f,
	0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69,
	0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0b, 0x72, 0x74, 0x79, 0x70, 0x65, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x31, 0x12, 0x98,
	0x01, 0x0a, 0x0d, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x32,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79,
	0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x32, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x31, 0x5f, 0x69, 0x61, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69, 0x62,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x31, 0x49, 0x61, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x74, 0x79, 0x70, 0x65, 0x42, 0x67,
	0x70, 0x49, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62,
	0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0b, 0x72, 0x74, 0x79, 0x70, 0x65, 0x42, 0x67, 0x70, 0x45, 0x78, 0x74, 0x12,
	0x98, 0x01, 0x0a, 0x0d, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x6f,
	0x63, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62,
	0x79, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x67, 0x70, 0x4c, 0x6f, 0x63, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x31, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69,
	0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x4e, 0x73, 0x73, 0x61, 0x31, 0x12, 0x9e, 0x01, 0x0a, 0x10,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x32,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79,
	0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x73, 0x70, 0x66, 0x4e, 0x73, 0x73, 0x61, 0x32, 0x12, 0x9c, 0x01, 0x0a,
	0x0f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x67, 0x72, 0x70, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79,
	0x2e, 0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72,
	0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x67, 0x72, 0x70, 0x32, 0x49, 0x6e, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0f,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x67, 0x72, 0x70, 0x32, 0x5f, 0x65, 0x78, 0x74, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x64, 0x62, 0x79, 0x2e,
	0x72, 0x69, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x2e, 0x72, 0x69,
	0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x67, 0x72, 0x70, 0x32, 0x45, 0x78, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x72,
	0x69, 0x62, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescData = file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDesc
)

func file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescData)
	})
	return file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDescData
}

var file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_goTypes = []interface{}{
	(*RibEdmProtoRouteSummDetail_KEYS)(nil), // 0: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail_KEYS
	(*RibEdmProtoRouteSummDetail)(nil),      // 1: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail
	(*RibEdmRouteCount)(nil),                // 2: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
}
var file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_depIdxs = []int32{
	2,  // 0: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.proto_route_count:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 1: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_none:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 2: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_other:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 3: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_ospf_intra:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 4: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_ospf_inter:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 5: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_ospf_extern1:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 6: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_ospf_extern2:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 7: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_isis_sum:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 8: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_isis_l1:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 9: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_isis_l2:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 10: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_isis_l1_ia:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 11: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_bgp_int:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 12: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_bgp_ext:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 13: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_bgp_loc:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 14: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_ospf_nssa1:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 15: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_ospf_nssa2:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 16: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_igrp2_int:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	2,  // 17: cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_proto_route_summ_detail.rtype_igrp2_ext:type_name -> cisco_ios_xr_ip_rib_ipv4_oper.rib_stdby.rib_table_ids.rib_table_id.summary_protos.summary_proto.rib_edm_route_count
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_init()
}
func file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_init() {
	if File_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmProtoRouteSummDetail_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmProtoRouteSummDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibEdmRouteCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto = out.File
	file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_rawDesc = nil
	file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_goTypes = nil
	file_cisco_ios_xr_ip_rib_ipv4_oper_rib_stdby_rib_table_ids_rib_table_id_summary_protos_summary_proto_rib_edm_proto_route_summ_detail_proto_depIdxs = nil
}
