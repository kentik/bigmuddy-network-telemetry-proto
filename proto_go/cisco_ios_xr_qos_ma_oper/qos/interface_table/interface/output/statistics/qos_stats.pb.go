// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_qos_ma_oper/qos/interface_table/interface/output/statistics/qos_stats.proto

package cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// policy map statistics
type QosStats_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *QosStats_KEYS) Reset() {
	*x = QosStats_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosStats_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosStats_KEYS) ProtoMessage() {}

func (x *QosStats_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosStats_KEYS.ProtoReflect.Descriptor instead.
func (*QosStats_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{0}
}

func (x *QosStats_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type QosStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName       string `protobuf:"bytes,50,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	State            string `protobuf:"bytes,51,opt,name=state,proto3" json:"state,omitempty"`
	StateDescription string `protobuf:"bytes,52,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
	// array of classes contained in policy
	ClassStats []*ClassStats `protobuf:"bytes,53,rep,name=class_stats,json=classStats,proto3" json:"class_stats,omitempty"`
	// to maintain satellite id
	Satid uint32 `protobuf:"varint,54,opt,name=satid,proto3" json:"satid,omitempty"`
}

func (x *QosStats) Reset() {
	*x = QosStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosStats) ProtoMessage() {}

func (x *QosStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosStats.ProtoReflect.Descriptor instead.
func (*QosStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{1}
}

func (x *QosStats) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *QosStats) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *QosStats) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

func (x *QosStats) GetClassStats() []*ClassStats {
	if x != nil {
		return x.ClassStats
	}
	return nil
}

func (x *QosStats) GetSatid() uint32 {
	if x != nil {
		return x.Satid
	}
	return 0
}

type PolicyParamUint32St_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *PolicyParamUint32St_) Reset() {
	*x = PolicyParamUint32St_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyParamUint32St_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyParamUint32St_) ProtoMessage() {}

func (x *PolicyParamUint32St_) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyParamUint32St_.ProtoReflect.Descriptor instead.
func (*PolicyParamUint32St_) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyParamUint32St_) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PolicyParamUint32St_) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// Counters common to all features
type GenStatsSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transmitted packets (packets/bytes)
	TransmitPackets uint64 `protobuf:"varint,1,opt,name=transmit_packets,json=transmitPackets,proto3" json:"transmit_packets,omitempty"`
	// Transmitted bytes (packets/bytes)
	TransmitBytes uint64 `protobuf:"varint,2,opt,name=transmit_bytes,json=transmitBytes,proto3" json:"transmit_bytes,omitempty"`
	// Dropped packets (packets/bytes)
	TotalDropPackets uint64 `protobuf:"varint,3,opt,name=total_drop_packets,json=totalDropPackets,proto3" json:"total_drop_packets,omitempty"`
	// Dropped bytes (packets/bytes)
	TotalDropBytes uint64 `protobuf:"varint,4,opt,name=total_drop_bytes,json=totalDropBytes,proto3" json:"total_drop_bytes,omitempty"`
	// Total drop rate (packets/bytes)
	TotalDropRate uint32 `protobuf:"varint,5,opt,name=total_drop_rate,json=totalDropRate,proto3" json:"total_drop_rate,omitempty"`
	// Incoming matched data rate in kbps
	MatchDataRate uint32 `protobuf:"varint,6,opt,name=match_data_rate,json=matchDataRate,proto3" json:"match_data_rate,omitempty"`
	// Total transmit rate in kbps
	TotalTransmitRate uint32 `protobuf:"varint,7,opt,name=total_transmit_rate,json=totalTransmitRate,proto3" json:"total_transmit_rate,omitempty"`
	// Matched pkts before applying policy
	PrePolicyMatchedPackets uint64 `protobuf:"varint,8,opt,name=pre_policy_matched_packets,json=prePolicyMatchedPackets,proto3" json:"pre_policy_matched_packets,omitempty"`
	// Matched bytes before applying policy
	PrePolicyMatchedBytes uint64 `protobuf:"varint,9,opt,name=pre_policy_matched_bytes,json=prePolicyMatchedBytes,proto3" json:"pre_policy_matched_bytes,omitempty"`
}

func (x *GenStatsSt) Reset() {
	*x = GenStatsSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenStatsSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenStatsSt) ProtoMessage() {}

func (x *GenStatsSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenStatsSt.ProtoReflect.Descriptor instead.
func (*GenStatsSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{3}
}

func (x *GenStatsSt) GetTransmitPackets() uint64 {
	if x != nil {
		return x.TransmitPackets
	}
	return 0
}

func (x *GenStatsSt) GetTransmitBytes() uint64 {
	if x != nil {
		return x.TransmitBytes
	}
	return 0
}

func (x *GenStatsSt) GetTotalDropPackets() uint64 {
	if x != nil {
		return x.TotalDropPackets
	}
	return 0
}

func (x *GenStatsSt) GetTotalDropBytes() uint64 {
	if x != nil {
		return x.TotalDropBytes
	}
	return 0
}

func (x *GenStatsSt) GetTotalDropRate() uint32 {
	if x != nil {
		return x.TotalDropRate
	}
	return 0
}

func (x *GenStatsSt) GetMatchDataRate() uint32 {
	if x != nil {
		return x.MatchDataRate
	}
	return 0
}

func (x *GenStatsSt) GetTotalTransmitRate() uint32 {
	if x != nil {
		return x.TotalTransmitRate
	}
	return 0
}

func (x *GenStatsSt) GetPrePolicyMatchedPackets() uint64 {
	if x != nil {
		return x.PrePolicyMatchedPackets
	}
	return 0
}

func (x *GenStatsSt) GetPrePolicyMatchedBytes() uint64 {
	if x != nil {
		return x.PrePolicyMatchedBytes
	}
	return 0
}

// Color Aware Policer statistics
type PlcColorClassStatsSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Packets with classification result conform and policer result conform
	ConformClassConformPackets uint64 `protobuf:"varint,1,opt,name=conform_class_conform_packets,json=conformClassConformPackets,proto3" json:"conform_class_conform_packets,omitempty"`
	// Bytes with classification result conform and policer result conform
	ConformClassConformBytes uint64 `protobuf:"varint,2,opt,name=conform_class_conform_bytes,json=conformClassConformBytes,proto3" json:"conform_class_conform_bytes,omitempty"`
	// Conform Class Conform rate in kbps
	ConformClassConformRate uint32 `protobuf:"varint,3,opt,name=conform_class_conform_rate,json=conformClassConformRate,proto3" json:"conform_class_conform_rate,omitempty"`
	// Packets with classification result conform and policer result exceed
	ConformClassExceedPackets uint64 `protobuf:"varint,4,opt,name=conform_class_exceed_packets,json=conformClassExceedPackets,proto3" json:"conform_class_exceed_packets,omitempty"`
	// Bytes with classification result conform and policer result exceed
	ConformClassExceedBytes uint64 `protobuf:"varint,5,opt,name=conform_class_exceed_bytes,json=conformClassExceedBytes,proto3" json:"conform_class_exceed_bytes,omitempty"`
	// Conform Class Exceed rate in kbps
	ConformClassExceedRate uint32 `protobuf:"varint,6,opt,name=conform_class_exceed_rate,json=conformClassExceedRate,proto3" json:"conform_class_exceed_rate,omitempty"`
	// Packets with classification result conform and policer result violate
	ConformClassViolatePackets uint64 `protobuf:"varint,7,opt,name=conform_class_violate_packets,json=conformClassViolatePackets,proto3" json:"conform_class_violate_packets,omitempty"`
	// Bytes with classification result conform and policer result violate
	ConformClassViolateBytes uint64 `protobuf:"varint,8,opt,name=conform_class_violate_bytes,json=conformClassViolateBytes,proto3" json:"conform_class_violate_bytes,omitempty"`
	// Conform Class Violate rate in kbps
	ConformClassViolateRate uint32 `protobuf:"varint,9,opt,name=conform_class_violate_rate,json=conformClassViolateRate,proto3" json:"conform_class_violate_rate,omitempty"`
	// Packets with classification result exceed and policer result exceed
	ExceedClassExceedPackets uint64 `protobuf:"varint,10,opt,name=exceed_class_exceed_packets,json=exceedClassExceedPackets,proto3" json:"exceed_class_exceed_packets,omitempty"`
	// Bytes with classification result exceed and policer result exceed
	ExceedClassExceedBytes uint64 `protobuf:"varint,11,opt,name=exceed_class_exceed_bytes,json=exceedClassExceedBytes,proto3" json:"exceed_class_exceed_bytes,omitempty"`
	// Exceed Class Exceed rate in kbps
	ExceedClassExceedRate uint32 `protobuf:"varint,12,opt,name=exceed_class_exceed_rate,json=exceedClassExceedRate,proto3" json:"exceed_class_exceed_rate,omitempty"`
	// Packets with classification result exceed and policer result violate
	ExceedClassViolatePackets uint64 `protobuf:"varint,13,opt,name=exceed_class_violate_packets,json=exceedClassViolatePackets,proto3" json:"exceed_class_violate_packets,omitempty"`
	// Bytes with classification result exceed and policer result violate
	ExceedClassViolateBytes uint64 `protobuf:"varint,14,opt,name=exceed_class_violate_bytes,json=exceedClassViolateBytes,proto3" json:"exceed_class_violate_bytes,omitempty"`
	// Exceed Class Violate rate in kbps
	ExceedClassViolateRate uint32 `protobuf:"varint,15,opt,name=exceed_class_violate_rate,json=exceedClassViolateRate,proto3" json:"exceed_class_violate_rate,omitempty"`
	// Packets with classification result violate and policer result violate
	ViolateClassViolatePackets uint64 `protobuf:"varint,16,opt,name=violate_class_violate_packets,json=violateClassViolatePackets,proto3" json:"violate_class_violate_packets,omitempty"`
	// Bytes with classification result violate and policer result violate
	ViolateClassViolateBytes uint64 `protobuf:"varint,17,opt,name=violate_class_violate_bytes,json=violateClassViolateBytes,proto3" json:"violate_class_violate_bytes,omitempty"`
	// Violate Class Violate rate in kbps
	ViolateClassViolateRate uint32 `protobuf:"varint,18,opt,name=violate_class_violate_rate,json=violateClassViolateRate,proto3" json:"violate_class_violate_rate,omitempty"`
}

func (x *PlcColorClassStatsSt) Reset() {
	*x = PlcColorClassStatsSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlcColorClassStatsSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlcColorClassStatsSt) ProtoMessage() {}

func (x *PlcColorClassStatsSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlcColorClassStatsSt.ProtoReflect.Descriptor instead.
func (*PlcColorClassStatsSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{4}
}

func (x *PlcColorClassStatsSt) GetConformClassConformPackets() uint64 {
	if x != nil {
		return x.ConformClassConformPackets
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassConformBytes() uint64 {
	if x != nil {
		return x.ConformClassConformBytes
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassConformRate() uint32 {
	if x != nil {
		return x.ConformClassConformRate
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassExceedPackets() uint64 {
	if x != nil {
		return x.ConformClassExceedPackets
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassExceedBytes() uint64 {
	if x != nil {
		return x.ConformClassExceedBytes
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassExceedRate() uint32 {
	if x != nil {
		return x.ConformClassExceedRate
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassViolatePackets() uint64 {
	if x != nil {
		return x.ConformClassViolatePackets
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassViolateBytes() uint64 {
	if x != nil {
		return x.ConformClassViolateBytes
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetConformClassViolateRate() uint32 {
	if x != nil {
		return x.ConformClassViolateRate
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetExceedClassExceedPackets() uint64 {
	if x != nil {
		return x.ExceedClassExceedPackets
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetExceedClassExceedBytes() uint64 {
	if x != nil {
		return x.ExceedClassExceedBytes
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetExceedClassExceedRate() uint32 {
	if x != nil {
		return x.ExceedClassExceedRate
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetExceedClassViolatePackets() uint64 {
	if x != nil {
		return x.ExceedClassViolatePackets
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetExceedClassViolateBytes() uint64 {
	if x != nil {
		return x.ExceedClassViolateBytes
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetExceedClassViolateRate() uint32 {
	if x != nil {
		return x.ExceedClassViolateRate
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetViolateClassViolatePackets() uint64 {
	if x != nil {
		return x.ViolateClassViolatePackets
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetViolateClassViolateBytes() uint64 {
	if x != nil {
		return x.ViolateClassViolateBytes
	}
	return 0
}

func (x *PlcColorClassStatsSt) GetViolateClassViolateRate() uint32 {
	if x != nil {
		return x.ViolateClassViolateRate
	}
	return 0
}

// Policer statistics
type PlcStatsSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Police dropped packets
	DropPackets uint64 `protobuf:"varint,1,opt,name=drop_packets,json=dropPackets,proto3" json:"drop_packets,omitempty"`
	// Police dropped bytes
	DropBytes uint64 `protobuf:"varint,2,opt,name=drop_bytes,json=dropBytes,proto3" json:"drop_bytes,omitempty"`
	// Packets that conform  to the policed rate
	ConformPackets uint64 `protobuf:"varint,3,opt,name=conform_packets,json=conformPackets,proto3" json:"conform_packets,omitempty"`
	// Bytes that conform to the policed rate
	ConformBytes uint64 `protobuf:"varint,4,opt,name=conform_bytes,json=conformBytes,proto3" json:"conform_bytes,omitempty"`
	// Packets that exceed the policed rate
	ExceedPackets uint64 `protobuf:"varint,5,opt,name=exceed_packets,json=exceedPackets,proto3" json:"exceed_packets,omitempty"`
	// Bytes that exceed  the policed rate
	ExceedBytes uint64 `protobuf:"varint,6,opt,name=exceed_bytes,json=exceedBytes,proto3" json:"exceed_bytes,omitempty"`
	// Packets violating the policed rate
	ViolatePackets uint64 `protobuf:"varint,7,opt,name=violate_packets,json=violatePackets,proto3" json:"violate_packets,omitempty"`
	// Bytes that violate the policed rate
	ViolateBytes uint64 `protobuf:"varint,8,opt,name=violate_bytes,json=violateBytes,proto3" json:"violate_bytes,omitempty"`
	// Dropped pkts by the parent policer
	ParentDropPackets uint64 `protobuf:"varint,9,opt,name=parent_drop_packets,json=parentDropPackets,proto3" json:"parent_drop_packets,omitempty"`
	// Dropped bytes by the parent policer
	ParentDropBytes uint64 `protobuf:"varint,10,opt,name=parent_drop_bytes,json=parentDropBytes,proto3" json:"parent_drop_bytes,omitempty"`
	// Conform rate in kbps
	ConformRate uint32 `protobuf:"varint,11,opt,name=conform_rate,json=conformRate,proto3" json:"conform_rate,omitempty"`
	// Exceed rate in kbps
	ExceedRate uint32 `protobuf:"varint,12,opt,name=exceed_rate,json=exceedRate,proto3" json:"exceed_rate,omitempty"`
	// Violate rate in kbps
	ViolateRate     uint32                `protobuf:"varint,13,opt,name=violate_rate,json=violateRate,proto3" json:"violate_rate,omitempty"`
	ColorClassStats *PlcColorClassStatsSt `protobuf:"bytes,14,opt,name=color_class_stats,json=colorClassStats,proto3" json:"color_class_stats,omitempty"`
}

func (x *PlcStatsSt) Reset() {
	*x = PlcStatsSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlcStatsSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlcStatsSt) ProtoMessage() {}

func (x *PlcStatsSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlcStatsSt.ProtoReflect.Descriptor instead.
func (*PlcStatsSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{5}
}

func (x *PlcStatsSt) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *PlcStatsSt) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *PlcStatsSt) GetConformPackets() uint64 {
	if x != nil {
		return x.ConformPackets
	}
	return 0
}

func (x *PlcStatsSt) GetConformBytes() uint64 {
	if x != nil {
		return x.ConformBytes
	}
	return 0
}

func (x *PlcStatsSt) GetExceedPackets() uint64 {
	if x != nil {
		return x.ExceedPackets
	}
	return 0
}

func (x *PlcStatsSt) GetExceedBytes() uint64 {
	if x != nil {
		return x.ExceedBytes
	}
	return 0
}

func (x *PlcStatsSt) GetViolatePackets() uint64 {
	if x != nil {
		return x.ViolatePackets
	}
	return 0
}

func (x *PlcStatsSt) GetViolateBytes() uint64 {
	if x != nil {
		return x.ViolateBytes
	}
	return 0
}

func (x *PlcStatsSt) GetParentDropPackets() uint64 {
	if x != nil {
		return x.ParentDropPackets
	}
	return 0
}

func (x *PlcStatsSt) GetParentDropBytes() uint64 {
	if x != nil {
		return x.ParentDropBytes
	}
	return 0
}

func (x *PlcStatsSt) GetConformRate() uint32 {
	if x != nil {
		return x.ConformRate
	}
	return 0
}

func (x *PlcStatsSt) GetExceedRate() uint32 {
	if x != nil {
		return x.ExceedRate
	}
	return 0
}

func (x *PlcStatsSt) GetViolateRate() uint32 {
	if x != nil {
		return x.ViolateRate
	}
	return 0
}

func (x *PlcStatsSt) GetColorClassStats() *PlcColorClassStatsSt {
	if x != nil {
		return x.ColorClassStats
	}
	return nil
}

// CAC statistics
type CacStatsSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CAC dropped packets
	DropPackets uint64 `protobuf:"varint,1,opt,name=drop_packets,json=dropPackets,proto3" json:"drop_packets,omitempty"`
	// CAC dropped bytes
	DropBytes uint64 `protobuf:"varint,2,opt,name=drop_bytes,json=dropBytes,proto3" json:"drop_bytes,omitempty"`
	// CAC dropped rate
	DropRates uint32 `protobuf:"varint,3,opt,name=drop_rates,json=dropRates,proto3" json:"drop_rates,omitempty"`
	// Admitted packets (pkts/bytes)
	Admitpackets uint64 `protobuf:"varint,4,opt,name=admitpackets,proto3" json:"admitpackets,omitempty"`
	// Admitted bytes (pkts/bytes)
	AdmitBytes uint64 `protobuf:"varint,5,opt,name=admit_bytes,json=admitBytes,proto3" json:"admit_bytes,omitempty"`
	// CAC admit rate
	AdmitRates uint32 `protobuf:"varint,6,opt,name=admit_rates,json=admitRates,proto3" json:"admit_rates,omitempty"`
}

func (x *CacStatsSt) Reset() {
	*x = CacStatsSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacStatsSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacStatsSt) ProtoMessage() {}

func (x *CacStatsSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacStatsSt.ProtoReflect.Descriptor instead.
func (*CacStatsSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{6}
}

func (x *CacStatsSt) GetDropPackets() uint64 {
	if x != nil {
		return x.DropPackets
	}
	return 0
}

func (x *CacStatsSt) GetDropBytes() uint64 {
	if x != nil {
		return x.DropBytes
	}
	return 0
}

func (x *CacStatsSt) GetDropRates() uint32 {
	if x != nil {
		return x.DropRates
	}
	return 0
}

func (x *CacStatsSt) GetAdmitpackets() uint64 {
	if x != nil {
		return x.Admitpackets
	}
	return 0
}

func (x *CacStatsSt) GetAdmitBytes() uint64 {
	if x != nil {
		return x.AdmitBytes
	}
	return 0
}

func (x *CacStatsSt) GetAdmitRates() uint32 {
	if x != nil {
		return x.AdmitRates
	}
	return 0
}

// IPHC Stats
type IphcStatsSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TotalNum of Non tcp pkts sent
	NonTcpTotalOutPackets uint64 `protobuf:"varint,1,opt,name=non_tcp_total_out_packets,json=nonTcpTotalOutPackets,proto3" json:"non_tcp_total_out_packets,omitempty"`
	// TotalNum of Non Tcp Bytes sent
	NonTcpTotalOutBytes uint64 `protobuf:"varint,2,opt,name=non_tcp_total_out_bytes,json=nonTcpTotalOutBytes,proto3" json:"non_tcp_total_out_bytes,omitempty"`
	// Non Tcp Bytes saved due to compression
	NonTcpBytesSaved uint64 `protobuf:"varint,3,opt,name=non_tcp_bytes_saved,json=nonTcpBytesSaved,proto3" json:"non_tcp_bytes_saved,omitempty"`
	// Num of non tcp compressed pkts sent
	NonTcpCompressedPacketsOut uint64 `protobuf:"varint,4,opt,name=non_tcp_compressed_packets_out,json=nonTcpCompressedPacketsOut,proto3" json:"non_tcp_compressed_packets_out,omitempty"`
	// Compressed Non Tcp Bytes sent rate
	NonTcpBytesSentRate uint32 `protobuf:"varint,5,opt,name=non_tcp_bytes_sent_rate,json=nonTcpBytesSentRate,proto3" json:"non_tcp_bytes_sent_rate,omitempty"`
	// Num of non tcp fullheader pkts sent
	NonTcpFullHeaderPacketsOut uint64 `protobuf:"varint,6,opt,name=non_tcp_full_header_packets_out,json=nonTcpFullHeaderPacketsOut,proto3" json:"non_tcp_full_header_packets_out,omitempty"`
	// Total Num of tcp pkts sent
	TcpTotalOutPackets uint64 `protobuf:"varint,7,opt,name=tcp_total_out_packets,json=tcpTotalOutPackets,proto3" json:"tcp_total_out_packets,omitempty"`
	// TotalNum of Tcp Bytes sent
	TcpTotalOutBytes uint64 `protobuf:"varint,8,opt,name=tcp_total_out_bytes,json=tcpTotalOutBytes,proto3" json:"tcp_total_out_bytes,omitempty"`
	// Tcp Bytes saved due to compression
	TcpBytesSaved uint64 `protobuf:"varint,9,opt,name=tcp_bytes_saved,json=tcpBytesSaved,proto3" json:"tcp_bytes_saved,omitempty"`
	// Num of tcp compressed pkts sent
	TcpCompressedPacketsOut uint64 `protobuf:"varint,10,opt,name=tcp_compressed_packets_out,json=tcpCompressedPacketsOut,proto3" json:"tcp_compressed_packets_out,omitempty"`
	// Compressed Tcp Bytes sent rate
	TcpBytesSentRate uint32 `protobuf:"varint,11,opt,name=tcp_bytes_sent_rate,json=tcpBytesSentRate,proto3" json:"tcp_bytes_sent_rate,omitempty"`
	// Num of tcp fullheader pkts sent
	TcpFullHeaderPacketsOut uint64 `protobuf:"varint,12,opt,name=tcp_full_header_packets_out,json=tcpFullHeaderPacketsOut,proto3" json:"tcp_full_header_packets_out,omitempty"`
}

func (x *IphcStatsSt) Reset() {
	*x = IphcStatsSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IphcStatsSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IphcStatsSt) ProtoMessage() {}

func (x *IphcStatsSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IphcStatsSt.ProtoReflect.Descriptor instead.
func (*IphcStatsSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{7}
}

func (x *IphcStatsSt) GetNonTcpTotalOutPackets() uint64 {
	if x != nil {
		return x.NonTcpTotalOutPackets
	}
	return 0
}

func (x *IphcStatsSt) GetNonTcpTotalOutBytes() uint64 {
	if x != nil {
		return x.NonTcpTotalOutBytes
	}
	return 0
}

func (x *IphcStatsSt) GetNonTcpBytesSaved() uint64 {
	if x != nil {
		return x.NonTcpBytesSaved
	}
	return 0
}

func (x *IphcStatsSt) GetNonTcpCompressedPacketsOut() uint64 {
	if x != nil {
		return x.NonTcpCompressedPacketsOut
	}
	return 0
}

func (x *IphcStatsSt) GetNonTcpBytesSentRate() uint32 {
	if x != nil {
		return x.NonTcpBytesSentRate
	}
	return 0
}

func (x *IphcStatsSt) GetNonTcpFullHeaderPacketsOut() uint64 {
	if x != nil {
		return x.NonTcpFullHeaderPacketsOut
	}
	return 0
}

func (x *IphcStatsSt) GetTcpTotalOutPackets() uint64 {
	if x != nil {
		return x.TcpTotalOutPackets
	}
	return 0
}

func (x *IphcStatsSt) GetTcpTotalOutBytes() uint64 {
	if x != nil {
		return x.TcpTotalOutBytes
	}
	return 0
}

func (x *IphcStatsSt) GetTcpBytesSaved() uint64 {
	if x != nil {
		return x.TcpBytesSaved
	}
	return 0
}

func (x *IphcStatsSt) GetTcpCompressedPacketsOut() uint64 {
	if x != nil {
		return x.TcpCompressedPacketsOut
	}
	return 0
}

func (x *IphcStatsSt) GetTcpBytesSentRate() uint32 {
	if x != nil {
		return x.TcpBytesSentRate
	}
	return 0
}

func (x *IphcStatsSt) GetTcpFullHeaderPacketsOut() uint64 {
	if x != nil {
		return x.TcpFullHeaderPacketsOut
	}
	return 0
}

// Queue limit statistics
type QStatsSt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queue Id used for Fabric Stats
	QueueId uint32 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	// Packets tail dropped
	TailDropPackets uint64 `protobuf:"varint,2,opt,name=tail_drop_packets,json=tailDropPackets,proto3" json:"tail_drop_packets,omitempty"`
	// Bytes tail dropped
	TailDropBytes uint64 `protobuf:"varint,3,opt,name=tail_drop_bytes,json=tailDropBytes,proto3" json:"tail_drop_bytes,omitempty"`
	// ATP CLP 0 matched packets dropped
	AtmClp0DropPackets uint64 `protobuf:"varint,4,opt,name=atm_clp0_drop_packets,json=atmClp0DropPackets,proto3" json:"atm_clp0_drop_packets,omitempty"`
	// ATP CLP 0 matched bytes dropped
	AtmClp0DropBytes uint64 `protobuf:"varint,5,opt,name=atm_clp0_drop_bytes,json=atmClp0DropBytes,proto3" json:"atm_clp0_drop_bytes,omitempty"`
	// ATP CLP 0 matched packets dropped
	AtmClp1DropPackets uint64 `protobuf:"varint,6,opt,name=atm_clp1_drop_packets,json=atmClp1DropPackets,proto3" json:"atm_clp1_drop_packets,omitempty"`
	// ATP CLP 0 matched bytes dropped
	AtmClp1DropBytes uint64 `protobuf:"varint,7,opt,name=atm_clp1_drop_bytes,json=atmClp1DropBytes,proto3" json:"atm_clp1_drop_bytes,omitempty"`
	// Queue instance length
	QueueInstanceLength []*PolicyParamUint32St_ `protobuf:"bytes,8,rep,name=queue_instance_length,json=queueInstanceLength,proto3" json:"queue_instance_length,omitempty"`
	// Queue average length
	QueueAverageLength []*PolicyParamUint32St_ `protobuf:"bytes,9,rep,name=queue_average_length,json=queueAverageLength,proto3" json:"queue_average_length,omitempty"`
	// Queue maximum length
	QueueMaxLength []*PolicyParamUint32St_ `protobuf:"bytes,10,rep,name=queue_max_length,json=queueMaxLength,proto3" json:"queue_max_length,omitempty"`
	// tail drop threshold of the queue in bytes
	QueueDropThreshold uint32 `protobuf:"varint,11,opt,name=queue_drop_threshold,json=queueDropThreshold,proto3" json:"queue_drop_threshold,omitempty"`
	// flag to forcedisplay of WRED even when per WredWRED profile stats is not available
	ForcedWredStatsDisplay bool `protobuf:"varint,12,opt,name=forced_wred_stats_display,json=forcedWredStatsDisplay,proto3" json:"forced_wred_stats_display,omitempty"`
	// Packets probabilistically dropped
	RandomDropPackets uint64 `protobuf:"varint,13,opt,name=random_drop_packets,json=randomDropPackets,proto3" json:"random_drop_packets,omitempty"`
	// Bytes probabilistically dropped
	RandomDropBytes uint64 `protobuf:"varint,14,opt,name=random_drop_bytes,json=randomDropBytes,proto3" json:"random_drop_bytes,omitempty"`
	// Dropped packets with the average queue size at the max-threshold
	MaxThresholdPackets uint64 `protobuf:"varint,15,opt,name=max_threshold_packets,json=maxThresholdPackets,proto3" json:"max_threshold_packets,omitempty"`
	// Dropped bytes with the average queue size at the max-threshold
	MaxThresholdBytes uint64 `protobuf:"varint,16,opt,name=max_threshold_bytes,json=maxThresholdBytes,proto3" json:"max_threshold_bytes,omitempty"`
	// Packets that conform  to the queue rate
	ConformPackets uint64 `protobuf:"varint,17,opt,name=conform_packets,json=conformPackets,proto3" json:"conform_packets,omitempty"`
	// Bytes that conform to the queue rate
	ConformBytes uint64 `protobuf:"varint,18,opt,name=conform_bytes,json=conformBytes,proto3" json:"conform_bytes,omitempty"`
	// Packets that exceed the queue rate
	ExceedPackets uint64 `protobuf:"varint,19,opt,name=exceed_packets,json=exceedPackets,proto3" json:"exceed_packets,omitempty"`
	// Bytes that exceed  the queue rate
	ExceedBytes uint64 `protobuf:"varint,20,opt,name=exceed_bytes,json=exceedBytes,proto3" json:"exceed_bytes,omitempty"`
	// Conform rate
	ConformRate uint32 `protobuf:"varint,21,opt,name=conform_rate,json=conformRate,proto3" json:"conform_rate,omitempty"`
	// Exceed rate
	ExceedRate uint32 `protobuf:"varint,22,opt,name=exceed_rate,json=exceedRate,proto3" json:"exceed_rate,omitempty"`
}

func (x *QStatsSt) Reset() {
	*x = QStatsSt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QStatsSt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QStatsSt) ProtoMessage() {}

func (x *QStatsSt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QStatsSt.ProtoReflect.Descriptor instead.
func (*QStatsSt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{8}
}

func (x *QStatsSt) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *QStatsSt) GetTailDropPackets() uint64 {
	if x != nil {
		return x.TailDropPackets
	}
	return 0
}

func (x *QStatsSt) GetTailDropBytes() uint64 {
	if x != nil {
		return x.TailDropBytes
	}
	return 0
}

func (x *QStatsSt) GetAtmClp0DropPackets() uint64 {
	if x != nil {
		return x.AtmClp0DropPackets
	}
	return 0
}

func (x *QStatsSt) GetAtmClp0DropBytes() uint64 {
	if x != nil {
		return x.AtmClp0DropBytes
	}
	return 0
}

func (x *QStatsSt) GetAtmClp1DropPackets() uint64 {
	if x != nil {
		return x.AtmClp1DropPackets
	}
	return 0
}

func (x *QStatsSt) GetAtmClp1DropBytes() uint64 {
	if x != nil {
		return x.AtmClp1DropBytes
	}
	return 0
}

func (x *QStatsSt) GetQueueInstanceLength() []*PolicyParamUint32St_ {
	if x != nil {
		return x.QueueInstanceLength
	}
	return nil
}

func (x *QStatsSt) GetQueueAverageLength() []*PolicyParamUint32St_ {
	if x != nil {
		return x.QueueAverageLength
	}
	return nil
}

func (x *QStatsSt) GetQueueMaxLength() []*PolicyParamUint32St_ {
	if x != nil {
		return x.QueueMaxLength
	}
	return nil
}

func (x *QStatsSt) GetQueueDropThreshold() uint32 {
	if x != nil {
		return x.QueueDropThreshold
	}
	return 0
}

func (x *QStatsSt) GetForcedWredStatsDisplay() bool {
	if x != nil {
		return x.ForcedWredStatsDisplay
	}
	return false
}

func (x *QStatsSt) GetRandomDropPackets() uint64 {
	if x != nil {
		return x.RandomDropPackets
	}
	return 0
}

func (x *QStatsSt) GetRandomDropBytes() uint64 {
	if x != nil {
		return x.RandomDropBytes
	}
	return 0
}

func (x *QStatsSt) GetMaxThresholdPackets() uint64 {
	if x != nil {
		return x.MaxThresholdPackets
	}
	return 0
}

func (x *QStatsSt) GetMaxThresholdBytes() uint64 {
	if x != nil {
		return x.MaxThresholdBytes
	}
	return 0
}

func (x *QStatsSt) GetConformPackets() uint64 {
	if x != nil {
		return x.ConformPackets
	}
	return 0
}

func (x *QStatsSt) GetConformBytes() uint64 {
	if x != nil {
		return x.ConformBytes
	}
	return 0
}

func (x *QStatsSt) GetExceedPackets() uint64 {
	if x != nil {
		return x.ExceedPackets
	}
	return 0
}

func (x *QStatsSt) GetExceedBytes() uint64 {
	if x != nil {
		return x.ExceedBytes
	}
	return 0
}

func (x *QStatsSt) GetConformRate() uint32 {
	if x != nil {
		return x.ConformRate
	}
	return 0
}

func (x *QStatsSt) GetExceedRate() uint32 {
	if x != nil {
		return x.ExceedRate
	}
	return 0
}

// WRED Type Value pairs
type WredTypeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WRED type DSCP, EXP, PREC etc.
	WredType string `protobuf:"bytes,1,opt,name=wred_type,json=wredType,proto3" json:"wred_type,omitempty"`
	// WRED value for this type.
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WredTypeValue) Reset() {
	*x = WredTypeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WredTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WredTypeValue) ProtoMessage() {}

func (x *WredTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WredTypeValue.ProtoReflect.Descriptor instead.
func (*WredTypeValue) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{9}
}

func (x *WredTypeValue) GetWredType() string {
	if x != nil {
		return x.WredType
	}
	return ""
}

func (x *WredTypeValue) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Per RED profile stats
type RedProfileStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileTitle string `protobuf:"bytes,1,opt,name=profile_title,json=profileTitle,proto3" json:"profile_title,omitempty"`
	// Array of WRED Typevalues as in PRP stats is available per threshold
	RedLabel []*WredTypeValue `protobuf:"bytes,2,rep,name=red_label,json=redLabel,proto3" json:"red_label,omitempty"`
	// Transmitted packets
	RedTransmitPackets uint64 `protobuf:"varint,3,opt,name=red_transmit_packets,json=redTransmitPackets,proto3" json:"red_transmit_packets,omitempty"`
	// Transmitted bytes
	RedTransmitBytes uint64 `protobuf:"varint,4,opt,name=red_transmit_bytes,json=redTransmitBytes,proto3" json:"red_transmit_bytes,omitempty"`
	// Probabilistically dropped  packets
	RandomDropPackets uint64 `protobuf:"varint,5,opt,name=random_drop_packets,json=randomDropPackets,proto3" json:"random_drop_packets,omitempty"`
	// Probabilisticallydropped bytes
	RandomDropBytes uint64 `protobuf:"varint,6,opt,name=random_drop_bytes,json=randomDropBytes,proto3" json:"random_drop_bytes,omitempty"`
	// Dropped packets with  the average queue size at the max-threshold
	MaxThresholdPackets uint64 `protobuf:"varint,7,opt,name=max_threshold_packets,json=maxThresholdPackets,proto3" json:"max_threshold_packets,omitempty"`
	// Dropped bytes with  the average queue size at the max-threshold
	MaxThresholdBytes uint64 `protobuf:"varint,8,opt,name=max_threshold_bytes,json=maxThresholdBytes,proto3" json:"max_threshold_bytes,omitempty"`
	// ECN marked packets
	RedEcnMarkedPackets uint64 `protobuf:"varint,9,opt,name=red_ecn_marked_packets,json=redEcnMarkedPackets,proto3" json:"red_ecn_marked_packets,omitempty"`
	// ECN marked bytes
	RedEcnMarkedBytes uint64 `protobuf:"varint,10,opt,name=red_ecn_marked_bytes,json=redEcnMarkedBytes,proto3" json:"red_ecn_marked_bytes,omitempty"`
}

func (x *RedProfileStats) Reset() {
	*x = RedProfileStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedProfileStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedProfileStats) ProtoMessage() {}

func (x *RedProfileStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedProfileStats.ProtoReflect.Descriptor instead.
func (*RedProfileStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{10}
}

func (x *RedProfileStats) GetProfileTitle() string {
	if x != nil {
		return x.ProfileTitle
	}
	return ""
}

func (x *RedProfileStats) GetRedLabel() []*WredTypeValue {
	if x != nil {
		return x.RedLabel
	}
	return nil
}

func (x *RedProfileStats) GetRedTransmitPackets() uint64 {
	if x != nil {
		return x.RedTransmitPackets
	}
	return 0
}

func (x *RedProfileStats) GetRedTransmitBytes() uint64 {
	if x != nil {
		return x.RedTransmitBytes
	}
	return 0
}

func (x *RedProfileStats) GetRandomDropPackets() uint64 {
	if x != nil {
		return x.RandomDropPackets
	}
	return 0
}

func (x *RedProfileStats) GetRandomDropBytes() uint64 {
	if x != nil {
		return x.RandomDropBytes
	}
	return 0
}

func (x *RedProfileStats) GetMaxThresholdPackets() uint64 {
	if x != nil {
		return x.MaxThresholdPackets
	}
	return 0
}

func (x *RedProfileStats) GetMaxThresholdBytes() uint64 {
	if x != nil {
		return x.MaxThresholdBytes
	}
	return 0
}

func (x *RedProfileStats) GetRedEcnMarkedPackets() uint64 {
	if x != nil {
		return x.RedEcnMarkedPackets
	}
	return 0
}

func (x *RedProfileStats) GetRedEcnMarkedBytes() uint64 {
	if x != nil {
		return x.RedEcnMarkedBytes
	}
	return 0
}

type ClassStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  Bitmask to indicate which counter or counters are undetermined. Counters will be marked undetermined when one or more classes share queues with class-default because in such cases the value of counters for each class is invalid. Based on the flag(s) set, the following counters will be marked undetermined. For example, if value of this object returned is 0x00000101, counters TransmitPackets/TransmitBytes/TotalTransmitRate and DropPackets/DropBytes are undetermined.0x00000001 - Transmit (TransmitPackets/TransmitBytes/TotalTransmitRate), 0x00000002 - Total drop (TotalDropPackets/TotalDropBytes/TotalDropRate), 0x00000004 - Match (MatchDataRate/PrepolicyMatchedPackets/PrepolicyMatchedBytes), 0x00000100 - Police drop (DropPackets/DropBytes), 0x00000200 - Police conform (ConformPackets/ConformBytes/ConformRate), 0x00000400 - Police exceed (ExceedPackets/ExceedBytes/ExceedRate), 0x00000800 - Police violate (ViolatePackets/ViolateBytes/ViolateRate), 0x00001000 - Parent policer drop (ParentDropPackets/ParentDropBytes), 0x00010000 - Queueing drop (TailDropPackets/TailDropBytes), 0x00020000 - Red queue drop (RandomDropPackets/RandomDropBytes), 0x00040000 - Queue maximum threshold drop (MaxThresholdPackets/MaxThresholdBytes), 0x00080000 - Queue conform (ConformPackets/ConformBytes/ConformRate), 0x00100000 - Queue exceed (ExceedPackets/ExceedBytes/ExceedRate), 0x00200000 - CLP limit drop (ATM_CLP0DropPackets/ATM_CLP0DropBytes/ATM_CLP1DropPackets/ATM_CLP1DropBytes), 0x01000000 - RED transmit (RedTransmitPackets/RedTransmitBytes), 0x02000000 - RED drop (RandomDropPackets/RandomDropBytes), 0x04000000 - RED maximum threshold drop (MaxThresholdPackets/MaxThresholdBytes)
	CounterValidityBitmask uint64 `protobuf:"varint,1,opt,name=counter_validity_bitmask,json=counterValidityBitmask,proto3" json:"counter_validity_bitmask,omitempty"`
	ClassName              string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	// q-id of the  shared queue for this class
	SharedQueueId uint32 `protobuf:"varint,3,opt,name=shared_queue_id,json=sharedQueueId,proto3" json:"shared_queue_id,omitempty"`
	// Description of queue for the class
	QueueDescr   string      `protobuf:"bytes,4,opt,name=queue_descr,json=queueDescr,proto3" json:"queue_descr,omitempty"`
	CacState     string      `protobuf:"bytes,5,opt,name=cac_state,json=cacState,proto3" json:"cac_state,omitempty"`
	GeneralStats *GenStatsSt `protobuf:"bytes,6,opt,name=general_stats,json=generalStats,proto3" json:"general_stats,omitempty"`
	// array of queue stats
	QueueStatsArray []*QStatsSt `protobuf:"bytes,7,rep,name=queue_stats_array,json=queueStatsArray,proto3" json:"queue_stats_array,omitempty"`
	// array of police stats
	PoliceStatsArray []*PlcStatsSt `protobuf:"bytes,8,rep,name=police_stats_array,json=policeStatsArray,proto3" json:"police_stats_array,omitempty"`
	// array of red stats
	WredStatsArray []*RedProfileStats `protobuf:"bytes,9,rep,name=wred_stats_array,json=wredStatsArray,proto3" json:"wred_stats_array,omitempty"`
	// IPHC stats
	IphcStats   *IphcStatsSt `protobuf:"bytes,10,opt,name=iphc_stats,json=iphcStats,proto3" json:"iphc_stats,omitempty"`
	ChildPolicy *QosStats    `protobuf:"bytes,11,opt,name=child_policy,json=childPolicy,proto3" json:"child_policy,omitempty"`
	// bag for cac stats
	CacStats *CacStatsSt `protobuf:"bytes,12,opt,name=cac_stats,json=cacStats,proto3" json:"cac_stats,omitempty"`
}

func (x *ClassStats) Reset() {
	*x = ClassStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassStats) ProtoMessage() {}

func (x *ClassStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassStats.ProtoReflect.Descriptor instead.
func (*ClassStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP(), []int{11}
}

func (x *ClassStats) GetCounterValidityBitmask() uint64 {
	if x != nil {
		return x.CounterValidityBitmask
	}
	return 0
}

func (x *ClassStats) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ClassStats) GetSharedQueueId() uint32 {
	if x != nil {
		return x.SharedQueueId
	}
	return 0
}

func (x *ClassStats) GetQueueDescr() string {
	if x != nil {
		return x.QueueDescr
	}
	return ""
}

func (x *ClassStats) GetCacState() string {
	if x != nil {
		return x.CacState
	}
	return ""
}

func (x *ClassStats) GetGeneralStats() *GenStatsSt {
	if x != nil {
		return x.GeneralStats
	}
	return nil
}

func (x *ClassStats) GetQueueStatsArray() []*QStatsSt {
	if x != nil {
		return x.QueueStatsArray
	}
	return nil
}

func (x *ClassStats) GetPoliceStatsArray() []*PlcStatsSt {
	if x != nil {
		return x.PoliceStatsArray
	}
	return nil
}

func (x *ClassStats) GetWredStatsArray() []*RedProfileStats {
	if x != nil {
		return x.WredStatsArray
	}
	return nil
}

func (x *ClassStats) GetIphcStats() *IphcStatsSt {
	if x != nil {
		return x.IphcStats
	}
	return nil
}

func (x *ClassStats) GetChildPolicy() *QosStats {
	if x != nil {
		return x.ChildPolicy
	}
	return nil
}

func (x *ClassStats) GetCacStats() *CacStatsSt {
	if x != nil {
		return x.CacStats
	}
	return nil
}

var File_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDesc = []byte{
	0x0a, 0x58, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x71, 0x6f, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x71, 0x6f, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0x37, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfd, 0x01,
	0x0a, 0x09, 0x71, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x76, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x35,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x74, 0x69, 0x64,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x61, 0x74, 0x69, 0x64, 0x22, 0x43, 0x0a,
	0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x5f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0xfc, 0x08, 0x0a, 0x18, 0x70, 0x6c, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x19, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x17, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x76, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x8a, 0x05, 0x0a, 0x0c, 0x70, 0x6c, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x6c, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0xd5, 0x01, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0xa1, 0x05, 0x0a, 0x0d, 0x69, 0x70, 0x68, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x6f, 0x6e,
	0x5f, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e, 0x6f,
	0x6e, 0x54, 0x63, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x6e, 0x6f, 0x6e, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x54, 0x63, 0x70, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x6f, 0x6e,
	0x5f, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x54, 0x63, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x6f, 0x6e, 0x5f,
	0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x6e, 0x6f, 0x6e, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x17,
	0x6e, 0x6f, 0x6e, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e,
	0x6f, 0x6e, 0x54, 0x63, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x6e, 0x6f, 0x6e, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6e, 0x6f, 0x6e,
	0x54, 0x63, 0x70, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x63, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x63,
	0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x63, 0x70, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x63, 0x70,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x2d,
	0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x63, 0x70,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x1b, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x17, 0x74, 0x63, 0x70, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x84, 0x0a, 0x0a, 0x0a,
	0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x74, 0x6d,
	0x5f, 0x63, 0x6c, 0x70, 0x30, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x61, 0x74, 0x6d, 0x43, 0x6c, 0x70,
	0x30, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x61, 0x74, 0x6d, 0x5f, 0x63, 0x6c, 0x70, 0x30, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x74, 0x6d, 0x43, 0x6c,
	0x70, 0x30, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x61,
	0x74, 0x6d, 0x5f, 0x63, 0x6c, 0x70, 0x31, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x61, 0x74, 0x6d, 0x43,
	0x6c, 0x70, 0x31, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x13, 0x61, 0x74, 0x6d, 0x5f, 0x63, 0x6c, 0x70, 0x31, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x74, 0x6d,
	0x43, 0x6c, 0x70, 0x31, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x95, 0x01,
	0x0a, 0x15, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x5f,
	0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x5f, 0x52, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x8b, 0x01, 0x0a, 0x10,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x5f, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x57, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x44, 0x0a, 0x0f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x72, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x11, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x72,
	0x6f, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72,
	0x65, 0x64, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x64,
	0x45, 0x63, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x72, 0x65, 0x64, 0x45, 0x63, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0xc0, 0x08, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x7b, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x52,
	0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x52,
	0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x84, 0x01, 0x0a, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x6c, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x73, 0x74, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x77, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0e, 0x77, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x76, 0x0a, 0x0a, 0x69, 0x70, 0x68, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71,
	0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69,
	0x70, 0x68, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x52, 0x09, 0x69, 0x70,
	0x68, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x71, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x73, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x71, 0x6f,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x63, 0x61,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x52, 0x08, 0x63, 0x61, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescData = file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDesc
)

func file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescData)
	})
	return file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDescData
}

var file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_goTypes = []interface{}{
	(*QosStats_KEYS)(nil),        // 0: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.qos_stats_KEYS
	(*QosStats)(nil),             // 1: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.qos_stats
	(*PolicyParamUint32St_)(nil), // 2: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.policy_param_uint32_st_
	(*GenStatsSt)(nil),           // 3: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.gen_stats_st
	(*PlcColorClassStatsSt)(nil), // 4: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.plc_color_class_stats_st
	(*PlcStatsSt)(nil),           // 5: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.plc_stats_st
	(*CacStatsSt)(nil),           // 6: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.cac_stats_st
	(*IphcStatsSt)(nil),          // 7: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.iphc_stats_st
	(*QStatsSt)(nil),             // 8: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.q_stats_st
	(*WredTypeValue)(nil),        // 9: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.wred_type_value
	(*RedProfileStats)(nil),      // 10: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.red_profile_stats
	(*ClassStats)(nil),           // 11: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats
}
var file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_depIdxs = []int32{
	11, // 0: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.qos_stats.class_stats:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats
	4,  // 1: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.plc_stats_st.color_class_stats:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.plc_color_class_stats_st
	2,  // 2: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.q_stats_st.queue_instance_length:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.policy_param_uint32_st_
	2,  // 3: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.q_stats_st.queue_average_length:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.policy_param_uint32_st_
	2,  // 4: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.q_stats_st.queue_max_length:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.policy_param_uint32_st_
	9,  // 5: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.red_profile_stats.red_label:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.wred_type_value
	3,  // 6: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats.general_stats:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.gen_stats_st
	8,  // 7: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats.queue_stats_array:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.q_stats_st
	5,  // 8: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats.police_stats_array:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.plc_stats_st
	10, // 9: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats.wred_stats_array:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.red_profile_stats
	7,  // 10: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats.iphc_stats:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.iphc_stats_st
	1,  // 11: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats.child_policy:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.qos_stats
	6,  // 12: cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.class_stats.cac_stats:type_name -> cisco_ios_xr_qos_ma_oper.qos.interface_table.interface.output.statistics.cac_stats_st
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_init()
}
func file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_init() {
	if File_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosStats_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyParamUint32St_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenStatsSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlcColorClassStatsSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlcStatsSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacStatsSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IphcStatsSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QStatsSt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WredTypeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedProfileStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto = out.File
	file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_rawDesc = nil
	file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_goTypes = nil
	file_cisco_ios_xr_qos_ma_oper_qos_interface_table_interface_output_statistics_qos_stats_proto_depIdxs = nil
}
