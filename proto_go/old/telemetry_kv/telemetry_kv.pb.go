// ----------------------------------------------------------------------------
// telemetry.proto - Telemetry protobuf definitions
//
// February 2016
//
// Copyright (c) 2015 by Cisco Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: old/telemetry_kv/telemetry_kv.proto

// Package with obsolete definition of Model Driven Telemetry GPB K/V format message.

package telemetry_kv

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TelemetryOLD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId           uint64               `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	BasePath               string               `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	SubscriptionIdentifier string               `protobuf:"bytes,3,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
	ModelVersion           string               `protobuf:"bytes,4,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	CollectionStartTime    uint64               `protobuf:"varint,5,opt,name=collection_start_time,json=collectionStartTime,proto3" json:"collection_start_time,omitempty"`
	MsgTimestamp           uint64               `protobuf:"varint,6,opt,name=msg_timestamp,json=msgTimestamp,proto3" json:"msg_timestamp,omitempty"`
	Fields                 []*TelemetryFieldOLD `protobuf:"bytes,14,rep,name=fields,proto3" json:"fields,omitempty"`
	CollectionEndTime      uint64               `protobuf:"varint,15,opt,name=collection_end_time,json=collectionEndTime,proto3" json:"collection_end_time,omitempty"`
}

func (x *TelemetryOLD) Reset() {
	*x = TelemetryOLD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_old_telemetry_kv_telemetry_kv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryOLD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryOLD) ProtoMessage() {}

func (x *TelemetryOLD) ProtoReflect() protoreflect.Message {
	mi := &file_old_telemetry_kv_telemetry_kv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryOLD.ProtoReflect.Descriptor instead.
func (*TelemetryOLD) Descriptor() ([]byte, []int) {
	return file_old_telemetry_kv_telemetry_kv_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryOLD) GetCollectionId() uint64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *TelemetryOLD) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *TelemetryOLD) GetSubscriptionIdentifier() string {
	if x != nil {
		return x.SubscriptionIdentifier
	}
	return ""
}

func (x *TelemetryOLD) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *TelemetryOLD) GetCollectionStartTime() uint64 {
	if x != nil {
		return x.CollectionStartTime
	}
	return 0
}

func (x *TelemetryOLD) GetMsgTimestamp() uint64 {
	if x != nil {
		return x.MsgTimestamp
	}
	return 0
}

func (x *TelemetryOLD) GetFields() []*TelemetryFieldOLD {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TelemetryOLD) GetCollectionEndTime() uint64 {
	if x != nil {
		return x.CollectionEndTime
	}
	return 0
}

type TelemetryFieldOLD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AugmentData bool   `protobuf:"varint,3,opt,name=augment_data,json=augmentData,proto3" json:"augment_data,omitempty"`
	// Types that are assignable to ValueByType:
	//	*TelemetryFieldOLD_BytesValue
	//	*TelemetryFieldOLD_StringValue
	//	*TelemetryFieldOLD_BoolValue
	//	*TelemetryFieldOLD_Uint32Value
	//	*TelemetryFieldOLD_Uint64Value
	//	*TelemetryFieldOLD_Sint32Value
	//	*TelemetryFieldOLD_Sint64Value
	//	*TelemetryFieldOLD_DoubleValue
	//	*TelemetryFieldOLD_FloatValue
	ValueByType isTelemetryFieldOLD_ValueByType `protobuf_oneof:"value_by_type"`
	Fields      []*TelemetryFieldOLD            `protobuf:"bytes,15,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TelemetryFieldOLD) Reset() {
	*x = TelemetryFieldOLD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_old_telemetry_kv_telemetry_kv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryFieldOLD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryFieldOLD) ProtoMessage() {}

func (x *TelemetryFieldOLD) ProtoReflect() protoreflect.Message {
	mi := &file_old_telemetry_kv_telemetry_kv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryFieldOLD.ProtoReflect.Descriptor instead.
func (*TelemetryFieldOLD) Descriptor() ([]byte, []int) {
	return file_old_telemetry_kv_telemetry_kv_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryFieldOLD) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TelemetryFieldOLD) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetryFieldOLD) GetAugmentData() bool {
	if x != nil {
		return x.AugmentData
	}
	return false
}

func (m *TelemetryFieldOLD) GetValueByType() isTelemetryFieldOLD_ValueByType {
	if m != nil {
		return m.ValueByType
	}
	return nil
}

func (x *TelemetryFieldOLD) GetBytesValue() []byte {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *TelemetryFieldOLD) GetStringValue() string {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *TelemetryFieldOLD) GetBoolValue() bool {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *TelemetryFieldOLD) GetUint32Value() uint32 {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *TelemetryFieldOLD) GetUint64Value() uint64 {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *TelemetryFieldOLD) GetSint32Value() int32 {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_Sint32Value); ok {
		return x.Sint32Value
	}
	return 0
}

func (x *TelemetryFieldOLD) GetSint64Value() int64 {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_Sint64Value); ok {
		return x.Sint64Value
	}
	return 0
}

func (x *TelemetryFieldOLD) GetDoubleValue() float64 {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *TelemetryFieldOLD) GetFloatValue() float32 {
	if x, ok := x.GetValueByType().(*TelemetryFieldOLD_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *TelemetryFieldOLD) GetFields() []*TelemetryFieldOLD {
	if x != nil {
		return x.Fields
	}
	return nil
}

type isTelemetryFieldOLD_ValueByType interface {
	isTelemetryFieldOLD_ValueByType()
}

type TelemetryFieldOLD_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,4,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type TelemetryFieldOLD_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type TelemetryFieldOLD_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type TelemetryFieldOLD_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,7,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type TelemetryFieldOLD_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,8,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type TelemetryFieldOLD_Sint32Value struct {
	Sint32Value int32 `protobuf:"zigzag32,9,opt,name=sint32_value,json=sint32Value,proto3,oneof"`
}

type TelemetryFieldOLD_Sint64Value struct {
	Sint64Value int64 `protobuf:"zigzag64,10,opt,name=sint64_value,json=sint64Value,proto3,oneof"`
}

type TelemetryFieldOLD_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,11,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type TelemetryFieldOLD_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,12,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*TelemetryFieldOLD_BytesValue) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_StringValue) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_BoolValue) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_Uint32Value) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_Uint64Value) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_Sint32Value) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_Sint64Value) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_DoubleValue) isTelemetryFieldOLD_ValueByType() {}

func (*TelemetryFieldOLD_FloatValue) isTelemetryFieldOLD_ValueByType() {}

var File_old_telemetry_kv_telemetry_kv_proto protoreflect.FileDescriptor

var file_old_telemetry_kv_telemetry_kv_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6f, 0x6c, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x6b, 0x76, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6b, 0x76, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6b, 0x76, 0x22, 0xf0, 0x02, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x4f, 0x4c, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6b, 0x76, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x4c, 0x44, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf7, 0x03, 0x0a, 0x11, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x4c, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x6b, 0x76, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x4c, 0x44, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_old_telemetry_kv_telemetry_kv_proto_rawDescOnce sync.Once
	file_old_telemetry_kv_telemetry_kv_proto_rawDescData = file_old_telemetry_kv_telemetry_kv_proto_rawDesc
)

func file_old_telemetry_kv_telemetry_kv_proto_rawDescGZIP() []byte {
	file_old_telemetry_kv_telemetry_kv_proto_rawDescOnce.Do(func() {
		file_old_telemetry_kv_telemetry_kv_proto_rawDescData = protoimpl.X.CompressGZIP(file_old_telemetry_kv_telemetry_kv_proto_rawDescData)
	})
	return file_old_telemetry_kv_telemetry_kv_proto_rawDescData
}

var file_old_telemetry_kv_telemetry_kv_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_old_telemetry_kv_telemetry_kv_proto_goTypes = []interface{}{
	(*TelemetryOLD)(nil),      // 0: telemetry_kv.TelemetryOLD
	(*TelemetryFieldOLD)(nil), // 1: telemetry_kv.TelemetryFieldOLD
}
var file_old_telemetry_kv_telemetry_kv_proto_depIdxs = []int32{
	1, // 0: telemetry_kv.TelemetryOLD.fields:type_name -> telemetry_kv.TelemetryFieldOLD
	1, // 1: telemetry_kv.TelemetryFieldOLD.fields:type_name -> telemetry_kv.TelemetryFieldOLD
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_old_telemetry_kv_telemetry_kv_proto_init() }
func file_old_telemetry_kv_telemetry_kv_proto_init() {
	if File_old_telemetry_kv_telemetry_kv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_old_telemetry_kv_telemetry_kv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryOLD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_old_telemetry_kv_telemetry_kv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryFieldOLD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_old_telemetry_kv_telemetry_kv_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TelemetryFieldOLD_BytesValue)(nil),
		(*TelemetryFieldOLD_StringValue)(nil),
		(*TelemetryFieldOLD_BoolValue)(nil),
		(*TelemetryFieldOLD_Uint32Value)(nil),
		(*TelemetryFieldOLD_Uint64Value)(nil),
		(*TelemetryFieldOLD_Sint32Value)(nil),
		(*TelemetryFieldOLD_Sint64Value)(nil),
		(*TelemetryFieldOLD_DoubleValue)(nil),
		(*TelemetryFieldOLD_FloatValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_old_telemetry_kv_telemetry_kv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_old_telemetry_kv_telemetry_kv_proto_goTypes,
		DependencyIndexes: file_old_telemetry_kv_telemetry_kv_proto_depIdxs,
		MessageInfos:      file_old_telemetry_kv_telemetry_kv_proto_msgTypes,
	}.Build()
	File_old_telemetry_kv_telemetry_kv_proto = out.File
	file_old_telemetry_kv_telemetry_kv_proto_rawDesc = nil
	file_old_telemetry_kv_telemetry_kv_proto_goTypes = nil
	file_old_telemetry_kv_telemetry_kv_proto_depIdxs = nil
}
