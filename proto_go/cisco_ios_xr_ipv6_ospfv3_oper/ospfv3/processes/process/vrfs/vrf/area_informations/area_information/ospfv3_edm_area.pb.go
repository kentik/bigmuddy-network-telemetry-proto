// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_ospfv3_oper/ospfv3/processes/process/vrfs/vrf/area_informations/area_information/ospfv3_edm_area.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPFv3 area summary information
type Ospfv3EdmArea_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	VrfName     string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AreaId      uint32 `protobuf:"varint,3,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (x *Ospfv3EdmArea_KEYS) Reset() {
	*x = Ospfv3EdmArea_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmArea_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmArea_KEYS) ProtoMessage() {}

func (x *Ospfv3EdmArea_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmArea_KEYS.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmArea_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescGZIP(), []int{0}
}

func (x *Ospfv3EdmArea_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Ospfv3EdmArea_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ospfv3EdmArea_KEYS) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

type Ospfv3EdmArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, Backbone area is active
	IsBackboneAreaActive bool `protobuf:"varint,50,opt,name=is_backbone_area_active,json=isBackboneAreaActive,proto3" json:"is_backbone_area_active,omitempty"`
	// Number of interfaces in the area
	AreaInterfaces uint32 `protobuf:"varint,51,opt,name=area_interfaces,json=areaInterfaces,proto3" json:"area_interfaces,omitempty"`
	// If true, stub area
	IsAreaStubbed bool `protobuf:"varint,52,opt,name=is_area_stubbed,json=isAreaStubbed,proto3" json:"is_area_stubbed,omitempty"`
	// If true, totally stubby area
	IsAreaTotalStubbed bool `protobuf:"varint,53,opt,name=is_area_total_stubbed,json=isAreaTotalStubbed,proto3" json:"is_area_total_stubbed,omitempty"`
	// Default cost for Stub or NSSA area
	StubDefaultCost uint32 `protobuf:"varint,54,opt,name=stub_default_cost,json=stubDefaultCost,proto3" json:"stub_default_cost,omitempty"`
	// If true, area is a NSSA
	IsAreaNssa bool `protobuf:"varint,55,opt,name=is_area_nssa,json=isAreaNssa,proto3" json:"is_area_nssa,omitempty"`
	// If true, No redistribution into this NSSA area
	NssaNoRedistribution bool `protobuf:"varint,56,opt,name=nssa_no_redistribution,json=nssaNoRedistribution,proto3" json:"nssa_no_redistribution,omitempty"`
	// If true, perform 7/5 translation
	IsNssaTranslated bool `protobuf:"varint,57,opt,name=is_nssa_translated,json=isNssaTranslated,proto3" json:"is_nssa_translated,omitempty"`
	// If true, generate NSSA default route
	IsNssaDefault bool `protobuf:"varint,58,opt,name=is_nssa_default,json=isNssaDefault,proto3" json:"is_nssa_default,omitempty"`
	// If true, RRR is enabled
	IsRrrEnabled bool `protobuf:"varint,59,opt,name=is_rrr_enabled,json=isRrrEnabled,proto3" json:"is_rrr_enabled,omitempty"`
	// Number of SPF calculations run
	SpFs uint32 `protobuf:"varint,60,opt,name=sp_fs,json=spFs,proto3" json:"sp_fs,omitempty"`
	// List of ranges to summarize
	AreaRangeList []*Ospfv3EdmAreaRange `protobuf:"bytes,61,rep,name=area_range_list,json=areaRangeList,proto3" json:"area_range_list,omitempty"`
	// Number of opaque LSAs in the area
	AreaOpaqueLsAs uint32 `protobuf:"varint,62,opt,name=area_opaque_ls_as,json=areaOpaqueLsAs,proto3" json:"area_opaque_ls_as,omitempty"`
	// Sum of opaque LSA checksums
	AreaOpaqueLsaChecksum uint32 `protobuf:"varint,63,opt,name=area_opaque_lsa_checksum,json=areaOpaqueLsaChecksum,proto3" json:"area_opaque_lsa_checksum,omitempty"`
	// Number of LSA with demand circuit bit not set
	AreaDcBitlessLsAs uint32 `protobuf:"varint,64,opt,name=area_dc_bitless_ls_as,json=areaDcBitlessLsAs,proto3" json:"area_dc_bitless_ls_as,omitempty"`
	// Number of indication LSAs
	IndicationLsAs uint32 `protobuf:"varint,65,opt,name=indication_ls_as,json=indicationLsAs,proto3" json:"indication_ls_as,omitempty"`
	// Number of do not age LSAs
	DoNotAgeLsAs uint32 `protobuf:"varint,66,opt,name=do_not_age_ls_as,json=doNotAgeLsAs,proto3" json:"do_not_age_ls_as,omitempty"`
	// Number of LSAs which need to be flooded
	FloodListLength uint32 `protobuf:"varint,67,opt,name=flood_list_length,json=floodListLength,proto3" json:"flood_list_length,omitempty"`
	// Number of LFA enabled interfaces
	AreaLfaInterfaceCount uint32 `protobuf:"varint,68,opt,name=area_lfa_interface_count,json=areaLfaInterfaceCount,proto3" json:"area_lfa_interface_count,omitempty"`
	// Number of Per Prefix LFA enabled interfaces
	AreaPerPrefixLfaInterfaceCount uint32 `protobuf:"varint,69,opt,name=area_per_prefix_lfa_interface_count,json=areaPerPrefixLfaInterfaceCount,proto3" json:"area_per_prefix_lfa_interface_count,omitempty"`
	// Area LFA revision
	AreaLfaRevision uint32 `protobuf:"varint,70,opt,name=area_lfa_revision,json=areaLfaRevision,proto3" json:"area_lfa_revision,omitempty"`
}

func (x *Ospfv3EdmArea) Reset() {
	*x = Ospfv3EdmArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmArea) ProtoMessage() {}

func (x *Ospfv3EdmArea) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmArea.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmArea) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescGZIP(), []int{1}
}

func (x *Ospfv3EdmArea) GetIsBackboneAreaActive() bool {
	if x != nil {
		return x.IsBackboneAreaActive
	}
	return false
}

func (x *Ospfv3EdmArea) GetAreaInterfaces() uint32 {
	if x != nil {
		return x.AreaInterfaces
	}
	return 0
}

func (x *Ospfv3EdmArea) GetIsAreaStubbed() bool {
	if x != nil {
		return x.IsAreaStubbed
	}
	return false
}

func (x *Ospfv3EdmArea) GetIsAreaTotalStubbed() bool {
	if x != nil {
		return x.IsAreaTotalStubbed
	}
	return false
}

func (x *Ospfv3EdmArea) GetStubDefaultCost() uint32 {
	if x != nil {
		return x.StubDefaultCost
	}
	return 0
}

func (x *Ospfv3EdmArea) GetIsAreaNssa() bool {
	if x != nil {
		return x.IsAreaNssa
	}
	return false
}

func (x *Ospfv3EdmArea) GetNssaNoRedistribution() bool {
	if x != nil {
		return x.NssaNoRedistribution
	}
	return false
}

func (x *Ospfv3EdmArea) GetIsNssaTranslated() bool {
	if x != nil {
		return x.IsNssaTranslated
	}
	return false
}

func (x *Ospfv3EdmArea) GetIsNssaDefault() bool {
	if x != nil {
		return x.IsNssaDefault
	}
	return false
}

func (x *Ospfv3EdmArea) GetIsRrrEnabled() bool {
	if x != nil {
		return x.IsRrrEnabled
	}
	return false
}

func (x *Ospfv3EdmArea) GetSpFs() uint32 {
	if x != nil {
		return x.SpFs
	}
	return 0
}

func (x *Ospfv3EdmArea) GetAreaRangeList() []*Ospfv3EdmAreaRange {
	if x != nil {
		return x.AreaRangeList
	}
	return nil
}

func (x *Ospfv3EdmArea) GetAreaOpaqueLsAs() uint32 {
	if x != nil {
		return x.AreaOpaqueLsAs
	}
	return 0
}

func (x *Ospfv3EdmArea) GetAreaOpaqueLsaChecksum() uint32 {
	if x != nil {
		return x.AreaOpaqueLsaChecksum
	}
	return 0
}

func (x *Ospfv3EdmArea) GetAreaDcBitlessLsAs() uint32 {
	if x != nil {
		return x.AreaDcBitlessLsAs
	}
	return 0
}

func (x *Ospfv3EdmArea) GetIndicationLsAs() uint32 {
	if x != nil {
		return x.IndicationLsAs
	}
	return 0
}

func (x *Ospfv3EdmArea) GetDoNotAgeLsAs() uint32 {
	if x != nil {
		return x.DoNotAgeLsAs
	}
	return 0
}

func (x *Ospfv3EdmArea) GetFloodListLength() uint32 {
	if x != nil {
		return x.FloodListLength
	}
	return 0
}

func (x *Ospfv3EdmArea) GetAreaLfaInterfaceCount() uint32 {
	if x != nil {
		return x.AreaLfaInterfaceCount
	}
	return 0
}

func (x *Ospfv3EdmArea) GetAreaPerPrefixLfaInterfaceCount() uint32 {
	if x != nil {
		return x.AreaPerPrefixLfaInterfaceCount
	}
	return 0
}

func (x *Ospfv3EdmArea) GetAreaLfaRevision() uint32 {
	if x != nil {
		return x.AreaLfaRevision
	}
	return 0
}

// OSPFv3 area range information
type Ospfv3EdmAreaRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP prefix for summarization
	RangePrefix string `protobuf:"bytes,1,opt,name=range_prefix,json=rangePrefix,proto3" json:"range_prefix,omitempty"`
	// IP prefix length for summarization
	RangePrefixLength uint32 `protobuf:"varint,2,opt,name=range_prefix_length,json=rangePrefixLength,proto3" json:"range_prefix_length,omitempty"`
	// Net cost
	NetCost uint32 `protobuf:"varint,3,opt,name=net_cost,json=netCost,proto3" json:"net_cost,omitempty"`
	// Area range status
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// If true, cost is configured
	IsCostConfigured bool `protobuf:"varint,5,opt,name=is_cost_configured,json=isCostConfigured,proto3" json:"is_cost_configured,omitempty"`
}

func (x *Ospfv3EdmAreaRange) Reset() {
	*x = Ospfv3EdmAreaRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmAreaRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmAreaRange) ProtoMessage() {}

func (x *Ospfv3EdmAreaRange) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmAreaRange.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmAreaRange) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescGZIP(), []int{2}
}

func (x *Ospfv3EdmAreaRange) GetRangePrefix() string {
	if x != nil {
		return x.RangePrefix
	}
	return ""
}

func (x *Ospfv3EdmAreaRange) GetRangePrefixLength() uint32 {
	if x != nil {
		return x.RangePrefixLength
	}
	return 0
}

func (x *Ospfv3EdmAreaRange) GetNetCost() uint32 {
	if x != nil {
		return x.NetCost
	}
	return 0
}

func (x *Ospfv3EdmAreaRange) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Ospfv3EdmAreaRange) GetIsCostConfigured() bool {
	if x != nil {
		return x.IsCostConfigured
	}
	return false
}

var File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDesc = []byte{
	0x0a, 0x78, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76, 0x72,
	0x66, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x62, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d,
	0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x22, 0xcb, 0x08,
	0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x74, 0x75,
	0x62, 0x62, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x72,
	0x65, 0x61, 0x53, 0x74, 0x75, 0x62, 0x62, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x62, 0x62,
	0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x62, 0x62, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x74, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x62, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x73, 0x73, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x73,
	0x73, 0x61, 0x5f, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x73, 0x73, 0x61,
	0x4e, 0x6f, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x4e, 0x73, 0x73, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x73, 0x73, 0x61, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x72, 0x72,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x52, 0x72, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x70, 0x5f, 0x66, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x70, 0x46,
	0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x61, 0x72, 0x65, 0x61, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73, 0x41, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f,
	0x6c, 0x73, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73,
	0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x15, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x64, 0x63, 0x5f, 0x62, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x5f,
	0x61, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x72, 0x65, 0x61, 0x44, 0x63,
	0x42, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x26, 0x0a, 0x10, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x41, 0x67, 0x65, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x72, 0x65,
	0x61, 0x4c, 0x66, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1e, 0x61, 0x72, 0x65, 0x61, 0x50, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x66,
	0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x72, 0x65, 0x61,
	0x4c, 0x66, 0x61, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x15,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescData = file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_goTypes = []interface{}{
	(*Ospfv3EdmArea_KEYS)(nil), // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.area_informations.area_information.ospfv3_edm_area_KEYS
	(*Ospfv3EdmArea)(nil),      // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.area_informations.area_information.ospfv3_edm_area
	(*Ospfv3EdmAreaRange)(nil), // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.area_informations.area_information.ospfv3_edm_area_range
}
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.area_informations.area_information.ospfv3_edm_area.area_range_list:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.area_informations.area_information.ospfv3_edm_area_range
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_init()
}
func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_init() {
	if File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmArea_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmAreaRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto = out.File
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_area_informations_area_information_ospfv3_edm_area_proto_depIdxs = nil
}
