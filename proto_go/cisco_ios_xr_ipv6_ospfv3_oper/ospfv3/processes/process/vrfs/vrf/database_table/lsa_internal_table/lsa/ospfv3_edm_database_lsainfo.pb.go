// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_ospfv3_oper/ospfv3/processes/process/vrfs/vrf/database_table/lsa_internal_table/lsa/ospfv3_edm_database_lsainfo.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPFv3 LSA Information
type Ospfv3EdmDatabaseLsainfo_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName       string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	VrfName           string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	AreaId            uint32 `protobuf:"varint,3,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	LsType            string `protobuf:"bytes,4,opt,name=ls_type,json=lsType,proto3" json:"ls_type,omitempty"`
	AdvertisingRouter string `protobuf:"bytes,5,opt,name=advertising_router,json=advertisingRouter,proto3" json:"advertising_router,omitempty"`
	LsId              uint32 `protobuf:"varint,6,opt,name=ls_id,json=lsId,proto3" json:"ls_id,omitempty"`
	InterfaceName     string `protobuf:"bytes,7,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) Reset() {
	*x = Ospfv3EdmDatabaseLsainfo_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmDatabaseLsainfo_KEYS) ProtoMessage() {}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmDatabaseLsainfo_KEYS.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmDatabaseLsainfo_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{0}
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) GetLsType() string {
	if x != nil {
		return x.LsType
	}
	return ""
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) GetAdvertisingRouter() string {
	if x != nil {
		return x.AdvertisingRouter
	}
	return ""
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) GetLsId() uint32 {
	if x != nil {
		return x.LsId
	}
	return 0
}

func (x *Ospfv3EdmDatabaseLsainfo_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type Ospfv3EdmDatabaseLsainfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of all LSAs or LSA specific information
	LsaInfo *Ospfv3LsaInfoUnion `protobuf:"bytes,50,opt,name=lsa_info,json=lsaInfo,proto3" json:"lsa_info,omitempty"`
}

func (x *Ospfv3EdmDatabaseLsainfo) Reset() {
	*x = Ospfv3EdmDatabaseLsainfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmDatabaseLsainfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmDatabaseLsainfo) ProtoMessage() {}

func (x *Ospfv3EdmDatabaseLsainfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmDatabaseLsainfo.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmDatabaseLsainfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{1}
}

func (x *Ospfv3EdmDatabaseLsainfo) GetLsaInfo() *Ospfv3LsaInfoUnion {
	if x != nil {
		return x.LsaInfo
	}
	return nil
}

// OSPFv3 Prefix Type
type Ospfv3EdmPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OSPFv3 prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// OSPFv3 prefix length
	OspFv3PrefixLength uint32 `protobuf:"varint,2,opt,name=osp_fv3_prefix_length,json=ospFv3PrefixLength,proto3" json:"osp_fv3_prefix_length,omitempty"`
	// OSPFv3 prefix options
	OspFv3PrefixOptions uint32 `protobuf:"varint,3,opt,name=osp_fv3_prefix_options,json=ospFv3PrefixOptions,proto3" json:"osp_fv3_prefix_options,omitempty"`
	// OSPFv3 prefix metric
	OspFv3PrefixMetric uint32 `protobuf:"varint,4,opt,name=osp_fv3_prefix_metric,json=ospFv3PrefixMetric,proto3" json:"osp_fv3_prefix_metric,omitempty"`
	// Prefix priority
	Priority string `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Ospfv3EdmPrefix) Reset() {
	*x = Ospfv3EdmPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmPrefix) ProtoMessage() {}

func (x *Ospfv3EdmPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmPrefix.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmPrefix) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{2}
}

func (x *Ospfv3EdmPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ospfv3EdmPrefix) GetOspFv3PrefixLength() uint32 {
	if x != nil {
		return x.OspFv3PrefixLength
	}
	return 0
}

func (x *Ospfv3EdmPrefix) GetOspFv3PrefixOptions() uint32 {
	if x != nil {
		return x.OspFv3PrefixOptions
	}
	return 0
}

func (x *Ospfv3EdmPrefix) GetOspFv3PrefixMetric() uint32 {
	if x != nil {
		return x.OspFv3PrefixMetric
	}
	return 0
}

func (x *Ospfv3EdmPrefix) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

// OSPFv3 LSA Database Header
type Ospfv3EdmDbHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LSA type
	LsaType uint32 `protobuf:"varint,1,opt,name=lsa_type,json=lsaType,proto3" json:"lsa_type,omitempty"`
	// Area ID in decimal or dotted-decimal format
	LsaAreaId string `protobuf:"bytes,2,opt,name=lsa_area_id,json=lsaAreaId,proto3" json:"lsa_area_id,omitempty"`
	// LSA's Age (s)
	LsaAge uint32 `protobuf:"varint,3,opt,name=lsa_age,json=lsaAge,proto3" json:"lsa_age,omitempty"`
	// If true, Do Not Age this LSA
	IsDoNotAgeLsa bool `protobuf:"varint,4,opt,name=is_do_not_age_lsa,json=isDoNotAgeLsa,proto3" json:"is_do_not_age_lsa,omitempty"`
	// LS ID
	LsId uint32 `protobuf:"varint,5,opt,name=ls_id,json=lsId,proto3" json:"ls_id,omitempty"`
	// Router ID of Advertising Router
	AdvertisingRouter string `protobuf:"bytes,6,opt,name=advertising_router,json=advertisingRouter,proto3" json:"advertising_router,omitempty"`
	// Current Sequence number
	SequenceNumber uint32 `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Checksum value
	Checksum uint32 `protobuf:"varint,8,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// If true, if grace restart is active
	IsGracefulRestartActive bool `protobuf:"varint,9,opt,name=is_graceful_restart_active,json=isGracefulRestartActive,proto3" json:"is_graceful_restart_active,omitempty"`
}

func (x *Ospfv3EdmDbHeader) Reset() {
	*x = Ospfv3EdmDbHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmDbHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmDbHeader) ProtoMessage() {}

func (x *Ospfv3EdmDbHeader) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmDbHeader.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmDbHeader) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{3}
}

func (x *Ospfv3EdmDbHeader) GetLsaType() uint32 {
	if x != nil {
		return x.LsaType
	}
	return 0
}

func (x *Ospfv3EdmDbHeader) GetLsaAreaId() string {
	if x != nil {
		return x.LsaAreaId
	}
	return ""
}

func (x *Ospfv3EdmDbHeader) GetLsaAge() uint32 {
	if x != nil {
		return x.LsaAge
	}
	return 0
}

func (x *Ospfv3EdmDbHeader) GetIsDoNotAgeLsa() bool {
	if x != nil {
		return x.IsDoNotAgeLsa
	}
	return false
}

func (x *Ospfv3EdmDbHeader) GetLsId() uint32 {
	if x != nil {
		return x.LsId
	}
	return 0
}

func (x *Ospfv3EdmDbHeader) GetAdvertisingRouter() string {
	if x != nil {
		return x.AdvertisingRouter
	}
	return ""
}

func (x *Ospfv3EdmDbHeader) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Ospfv3EdmDbHeader) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *Ospfv3EdmDbHeader) GetIsGracefulRestartActive() bool {
	if x != nil {
		return x.IsGracefulRestartActive
	}
	return false
}

// OSPFv3 Detailed LSA Database Information
type Ospfv3EdmDbDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Second table index
	SecondTableIndex uint32 `protobuf:"varint,1,opt,name=second_table_index,json=secondTableIndex,proto3" json:"second_table_index,omitempty"`
	// Minute table index
	MinuteTableIndex uint32 `protobuf:"varint,2,opt,name=minute_table_index,json=minuteTableIndex,proto3" json:"minute_table_index,omitempty"`
	// The amount of time since the last check was made to free this LSA (s)
	FreeTime uint32 `protobuf:"varint,3,opt,name=free_time,json=freeTime,proto3" json:"free_time,omitempty"`
	// If true, flag is set to delete this LSA
	IsDeleted bool `protobuf:"varint,4,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// If true, Routing Bit set on the LSA
	IsRoutingBit bool `protobuf:"varint,5,opt,name=is_routing_bit,json=isRoutingBit,proto3" json:"is_routing_bit,omitempty"`
	// If true, Advertising Router is reachable
	IsAdvertisingRouterReachable bool `protobuf:"varint,6,opt,name=is_advertising_router_reachable,json=isAdvertisingRouterReachable,proto3" json:"is_advertising_router_reachable,omitempty"`
	// If true, the reason not to delete this LSA is because delete flag not set on this LSA
	IsNoDelete bool `protobuf:"varint,7,opt,name=is_no_delete,json=isNoDelete,proto3" json:"is_no_delete,omitempty"`
	// If true, the reason  not to delete this LSA is because neighbor is in exchange state
	IsNeighborExchange bool `protobuf:"varint,8,opt,name=is_neighbor_exchange,json=isNeighborExchange,proto3" json:"is_neighbor_exchange,omitempty"`
	// If true, the reason  not to delete this LSA is because it has a contributing entry in the routing table
	IsRoutingTable bool `protobuf:"varint,9,opt,name=is_routing_table,json=isRoutingTable,proto3" json:"is_routing_table,omitempty"`
	// If true, the reason not to delete this LSA is because it's Acknowledgement list is not empty
	IsAcknowledged bool `protobuf:"varint,10,opt,name=is_acknowledged,json=isAcknowledged,proto3" json:"is_acknowledged,omitempty"`
	// If true, the reason not to delete this LSA is because it is in Maxage Queue
	IsMaximumAged bool `protobuf:"varint,11,opt,name=is_maximum_aged,json=isMaximumAged,proto3" json:"is_maximum_aged,omitempty"`
	// If true, the reason not to delete this LSA is because it is in partial SPF queue
	IsPartialSpf bool `protobuf:"varint,12,opt,name=is_partial_spf,json=isPartialSpf,proto3" json:"is_partial_spf,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for flooding or retransmission
	IsFloodPending bool `protobuf:"varint,13,opt,name=is_flood_pending,json=isFloodPending,proto3" json:"is_flood_pending,omitempty"`
	// If true, the reason not to delete this LSA is because waiting for next wait-interval to expire
	RateLimit bool `protobuf:"varint,14,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// If true, the reason not to delete this LSA is because NSR ACK from standby is pending
	IsNsrAckPending bool `protobuf:"varint,15,opt,name=is_nsr_ack_pending,json=isNsrAckPending,proto3" json:"is_nsr_ack_pending,omitempty"`
	// If true, the reason not to delete this LSA is because it is pending flooding on switchover
	NsrFloodRequired bool `protobuf:"varint,16,opt,name=nsr_flood_required,json=nsrFloodRequired,proto3" json:"nsr_flood_required,omitempty"`
	// LSA flood required after FO
	LsaFloodRequiredPostFailOver bool `protobuf:"varint,17,opt,name=lsa_flood_required_post_fail_over,json=lsaFloodRequiredPostFailOver,proto3" json:"lsa_flood_required_post_fail_over,omitempty"`
	// Length of the LSA
	LsaLength uint32 `protobuf:"varint,18,opt,name=lsa_length,json=lsaLength,proto3" json:"lsa_length,omitempty"`
	// State of LSA sync with active
	LsaSyncState string `protobuf:"bytes,19,opt,name=lsa_sync_state,json=lsaSyncState,proto3" json:"lsa_sync_state,omitempty"`
}

func (x *Ospfv3EdmDbDetail) Reset() {
	*x = Ospfv3EdmDbDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmDbDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmDbDetail) ProtoMessage() {}

func (x *Ospfv3EdmDbDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmDbDetail.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmDbDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{4}
}

func (x *Ospfv3EdmDbDetail) GetSecondTableIndex() uint32 {
	if x != nil {
		return x.SecondTableIndex
	}
	return 0
}

func (x *Ospfv3EdmDbDetail) GetMinuteTableIndex() uint32 {
	if x != nil {
		return x.MinuteTableIndex
	}
	return 0
}

func (x *Ospfv3EdmDbDetail) GetFreeTime() uint32 {
	if x != nil {
		return x.FreeTime
	}
	return 0
}

func (x *Ospfv3EdmDbDetail) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsRoutingBit() bool {
	if x != nil {
		return x.IsRoutingBit
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsAdvertisingRouterReachable() bool {
	if x != nil {
		return x.IsAdvertisingRouterReachable
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsNoDelete() bool {
	if x != nil {
		return x.IsNoDelete
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsNeighborExchange() bool {
	if x != nil {
		return x.IsNeighborExchange
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsRoutingTable() bool {
	if x != nil {
		return x.IsRoutingTable
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsAcknowledged() bool {
	if x != nil {
		return x.IsAcknowledged
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsMaximumAged() bool {
	if x != nil {
		return x.IsMaximumAged
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsPartialSpf() bool {
	if x != nil {
		return x.IsPartialSpf
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsFloodPending() bool {
	if x != nil {
		return x.IsFloodPending
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetRateLimit() bool {
	if x != nil {
		return x.RateLimit
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetIsNsrAckPending() bool {
	if x != nil {
		return x.IsNsrAckPending
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetNsrFloodRequired() bool {
	if x != nil {
		return x.NsrFloodRequired
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetLsaFloodRequiredPostFailOver() bool {
	if x != nil {
		return x.LsaFloodRequiredPostFailOver
	}
	return false
}

func (x *Ospfv3EdmDbDetail) GetLsaLength() uint32 {
	if x != nil {
		return x.LsaLength
	}
	return 0
}

func (x *Ospfv3EdmDbDetail) GetLsaSyncState() string {
	if x != nil {
		return x.LsaSyncState
	}
	return ""
}

// OSPFv3 External LSA
type Ospfv3EdmLsaExternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA Information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// IPV6 address prefix
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,4,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// Metric type
	MetricType string `protobuf:"bytes,5,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	// Type of service cost metric
	TosCost uint32 `protobuf:"varint,6,opt,name=tos_cost,json=tosCost,proto3" json:"tos_cost,omitempty"`
	// If true, forwarding address is set
	IsForwardingAddressSet bool `protobuf:"varint,7,opt,name=is_forwarding_address_set,json=isForwardingAddressSet,proto3" json:"is_forwarding_address_set,omitempty"`
	// Forwarding Address
	ForwardingAddress string `protobuf:"bytes,8,opt,name=forwarding_address,json=forwardingAddress,proto3" json:"forwarding_address,omitempty"`
	// Route Tag
	ExternalTag uint32 `protobuf:"varint,9,opt,name=external_tag,json=externalTag,proto3" json:"external_tag,omitempty"`
	// Prefix priority
	Priority string `protobuf:"bytes,10,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Ospfv3EdmLsaExternal) Reset() {
	*x = Ospfv3EdmLsaExternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaExternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaExternal) ProtoMessage() {}

func (x *Ospfv3EdmLsaExternal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaExternal.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaExternal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{5}
}

func (x *Ospfv3EdmLsaExternal) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaExternal) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaExternal) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ospfv3EdmLsaExternal) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ospfv3EdmLsaExternal) GetMetricType() string {
	if x != nil {
		return x.MetricType
	}
	return ""
}

func (x *Ospfv3EdmLsaExternal) GetTosCost() uint32 {
	if x != nil {
		return x.TosCost
	}
	return 0
}

func (x *Ospfv3EdmLsaExternal) GetIsForwardingAddressSet() bool {
	if x != nil {
		return x.IsForwardingAddressSet
	}
	return false
}

func (x *Ospfv3EdmLsaExternal) GetForwardingAddress() string {
	if x != nil {
		return x.ForwardingAddress
	}
	return ""
}

func (x *Ospfv3EdmLsaExternal) GetExternalTag() uint32 {
	if x != nil {
		return x.ExternalTag
	}
	return 0
}

func (x *Ospfv3EdmLsaExternal) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

// OSPFv3 Inter-area Prefix LSA
type Ospfv3EdmLsaIapfx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA Information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// LSA address prefix
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,4,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// Prefix priority
	Priority string `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *Ospfv3EdmLsaIapfx) Reset() {
	*x = Ospfv3EdmLsaIapfx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaIapfx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaIapfx) ProtoMessage() {}

func (x *Ospfv3EdmLsaIapfx) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaIapfx.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaIapfx) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{6}
}

func (x *Ospfv3EdmLsaIapfx) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaIapfx) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaIapfx) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ospfv3EdmLsaIapfx) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ospfv3EdmLsaIapfx) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

// OSPFv3 Inter-area Router LSA
type Ospfv3EdmLsaIartr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// LSA router ID
	LsaRouterId uint32 `protobuf:"varint,3,opt,name=lsa_router_id,json=lsaRouterId,proto3" json:"lsa_router_id,omitempty"`
}

func (x *Ospfv3EdmLsaIartr) Reset() {
	*x = Ospfv3EdmLsaIartr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaIartr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaIartr) ProtoMessage() {}

func (x *Ospfv3EdmLsaIartr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaIartr.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaIartr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{7}
}

func (x *Ospfv3EdmLsaIartr) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaIartr) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaIartr) GetLsaRouterId() uint32 {
	if x != nil {
		return x.LsaRouterId
	}
	return 0
}

// OSPFv3 Link LSA
type Ospfv3EdmLsaLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// LSA interface handle
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// If true, it is a virtual link
	IsVirtualLink bool `protobuf:"varint,4,opt,name=is_virtual_link,json=isVirtualLink,proto3" json:"is_virtual_link,omitempty"`
	// Virtual link ID
	VirtualLinkId uint32 `protobuf:"varint,5,opt,name=virtual_link_id,json=virtualLinkId,proto3" json:"virtual_link_id,omitempty"`
	// If true, it is a sham link
	IsShamLink bool `protobuf:"varint,6,opt,name=is_sham_link,json=isShamLink,proto3" json:"is_sham_link,omitempty"`
	// Sham link ID
	ShamLinkId uint32 `protobuf:"varint,7,opt,name=sham_link_id,json=shamLinkId,proto3" json:"sham_link_id,omitempty"`
	// LSA link local
	LsaLinkLocal string `protobuf:"bytes,8,opt,name=lsa_link_local,json=lsaLinkLocal,proto3" json:"lsa_link_local,omitempty"`
	// Router priority
	RouterPriority uint32 `protobuf:"varint,9,opt,name=router_priority,json=routerPriority,proto3" json:"router_priority,omitempty"`
	// OSPFv3 prefix
	Prefix []*Ospfv3EdmPrefix `protobuf:"bytes,10,rep,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Ospfv3EdmLsaLink) Reset() {
	*x = Ospfv3EdmLsaLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaLink) ProtoMessage() {}

func (x *Ospfv3EdmLsaLink) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaLink.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaLink) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{8}
}

func (x *Ospfv3EdmLsaLink) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaLink) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaLink) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Ospfv3EdmLsaLink) GetIsVirtualLink() bool {
	if x != nil {
		return x.IsVirtualLink
	}
	return false
}

func (x *Ospfv3EdmLsaLink) GetVirtualLinkId() uint32 {
	if x != nil {
		return x.VirtualLinkId
	}
	return 0
}

func (x *Ospfv3EdmLsaLink) GetIsShamLink() bool {
	if x != nil {
		return x.IsShamLink
	}
	return false
}

func (x *Ospfv3EdmLsaLink) GetShamLinkId() uint32 {
	if x != nil {
		return x.ShamLinkId
	}
	return 0
}

func (x *Ospfv3EdmLsaLink) GetLsaLinkLocal() string {
	if x != nil {
		return x.LsaLinkLocal
	}
	return ""
}

func (x *Ospfv3EdmLsaLink) GetRouterPriority() uint32 {
	if x != nil {
		return x.RouterPriority
	}
	return 0
}

func (x *Ospfv3EdmLsaLink) GetPrefix() []*Ospfv3EdmPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

// OSPFv3 Network LSA
type Ospfv3EdmLsaNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// Neighbor router list
	NeighborRouterList [][]byte `protobuf:"bytes,3,rep,name=neighbor_router_list,json=neighborRouterList,proto3" json:"neighbor_router_list,omitempty"`
}

func (x *Ospfv3EdmLsaNetwork) Reset() {
	*x = Ospfv3EdmLsaNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaNetwork) ProtoMessage() {}

func (x *Ospfv3EdmLsaNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaNetwork.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaNetwork) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{9}
}

func (x *Ospfv3EdmLsaNetwork) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaNetwork) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaNetwork) GetNeighborRouterList() [][]byte {
	if x != nil {
		return x.NeighborRouterList
	}
	return nil
}

// OSPFv3 Grace LSA
type Ospfv3EdmLsaGrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// The grace periord where helper routers should wait before advertising it fully adjacent(s)
	GracePeriod uint32 `protobuf:"varint,3,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	// Reason for router restart
	GraceReason string `protobuf:"bytes,4,opt,name=grace_reason,json=graceReason,proto3" json:"grace_reason,omitempty"`
}

func (x *Ospfv3EdmLsaGrace) Reset() {
	*x = Ospfv3EdmLsaGrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaGrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaGrace) ProtoMessage() {}

func (x *Ospfv3EdmLsaGrace) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaGrace.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaGrace) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{10}
}

func (x *Ospfv3EdmLsaGrace) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaGrace) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaGrace) GetGracePeriod() uint32 {
	if x != nil {
		return x.GracePeriod
	}
	return 0
}

func (x *Ospfv3EdmLsaGrace) GetGraceReason() string {
	if x != nil {
		return x.GraceReason
	}
	return ""
}

// OSPFv3 Prefix LSA
type Ospfv3EdmLsaPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// Reference type
	ReferenceType string `protobuf:"bytes,3,opt,name=reference_type,json=referenceType,proto3" json:"reference_type,omitempty"`
	// Reference LSA ID
	ReferenceLsaId uint32 `protobuf:"varint,4,opt,name=reference_lsa_id,json=referenceLsaId,proto3" json:"reference_lsa_id,omitempty"`
	// Reference advertised router
	ReferenceAdvertisedRouter string `protobuf:"bytes,5,opt,name=reference_advertised_router,json=referenceAdvertisedRouter,proto3" json:"reference_advertised_router,omitempty"`
	// OSPFv3 prefix
	Prefix []*Ospfv3EdmPrefix `protobuf:"bytes,6,rep,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Ospfv3EdmLsaPrefix) Reset() {
	*x = Ospfv3EdmLsaPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaPrefix) ProtoMessage() {}

func (x *Ospfv3EdmLsaPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaPrefix.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaPrefix) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{11}
}

func (x *Ospfv3EdmLsaPrefix) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaPrefix) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaPrefix) GetReferenceType() string {
	if x != nil {
		return x.ReferenceType
	}
	return ""
}

func (x *Ospfv3EdmLsaPrefix) GetReferenceLsaId() uint32 {
	if x != nil {
		return x.ReferenceLsaId
	}
	return 0
}

func (x *Ospfv3EdmLsaPrefix) GetReferenceAdvertisedRouter() string {
	if x != nil {
		return x.ReferenceAdvertisedRouter
	}
	return ""
}

func (x *Ospfv3EdmLsaPrefix) GetPrefix() []*Ospfv3EdmPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

// OSPFv3 Router LSA Links
type Ospfv3EdmLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of link
	LinkType string `protobuf:"bytes,1,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	// LSA link metric
	LinkMetric uint32 `protobuf:"varint,2,opt,name=link_metric,json=linkMetric,proto3" json:"link_metric,omitempty"`
	// LSA link interface ID
	LinkInterfaceId uint32 `protobuf:"varint,3,opt,name=link_interface_id,json=linkInterfaceId,proto3" json:"link_interface_id,omitempty"`
	// LSA link neighbor interface ID
	LinkNeighborInterfaceId uint32 `protobuf:"varint,4,opt,name=link_neighbor_interface_id,json=linkNeighborInterfaceId,proto3" json:"link_neighbor_interface_id,omitempty"`
	// LSA link neigbhor router id
	LinkNeighborRouterId uint32 `protobuf:"varint,5,opt,name=link_neighbor_router_id,json=linkNeighborRouterId,proto3" json:"link_neighbor_router_id,omitempty"`
}

func (x *Ospfv3EdmLink) Reset() {
	*x = Ospfv3EdmLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLink) ProtoMessage() {}

func (x *Ospfv3EdmLink) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLink.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLink) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{12}
}

func (x *Ospfv3EdmLink) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *Ospfv3EdmLink) GetLinkMetric() uint32 {
	if x != nil {
		return x.LinkMetric
	}
	return 0
}

func (x *Ospfv3EdmLink) GetLinkInterfaceId() uint32 {
	if x != nil {
		return x.LinkInterfaceId
	}
	return 0
}

func (x *Ospfv3EdmLink) GetLinkNeighborInterfaceId() uint32 {
	if x != nil {
		return x.LinkNeighborInterfaceId
	}
	return 0
}

func (x *Ospfv3EdmLink) GetLinkNeighborRouterId() uint32 {
	if x != nil {
		return x.LinkNeighborRouterId
	}
	return 0
}

// OSPFv3 Router LSA Reverse-Path Forwarding Information
type Ospfv3EdmRpfPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RPF multicast next hop
	RpfMulticastNextHop uint32 `protobuf:"varint,1,opt,name=rpf_multicast_next_hop,json=rpfMulticastNextHop,proto3" json:"rpf_multicast_next_hop,omitempty"`
	// RPF multicast IDB
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *Ospfv3EdmRpfPath) Reset() {
	*x = Ospfv3EdmRpfPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmRpfPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmRpfPath) ProtoMessage() {}

func (x *Ospfv3EdmRpfPath) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmRpfPath.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmRpfPath) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{13}
}

func (x *Ospfv3EdmRpfPath) GetRpfMulticastNextHop() uint32 {
	if x != nil {
		return x.RpfMulticastNextHop
	}
	return 0
}

func (x *Ospfv3EdmRpfPath) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

// OSPFv3 Router LSA
type Ospfv3EdmLsaRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// Router LA bits
	RouterLaBits uint32 `protobuf:"varint,3,opt,name=router_la_bits,json=routerLaBits,proto3" json:"router_la_bits,omitempty"`
	// List of links in this LSA
	LinkList []*Ospfv3EdmLink `protobuf:"bytes,4,rep,name=link_list,json=linkList,proto3" json:"link_list,omitempty"`
	// Router LSA Reverse-Path Forwarding information
	RpfPath *Ospfv3EdmRpfPath `protobuf:"bytes,5,opt,name=rpf_path,json=rpfPath,proto3" json:"rpf_path,omitempty"`
}

func (x *Ospfv3EdmLsaRouter) Reset() {
	*x = Ospfv3EdmLsaRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaRouter) ProtoMessage() {}

func (x *Ospfv3EdmLsaRouter) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaRouter.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaRouter) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{14}
}

func (x *Ospfv3EdmLsaRouter) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaRouter) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaRouter) GetRouterLaBits() uint32 {
	if x != nil {
		return x.RouterLaBits
	}
	return 0
}

func (x *Ospfv3EdmLsaRouter) GetLinkList() []*Ospfv3EdmLink {
	if x != nil {
		return x.LinkList
	}
	return nil
}

func (x *Ospfv3EdmLsaRouter) GetRpfPath() *Ospfv3EdmRpfPath {
	if x != nil {
		return x.RpfPath
	}
	return nil
}

// OSPFv3 Unknown LSA Database Information
type Ospfv3EdmLsaUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// LSA interface name
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// If true, it is a virtual link
	IsVirtualLink bool `protobuf:"varint,4,opt,name=is_virtual_link,json=isVirtualLink,proto3" json:"is_virtual_link,omitempty"`
	// Virtual link ID
	VirtualLinkId uint32 `protobuf:"varint,5,opt,name=virtual_link_id,json=virtualLinkId,proto3" json:"virtual_link_id,omitempty"`
	// If true, it is a sham link
	IsShamLink bool `protobuf:"varint,6,opt,name=is_sham_link,json=isShamLink,proto3" json:"is_sham_link,omitempty"`
	// Shamlink ID
	ShamLinkId uint32 `protobuf:"varint,7,opt,name=sham_link_id,json=shamLinkId,proto3" json:"sham_link_id,omitempty"`
}

func (x *Ospfv3EdmLsaUnknown) Reset() {
	*x = Ospfv3EdmLsaUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmLsaUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmLsaUnknown) ProtoMessage() {}

func (x *Ospfv3EdmLsaUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmLsaUnknown.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmLsaUnknown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{15}
}

func (x *Ospfv3EdmLsaUnknown) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmLsaUnknown) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmLsaUnknown) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Ospfv3EdmLsaUnknown) GetIsVirtualLink() bool {
	if x != nil {
		return x.IsVirtualLink
	}
	return false
}

func (x *Ospfv3EdmLsaUnknown) GetVirtualLinkId() uint32 {
	if x != nil {
		return x.VirtualLinkId
	}
	return 0
}

func (x *Ospfv3EdmLsaUnknown) GetIsShamLink() bool {
	if x != nil {
		return x.IsShamLink
	}
	return false
}

func (x *Ospfv3EdmLsaUnknown) GetShamLinkId() uint32 {
	if x != nil {
		return x.ShamLinkId
	}
	return 0
}

// OSPFv3 Database Information
type Ospfv3EdmDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header information
	LsaHeader *Ospfv3EdmDbHeader `protobuf:"bytes,1,opt,name=lsa_header,json=lsaHeader,proto3" json:"lsa_header,omitempty"`
	// Detailed LSA information
	LsaDetail *Ospfv3EdmDbDetail `protobuf:"bytes,2,opt,name=lsa_detail,json=lsaDetail,proto3" json:"lsa_detail,omitempty"`
	// Number of links
	Links uint32 `protobuf:"varint,3,opt,name=links,proto3" json:"links,omitempty"`
	// Router LA bits
	RouterLaBits uint32 `protobuf:"varint,4,opt,name=router_la_bits,json=routerLaBits,proto3" json:"router_la_bits,omitempty"`
	// Reference type
	ReferenceType uint32 `protobuf:"varint,5,opt,name=reference_type,json=referenceType,proto3" json:"reference_type,omitempty"`
	// Reference LSA ID
	ReferenceLsaId uint32 `protobuf:"varint,6,opt,name=reference_lsa_id,json=referenceLsaId,proto3" json:"reference_lsa_id,omitempty"`
	// LSA router ID
	LsaRouterId uint32 `protobuf:"varint,7,opt,name=lsa_router_id,json=lsaRouterId,proto3" json:"lsa_router_id,omitempty"`
	// OSPFv3 address Prefix
	Prefix string `protobuf:"bytes,8,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,9,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	// LSA interface name
	InterfaceName string `protobuf:"bytes,10,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// If true, it is a virtual link
	IsVirtualLink bool `protobuf:"varint,11,opt,name=is_virtual_link,json=isVirtualLink,proto3" json:"is_virtual_link,omitempty"`
	// Virtual link ID
	VirtualLinkId uint32 `protobuf:"varint,12,opt,name=virtual_link_id,json=virtualLinkId,proto3" json:"virtual_link_id,omitempty"`
	// If true, it is a sham link
	IsShamLink bool `protobuf:"varint,13,opt,name=is_sham_link,json=isShamLink,proto3" json:"is_sham_link,omitempty"`
	// Sham link ID
	ShamLinkId uint32 `protobuf:"varint,14,opt,name=sham_link_id,json=shamLinkId,proto3" json:"sham_link_id,omitempty"`
}

func (x *Ospfv3EdmDatabase) Reset() {
	*x = Ospfv3EdmDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmDatabase) ProtoMessage() {}

func (x *Ospfv3EdmDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmDatabase.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmDatabase) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{16}
}

func (x *Ospfv3EdmDatabase) GetLsaHeader() *Ospfv3EdmDbHeader {
	if x != nil {
		return x.LsaHeader
	}
	return nil
}

func (x *Ospfv3EdmDatabase) GetLsaDetail() *Ospfv3EdmDbDetail {
	if x != nil {
		return x.LsaDetail
	}
	return nil
}

func (x *Ospfv3EdmDatabase) GetLinks() uint32 {
	if x != nil {
		return x.Links
	}
	return 0
}

func (x *Ospfv3EdmDatabase) GetRouterLaBits() uint32 {
	if x != nil {
		return x.RouterLaBits
	}
	return 0
}

func (x *Ospfv3EdmDatabase) GetReferenceType() uint32 {
	if x != nil {
		return x.ReferenceType
	}
	return 0
}

func (x *Ospfv3EdmDatabase) GetReferenceLsaId() uint32 {
	if x != nil {
		return x.ReferenceLsaId
	}
	return 0
}

func (x *Ospfv3EdmDatabase) GetLsaRouterId() uint32 {
	if x != nil {
		return x.LsaRouterId
	}
	return 0
}

func (x *Ospfv3EdmDatabase) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Ospfv3EdmDatabase) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Ospfv3EdmDatabase) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Ospfv3EdmDatabase) GetIsVirtualLink() bool {
	if x != nil {
		return x.IsVirtualLink
	}
	return false
}

func (x *Ospfv3EdmDatabase) GetVirtualLinkId() uint32 {
	if x != nil {
		return x.VirtualLinkId
	}
	return 0
}

func (x *Ospfv3EdmDatabase) GetIsShamLink() bool {
	if x != nil {
		return x.IsShamLink
	}
	return false
}

func (x *Ospfv3EdmDatabase) GetShamLinkId() uint32 {
	if x != nil {
		return x.ShamLinkId
	}
	return 0
}

// Detail LSA information for an LSA
type Ospfv3LsaInfoUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LsaInfoType string `protobuf:"bytes,1,opt,name=lsa_info_type,json=lsaInfoType,proto3" json:"lsa_info_type,omitempty"`
	// Summary information of LSAs
	LsaSummaryInfo *Ospfv3EdmDatabase `protobuf:"bytes,2,opt,name=lsa_summary_info,json=lsaSummaryInfo,proto3" json:"lsa_summary_info,omitempty"`
	// Router LSA
	RouterLsaType *Ospfv3EdmLsaRouter `protobuf:"bytes,3,opt,name=router_lsa_type,json=routerLsaType,proto3" json:"router_lsa_type,omitempty"`
	// Network LSA
	NetworkLsaType *Ospfv3EdmLsaNetwork `protobuf:"bytes,4,opt,name=network_lsa_type,json=networkLsaType,proto3" json:"network_lsa_type,omitempty"`
	// Inter Area Prefix LSA
	InterAreaPrefixLsaType *Ospfv3EdmLsaIapfx `protobuf:"bytes,5,opt,name=inter_area_prefix_lsa_type,json=interAreaPrefixLsaType,proto3" json:"inter_area_prefix_lsa_type,omitempty"`
	// Inter Area Router LSA
	InterAreaRouterLsaType *Ospfv3EdmLsaIartr `protobuf:"bytes,6,opt,name=inter_area_router_lsa_type,json=interAreaRouterLsaType,proto3" json:"inter_area_router_lsa_type,omitempty"`
	// External LSA
	ExternalLsaType *Ospfv3EdmLsaExternal `protobuf:"bytes,7,opt,name=external_lsa_type,json=externalLsaType,proto3" json:"external_lsa_type,omitempty"`
	// NSSA External LSA
	NssalsaType *Ospfv3EdmLsaExternal `protobuf:"bytes,8,opt,name=nssalsa_type,json=nssalsaType,proto3" json:"nssalsa_type,omitempty"`
	// Link LSA
	LinkLsaType *Ospfv3EdmLsaLink `protobuf:"bytes,9,opt,name=link_lsa_type,json=linkLsaType,proto3" json:"link_lsa_type,omitempty"`
	// Intra Area Prefix LSA
	IntraAreaPrefixLsaType *Ospfv3EdmLsaPrefix `protobuf:"bytes,10,opt,name=intra_area_prefix_lsa_type,json=intraAreaPrefixLsaType,proto3" json:"intra_area_prefix_lsa_type,omitempty"`
	// Grace LSA
	GraceLsa *Ospfv3EdmLsaGrace `protobuf:"bytes,11,opt,name=grace_lsa,json=graceLsa,proto3" json:"grace_lsa,omitempty"`
	// Unknown Link Scope LSA
	UnknownLinkLsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,12,opt,name=unknown_link_lsa_type,json=unknownLinkLsaType,proto3" json:"unknown_link_lsa_type,omitempty"`
	// Unknown-Area scope LSA
	UnknownAreaLsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,13,opt,name=unknown_area_lsa_type,json=unknownAreaLsaType,proto3" json:"unknown_area_lsa_type,omitempty"`
	// Unknown-AS scope LSA
	UnknownAslsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,14,opt,name=unknown_aslsa_type,json=unknownAslsaType,proto3" json:"unknown_aslsa_type,omitempty"`
	// Unknown LSA
	UnknownLsaType *Ospfv3EdmLsaUnknown `protobuf:"bytes,15,opt,name=unknown_lsa_type,json=unknownLsaType,proto3" json:"unknown_lsa_type,omitempty"`
}

func (x *Ospfv3LsaInfoUnion) Reset() {
	*x = Ospfv3LsaInfoUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3LsaInfoUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3LsaInfoUnion) ProtoMessage() {}

func (x *Ospfv3LsaInfoUnion) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3LsaInfoUnion.ProtoReflect.Descriptor instead.
func (*Ospfv3LsaInfoUnion) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP(), []int{17}
}

func (x *Ospfv3LsaInfoUnion) GetLsaInfoType() string {
	if x != nil {
		return x.LsaInfoType
	}
	return ""
}

func (x *Ospfv3LsaInfoUnion) GetLsaSummaryInfo() *Ospfv3EdmDatabase {
	if x != nil {
		return x.LsaSummaryInfo
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetRouterLsaType() *Ospfv3EdmLsaRouter {
	if x != nil {
		return x.RouterLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetNetworkLsaType() *Ospfv3EdmLsaNetwork {
	if x != nil {
		return x.NetworkLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetInterAreaPrefixLsaType() *Ospfv3EdmLsaIapfx {
	if x != nil {
		return x.InterAreaPrefixLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetInterAreaRouterLsaType() *Ospfv3EdmLsaIartr {
	if x != nil {
		return x.InterAreaRouterLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetExternalLsaType() *Ospfv3EdmLsaExternal {
	if x != nil {
		return x.ExternalLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetNssalsaType() *Ospfv3EdmLsaExternal {
	if x != nil {
		return x.NssalsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetLinkLsaType() *Ospfv3EdmLsaLink {
	if x != nil {
		return x.LinkLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetIntraAreaPrefixLsaType() *Ospfv3EdmLsaPrefix {
	if x != nil {
		return x.IntraAreaPrefixLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetGraceLsa() *Ospfv3EdmLsaGrace {
	if x != nil {
		return x.GraceLsa
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetUnknownLinkLsaType() *Ospfv3EdmLsaUnknown {
	if x != nil {
		return x.UnknownLinkLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetUnknownAreaLsaType() *Ospfv3EdmLsaUnknown {
	if x != nil {
		return x.UnknownAreaLsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetUnknownAslsaType() *Ospfv3EdmLsaUnknown {
	if x != nil {
		return x.UnknownAslsaType
	}
	return nil
}

func (x *Ospfv3LsaInfoUnion) GetUnknownLsaType() *Ospfv3EdmLsaUnknown {
	if x != nil {
		return x.UnknownLsaType
	}
	return nil
}

var File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDesc = []byte{
	0x0a, 0x87, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x72, 0x66, 0x73, 0x2f, 0x76,
	0x72, 0x66, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x6c, 0x73, 0x61, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x73, 0x61,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x65, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73,
	0x61, 0x22, 0xfd, 0x01, 0x0a, 0x20, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x97, 0x01, 0x0a, 0x08, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x73, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x11,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x73, 0x70,
	0x5f, 0x66, 0x76, 0x33, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x73, 0x70, 0x46, 0x76, 0x33,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16,
	0x6f, 0x73, 0x70, 0x5f, 0x66, 0x76, 0x33, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x73,
	0x70, 0x46, 0x76, 0x33, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x73, 0x70, 0x5f, 0x66, 0x76, 0x33, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6f, 0x73, 0x70, 0x46, 0x76, 0x33, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0xda, 0x02, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x73, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x73, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x73, 0x61, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x73, 0x61, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x73, 0x61, 0x41, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x73, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x6f, 0x4e, 0x6f,
	0x74, 0x41, 0x67, 0x65, 0x4c, 0x73, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xc2, 0x06,
	0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69,
	0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x61, 0x67, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x67, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x66, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x66,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x6e, 0x73, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4e, 0x73, 0x72, 0x41, 0x63, 0x6b, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x73, 0x72, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x6e, 0x73, 0x72, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x21, 0x6c, 0x73, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x6c, 0x73, 0x61, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x73, 0x61, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x73, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xf5, 0x04, 0x0a, 0x17, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x9a,
	0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a,
	0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c,
	0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x03, 0x0a, 0x14, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x61,
	0x70, 0x66, 0x78, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xf4, 0x02, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x61, 0x72, 0x74, 0x72, 0x12,
	0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a,
	0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09,
	0x6c, 0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x73, 0x61,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6c, 0x73, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xec, 0x05,
	0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26,
	0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61,
	0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x53, 0x68, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x6d,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x73,
	0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x73, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x84, 0x03, 0x0a,
	0x16, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73,
	0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73,
	0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x96, 0x03, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65,
	0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x6c, 0x73, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73,
	0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xf5, 0x04, 0x0a,
	0x15, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64,
	0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x73, 0x61, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x72, 0x70, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a,
	0x16, 0x72, 0x70, 0x66, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72,
	0x70, 0x66, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x05, 0x0a, 0x15, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x42,
	0x69, 0x74, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52,
	0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x72, 0x70,
	0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7a, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73,
	0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x72, 0x70, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x07, 0x72, 0x70, 0x66, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x8d, 0x04, 0x0a, 0x16, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x9a, 0x01, 0x0a,
	0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x6c, 0x73, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73,
	0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x68, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x22, 0xf8, 0x05, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73,
	0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x64, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x73, 0x61,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6c, 0x73, 0x61, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64,
	0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x73, 0x61, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x73, 0x61, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x53, 0x68, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68,
	0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x68, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0xad, 0x13, 0x0a,
	0x15, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x73, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x6c,
	0x73, 0x61, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76,
	0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x0e, 0x6c, 0x73, 0x61, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x73, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69,
	0x61, 0x70, 0x66, 0x78, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb7, 0x01, 0x0a,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x61, 0x72, 0x74, 0x72, 0x52, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c,
	0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x73, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x6e, 0x73, 0x73, 0x61, 0x6c, 0x73, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73,
	0x61, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x6e, 0x73, 0x73, 0x61,
	0x6c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x7a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72,
	0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65,
	0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x0b, 0x6c, 0x69, 0x6e,
	0x6b, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x74,
	0x72, 0x61, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7c, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x16, 0x69, 0x6e, 0x74,
	0x72, 0x61, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x73, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x73,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x08, 0x67, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x73, 0x61, 0x12, 0xb0,
	0x01, 0x0a, 0x15, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x12, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x52, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x73, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x73, 0x6c, 0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e,
	0x76, 0x72, 0x66, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x73, 0x6c, 0x73, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x73, 0x2e, 0x76, 0x72, 0x66, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c,
	0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x6c, 0x73, 0x61, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d,
	0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0e, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x73, 0x61, 0x54, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescData = file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_goTypes = []interface{}{
	(*Ospfv3EdmDatabaseLsainfo_KEYS)(nil), // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_database_lsainfo_KEYS
	(*Ospfv3EdmDatabaseLsainfo)(nil),      // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_database_lsainfo
	(*Ospfv3EdmPrefix)(nil),               // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_prefix
	(*Ospfv3EdmDbHeader)(nil),             // 3: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	(*Ospfv3EdmDbDetail)(nil),             // 4: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	(*Ospfv3EdmLsaExternal)(nil),          // 5: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_external
	(*Ospfv3EdmLsaIapfx)(nil),             // 6: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iapfx
	(*Ospfv3EdmLsaIartr)(nil),             // 7: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iartr
	(*Ospfv3EdmLsaLink)(nil),              // 8: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_link
	(*Ospfv3EdmLsaNetwork)(nil),           // 9: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_network
	(*Ospfv3EdmLsaGrace)(nil),             // 10: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_grace
	(*Ospfv3EdmLsaPrefix)(nil),            // 11: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_prefix
	(*Ospfv3EdmLink)(nil),                 // 12: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_link
	(*Ospfv3EdmRpfPath)(nil),              // 13: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_rpf_path
	(*Ospfv3EdmLsaRouter)(nil),            // 14: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_router
	(*Ospfv3EdmLsaUnknown)(nil),           // 15: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown
	(*Ospfv3EdmDatabase)(nil),             // 16: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_database
	(*Ospfv3LsaInfoUnion)(nil),            // 17: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union
}
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_depIdxs = []int32{
	17, // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_database_lsainfo.lsa_info:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union
	3,  // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_external.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_external.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	3,  // 3: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iapfx.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 4: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iapfx.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	3,  // 5: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iartr.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 6: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iartr.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	3,  // 7: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_link.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 8: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_link.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	2,  // 9: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_link.prefix:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_prefix
	3,  // 10: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_network.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 11: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_network.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	3,  // 12: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_grace.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 13: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_grace.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	3,  // 14: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_prefix.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 15: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_prefix.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	2,  // 16: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_prefix.prefix:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_prefix
	3,  // 17: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_router.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 18: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_router.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	12, // 19: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_router.link_list:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_link
	13, // 20: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_router.rpf_path:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_rpf_path
	3,  // 21: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 22: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	3,  // 23: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_database.lsa_header:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_header
	4,  // 24: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_database.lsa_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_db_detail
	16, // 25: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.lsa_summary_info:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_database
	14, // 26: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.router_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_router
	9,  // 27: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.network_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_network
	6,  // 28: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.inter_area_prefix_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iapfx
	7,  // 29: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.inter_area_router_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_iartr
	5,  // 30: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.external_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_external
	5,  // 31: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.nssalsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_external
	8,  // 32: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.link_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_link
	11, // 33: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.intra_area_prefix_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_prefix
	10, // 34: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.grace_lsa:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_grace
	15, // 35: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.unknown_link_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown
	15, // 36: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.unknown_area_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown
	15, // 37: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.unknown_aslsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown
	15, // 38: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_lsa_info_union.unknown_lsa_type:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.database_table.lsa_internal_table.lsa.ospfv3_edm_lsa_unknown
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_init()
}
func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_init() {
	if File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmDatabaseLsainfo_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmDatabaseLsainfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmDbHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmDbDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaExternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaIapfx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaIartr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaGrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmRpfPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmLsaUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3LsaInfoUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto = out.File
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_vrfs_vrf_database_table_lsa_internal_table_lsa_ospfv3_edm_database_lsainfo_proto_depIdxs = nil
}
