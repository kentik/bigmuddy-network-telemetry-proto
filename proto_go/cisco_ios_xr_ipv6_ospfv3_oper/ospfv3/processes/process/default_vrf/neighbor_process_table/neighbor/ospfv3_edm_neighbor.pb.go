// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_ospfv3_oper/ospfv3/processes/process/default_vrf/neighbor_process_table/neighbor/ospfv3_edm_neighbor.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPFv3 neighbor summary information
type Ospfv3EdmNeighbor_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName     string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	InterfaceName   string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *Ospfv3EdmNeighbor_KEYS) Reset() {
	*x = Ospfv3EdmNeighbor_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmNeighbor_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmNeighbor_KEYS) ProtoMessage() {}

func (x *Ospfv3EdmNeighbor_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmNeighbor_KEYS.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmNeighbor_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescGZIP(), []int{0}
}

func (x *Ospfv3EdmNeighbor_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Ospfv3EdmNeighbor_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Ospfv3EdmNeighbor_KEYS) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

type Ospfv3EdmNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor IP Address
	NeighborAddress string `protobuf:"bytes,50,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Neighbor interface ID
	NeighborInterfaceId uint32 `protobuf:"varint,51,opt,name=neighbor_interface_id,json=neighborInterfaceId,proto3" json:"neighbor_interface_id,omitempty"`
	// Neighbor's DR priority
	NeighborDrPriority uint32 `protobuf:"varint,52,opt,name=neighbor_dr_priority,json=neighborDrPriority,proto3" json:"neighbor_dr_priority,omitempty"`
	// Neighbor's state
	NeighborState string `protobuf:"bytes,53,opt,name=neighbor_state,json=neighborState,proto3" json:"neighbor_state,omitempty"`
	// Designated router
	NeighborDesignatedRouter string `protobuf:"bytes,54,opt,name=neighbor_designated_router,json=neighborDesignatedRouter,proto3" json:"neighbor_designated_router,omitempty"`
	// Time until neighbor's dead timer expires (seconds)
	NeighborDeadTimer uint32 `protobuf:"varint,55,opt,name=neighbor_dead_timer,json=neighborDeadTimer,proto3" json:"neighbor_dead_timer,omitempty"`
	// Amount of time since the adjacency is up (seconds)
	NeighborUpTime uint32 `protobuf:"varint,56,opt,name=neighbor_up_time,json=neighborUpTime,proto3" json:"neighbor_up_time,omitempty"`
	// Neighbor virtual link id
	NeighborVirtualLinkId uint32 `protobuf:"varint,57,opt,name=neighbor_virtual_link_id,json=neighborVirtualLinkId,proto3" json:"neighbor_virtual_link_id,omitempty"`
	// If true, neighbor is on a virtual link
	IsNeighborVirtualLink bool `protobuf:"varint,58,opt,name=is_neighbor_virtual_link,json=isNeighborVirtualLink,proto3" json:"is_neighbor_virtual_link,omitempty"`
	// Neighbor sham link id
	NeighborShamLinkId uint32 `protobuf:"varint,59,opt,name=neighbor_sham_link_id,json=neighborShamLinkId,proto3" json:"neighbor_sham_link_id,omitempty"`
	// If true, neighbor is on a sham link
	IsNeighborShamLink bool `protobuf:"varint,60,opt,name=is_neighbor_sham_link,json=isNeighborShamLink,proto3" json:"is_neighbor_sham_link,omitempty"`
	// Detailed OSPFv3 neighbor information
	NeighborDetail *Ospfv3EdmNeighborDetail `protobuf:"bytes,61,opt,name=neighbor_detail,json=neighborDetail,proto3" json:"neighbor_detail,omitempty"`
	// Neighbor BFD information
	NeighborBfdInfo *Ospfv3EdmNeighborBfd `protobuf:"bytes,62,opt,name=neighbor_bfd_info,json=neighborBfdInfo,proto3" json:"neighbor_bfd_info,omitempty"`
}

func (x *Ospfv3EdmNeighbor) Reset() {
	*x = Ospfv3EdmNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmNeighbor) ProtoMessage() {}

func (x *Ospfv3EdmNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmNeighbor.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmNeighbor) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescGZIP(), []int{1}
}

func (x *Ospfv3EdmNeighbor) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *Ospfv3EdmNeighbor) GetNeighborInterfaceId() uint32 {
	if x != nil {
		return x.NeighborInterfaceId
	}
	return 0
}

func (x *Ospfv3EdmNeighbor) GetNeighborDrPriority() uint32 {
	if x != nil {
		return x.NeighborDrPriority
	}
	return 0
}

func (x *Ospfv3EdmNeighbor) GetNeighborState() string {
	if x != nil {
		return x.NeighborState
	}
	return ""
}

func (x *Ospfv3EdmNeighbor) GetNeighborDesignatedRouter() string {
	if x != nil {
		return x.NeighborDesignatedRouter
	}
	return ""
}

func (x *Ospfv3EdmNeighbor) GetNeighborDeadTimer() uint32 {
	if x != nil {
		return x.NeighborDeadTimer
	}
	return 0
}

func (x *Ospfv3EdmNeighbor) GetNeighborUpTime() uint32 {
	if x != nil {
		return x.NeighborUpTime
	}
	return 0
}

func (x *Ospfv3EdmNeighbor) GetNeighborVirtualLinkId() uint32 {
	if x != nil {
		return x.NeighborVirtualLinkId
	}
	return 0
}

func (x *Ospfv3EdmNeighbor) GetIsNeighborVirtualLink() bool {
	if x != nil {
		return x.IsNeighborVirtualLink
	}
	return false
}

func (x *Ospfv3EdmNeighbor) GetNeighborShamLinkId() uint32 {
	if x != nil {
		return x.NeighborShamLinkId
	}
	return 0
}

func (x *Ospfv3EdmNeighbor) GetIsNeighborShamLink() bool {
	if x != nil {
		return x.IsNeighborShamLink
	}
	return false
}

func (x *Ospfv3EdmNeighbor) GetNeighborDetail() *Ospfv3EdmNeighborDetail {
	if x != nil {
		return x.NeighborDetail
	}
	return nil
}

func (x *Ospfv3EdmNeighbor) GetNeighborBfdInfo() *Ospfv3EdmNeighborBfd {
	if x != nil {
		return x.NeighborBfdInfo
	}
	return nil
}

// OSPFv3 neighbor retransmission information
type Ospfv3EdmNeighborRetrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of database descriptor retransmissions during last exchange
	DatabaseDescriptorRetransmissions uint32 `protobuf:"varint,1,opt,name=database_descriptor_retransmissions,json=databaseDescriptorRetransmissions,proto3" json:"database_descriptor_retransmissions,omitempty"`
	// Area scope LSA's flood index
	AreaFloodIndex uint32 `protobuf:"varint,2,opt,name=area_flood_index,json=areaFloodIndex,proto3" json:"area_flood_index,omitempty"`
	// AS scope LSA's flood index
	AsFloodIndex uint32 `protobuf:"varint,3,opt,name=as_flood_index,json=asFloodIndex,proto3" json:"as_flood_index,omitempty"`
	// Link flood index
	LinkFloodIndex uint32 `protobuf:"varint,4,opt,name=link_flood_index,json=linkFloodIndex,proto3" json:"link_flood_index,omitempty"`
	// Number of neighbor retransmissions
	NeighborRetransmissions uint32 `protobuf:"varint,5,opt,name=neighbor_retransmissions,json=neighborRetransmissions,proto3" json:"neighbor_retransmissions,omitempty"`
	// Number of retransmissions for this neighbor
	Retransmissions uint32 `protobuf:"varint,6,opt,name=retransmissions,proto3" json:"retransmissions,omitempty"`
	// First flood item for area scope LSAs
	AreaFirstFlood uint32 `protobuf:"varint,7,opt,name=area_first_flood,json=areaFirstFlood,proto3" json:"area_first_flood,omitempty"`
	// Index of the first flood item for area scope LSAs
	AreaFirstFloodIndex uint32 `protobuf:"varint,8,opt,name=area_first_flood_index,json=areaFirstFloodIndex,proto3" json:"area_first_flood_index,omitempty"`
	// First flood item for AS scope LSAs
	AsFirstFlood uint32 `protobuf:"varint,9,opt,name=as_first_flood,json=asFirstFlood,proto3" json:"as_first_flood,omitempty"`
	// Index for first flood item for AS scope LSAs
	AsFirstFloodIndex uint32 `protobuf:"varint,10,opt,name=as_first_flood_index,json=asFirstFloodIndex,proto3" json:"as_first_flood_index,omitempty"`
	// Link first flood information
	LinkFirstFlood uint32 `protobuf:"varint,11,opt,name=link_first_flood,json=linkFirstFlood,proto3" json:"link_first_flood,omitempty"`
	// Link first flood information index
	LinkFirstFloodIndex uint32 `protobuf:"varint,12,opt,name=link_first_flood_index,json=linkFirstFloodIndex,proto3" json:"link_first_flood_index,omitempty"`
	// Next flood item for area scope LSAs
	AreaNextFlood uint32 `protobuf:"varint,13,opt,name=area_next_flood,json=areaNextFlood,proto3" json:"area_next_flood,omitempty"`
	// Index of next flood item for Area scope LSAs
	AreaNextFloodIndex uint32 `protobuf:"varint,14,opt,name=area_next_flood_index,json=areaNextFloodIndex,proto3" json:"area_next_flood_index,omitempty"`
	// Next flood item for AS scope LSAs
	AsNextFlood uint32 `protobuf:"varint,15,opt,name=as_next_flood,json=asNextFlood,proto3" json:"as_next_flood,omitempty"`
	// Index of next flood item for AS scope LSAs
	AsNextFloodIndex uint32 `protobuf:"varint,16,opt,name=as_next_flood_index,json=asNextFloodIndex,proto3" json:"as_next_flood_index,omitempty"`
	// Link next flood information
	LinkNextFlood uint32 `protobuf:"varint,17,opt,name=link_next_flood,json=linkNextFlood,proto3" json:"link_next_flood,omitempty"`
	// Link next flood information index
	LinkNextFloodIndex uint32 `protobuf:"varint,18,opt,name=link_next_flood_index,json=linkNextFloodIndex,proto3" json:"link_next_flood_index,omitempty"`
	// Number of LSAs sent in last retransmission
	LastRetransmissionLength uint32 `protobuf:"varint,19,opt,name=last_retransmission_length,json=lastRetransmissionLength,proto3" json:"last_retransmission_length,omitempty"`
	// Maximum number of LSAs sent in a retransmission
	MaximumRetransmissionLength uint32 `protobuf:"varint,20,opt,name=maximum_retransmission_length,json=maximumRetransmissionLength,proto3" json:"maximum_retransmission_length,omitempty"`
	// Last retransmission scan time (ms)
	LastRetransmissionTime uint32 `protobuf:"varint,21,opt,name=last_retransmission_time,json=lastRetransmissionTime,proto3" json:"last_retransmission_time,omitempty"`
	// Maximum retransmission scan time (ms)
	MaximumRetransmissionTime uint32 `protobuf:"varint,22,opt,name=maximum_retransmission_time,json=maximumRetransmissionTime,proto3" json:"maximum_retransmission_time,omitempty"`
	// Time until next LSA retransmission (ms)
	LsaRetransmissionTimer uint32 `protobuf:"varint,23,opt,name=lsa_retransmission_timer,json=lsaRetransmissionTimer,proto3" json:"lsa_retransmission_timer,omitempty"`
}

func (x *Ospfv3EdmNeighborRetrans) Reset() {
	*x = Ospfv3EdmNeighborRetrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmNeighborRetrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmNeighborRetrans) ProtoMessage() {}

func (x *Ospfv3EdmNeighborRetrans) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmNeighborRetrans.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmNeighborRetrans) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescGZIP(), []int{2}
}

func (x *Ospfv3EdmNeighborRetrans) GetDatabaseDescriptorRetransmissions() uint32 {
	if x != nil {
		return x.DatabaseDescriptorRetransmissions
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAreaFloodIndex() uint32 {
	if x != nil {
		return x.AreaFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAsFloodIndex() uint32 {
	if x != nil {
		return x.AsFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLinkFloodIndex() uint32 {
	if x != nil {
		return x.LinkFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetNeighborRetransmissions() uint32 {
	if x != nil {
		return x.NeighborRetransmissions
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetRetransmissions() uint32 {
	if x != nil {
		return x.Retransmissions
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAreaFirstFlood() uint32 {
	if x != nil {
		return x.AreaFirstFlood
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAreaFirstFloodIndex() uint32 {
	if x != nil {
		return x.AreaFirstFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAsFirstFlood() uint32 {
	if x != nil {
		return x.AsFirstFlood
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAsFirstFloodIndex() uint32 {
	if x != nil {
		return x.AsFirstFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLinkFirstFlood() uint32 {
	if x != nil {
		return x.LinkFirstFlood
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLinkFirstFloodIndex() uint32 {
	if x != nil {
		return x.LinkFirstFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAreaNextFlood() uint32 {
	if x != nil {
		return x.AreaNextFlood
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAreaNextFloodIndex() uint32 {
	if x != nil {
		return x.AreaNextFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAsNextFlood() uint32 {
	if x != nil {
		return x.AsNextFlood
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetAsNextFloodIndex() uint32 {
	if x != nil {
		return x.AsNextFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLinkNextFlood() uint32 {
	if x != nil {
		return x.LinkNextFlood
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLinkNextFloodIndex() uint32 {
	if x != nil {
		return x.LinkNextFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLastRetransmissionLength() uint32 {
	if x != nil {
		return x.LastRetransmissionLength
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionLength() uint32 {
	if x != nil {
		return x.MaximumRetransmissionLength
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLastRetransmissionTime() uint32 {
	if x != nil {
		return x.LastRetransmissionTime
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetMaximumRetransmissionTime() uint32 {
	if x != nil {
		return x.MaximumRetransmissionTime
	}
	return 0
}

func (x *Ospfv3EdmNeighborRetrans) GetLsaRetransmissionTimer() uint32 {
	if x != nil {
		return x.LsaRetransmissionTimer
	}
	return 0
}

// OSPFv3 Neighbor BFD information
type Ospfv3EdmNeighborBfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD enable mode - Default/Strict
	BfdIntfEnableMode uint32 `protobuf:"varint,1,opt,name=bfd_intf_enable_mode,json=bfdIntfEnableMode,proto3" json:"bfd_intf_enable_mode,omitempty"`
	// Status of the BFD Session
	BfdStatusFlag uint32 `protobuf:"varint,2,opt,name=bfd_status_flag,json=bfdStatusFlag,proto3" json:"bfd_status_flag,omitempty"`
}

func (x *Ospfv3EdmNeighborBfd) Reset() {
	*x = Ospfv3EdmNeighborBfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmNeighborBfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmNeighborBfd) ProtoMessage() {}

func (x *Ospfv3EdmNeighborBfd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmNeighborBfd.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmNeighborBfd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescGZIP(), []int{3}
}

func (x *Ospfv3EdmNeighborBfd) GetBfdIntfEnableMode() uint32 {
	if x != nil {
		return x.BfdIntfEnableMode
	}
	return 0
}

func (x *Ospfv3EdmNeighborBfd) GetBfdStatusFlag() uint32 {
	if x != nil {
		return x.BfdStatusFlag
	}
	return 0
}

// Detailed OSPFv3 neighbor information
type Ospfv3EdmNeighborDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of state changes
	StateChanges uint32 `protobuf:"varint,1,opt,name=state_changes,json=stateChanges,proto3" json:"state_changes,omitempty"`
	// Cost of path to this neighbor
	NeighborCost uint32 `protobuf:"varint,2,opt,name=neighbor_cost,json=neighborCost,proto3" json:"neighbor_cost,omitempty"`
	// If true, filter outgoing LSAs
	IsNeighborFiltered bool `protobuf:"varint,3,opt,name=is_neighbor_filtered,json=isNeighborFiltered,proto3" json:"is_neighbor_filtered,omitempty"`
	// Address of designated router
	NeighborDesignatedRouterAddress string `protobuf:"bytes,4,opt,name=neighbor_designated_router_address,json=neighborDesignatedRouterAddress,proto3" json:"neighbor_designated_router_address,omitempty"`
	// Address of backup designated router
	NeighborBackupDesignatedRouterAddress string `protobuf:"bytes,5,opt,name=neighbor_backup_designated_router_address,json=neighborBackupDesignatedRouterAddress,proto3" json:"neighbor_backup_designated_router_address,omitempty"`
	// Interface type
	InterfaceType string `protobuf:"bytes,6,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	// Poll interval (s)
	PollInterval uint32 `protobuf:"varint,7,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	// For NBMA networks, amount of time remaining in seconds before the next poll interval expires and Hello is sent (s)
	NextPollInterval uint32 `protobuf:"varint,8,opt,name=next_poll_interval,json=nextPollInterval,proto3" json:"next_poll_interval,omitempty"`
	// Remaining time when ignore timer is running
	NeighborIgnoreTimer uint32 `protobuf:"varint,9,opt,name=neighbor_ignore_timer,json=neighborIgnoreTimer,proto3" json:"neighbor_ignore_timer,omitempty"`
	//  This is bitmask of neighbor's option field received
	NeighborOption uint32 `protobuf:"varint,10,opt,name=neighbor_option,json=neighborOption,proto3" json:"neighbor_option,omitempty"`
	// Number of pending events
	PendingEvents uint32 `protobuf:"varint,11,opt,name=pending_events,json=pendingEvents,proto3" json:"pending_events,omitempty"`
	// Retransmission information with this neighbor
	NeighborRetransmission *Ospfv3EdmNeighborRetrans `protobuf:"bytes,12,opt,name=neighbor_retransmission,json=neighborRetransmission,proto3" json:"neighbor_retransmission,omitempty"`
}

func (x *Ospfv3EdmNeighborDetail) Reset() {
	*x = Ospfv3EdmNeighborDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmNeighborDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmNeighborDetail) ProtoMessage() {}

func (x *Ospfv3EdmNeighborDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmNeighborDetail.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmNeighborDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescGZIP(), []int{4}
}

func (x *Ospfv3EdmNeighborDetail) GetStateChanges() uint32 {
	if x != nil {
		return x.StateChanges
	}
	return 0
}

func (x *Ospfv3EdmNeighborDetail) GetNeighborCost() uint32 {
	if x != nil {
		return x.NeighborCost
	}
	return 0
}

func (x *Ospfv3EdmNeighborDetail) GetIsNeighborFiltered() bool {
	if x != nil {
		return x.IsNeighborFiltered
	}
	return false
}

func (x *Ospfv3EdmNeighborDetail) GetNeighborDesignatedRouterAddress() string {
	if x != nil {
		return x.NeighborDesignatedRouterAddress
	}
	return ""
}

func (x *Ospfv3EdmNeighborDetail) GetNeighborBackupDesignatedRouterAddress() string {
	if x != nil {
		return x.NeighborBackupDesignatedRouterAddress
	}
	return ""
}

func (x *Ospfv3EdmNeighborDetail) GetInterfaceType() string {
	if x != nil {
		return x.InterfaceType
	}
	return ""
}

func (x *Ospfv3EdmNeighborDetail) GetPollInterval() uint32 {
	if x != nil {
		return x.PollInterval
	}
	return 0
}

func (x *Ospfv3EdmNeighborDetail) GetNextPollInterval() uint32 {
	if x != nil {
		return x.NextPollInterval
	}
	return 0
}

func (x *Ospfv3EdmNeighborDetail) GetNeighborIgnoreTimer() uint32 {
	if x != nil {
		return x.NeighborIgnoreTimer
	}
	return 0
}

func (x *Ospfv3EdmNeighborDetail) GetNeighborOption() uint32 {
	if x != nil {
		return x.NeighborOption
	}
	return 0
}

func (x *Ospfv3EdmNeighborDetail) GetPendingEvents() uint32 {
	if x != nil {
		return x.PendingEvents
	}
	return 0
}

func (x *Ospfv3EdmNeighborDetail) GetNeighborRetransmission() *Ospfv3EdmNeighborRetrans {
	if x != nil {
		return x.NeighborRetransmission
	}
	return nil
}

var File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDesc = []byte{
	0x0a, 0x7c, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x62,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x91, 0x07, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x65, 0x64, 0x6d, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x44, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31,
	0x0a, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x6d, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x6d,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0xa7, 0x01, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0xa7,
	0x01, 0x0a, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62, 0x66, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x62, 0x66, 0x64, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x42, 0x66, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa0, 0x09, 0x0a, 0x1b, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x23, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x73, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x39, 0x0a, 0x18, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x61, 0x72, 0x65, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x61, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x61, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x73, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x73, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x61,
	0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x73, 0x61, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x17, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x62, 0x66, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x66, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x66, 0x64, 0x49, 0x6e, 0x74, 0x66, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x66, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x66, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0xf8, 0x05, 0x0a, 0x1a, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x29, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xb8, 0x01, 0x0a, 0x17, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x52, 0x16, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescData = file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_goTypes = []interface{}{
	(*Ospfv3EdmNeighbor_KEYS)(nil),   // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_KEYS
	(*Ospfv3EdmNeighbor)(nil),        // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor
	(*Ospfv3EdmNeighborRetrans)(nil), // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_retrans
	(*Ospfv3EdmNeighborBfd)(nil),     // 3: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_bfd
	(*Ospfv3EdmNeighborDetail)(nil),  // 4: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_detail
}
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_depIdxs = []int32{
	4, // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor.neighbor_detail:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_detail
	3, // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor.neighbor_bfd_info:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_bfd
	2, // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_detail.neighbor_retransmission:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.neighbor_process_table.neighbor.ospfv3_edm_neighbor_retrans
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_init()
}
func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_init() {
	if File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmNeighbor_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmNeighborRetrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmNeighborBfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmNeighborDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto = out.File
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_neighbor_process_table_neighbor_ospfv3_edm_neighbor_proto_depIdxs = nil
}
