// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_ospfv3_oper/ospfv3/processes/process/default_vrf/summary/ospfv3/ospfv3_edm_summary.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPFv3 summary
type Ospfv3EdmSummary_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
}

func (x *Ospfv3EdmSummary_KEYS) Reset() {
	*x = Ospfv3EdmSummary_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmSummary_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmSummary_KEYS) ProtoMessage() {}

func (x *Ospfv3EdmSummary_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmSummary_KEYS.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmSummary_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{0}
}

func (x *Ospfv3EdmSummary_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

type Ospfv3EdmSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router ID
	RouterId string `protobuf:"bytes,50,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	// If true, the process is running as stanby role
	IsRoleStandby bool `protobuf:"varint,51,opt,name=is_role_standby,json=isRoleStandby,proto3" json:"is_role_standby,omitempty"`
	// Role, V1/V2 Active/Standby
	Role uint32 `protobuf:"varint,52,opt,name=role,proto3" json:"role,omitempty"`
	// If true, NSR is enabled
	IsNsrEnabled bool `protobuf:"varint,53,opt,name=is_nsr_enabled,json=isNsrEnabled,proto3" json:"is_nsr_enabled,omitempty"`
	// Trigger RP Switchover on detectable process restart
	IsNsrSwitchoverOnRestart bool `protobuf:"varint,54,opt,name=is_nsr_switchover_on_restart,json=isNsrSwitchoverOnRestart,proto3" json:"is_nsr_switchover_on_restart,omitempty"`
	// Stalled Router ID
	IsRouterIdStalled bool `protobuf:"varint,55,opt,name=is_router_id_stalled,json=isRouterIdStalled,proto3" json:"is_router_id_stalled,omitempty"`
	// Opaque LSA capable
	IsOpaqueCapable bool `protobuf:"varint,56,opt,name=is_opaque_capable,json=isOpaqueCapable,proto3" json:"is_opaque_capable,omitempty"`
	// If true, is an area border router
	IsAreaBorderRouter bool `protobuf:"varint,57,opt,name=is_area_border_router,json=isAreaBorderRouter,proto3" json:"is_area_border_router,omitempty"`
	// If true, is an AS border router
	IsAsBorderRouter bool `protobuf:"varint,58,opt,name=is_as_border_router,json=isAsBorderRouter,proto3" json:"is_as_border_router,omitempty"`
	// Redistribution metric
	Metric uint32 `protobuf:"varint,59,opt,name=metric,proto3" json:"metric,omitempty"`
	// If true, origin is by default
	IsDefaultOriginated bool `protobuf:"varint,60,opt,name=is_default_originated,json=isDefaultOriginated,proto3" json:"is_default_originated,omitempty"`
	// If true, default always
	IsDefaultAlways bool `protobuf:"varint,61,opt,name=is_default_always,json=isDefaultAlways,proto3" json:"is_default_always,omitempty"`
	// Default metric
	DefaultMetric uint32 `protobuf:"varint,62,opt,name=default_metric,json=defaultMetric,proto3" json:"default_metric,omitempty"`
	// Default metric type
	DefaultMetricType string `protobuf:"bytes,63,opt,name=default_metric_type,json=defaultMetricType,proto3" json:"default_metric_type,omitempty"`
	// Default tag
	DefaultTag uint32 `protobuf:"varint,64,opt,name=default_tag,json=defaultTag,proto3" json:"default_tag,omitempty"`
	// If true, is a default policy
	IsDefaultPolicy bool `protobuf:"varint,65,opt,name=is_default_policy,json=isDefaultPolicy,proto3" json:"is_default_policy,omitempty"`
	// Default policy name
	DefaultPolicyName string `protobuf:"bytes,66,opt,name=default_policy_name,json=defaultPolicyName,proto3" json:"default_policy_name,omitempty"`
	// Scheduling delay for SPF (ms)
	SpfStartTime uint32 `protobuf:"varint,67,opt,name=spf_start_time,json=spfStartTime,proto3" json:"spf_start_time,omitempty"`
	// Minimum delay time between SPF runs (ms)
	SpfHoldTime uint32 `protobuf:"varint,68,opt,name=spf_hold_time,json=spfHoldTime,proto3" json:"spf_hold_time,omitempty"`
	// Maximum delay time between SPF runs (ms)
	SpfMaximumTime uint32 `protobuf:"varint,69,opt,name=spf_maximum_time,json=spfMaximumTime,proto3" json:"spf_maximum_time,omitempty"`
	// Initial LSA throttle delay (ms)
	LsaStartTime uint32 `protobuf:"varint,70,opt,name=lsa_start_time,json=lsaStartTime,proto3" json:"lsa_start_time,omitempty"`
	// Second delay before generating next LSA (ms)
	LsaHoldTime uint32 `protobuf:"varint,71,opt,name=lsa_hold_time,json=lsaHoldTime,proto3" json:"lsa_hold_time,omitempty"`
	// Maximum delay before generating an LSA (ms)
	LsaMaximumTime uint32 `protobuf:"varint,72,opt,name=lsa_maximum_time,json=lsaMaximumTime,proto3" json:"lsa_maximum_time,omitempty"`
	// Minimum time between LSA regeneration (ms)
	MinimumLsaInterval uint32 `protobuf:"varint,73,opt,name=minimum_lsa_interval,json=minimumLsaInterval,proto3" json:"minimum_lsa_interval,omitempty"`
	// LSA refresh interval (sec)
	LsaGroupInterval uint32 `protobuf:"varint,74,opt,name=lsa_group_interval,json=lsaGroupInterval,proto3" json:"lsa_group_interval,omitempty"`
	// LSA flood pacing timer (ms)
	LsaFloodPacingInterval uint32 `protobuf:"varint,75,opt,name=lsa_flood_pacing_interval,json=lsaFloodPacingInterval,proto3" json:"lsa_flood_pacing_interval,omitempty"`
	// LSA retransmission pacing timer (ms)
	LsaRetransmissionPacingInterval uint32 `protobuf:"varint,76,opt,name=lsa_retransmission_pacing_interval,json=lsaRetransmissionPacingInterval,proto3" json:"lsa_retransmission_pacing_interval,omitempty"`
	// Number of AS scope LSAs
	AsLsAs uint32 `protobuf:"varint,77,opt,name=as_ls_as,json=asLsAs,proto3" json:"as_ls_as,omitempty"`
	// Number of opaque LSAs
	OpaqueLsAs uint32 `protobuf:"varint,78,opt,name=opaque_ls_as,json=opaqueLsAs,proto3" json:"opaque_ls_as,omitempty"`
	// Sum of opaque LSA checksum
	OpaqueLsaChecksum uint32 `protobuf:"varint,79,opt,name=opaque_lsa_checksum,json=opaqueLsaChecksum,proto3" json:"opaque_lsa_checksum,omitempty"`
	// Number of external and AS opaque LSAs with demand circut bit not set
	AsDcBitlessLsAs uint32 `protobuf:"varint,80,opt,name=as_dc_bitless_ls_as,json=asDcBitlessLsAs,proto3" json:"as_dc_bitless_ls_as,omitempty"`
	// Number of external and AS opaque LSAs with do not age set
	AsDoNotAgeLsAs uint32 `protobuf:"varint,81,opt,name=as_do_not_age_ls_as,json=asDoNotAgeLsAs,proto3" json:"as_do_not_age_ls_as,omitempty"`
	// Number of areas
	Areas uint32 `protobuf:"varint,82,opt,name=areas,proto3" json:"areas,omitempty"`
	// Number of normal areas
	NormalAreas uint32 `protobuf:"varint,83,opt,name=normal_areas,json=normalAreas,proto3" json:"normal_areas,omitempty"`
	// Number of stub and total stub areas
	StubAreas uint32 `protobuf:"varint,84,opt,name=stub_areas,json=stubAreas,proto3" json:"stub_areas,omitempty"`
	// Number of NSSA areas
	NssaAreas uint32 `protobuf:"varint,85,opt,name=nssa_areas,json=nssaAreas,proto3" json:"nssa_areas,omitempty"`
	// Length of AS LSAs flood list
	AsLsaFloodListLength uint32 `protobuf:"varint,86,opt,name=as_lsa_flood_list_length,json=asLsaFloodListLength,proto3" json:"as_lsa_flood_list_length,omitempty"`
	// If true, grace restart is enabled
	IsGraceRestartEnabled bool `protobuf:"varint,87,opt,name=is_grace_restart_enabled,json=isGraceRestartEnabled,proto3" json:"is_grace_restart_enabled,omitempty"`
	//  Length of time since the last NSF (s)
	LastNsfTime uint32 `protobuf:"varint,88,opt,name=last_nsf_time,json=lastNsfTime,proto3" json:"last_nsf_time,omitempty"`
	// Grace time to resync
	GraceResyncTime uint32 `protobuf:"varint,89,opt,name=grace_resync_time,json=graceResyncTime,proto3" json:"grace_resync_time,omitempty"`
	// Maximum number of interfaces
	MaximumInterfaces uint32 `protobuf:"varint,90,opt,name=maximum_interfaces,json=maximumInterfaces,proto3" json:"maximum_interfaces,omitempty"`
	// Maximum number of paths
	MaximumPaths uint32 `protobuf:"varint,91,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
	// The number of redistributed prefixes allowed
	RedistributionLimit uint32 `protobuf:"varint,92,opt,name=redistribution_limit,json=redistributionLimit,proto3" json:"redistribution_limit,omitempty"`
	// When the number of redistributed prefixes reaches this threshold, a warning message is issued
	RedistributionThreshold uint32 `protobuf:"varint,93,opt,name=redistribution_threshold,json=redistributionThreshold,proto3" json:"redistribution_threshold,omitempty"`
	// If true, auto cost is enabled
	IsAutoCost bool `protobuf:"varint,94,opt,name=is_auto_cost,json=isAutoCost,proto3" json:"is_auto_cost,omitempty"`
	// Reference Bandwdith
	ReferenceBandwidth uint32 `protobuf:"varint,95,opt,name=reference_bandwidth,json=referenceBandwidth,proto3" json:"reference_bandwidth,omitempty"`
	// Domain ID information
	DomainId *Ospfv3ShDomainId `protobuf:"bytes,96,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// Stub Router Information
	StubRouter []*Ospfv3ShStubRouter `protobuf:"bytes,97,rep,name=stub_router,json=stubRouter,proto3" json:"stub_router,omitempty"`
	// IPFRR-Tiebreakers list
	IpfrrTiebreakersList []*OspfShIpfrrTb `protobuf:"bytes,98,rep,name=ipfrr_tiebreakers_list,json=ipfrrTiebreakersList,proto3" json:"ipfrr_tiebreakers_list,omitempty"`
	// Context name
	ContextName string `protobuf:"bytes,99,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
	// If true, snmp trap is enabled
	SnmpTrapEnabled bool `protobuf:"varint,100,opt,name=snmp_trap_enabled,json=snmpTrapEnabled,proto3" json:"snmp_trap_enabled,omitempty"`
	// Graceful shutdown state
	GracefulShutdownState string `protobuf:"bytes,101,opt,name=graceful_shutdown_state,json=gracefulShutdownState,proto3" json:"graceful_shutdown_state,omitempty"`
}

func (x *Ospfv3EdmSummary) Reset() {
	*x = Ospfv3EdmSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmSummary) ProtoMessage() {}

func (x *Ospfv3EdmSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmSummary.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmSummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{1}
}

func (x *Ospfv3EdmSummary) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *Ospfv3EdmSummary) GetIsRoleStandby() bool {
	if x != nil {
		return x.IsRoleStandby
	}
	return false
}

func (x *Ospfv3EdmSummary) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetIsNsrEnabled() bool {
	if x != nil {
		return x.IsNsrEnabled
	}
	return false
}

func (x *Ospfv3EdmSummary) GetIsNsrSwitchoverOnRestart() bool {
	if x != nil {
		return x.IsNsrSwitchoverOnRestart
	}
	return false
}

func (x *Ospfv3EdmSummary) GetIsRouterIdStalled() bool {
	if x != nil {
		return x.IsRouterIdStalled
	}
	return false
}

func (x *Ospfv3EdmSummary) GetIsOpaqueCapable() bool {
	if x != nil {
		return x.IsOpaqueCapable
	}
	return false
}

func (x *Ospfv3EdmSummary) GetIsAreaBorderRouter() bool {
	if x != nil {
		return x.IsAreaBorderRouter
	}
	return false
}

func (x *Ospfv3EdmSummary) GetIsAsBorderRouter() bool {
	if x != nil {
		return x.IsAsBorderRouter
	}
	return false
}

func (x *Ospfv3EdmSummary) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetIsDefaultOriginated() bool {
	if x != nil {
		return x.IsDefaultOriginated
	}
	return false
}

func (x *Ospfv3EdmSummary) GetIsDefaultAlways() bool {
	if x != nil {
		return x.IsDefaultAlways
	}
	return false
}

func (x *Ospfv3EdmSummary) GetDefaultMetric() uint32 {
	if x != nil {
		return x.DefaultMetric
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetDefaultMetricType() string {
	if x != nil {
		return x.DefaultMetricType
	}
	return ""
}

func (x *Ospfv3EdmSummary) GetDefaultTag() uint32 {
	if x != nil {
		return x.DefaultTag
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetIsDefaultPolicy() bool {
	if x != nil {
		return x.IsDefaultPolicy
	}
	return false
}

func (x *Ospfv3EdmSummary) GetDefaultPolicyName() string {
	if x != nil {
		return x.DefaultPolicyName
	}
	return ""
}

func (x *Ospfv3EdmSummary) GetSpfStartTime() uint32 {
	if x != nil {
		return x.SpfStartTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetSpfHoldTime() uint32 {
	if x != nil {
		return x.SpfHoldTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetSpfMaximumTime() uint32 {
	if x != nil {
		return x.SpfMaximumTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetLsaStartTime() uint32 {
	if x != nil {
		return x.LsaStartTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetLsaHoldTime() uint32 {
	if x != nil {
		return x.LsaHoldTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetLsaMaximumTime() uint32 {
	if x != nil {
		return x.LsaMaximumTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetMinimumLsaInterval() uint32 {
	if x != nil {
		return x.MinimumLsaInterval
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetLsaGroupInterval() uint32 {
	if x != nil {
		return x.LsaGroupInterval
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetLsaFloodPacingInterval() uint32 {
	if x != nil {
		return x.LsaFloodPacingInterval
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetLsaRetransmissionPacingInterval() uint32 {
	if x != nil {
		return x.LsaRetransmissionPacingInterval
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetAsLsAs() uint32 {
	if x != nil {
		return x.AsLsAs
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetOpaqueLsAs() uint32 {
	if x != nil {
		return x.OpaqueLsAs
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetOpaqueLsaChecksum() uint32 {
	if x != nil {
		return x.OpaqueLsaChecksum
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetAsDcBitlessLsAs() uint32 {
	if x != nil {
		return x.AsDcBitlessLsAs
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetAsDoNotAgeLsAs() uint32 {
	if x != nil {
		return x.AsDoNotAgeLsAs
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetAreas() uint32 {
	if x != nil {
		return x.Areas
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetNormalAreas() uint32 {
	if x != nil {
		return x.NormalAreas
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetStubAreas() uint32 {
	if x != nil {
		return x.StubAreas
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetNssaAreas() uint32 {
	if x != nil {
		return x.NssaAreas
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetAsLsaFloodListLength() uint32 {
	if x != nil {
		return x.AsLsaFloodListLength
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetIsGraceRestartEnabled() bool {
	if x != nil {
		return x.IsGraceRestartEnabled
	}
	return false
}

func (x *Ospfv3EdmSummary) GetLastNsfTime() uint32 {
	if x != nil {
		return x.LastNsfTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetGraceResyncTime() uint32 {
	if x != nil {
		return x.GraceResyncTime
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetMaximumInterfaces() uint32 {
	if x != nil {
		return x.MaximumInterfaces
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetMaximumPaths() uint32 {
	if x != nil {
		return x.MaximumPaths
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetRedistributionLimit() uint32 {
	if x != nil {
		return x.RedistributionLimit
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetRedistributionThreshold() uint32 {
	if x != nil {
		return x.RedistributionThreshold
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetIsAutoCost() bool {
	if x != nil {
		return x.IsAutoCost
	}
	return false
}

func (x *Ospfv3EdmSummary) GetReferenceBandwidth() uint32 {
	if x != nil {
		return x.ReferenceBandwidth
	}
	return 0
}

func (x *Ospfv3EdmSummary) GetDomainId() *Ospfv3ShDomainId {
	if x != nil {
		return x.DomainId
	}
	return nil
}

func (x *Ospfv3EdmSummary) GetStubRouter() []*Ospfv3ShStubRouter {
	if x != nil {
		return x.StubRouter
	}
	return nil
}

func (x *Ospfv3EdmSummary) GetIpfrrTiebreakersList() []*OspfShIpfrrTb {
	if x != nil {
		return x.IpfrrTiebreakersList
	}
	return nil
}

func (x *Ospfv3EdmSummary) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *Ospfv3EdmSummary) GetSnmpTrapEnabled() bool {
	if x != nil {
		return x.SnmpTrapEnabled
	}
	return false
}

func (x *Ospfv3EdmSummary) GetGracefulShutdownState() string {
	if x != nil {
		return x.GracefulShutdownState
	}
	return ""
}

// OSPFv3 time stamp
type Ospfv3EdmTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Seconds
	Second uint32 `protobuf:"varint,1,opt,name=second,proto3" json:"second,omitempty"`
	// Nano seconds
	Nanosecond uint32 `protobuf:"varint,2,opt,name=nanosecond,proto3" json:"nanosecond,omitempty"`
}

func (x *Ospfv3EdmTime) Reset() {
	*x = Ospfv3EdmTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmTime) ProtoMessage() {}

func (x *Ospfv3EdmTime) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmTime.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmTime) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{2}
}

func (x *Ospfv3EdmTime) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *Ospfv3EdmTime) GetNanosecond() uint32 {
	if x != nil {
		return x.Nanosecond
	}
	return 0
}

// OSPFv3 Redistribution Information
type Ospfv3EdmRedist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol name
	ProtocolName string `protobuf:"bytes,1,opt,name=protocol_name,json=protocolName,proto3" json:"protocol_name,omitempty"`
	// Process ID
	ProcessId     string `protobuf:"bytes,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	RedMetricFlag bool   `protobuf:"varint,3,opt,name=red_metric_flag,json=redMetricFlag,proto3" json:"red_metric_flag,omitempty"`
	RedMetric     uint32 `protobuf:"varint,4,opt,name=red_metric,json=redMetric,proto3" json:"red_metric,omitempty"`
	RedMtypeFlag  bool   `protobuf:"varint,5,opt,name=red_mtype_flag,json=redMtypeFlag,proto3" json:"red_mtype_flag,omitempty"`
	RedMetricType uint32 `protobuf:"varint,6,opt,name=red_metric_type,json=redMetricType,proto3" json:"red_metric_type,omitempty"`
	RedTag        uint32 `protobuf:"varint,7,opt,name=red_tag,json=redTag,proto3" json:"red_tag,omitempty"`
	// Route policy name
	PolicyName string `protobuf:"bytes,8,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (x *Ospfv3EdmRedist) Reset() {
	*x = Ospfv3EdmRedist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmRedist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmRedist) ProtoMessage() {}

func (x *Ospfv3EdmRedist) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmRedist.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmRedist) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{3}
}

func (x *Ospfv3EdmRedist) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *Ospfv3EdmRedist) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *Ospfv3EdmRedist) GetRedMetricFlag() bool {
	if x != nil {
		return x.RedMetricFlag
	}
	return false
}

func (x *Ospfv3EdmRedist) GetRedMetric() uint32 {
	if x != nil {
		return x.RedMetric
	}
	return 0
}

func (x *Ospfv3EdmRedist) GetRedMtypeFlag() bool {
	if x != nil {
		return x.RedMtypeFlag
	}
	return false
}

func (x *Ospfv3EdmRedist) GetRedMetricType() uint32 {
	if x != nil {
		return x.RedMetricType
	}
	return 0
}

func (x *Ospfv3EdmRedist) GetRedTag() uint32 {
	if x != nil {
		return x.RedTag
	}
	return 0
}

func (x *Ospfv3EdmRedist) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

// OSPF Domain ID
type Ospfv3ShDomainIdEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Domain ID Type
	DomainIdType uint32 `protobuf:"varint,1,opt,name=domain_id_type,json=domainIdType,proto3" json:"domain_id_type,omitempty"`
	// Domain ID value
	DomainIdValue []byte `protobuf:"bytes,2,opt,name=domain_id_value,json=domainIdValue,proto3" json:"domain_id_value,omitempty"`
}

func (x *Ospfv3ShDomainIdEntry) Reset() {
	*x = Ospfv3ShDomainIdEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3ShDomainIdEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3ShDomainIdEntry) ProtoMessage() {}

func (x *Ospfv3ShDomainIdEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3ShDomainIdEntry.ProtoReflect.Descriptor instead.
func (*Ospfv3ShDomainIdEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{4}
}

func (x *Ospfv3ShDomainIdEntry) GetDomainIdType() uint32 {
	if x != nil {
		return x.DomainIdType
	}
	return 0
}

func (x *Ospfv3ShDomainIdEntry) GetDomainIdValue() []byte {
	if x != nil {
		return x.DomainIdValue
	}
	return nil
}

// OSPF Domain ID entries
type Ospfv3ShDomainId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary Domain ID
	PrimaryDomainId *Ospfv3ShDomainIdEntry `protobuf:"bytes,1,opt,name=primary_domain_id,json=primaryDomainId,proto3" json:"primary_domain_id,omitempty"`
	// List of secondary domain IDs
	SecondaryDomainIdList []*Ospfv3ShDomainIdEntry `protobuf:"bytes,2,rep,name=secondary_domain_id_list,json=secondaryDomainIdList,proto3" json:"secondary_domain_id_list,omitempty"`
}

func (x *Ospfv3ShDomainId) Reset() {
	*x = Ospfv3ShDomainId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3ShDomainId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3ShDomainId) ProtoMessage() {}

func (x *Ospfv3ShDomainId) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3ShDomainId.ProtoReflect.Descriptor instead.
func (*Ospfv3ShDomainId) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{5}
}

func (x *Ospfv3ShDomainId) GetPrimaryDomainId() *Ospfv3ShDomainIdEntry {
	if x != nil {
		return x.PrimaryDomainId
	}
	return nil
}

func (x *Ospfv3ShDomainId) GetSecondaryDomainIdList() []*Ospfv3ShDomainIdEntry {
	if x != nil {
		return x.SecondaryDomainIdList
	}
	return nil
}

// OSPFv3 stub router trigger information
type Ospfv3ShStubRouterTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stub Router Trigger type
	Trigger string `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// If true, stub router is terminated when BGP converges
	WaitForBgp bool `protobuf:"varint,2,opt,name=wait_for_bgp,json=waitForBgp,proto3" json:"wait_for_bgp,omitempty"`
	// Reason for clearing stub router condition
	UnsetReason string `protobuf:"bytes,3,opt,name=unset_reason,json=unsetReason,proto3" json:"unset_reason,omitempty"`
	// Time (in seconds) to stay in stub router mode
	Time uint32 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router condition was cleared
	UnsetTime *Ospfv3EdmTime `protobuf:"bytes,5,opt,name=unset_time,json=unsetTime,proto3" json:"unset_time,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated
	StartTime *Ospfv3EdmTime `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *Ospfv3ShStubRouterTrigger) Reset() {
	*x = Ospfv3ShStubRouterTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3ShStubRouterTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3ShStubRouterTrigger) ProtoMessage() {}

func (x *Ospfv3ShStubRouterTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3ShStubRouterTrigger.ProtoReflect.Descriptor instead.
func (*Ospfv3ShStubRouterTrigger) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{6}
}

func (x *Ospfv3ShStubRouterTrigger) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *Ospfv3ShStubRouterTrigger) GetWaitForBgp() bool {
	if x != nil {
		return x.WaitForBgp
	}
	return false
}

func (x *Ospfv3ShStubRouterTrigger) GetUnsetReason() string {
	if x != nil {
		return x.UnsetReason
	}
	return ""
}

func (x *Ospfv3ShStubRouterTrigger) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Ospfv3ShStubRouterTrigger) GetUnsetTime() *Ospfv3EdmTime {
	if x != nil {
		return x.UnsetTime
	}
	return nil
}

func (x *Ospfv3ShStubRouterTrigger) GetStartTime() *Ospfv3EdmTime {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// OSPFv3 Stub Router Information
type Ospfv3ShStubRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stub router mode
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// If true, stub router mode is active
	Active bool `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	// Remaining time (in seconds) in stub router mode
	RemainingTime uint32 `protobuf:"varint,3,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
	// Reason for entering stub router mode
	SetReason string `protobuf:"bytes,4,opt,name=set_reason,json=setReason,proto3" json:"set_reason,omitempty"`
	// Reason for clearing stub router condition
	UnsetReason string `protobuf:"bytes,5,opt,name=unset_reason,json=unsetReason,proto3" json:"unset_reason,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router condition was cleared
	UnsetTime *Ospfv3EdmTime `protobuf:"bytes,6,opt,name=unset_time,json=unsetTime,proto3" json:"unset_time,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated
	StartTime *Ospfv3EdmTime `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// If true, advertise maximum metric for stub links
	IncludeStubLinks bool `protobuf:"varint,8,opt,name=include_stub_links,json=includeStubLinks,proto3" json:"include_stub_links,omitempty"`
	// Metric for summary LSAs in max-metric mode
	SummaryLsaMetric uint32 `protobuf:"varint,9,opt,name=summary_lsa_metric,json=summaryLsaMetric,proto3" json:"summary_lsa_metric,omitempty"`
	// Metric for external LSAs in max-metric mode
	ExternalLsaMetric uint32 `protobuf:"varint,10,opt,name=external_lsa_metric,json=externalLsaMetric,proto3" json:"external_lsa_metric,omitempty"`
	// Triggers for entering stub router mode
	Triggers []*Ospfv3ShStubRouterTrigger `protobuf:"bytes,11,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// Timestamp (relative to 1970/1/1 00:00) when ABR duties were resumed
	AbrResumeTime *Ospfv3EdmTime `protobuf:"bytes,12,opt,name=abr_resume_time,json=abrResumeTime,proto3" json:"abr_resume_time,omitempty"`
	// Reason for being in ABR off mode
	AbrOffReason string `protobuf:"bytes,13,opt,name=abr_off_reason,json=abrOffReason,proto3" json:"abr_off_reason,omitempty"`
}

func (x *Ospfv3ShStubRouter) Reset() {
	*x = Ospfv3ShStubRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3ShStubRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3ShStubRouter) ProtoMessage() {}

func (x *Ospfv3ShStubRouter) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3ShStubRouter.ProtoReflect.Descriptor instead.
func (*Ospfv3ShStubRouter) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{7}
}

func (x *Ospfv3ShStubRouter) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Ospfv3ShStubRouter) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Ospfv3ShStubRouter) GetRemainingTime() uint32 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

func (x *Ospfv3ShStubRouter) GetSetReason() string {
	if x != nil {
		return x.SetReason
	}
	return ""
}

func (x *Ospfv3ShStubRouter) GetUnsetReason() string {
	if x != nil {
		return x.UnsetReason
	}
	return ""
}

func (x *Ospfv3ShStubRouter) GetUnsetTime() *Ospfv3EdmTime {
	if x != nil {
		return x.UnsetTime
	}
	return nil
}

func (x *Ospfv3ShStubRouter) GetStartTime() *Ospfv3EdmTime {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Ospfv3ShStubRouter) GetIncludeStubLinks() bool {
	if x != nil {
		return x.IncludeStubLinks
	}
	return false
}

func (x *Ospfv3ShStubRouter) GetSummaryLsaMetric() uint32 {
	if x != nil {
		return x.SummaryLsaMetric
	}
	return 0
}

func (x *Ospfv3ShStubRouter) GetExternalLsaMetric() uint32 {
	if x != nil {
		return x.ExternalLsaMetric
	}
	return 0
}

func (x *Ospfv3ShStubRouter) GetTriggers() []*Ospfv3ShStubRouterTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *Ospfv3ShStubRouter) GetAbrResumeTime() *Ospfv3EdmTime {
	if x != nil {
		return x.AbrResumeTime
	}
	return nil
}

func (x *Ospfv3ShStubRouter) GetAbrOffReason() string {
	if x != nil {
		return x.AbrOffReason
	}
	return ""
}

// OSPF IPFRR Tiebreakers
type OspfShIpfrrTb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tiebreaker Type
	TiebreakerType string `protobuf:"bytes,1,opt,name=tiebreaker_type,json=tiebreakerType,proto3" json:"tiebreaker_type,omitempty"`
	// Tiebreaker Index
	TiebreakerIndex uint32 `protobuf:"varint,2,opt,name=tiebreaker_index,json=tiebreakerIndex,proto3" json:"tiebreaker_index,omitempty"`
}

func (x *OspfShIpfrrTb) Reset() {
	*x = OspfShIpfrrTb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OspfShIpfrrTb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OspfShIpfrrTb) ProtoMessage() {}

func (x *OspfShIpfrrTb) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OspfShIpfrrTb.ProtoReflect.Descriptor instead.
func (*OspfShIpfrrTb) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP(), []int{8}
}

func (x *OspfShIpfrrTb) GetTiebreakerType() string {
	if x != nil {
		return x.TiebreakerType
	}
	return ""
}

func (x *OspfShIpfrrTb) GetTiebreakerIndex() uint32 {
	if x != nil {
		return x.TiebreakerIndex
	}
	return 0
}

var File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDesc = []byte{
	0x0a, 0x6a, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x22,
	0x3c, 0x0a, 0x17, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x13,
	0x0a, 0x12, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x6e, 0x73, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x73, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x4e, 0x73, 0x72,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x73, 0x41, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x41, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x70, 0x66, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x70, 0x66, 0x5f, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x70, 0x66,
	0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x66, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x70, 0x66, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x73, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x73, 0x61, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x73, 0x61, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6c, 0x73, 0x61, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x73, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x73, 0x61, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x73, 0x61,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x73, 0x61, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x73, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x73, 0x61, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x73, 0x61, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x4b, 0x0a, 0x22, 0x6c, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6c,
	0x73, 0x61, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x08, 0x61, 0x73, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x73, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4c,
	0x73, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x13, 0x61, 0x73,
	0x5f, 0x64, 0x63, 0x5f, 0x62, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x5f, 0x61,
	0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x73, 0x44, 0x63, 0x42, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x73, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x2b, 0x0a, 0x13, 0x61, 0x73, 0x5f, 0x64,
	0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x41, 0x67,
	0x65, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x75, 0x62, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x73, 0x73, 0x61, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x55, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x73, 0x73, 0x61, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x18,
	0x61, 0x73, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x61, 0x73, 0x4c, 0x73, 0x61, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x47, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x73, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x73, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x73, 0x74, 0x75,
	0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x61, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x68,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x75,
	0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x69, 0x70, 0x66, 0x72, 0x72, 0x5f, 0x74,
	0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x62, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73,
	0x68, 0x5f, 0x69, 0x70, 0x66, 0x72, 0x72, 0x5f, 0x74, 0x62, 0x52, 0x14, 0x69, 0x70, 0x66, 0x72,
	0x72, 0x54, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x70,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x6e, 0x6d, 0x70, 0x54, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x11, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x4d, 0x74, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x19, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x13, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x98,
	0x01, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x18, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x9a, 0x03, 0x0a, 0x1d, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x75, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x67, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x67, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66,
	0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x09, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x62, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82,
	0x07, 0x0a, 0x15, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x75,
	0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x81, 0x01,
	0x0a, 0x0a, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x75, 0x62, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c,
	0x73, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x73, 0x61, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x73,
	0x61, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x73, 0x61, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x8c, 0x01, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f,
	0x73, 0x68, 0x5f, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x61, 0x62, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x6f,
	0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0d,
	0x61, 0x62, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x62, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x72, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x10, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x66, 0x72, 0x72, 0x5f, 0x74, 0x62, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x65, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescData = file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_goTypes = []interface{}{
	(*Ospfv3EdmSummary_KEYS)(nil),     // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_summary_KEYS
	(*Ospfv3EdmSummary)(nil),          // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_summary
	(*Ospfv3EdmTime)(nil),             // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_time
	(*Ospfv3EdmRedist)(nil),           // 3: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_redist
	(*Ospfv3ShDomainIdEntry)(nil),     // 4: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id_entry
	(*Ospfv3ShDomainId)(nil),          // 5: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id
	(*Ospfv3ShStubRouterTrigger)(nil), // 6: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router_trigger
	(*Ospfv3ShStubRouter)(nil),        // 7: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router
	(*OspfShIpfrrTb)(nil),             // 8: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospf_sh_ipfrr_tb
}
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_depIdxs = []int32{
	5,  // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_summary.domain_id:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id
	7,  // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_summary.stub_router:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router
	8,  // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_summary.ipfrr_tiebreakers_list:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospf_sh_ipfrr_tb
	4,  // 3: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id.primary_domain_id:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id_entry
	4,  // 4: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id.secondary_domain_id_list:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_domain_id_entry
	2,  // 5: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router_trigger.unset_time:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_time
	2,  // 6: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router_trigger.start_time:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_time
	2,  // 7: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router.unset_time:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_time
	2,  // 8: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router.start_time:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_time
	6,  // 9: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router.triggers:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router_trigger
	2,  // 10: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_sh_stub_router.abr_resume_time:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3.ospfv3_edm_time
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_init()
}
func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_init() {
	if File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmSummary_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmRedist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3ShDomainIdEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3ShDomainId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3ShStubRouterTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3ShStubRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OspfShIpfrrTb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto = out.File
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_summary_ospfv3_ospfv3_edm_summary_proto_depIdxs = nil
}
