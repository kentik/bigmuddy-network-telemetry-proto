// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv6_ospfv3_oper/ospfv3/processes/process/default_vrf/interface_process_table/interface/ospfv3_edm_interface.proto

package cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// OSPFv3 interface information
type Ospfv3EdmInterface_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessName   string `protobuf:"bytes,1,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *Ospfv3EdmInterface_KEYS) Reset() {
	*x = Ospfv3EdmInterface_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmInterface_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmInterface_KEYS) ProtoMessage() {}

func (x *Ospfv3EdmInterface_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmInterface_KEYS.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmInterface_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescGZIP(), []int{0}
}

func (x *Ospfv3EdmInterface_KEYS) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *Ospfv3EdmInterface_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type Ospfv3EdmInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface state
	InterfaceState string `protobuf:"bytes,50,opt,name=interface_state,json=interfaceState,proto3" json:"interface_state,omitempty"`
	// If true, line protocol is up
	IsInterfaceLineUp bool `protobuf:"varint,51,opt,name=is_interface_line_up,json=isInterfaceLineUp,proto3" json:"is_interface_line_up,omitempty"`
	// If true, interface IP security is required
	IsInterfaceIpSecurityRequired bool `protobuf:"varint,52,opt,name=is_interface_ip_security_required,json=isInterfaceIpSecurityRequired,proto3" json:"is_interface_ip_security_required,omitempty"`
	// If true, interface IP security is active
	IsInterfaceIpSecurityActive bool `protobuf:"varint,53,opt,name=is_interface_ip_security_active,json=isInterfaceIpSecurityActive,proto3" json:"is_interface_ip_security_active,omitempty"`
	// Interface IPv6 address
	InterfaceAddress string `protobuf:"bytes,54,opt,name=interface_address,json=interfaceAddress,proto3" json:"interface_address,omitempty"`
	// Interface number
	InterfaceNumber uint32 `protobuf:"varint,55,opt,name=interface_number,json=interfaceNumber,proto3" json:"interface_number,omitempty"`
	// Interface router ID
	InterfaceRouterId string `protobuf:"bytes,56,opt,name=interface_router_id,json=interfaceRouterId,proto3" json:"interface_router_id,omitempty"`
	// Network type
	NetworkType string `protobuf:"bytes,57,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	// Interface link cost
	InterfaceLinkCost uint32 `protobuf:"varint,58,opt,name=interface_link_cost,json=interfaceLinkCost,proto3" json:"interface_link_cost,omitempty"`
	// If true, interface flood reduction is active
	IsInterfaceFloodReduction bool `protobuf:"varint,59,opt,name=is_interface_flood_reduction,json=isInterfaceFloodReduction,proto3" json:"is_interface_flood_reduction,omitempty"`
	// If true, configured as demand circuit
	IsDemandCircuitConfigured bool `protobuf:"varint,60,opt,name=is_demand_circuit_configured,json=isDemandCircuitConfigured,proto3" json:"is_demand_circuit_configured,omitempty"`
	// If true, interface running as demand circuit
	IsInterfaceDemandCircuit bool `protobuf:"varint,61,opt,name=is_interface_demand_circuit,json=isInterfaceDemandCircuit,proto3" json:"is_interface_demand_circuit,omitempty"`
	// Number of LSAs with demand circuit bit not set for the area in which the interface is running
	InterfaceDcBitlessLsAs uint32 `protobuf:"varint,62,opt,name=interface_dc_bitless_ls_as,json=interfaceDcBitlessLsAs,proto3" json:"interface_dc_bitless_ls_as,omitempty"`
	// Interface transmission delay (sec)
	TransmissionDelay uint32 `protobuf:"varint,63,opt,name=transmission_delay,json=transmissionDelay,proto3" json:"transmission_delay,omitempty"`
	// Interface state
	OspfInterfaceState string `protobuf:"bytes,64,opt,name=ospf_interface_state,json=ospfInterfaceState,proto3" json:"ospf_interface_state,omitempty"`
	// Interface priority
	InterfacePriority uint32 `protobuf:"varint,65,opt,name=interface_priority,json=interfacePriority,proto3" json:"interface_priority,omitempty"`
	// If true, designated router
	IsDesignatedRouter bool `protobuf:"varint,66,opt,name=is_designated_router,json=isDesignatedRouter,proto3" json:"is_designated_router,omitempty"`
	// Designated router ID
	DesignatedRouterId string `protobuf:"bytes,67,opt,name=designated_router_id,json=designatedRouterId,proto3" json:"designated_router_id,omitempty"`
	// Designated router interface address
	DesignatedRouterAddress string `protobuf:"bytes,68,opt,name=designated_router_address,json=designatedRouterAddress,proto3" json:"designated_router_address,omitempty"`
	// Backup designated router ID
	BackupDesignatedRouterId string `protobuf:"bytes,69,opt,name=backup_designated_router_id,json=backupDesignatedRouterId,proto3" json:"backup_designated_router_id,omitempty"`
	// Backup designated router interface address
	BackupDesignatedRouterAddress string `protobuf:"bytes,70,opt,name=backup_designated_router_address,json=backupDesignatedRouterAddress,proto3" json:"backup_designated_router_address,omitempty"`
	// The amount of time in seconds before flush timer for old network LSA expires
	NetworkLsaFlushTimer uint32 `protobuf:"varint,71,opt,name=network_lsa_flush_timer,json=networkLsaFlushTimer,proto3" json:"network_lsa_flush_timer,omitempty"`
	// Filter is configured for out going LSAs
	IsInterfaceLsaFiltered bool `protobuf:"varint,72,opt,name=is_interface_lsa_filtered,json=isInterfaceLsaFiltered,proto3" json:"is_interface_lsa_filtered,omitempty"`
	// Configured hello interval (s)
	HelloInterval uint32 `protobuf:"varint,73,opt,name=hello_interval,json=helloInterval,proto3" json:"hello_interval,omitempty"`
	// Configured dead interval (s)
	DeadInterval uint32 `protobuf:"varint,74,opt,name=dead_interval,json=deadInterval,proto3" json:"dead_interval,omitempty"`
	// Configured wait interval (s)
	WaitInterval uint32 `protobuf:"varint,75,opt,name=wait_interval,json=waitInterval,proto3" json:"wait_interval,omitempty"`
	// Configured retransmit interval (s)
	InterfaceRetransmissionInterval uint32 `protobuf:"varint,76,opt,name=interface_retransmission_interval,json=interfaceRetransmissionInterval,proto3" json:"interface_retransmission_interval,omitempty"`
	// Time until next Hello (s)
	NextHelloTime uint32 `protobuf:"varint,77,opt,name=next_hello_time,json=nextHelloTime,proto3" json:"next_hello_time,omitempty"`
	// Interface authentication spi
	InterfaceAuthenticationSpi uint32 `protobuf:"varint,78,opt,name=interface_authentication_spi,json=interfaceAuthenticationSpi,proto3" json:"interface_authentication_spi,omitempty"`
	// Interface authentication transmit
	InterfaceAuthenticationTransmit uint32 `protobuf:"varint,79,opt,name=interface_authentication_transmit,json=interfaceAuthenticationTransmit,proto3" json:"interface_authentication_transmit,omitempty"`
	// If true, interface encryption is enabled
	IsInterfaceEncryptionEnabled bool `protobuf:"varint,80,opt,name=is_interface_encryption_enabled,json=isInterfaceEncryptionEnabled,proto3" json:"is_interface_encryption_enabled,omitempty"`
	// If true prefix suppression is enabled
	IsPrefixSuppress bool `protobuf:"varint,81,opt,name=is_prefix_suppress,json=isPrefixSuppress,proto3" json:"is_prefix_suppress,omitempty"`
	// Interface encryption spi
	InterfaceEncryptionSpi uint32 `protobuf:"varint,82,opt,name=interface_encryption_spi,json=interfaceEncryptionSpi,proto3" json:"interface_encryption_spi,omitempty"`
	// Interface encryption transmitted
	InterfaceEncryptionTransmitted uint32 `protobuf:"varint,83,opt,name=interface_encryption_transmitted,json=interfaceEncryptionTransmitted,proto3" json:"interface_encryption_transmitted,omitempty"`
	// Interface encrypted authentication transmitted
	InterfaceEncryptedAuthenticationTransmitted uint32 `protobuf:"varint,84,opt,name=interface_encrypted_authentication_transmitted,json=interfaceEncryptedAuthenticationTransmitted,proto3" json:"interface_encrypted_authentication_transmitted,omitempty"`
	// Information for neighbors on the interface
	InterfaceNeighborList []*Ospfv3EdmInterfaceNbr `protobuf:"bytes,85,rep,name=interface_neighbor_list,json=interfaceNeighborList,proto3" json:"interface_neighbor_list,omitempty"`
	// Number of adjacent neighbors
	AdjacentNeighbor uint32 `protobuf:"varint,86,opt,name=adjacent_neighbor,json=adjacentNeighbor,proto3" json:"adjacent_neighbor,omitempty"`
	// Active interface details
	ActiveInterface *Ospfv3EdmInterfaceUp `protobuf:"bytes,87,opt,name=active_interface,json=activeInterface,proto3" json:"active_interface,omitempty"`
	// BFD information
	InterfaceBfd *Ospfv3EdmInterfaceBfd `protobuf:"bytes,88,opt,name=interface_bfd,json=interfaceBfd,proto3" json:"interface_bfd,omitempty"`
	// Interface reference count
	InterfaceReferences uint32 `protobuf:"varint,89,opt,name=interface_references,json=interfaceReferences,proto3" json:"interface_references,omitempty"`
	// If true, configured as LDP sync
	ConfiguredLdpSync bool `protobuf:"varint,90,opt,name=configured_ldp_sync,json=configuredLdpSync,proto3" json:"configured_ldp_sync,omitempty"`
	// If true, interface LDP sync is achieved
	InterfaceLdpSync bool `protobuf:"varint,91,opt,name=interface_ldp_sync,json=interfaceLdpSync,proto3" json:"interface_ldp_sync,omitempty"`
}

func (x *Ospfv3EdmInterface) Reset() {
	*x = Ospfv3EdmInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmInterface) ProtoMessage() {}

func (x *Ospfv3EdmInterface) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmInterface.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmInterface) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescGZIP(), []int{1}
}

func (x *Ospfv3EdmInterface) GetInterfaceState() string {
	if x != nil {
		return x.InterfaceState
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetIsInterfaceLineUp() bool {
	if x != nil {
		return x.IsInterfaceLineUp
	}
	return false
}

func (x *Ospfv3EdmInterface) GetIsInterfaceIpSecurityRequired() bool {
	if x != nil {
		return x.IsInterfaceIpSecurityRequired
	}
	return false
}

func (x *Ospfv3EdmInterface) GetIsInterfaceIpSecurityActive() bool {
	if x != nil {
		return x.IsInterfaceIpSecurityActive
	}
	return false
}

func (x *Ospfv3EdmInterface) GetInterfaceAddress() string {
	if x != nil {
		return x.InterfaceAddress
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetInterfaceNumber() uint32 {
	if x != nil {
		return x.InterfaceNumber
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetInterfaceRouterId() string {
	if x != nil {
		return x.InterfaceRouterId
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetInterfaceLinkCost() uint32 {
	if x != nil {
		return x.InterfaceLinkCost
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetIsInterfaceFloodReduction() bool {
	if x != nil {
		return x.IsInterfaceFloodReduction
	}
	return false
}

func (x *Ospfv3EdmInterface) GetIsDemandCircuitConfigured() bool {
	if x != nil {
		return x.IsDemandCircuitConfigured
	}
	return false
}

func (x *Ospfv3EdmInterface) GetIsInterfaceDemandCircuit() bool {
	if x != nil {
		return x.IsInterfaceDemandCircuit
	}
	return false
}

func (x *Ospfv3EdmInterface) GetInterfaceDcBitlessLsAs() uint32 {
	if x != nil {
		return x.InterfaceDcBitlessLsAs
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetTransmissionDelay() uint32 {
	if x != nil {
		return x.TransmissionDelay
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetOspfInterfaceState() string {
	if x != nil {
		return x.OspfInterfaceState
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetInterfacePriority() uint32 {
	if x != nil {
		return x.InterfacePriority
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetIsDesignatedRouter() bool {
	if x != nil {
		return x.IsDesignatedRouter
	}
	return false
}

func (x *Ospfv3EdmInterface) GetDesignatedRouterId() string {
	if x != nil {
		return x.DesignatedRouterId
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetDesignatedRouterAddress() string {
	if x != nil {
		return x.DesignatedRouterAddress
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetBackupDesignatedRouterId() string {
	if x != nil {
		return x.BackupDesignatedRouterId
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetBackupDesignatedRouterAddress() string {
	if x != nil {
		return x.BackupDesignatedRouterAddress
	}
	return ""
}

func (x *Ospfv3EdmInterface) GetNetworkLsaFlushTimer() uint32 {
	if x != nil {
		return x.NetworkLsaFlushTimer
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetIsInterfaceLsaFiltered() bool {
	if x != nil {
		return x.IsInterfaceLsaFiltered
	}
	return false
}

func (x *Ospfv3EdmInterface) GetHelloInterval() uint32 {
	if x != nil {
		return x.HelloInterval
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetDeadInterval() uint32 {
	if x != nil {
		return x.DeadInterval
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetWaitInterval() uint32 {
	if x != nil {
		return x.WaitInterval
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetInterfaceRetransmissionInterval() uint32 {
	if x != nil {
		return x.InterfaceRetransmissionInterval
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetNextHelloTime() uint32 {
	if x != nil {
		return x.NextHelloTime
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetInterfaceAuthenticationSpi() uint32 {
	if x != nil {
		return x.InterfaceAuthenticationSpi
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetInterfaceAuthenticationTransmit() uint32 {
	if x != nil {
		return x.InterfaceAuthenticationTransmit
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetIsInterfaceEncryptionEnabled() bool {
	if x != nil {
		return x.IsInterfaceEncryptionEnabled
	}
	return false
}

func (x *Ospfv3EdmInterface) GetIsPrefixSuppress() bool {
	if x != nil {
		return x.IsPrefixSuppress
	}
	return false
}

func (x *Ospfv3EdmInterface) GetInterfaceEncryptionSpi() uint32 {
	if x != nil {
		return x.InterfaceEncryptionSpi
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetInterfaceEncryptionTransmitted() uint32 {
	if x != nil {
		return x.InterfaceEncryptionTransmitted
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetInterfaceEncryptedAuthenticationTransmitted() uint32 {
	if x != nil {
		return x.InterfaceEncryptedAuthenticationTransmitted
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetInterfaceNeighborList() []*Ospfv3EdmInterfaceNbr {
	if x != nil {
		return x.InterfaceNeighborList
	}
	return nil
}

func (x *Ospfv3EdmInterface) GetAdjacentNeighbor() uint32 {
	if x != nil {
		return x.AdjacentNeighbor
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetActiveInterface() *Ospfv3EdmInterfaceUp {
	if x != nil {
		return x.ActiveInterface
	}
	return nil
}

func (x *Ospfv3EdmInterface) GetInterfaceBfd() *Ospfv3EdmInterfaceBfd {
	if x != nil {
		return x.InterfaceBfd
	}
	return nil
}

func (x *Ospfv3EdmInterface) GetInterfaceReferences() uint32 {
	if x != nil {
		return x.InterfaceReferences
	}
	return 0
}

func (x *Ospfv3EdmInterface) GetConfiguredLdpSync() bool {
	if x != nil {
		return x.ConfiguredLdpSync
	}
	return false
}

func (x *Ospfv3EdmInterface) GetInterfaceLdpSync() bool {
	if x != nil {
		return x.InterfaceLdpSync
	}
	return false
}

// OSPFv3 interface neighbor information
type Ospfv3EdmInterfaceNbr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor router ID
	InterfaceNeighborId string `protobuf:"bytes,1,opt,name=interface_neighbor_id,json=interfaceNeighborId,proto3" json:"interface_neighbor_id,omitempty"`
	// Cost of link to neighbor
	InterfaceNeighborCost uint32 `protobuf:"varint,2,opt,name=interface_neighbor_cost,json=interfaceNeighborCost,proto3" json:"interface_neighbor_cost,omitempty"`
	// If true, designated router is found
	IsNeighborDr bool `protobuf:"varint,3,opt,name=is_neighbor_dr,json=isNeighborDr,proto3" json:"is_neighbor_dr,omitempty"`
	// If true, backup designated router is found
	IsNeighborBdr bool `protobuf:"varint,4,opt,name=is_neighbor_bdr,json=isNeighborBdr,proto3" json:"is_neighbor_bdr,omitempty"`
	// If true, hello is suppressed
	IsHelloSuppressed bool `protobuf:"varint,5,opt,name=is_hello_suppressed,json=isHelloSuppressed,proto3" json:"is_hello_suppressed,omitempty"`
}

func (x *Ospfv3EdmInterfaceNbr) Reset() {
	*x = Ospfv3EdmInterfaceNbr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmInterfaceNbr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmInterfaceNbr) ProtoMessage() {}

func (x *Ospfv3EdmInterfaceNbr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmInterfaceNbr.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmInterfaceNbr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescGZIP(), []int{2}
}

func (x *Ospfv3EdmInterfaceNbr) GetInterfaceNeighborId() string {
	if x != nil {
		return x.InterfaceNeighborId
	}
	return ""
}

func (x *Ospfv3EdmInterfaceNbr) GetInterfaceNeighborCost() uint32 {
	if x != nil {
		return x.InterfaceNeighborCost
	}
	return 0
}

func (x *Ospfv3EdmInterfaceNbr) GetIsNeighborDr() bool {
	if x != nil {
		return x.IsNeighborDr
	}
	return false
}

func (x *Ospfv3EdmInterfaceNbr) GetIsNeighborBdr() bool {
	if x != nil {
		return x.IsNeighborBdr
	}
	return false
}

func (x *Ospfv3EdmInterfaceNbr) GetIsHelloSuppressed() bool {
	if x != nil {
		return x.IsHelloSuppressed
	}
	return false
}

// OSPFv3 interface up-only information
type Ospfv3EdmInterfaceUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wait time for DR/BDR selection (s)
	WaitTime uint32 `protobuf:"varint,1,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	// Area scope LSAs flood index
	InterfaceAreaFloodIndex uint32 `protobuf:"varint,2,opt,name=interface_area_flood_index,json=interfaceAreaFloodIndex,proto3" json:"interface_area_flood_index,omitempty"`
	// AS scope LSAs flood index
	InterfaceAsFloodIndex uint32 `protobuf:"varint,3,opt,name=interface_as_flood_index,json=interfaceAsFloodIndex,proto3" json:"interface_as_flood_index,omitempty"`
	// Interface flood link index
	InterfaceLinkFloodIndex uint32 `protobuf:"varint,4,opt,name=interface_link_flood_index,json=interfaceLinkFloodIndex,proto3" json:"interface_link_flood_index,omitempty"`
	// Flood queue length
	FloodQueueLength uint32 `protobuf:"varint,5,opt,name=flood_queue_length,json=floodQueueLength,proto3" json:"flood_queue_length,omitempty"`
	// Next LSA to flood (Area scope)
	InterfaceAreaNextFlood uint32 `protobuf:"varint,6,opt,name=interface_area_next_flood,json=interfaceAreaNextFlood,proto3" json:"interface_area_next_flood,omitempty"`
	// Index of next LSA to flood (Area scope)
	InterfaceAreaNextFloodIndex uint32 `protobuf:"varint,7,opt,name=interface_area_next_flood_index,json=interfaceAreaNextFloodIndex,proto3" json:"interface_area_next_flood_index,omitempty"`
	// Next LSA to flood (AS scope)
	InterfaceAsNextFlood uint32 `protobuf:"varint,8,opt,name=interface_as_next_flood,json=interfaceAsNextFlood,proto3" json:"interface_as_next_flood,omitempty"`
	// Index of next LSA to flood (AS scope)
	InterfaceAsNextFloodIndex uint32 `protobuf:"varint,9,opt,name=interface_as_next_flood_index,json=interfaceAsNextFloodIndex,proto3" json:"interface_as_next_flood_index,omitempty"`
	// Interface link next flood information
	InterfaceLinkNextFlood uint32 `protobuf:"varint,10,opt,name=interface_link_next_flood,json=interfaceLinkNextFlood,proto3" json:"interface_link_next_flood,omitempty"`
	// Interface link next information index
	InterfaceLinkNextIndex uint32 `protobuf:"varint,11,opt,name=interface_link_next_index,json=interfaceLinkNextIndex,proto3" json:"interface_link_next_index,omitempty"`
	// Last flood scan length
	FloodScanLength uint32 `protobuf:"varint,12,opt,name=flood_scan_length,json=floodScanLength,proto3" json:"flood_scan_length,omitempty"`
	// Maximum flood length
	MaximumFloodLength uint32 `protobuf:"varint,13,opt,name=maximum_flood_length,json=maximumFloodLength,proto3" json:"maximum_flood_length,omitempty"`
	// Last flood scan time (ms)
	LastFloodTime uint32 `protobuf:"varint,14,opt,name=last_flood_time,json=lastFloodTime,proto3" json:"last_flood_time,omitempty"`
	// Maximum flood time (ms)
	MaximumFloodTime uint32 `protobuf:"varint,15,opt,name=maximum_flood_time,json=maximumFloodTime,proto3" json:"maximum_flood_time,omitempty"`
	// Time until next flood pacing timer (ms)
	InterfaceFloodPacingTimer uint32 `protobuf:"varint,16,opt,name=interface_flood_pacing_timer,json=interfaceFloodPacingTimer,proto3" json:"interface_flood_pacing_timer,omitempty"`
	// Total number of neighbors
	InterfaceNeighbors uint32 `protobuf:"varint,17,opt,name=interface_neighbors,json=interfaceNeighbors,proto3" json:"interface_neighbors,omitempty"`
	// Number of neighbors for which hellos are suppressed
	SuppressedHellos uint32 `protobuf:"varint,18,opt,name=suppressed_hellos,json=suppressedHellos,proto3" json:"suppressed_hellos,omitempty"`
}

func (x *Ospfv3EdmInterfaceUp) Reset() {
	*x = Ospfv3EdmInterfaceUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmInterfaceUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmInterfaceUp) ProtoMessage() {}

func (x *Ospfv3EdmInterfaceUp) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmInterfaceUp.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmInterfaceUp) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescGZIP(), []int{3}
}

func (x *Ospfv3EdmInterfaceUp) GetWaitTime() uint32 {
	if x != nil {
		return x.WaitTime
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceAreaFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAreaFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceAsFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAsFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceLinkFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceLinkFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetFloodQueueLength() uint32 {
	if x != nil {
		return x.FloodQueueLength
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceAreaNextFlood() uint32 {
	if x != nil {
		return x.InterfaceAreaNextFlood
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceAreaNextFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAreaNextFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceAsNextFlood() uint32 {
	if x != nil {
		return x.InterfaceAsNextFlood
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceAsNextFloodIndex() uint32 {
	if x != nil {
		return x.InterfaceAsNextFloodIndex
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceLinkNextFlood() uint32 {
	if x != nil {
		return x.InterfaceLinkNextFlood
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceLinkNextIndex() uint32 {
	if x != nil {
		return x.InterfaceLinkNextIndex
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetFloodScanLength() uint32 {
	if x != nil {
		return x.FloodScanLength
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetMaximumFloodLength() uint32 {
	if x != nil {
		return x.MaximumFloodLength
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetLastFloodTime() uint32 {
	if x != nil {
		return x.LastFloodTime
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetMaximumFloodTime() uint32 {
	if x != nil {
		return x.MaximumFloodTime
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceFloodPacingTimer() uint32 {
	if x != nil {
		return x.InterfaceFloodPacingTimer
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetInterfaceNeighbors() uint32 {
	if x != nil {
		return x.InterfaceNeighbors
	}
	return 0
}

func (x *Ospfv3EdmInterfaceUp) GetSuppressedHellos() uint32 {
	if x != nil {
		return x.SuppressedHellos
	}
	return 0
}

// Interface BFD information
type Ospfv3EdmInterfaceBfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BFD Enable Mode on the interface - Default/Strict
	BfdIntfEnableMode uint32 `protobuf:"varint,1,opt,name=bfd_intf_enable_mode,json=bfdIntfEnableMode,proto3" json:"bfd_intf_enable_mode,omitempty"`
	// BFD interval (ms)
	BfdInterval uint32 `protobuf:"varint,2,opt,name=bfd_interval,json=bfdInterval,proto3" json:"bfd_interval,omitempty"`
	// BFD detection multiplier
	BfdDetectionMultiplier uint32 `protobuf:"varint,3,opt,name=bfd_detection_multiplier,json=bfdDetectionMultiplier,proto3" json:"bfd_detection_multiplier,omitempty"`
}

func (x *Ospfv3EdmInterfaceBfd) Reset() {
	*x = Ospfv3EdmInterfaceBfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ospfv3EdmInterfaceBfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ospfv3EdmInterfaceBfd) ProtoMessage() {}

func (x *Ospfv3EdmInterfaceBfd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ospfv3EdmInterfaceBfd.ProtoReflect.Descriptor instead.
func (*Ospfv3EdmInterfaceBfd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescGZIP(), []int{4}
}

func (x *Ospfv3EdmInterfaceBfd) GetBfdIntfEnableMode() uint32 {
	if x != nil {
		return x.BfdIntfEnableMode
	}
	return 0
}

func (x *Ospfv3EdmInterfaceBfd) GetBfdInterval() uint32 {
	if x != nil {
		return x.BfdInterval
	}
	return 0
}

func (x *Ospfv3EdmInterfaceBfd) GetBfdDetectionMultiplier() uint32 {
	if x != nil {
		return x.BfdDetectionMultiplier
	}
	return 0
}

var File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDesc = []byte{
	0x0a, 0x7f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f,
	0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64,
	0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x64, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x4b, 0x45, 0x59, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9b,
	0x15, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x55,
	0x70, 0x12, 0x48, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x1c, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x3a, 0x0a,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x63, 0x5f, 0x62, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x63, 0x42, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x73, 0x4c, 0x73, 0x41, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x73, 0x70, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x73, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x19, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x73, 0x61,
	0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x73, 0x61, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x73, 0x61, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x73, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x69, 0x12, 0x4a, 0x0a, 0x21, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x69, 0x12, 0x48, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x63, 0x0a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x12, 0xb6, 0x01, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x55, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76,
	0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x62, 0x72, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x73, 0x70,
	0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x75, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x62, 0x66, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6f, 0x73,
	0x70, 0x66, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x66, 0x64, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x66, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x64, 0x70,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x64, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x64, 0x70, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x64, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x84, 0x02, 0x0a,
	0x18, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x62, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x62, 0x64, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x42, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x22, 0xda, 0x07, 0x0a, 0x17, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65,
	0x64, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4e,
	0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x53,
	0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x73,
	0x22, 0xa8, 0x01, 0x0a, 0x18, 0x6f, 0x73, 0x70, 0x66, 0x76, 0x33, 0x5f, 0x65, 0x64, 0x6d, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x66, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x62, 0x66, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x66, 0x64,
	0x49, 0x6e, 0x74, 0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x66, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x66, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x66, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x62, 0x66, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescData = file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDesc
)

func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDescData
}

var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_goTypes = []interface{}{
	(*Ospfv3EdmInterface_KEYS)(nil), // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface_KEYS
	(*Ospfv3EdmInterface)(nil),      // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface
	(*Ospfv3EdmInterfaceNbr)(nil),   // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface_nbr
	(*Ospfv3EdmInterfaceUp)(nil),    // 3: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface_up
	(*Ospfv3EdmInterfaceBfd)(nil),   // 4: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface_bfd
}
var file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface.interface_neighbor_list:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface_nbr
	3, // 1: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface.active_interface:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface_up
	4, // 2: cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface.interface_bfd:type_name -> cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.interface_process_table.interface.ospfv3_edm_interface_bfd
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_init()
}
func file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_init() {
	if File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmInterface_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmInterfaceNbr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmInterfaceUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ospfv3EdmInterfaceBfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto = out.File
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_rawDesc = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_goTypes = nil
	file_cisco_ios_xr_ipv6_ospfv3_oper_ospfv3_processes_process_default_vrf_interface_process_table_interface_ospfv3_edm_interface_proto_depIdxs = nil
}
