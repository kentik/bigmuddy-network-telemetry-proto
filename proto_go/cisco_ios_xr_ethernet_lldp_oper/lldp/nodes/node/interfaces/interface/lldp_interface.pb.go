// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ethernet_lldp_oper/lldp/nodes/node/interfaces/interface/lldp_interface.proto

package cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Information about an interface that LLDP is running on
type LldpInterface_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *LldpInterface_KEYS) Reset() {
	*x = LldpInterface_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpInterface_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpInterface_KEYS) ProtoMessage() {}

func (x *LldpInterface_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpInterface_KEYS.ProtoReflect.Descriptor instead.
func (*LldpInterface_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescGZIP(), []int{0}
}

func (x *LldpInterface_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *LldpInterface_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type LldpInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface
	InterfaceName string `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// TX Enabled
	TxEnabled uint32 `protobuf:"varint,51,opt,name=tx_enabled,json=txEnabled,proto3" json:"tx_enabled,omitempty"`
	// RX Enabled
	RxEnabled uint32 `protobuf:"varint,52,opt,name=rx_enabled,json=rxEnabled,proto3" json:"rx_enabled,omitempty"`
	// TX State
	TxState string `protobuf:"bytes,53,opt,name=tx_state,json=txState,proto3" json:"tx_state,omitempty"`
	// RX State
	RxState string `protobuf:"bytes,54,opt,name=rx_state,json=rxState,proto3" json:"rx_state,omitempty"`
	// ifIndex
	IfIndex uint32 `protobuf:"varint,55,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
	// Outgoing port identifier
	PortId string `protobuf:"bytes,56,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// Port ID sub type
	PortIdSubType uint32 `protobuf:"varint,57,opt,name=port_id_sub_type,json=portIdSubType,proto3" json:"port_id_sub_type,omitempty"`
	// Port Description
	PortDescription string `protobuf:"bytes,58,opt,name=port_description,json=portDescription,proto3" json:"port_description,omitempty"`
	// Local Management Addresses
	LocalNetworkAddresses *LldpAddrEntry `protobuf:"bytes,59,opt,name=local_network_addresses,json=localNetworkAddresses,proto3" json:"local_network_addresses,omitempty"`
}

func (x *LldpInterface) Reset() {
	*x = LldpInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpInterface) ProtoMessage() {}

func (x *LldpInterface) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpInterface.ProtoReflect.Descriptor instead.
func (*LldpInterface) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescGZIP(), []int{1}
}

func (x *LldpInterface) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *LldpInterface) GetTxEnabled() uint32 {
	if x != nil {
		return x.TxEnabled
	}
	return 0
}

func (x *LldpInterface) GetRxEnabled() uint32 {
	if x != nil {
		return x.RxEnabled
	}
	return 0
}

func (x *LldpInterface) GetTxState() string {
	if x != nil {
		return x.TxState
	}
	return ""
}

func (x *LldpInterface) GetRxState() string {
	if x != nil {
		return x.RxState
	}
	return ""
}

func (x *LldpInterface) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *LldpInterface) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *LldpInterface) GetPortIdSubType() uint32 {
	if x != nil {
		return x.PortIdSubType
	}
	return 0
}

func (x *LldpInterface) GetPortDescription() string {
	if x != nil {
		return x.PortDescription
	}
	return ""
}

func (x *LldpInterface) GetLocalNetworkAddresses() *LldpAddrEntry {
	if x != nil {
		return x.LocalNetworkAddresses
	}
	return nil
}

type In6AddrTd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *In6AddrTd) Reset() {
	*x = In6AddrTd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *In6AddrTd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*In6AddrTd) ProtoMessage() {}

func (x *In6AddrTd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use In6AddrTd.ProtoReflect.Descriptor instead.
func (*In6AddrTd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescGZIP(), []int{2}
}

func (x *In6AddrTd) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LldpL3Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType string `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	// IPv4 address
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// IPv6 address
	Ipv6Address *In6AddrTd `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *LldpL3Addr) Reset() {
	*x = LldpL3Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpL3Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpL3Addr) ProtoMessage() {}

func (x *LldpL3Addr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpL3Addr.ProtoReflect.Descriptor instead.
func (*LldpL3Addr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescGZIP(), []int{3}
}

func (x *LldpL3Addr) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *LldpL3Addr) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *LldpL3Addr) GetIpv6Address() *In6AddrTd {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

type LldpAddrEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next address entry in list
	LldpAddrEntry []*LldpAddrEntryItem `protobuf:"bytes,1,rep,name=lldp_addr_entry,json=lldpAddrEntry,proto3" json:"lldp_addr_entry,omitempty"`
}

func (x *LldpAddrEntry) Reset() {
	*x = LldpAddrEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpAddrEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpAddrEntry) ProtoMessage() {}

func (x *LldpAddrEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpAddrEntry.ProtoReflect.Descriptor instead.
func (*LldpAddrEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescGZIP(), []int{4}
}

func (x *LldpAddrEntry) GetLldpAddrEntry() []*LldpAddrEntryItem {
	if x != nil {
		return x.LldpAddrEntry
	}
	return nil
}

type LldpAddrEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network layer address
	Address *LldpL3Addr `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// MA sub type
	MaSubtype uint32 `protobuf:"varint,2,opt,name=ma_subtype,json=maSubtype,proto3" json:"ma_subtype,omitempty"`
	// Interface num
	IfNum uint32 `protobuf:"varint,3,opt,name=if_num,json=ifNum,proto3" json:"if_num,omitempty"`
}

func (x *LldpAddrEntryItem) Reset() {
	*x = LldpAddrEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpAddrEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpAddrEntryItem) ProtoMessage() {}

func (x *LldpAddrEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpAddrEntryItem.ProtoReflect.Descriptor instead.
func (*LldpAddrEntryItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescGZIP(), []int{5}
}

func (x *LldpAddrEntryItem) GetAddress() *LldpL3Addr {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *LldpAddrEntryItem) GetMaSubtype() uint32 {
	if x != nil {
		return x.MaSubtype
	}
	return 0
}

func (x *LldpAddrEntryItem) GetIfNum() uint32 {
	if x != nil {
		return x.IfNum
	}
	return 0
}

var File_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDesc = []byte{
	0x0a, 0x59, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x44, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64,
	0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x22, 0x59, 0x0a, 0x13, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x03, 0x0a,
	0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x78, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64,
	0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6c, 0x6c, 0x64, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x6c, 0x6c, 0x64, 0x70,
	0x5f, 0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x74,
	0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64,
	0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x64, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x6c, 0x6c, 0x64,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0d,
	0x6c, 0x6c, 0x64, 0x70, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xba, 0x01,
	0x0a, 0x14, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescData = file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDesc
)

func file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescData)
	})
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDescData
}

var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_goTypes = []interface{}{
	(*LldpInterface_KEYS)(nil), // 0: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_interface_KEYS
	(*LldpInterface)(nil),      // 1: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_interface
	(*In6AddrTd)(nil),          // 2: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.in6_addr_td
	(*LldpL3Addr)(nil),         // 3: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_l3_addr
	(*LldpAddrEntry)(nil),      // 4: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_addr_entry
	(*LldpAddrEntryItem)(nil),  // 5: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_addr_entry_item
}
var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_depIdxs = []int32{
	4, // 0: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_interface.local_network_addresses:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_addr_entry
	2, // 1: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_l3_addr.ipv6_address:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.in6_addr_td
	5, // 2: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_addr_entry.lldp_addr_entry:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_addr_entry_item
	3, // 3: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_addr_entry_item.address:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.interfaces.interface.lldp_l3_addr
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_init()
}
func file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_init() {
	if File_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpInterface_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*In6AddrTd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpL3Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpAddrEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpAddrEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto = out.File
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_rawDesc = nil
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_goTypes = nil
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_interfaces_interface_lldp_interface_proto_depIdxs = nil
}
