// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ethernet_lldp_oper/lldp/nodes/node/neighbors/details/detail/lldp_neighbor.proto

package cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// LLDP neighbor info
type LldpNeighbor_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	DeviceId      string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *LldpNeighbor_KEYS) Reset() {
	*x = LldpNeighbor_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighbor_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighbor_KEYS) ProtoMessage() {}

func (x *LldpNeighbor_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighbor_KEYS.ProtoReflect.Descriptor instead.
func (*LldpNeighbor_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{0}
}

func (x *LldpNeighbor_KEYS) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *LldpNeighbor_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *LldpNeighbor_KEYS) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type LldpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next neighbor in the list
	LldpNeighbor []*LldpNeighborItem `protobuf:"bytes,50,rep,name=lldp_neighbor,json=lldpNeighbor,proto3" json:"lldp_neighbor,omitempty"`
}

func (x *LldpNeighbor) Reset() {
	*x = LldpNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighbor) ProtoMessage() {}

func (x *LldpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighbor.ProtoReflect.Descriptor instead.
func (*LldpNeighbor) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{1}
}

func (x *LldpNeighbor) GetLldpNeighbor() []*LldpNeighborItem {
	if x != nil {
		return x.LldpNeighbor
	}
	return nil
}

type LldpNeighborItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface the neighbor entry was received on
	ReceivingInterfaceName string `protobuf:"bytes,1,opt,name=receiving_interface_name,json=receivingInterfaceName,proto3" json:"receiving_interface_name,omitempty"`
	// Parent Interface the neighbor entry was received on
	ReceivingParentInterfaceName string `protobuf:"bytes,2,opt,name=receiving_parent_interface_name,json=receivingParentInterfaceName,proto3" json:"receiving_parent_interface_name,omitempty"`
	// Device identifier
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Chassis id
	ChassisId string `protobuf:"bytes,4,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty"`
	// Outgoing port identifier
	PortIdDetail string `protobuf:"bytes,5,opt,name=port_id_detail,json=portIdDetail,proto3" json:"port_id_detail,omitempty"`
	// Version number
	HeaderVersion uint32 `protobuf:"varint,6,opt,name=header_version,json=headerVersion,proto3" json:"header_version,omitempty"`
	// Remaining hold time
	HoldTime uint32 `protobuf:"varint,7,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	// Enabled Capabilities
	EnabledCapabilities string `protobuf:"bytes,8,opt,name=enabled_capabilities,json=enabledCapabilities,proto3" json:"enabled_capabilities,omitempty"`
	// Platform type
	Platform string `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
	// Detailed neighbor info
	Detail *LldpNeighborDetail `protobuf:"bytes,10,opt,name=detail,proto3" json:"detail,omitempty"`
	// MIB nieghbor info
	Mib *LldpNeighborMib `protobuf:"bytes,11,opt,name=mib,proto3" json:"mib,omitempty"`
}

func (x *LldpNeighborItem) Reset() {
	*x = LldpNeighborItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborItem) ProtoMessage() {}

func (x *LldpNeighborItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborItem.ProtoReflect.Descriptor instead.
func (*LldpNeighborItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{2}
}

func (x *LldpNeighborItem) GetReceivingInterfaceName() string {
	if x != nil {
		return x.ReceivingInterfaceName
	}
	return ""
}

func (x *LldpNeighborItem) GetReceivingParentInterfaceName() string {
	if x != nil {
		return x.ReceivingParentInterfaceName
	}
	return ""
}

func (x *LldpNeighborItem) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *LldpNeighborItem) GetChassisId() string {
	if x != nil {
		return x.ChassisId
	}
	return ""
}

func (x *LldpNeighborItem) GetPortIdDetail() string {
	if x != nil {
		return x.PortIdDetail
	}
	return ""
}

func (x *LldpNeighborItem) GetHeaderVersion() uint32 {
	if x != nil {
		return x.HeaderVersion
	}
	return 0
}

func (x *LldpNeighborItem) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *LldpNeighborItem) GetEnabledCapabilities() string {
	if x != nil {
		return x.EnabledCapabilities
	}
	return ""
}

func (x *LldpNeighborItem) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *LldpNeighborItem) GetDetail() *LldpNeighborDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *LldpNeighborItem) GetMib() *LldpNeighborMib {
	if x != nil {
		return x.Mib
	}
	return nil
}

type In6AddrTd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *In6AddrTd) Reset() {
	*x = In6AddrTd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *In6AddrTd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*In6AddrTd) ProtoMessage() {}

func (x *In6AddrTd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use In6AddrTd.ProtoReflect.Descriptor instead.
func (*In6AddrTd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{3}
}

func (x *In6AddrTd) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LldpL3Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType string `protobuf:"bytes,1,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	// IPv4 address
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// IPv6 address
	Ipv6Address *In6AddrTd `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *LldpL3Addr) Reset() {
	*x = LldpL3Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpL3Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpL3Addr) ProtoMessage() {}

func (x *LldpL3Addr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpL3Addr.ProtoReflect.Descriptor instead.
func (*LldpL3Addr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{4}
}

func (x *LldpL3Addr) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *LldpL3Addr) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *LldpL3Addr) GetIpv6Address() *In6AddrTd {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

type LldpAddrEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next address entry in list
	LldpAddrEntry []*LldpAddrEntryItem `protobuf:"bytes,1,rep,name=lldp_addr_entry,json=lldpAddrEntry,proto3" json:"lldp_addr_entry,omitempty"`
}

func (x *LldpAddrEntry) Reset() {
	*x = LldpAddrEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpAddrEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpAddrEntry) ProtoMessage() {}

func (x *LldpAddrEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpAddrEntry.ProtoReflect.Descriptor instead.
func (*LldpAddrEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{5}
}

func (x *LldpAddrEntry) GetLldpAddrEntry() []*LldpAddrEntryItem {
	if x != nil {
		return x.LldpAddrEntry
	}
	return nil
}

type LldpAddrEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network layer address
	Address *LldpL3Addr `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// MA sub type
	MaSubtype uint32 `protobuf:"varint,2,opt,name=ma_subtype,json=maSubtype,proto3" json:"ma_subtype,omitempty"`
	// Interface num
	IfNum uint32 `protobuf:"varint,3,opt,name=if_num,json=ifNum,proto3" json:"if_num,omitempty"`
}

func (x *LldpAddrEntryItem) Reset() {
	*x = LldpAddrEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpAddrEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpAddrEntryItem) ProtoMessage() {}

func (x *LldpAddrEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpAddrEntryItem.ProtoReflect.Descriptor instead.
func (*LldpAddrEntryItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{6}
}

func (x *LldpAddrEntryItem) GetAddress() *LldpL3Addr {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *LldpAddrEntryItem) GetMaSubtype() uint32 {
	if x != nil {
		return x.MaSubtype
	}
	return 0
}

func (x *LldpAddrEntryItem) GetIfNum() uint32 {
	if x != nil {
		return x.IfNum
	}
	return 0
}

type LldpUnknownTlvEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next unknown TLV entry in list
	LldpUnknownTlvEntry []*LldpUnknownTlvEntryItem `protobuf:"bytes,1,rep,name=lldp_unknown_tlv_entry,json=lldpUnknownTlvEntry,proto3" json:"lldp_unknown_tlv_entry,omitempty"`
}

func (x *LldpUnknownTlvEntry) Reset() {
	*x = LldpUnknownTlvEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpUnknownTlvEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpUnknownTlvEntry) ProtoMessage() {}

func (x *LldpUnknownTlvEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpUnknownTlvEntry.ProtoReflect.Descriptor instead.
func (*LldpUnknownTlvEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{7}
}

func (x *LldpUnknownTlvEntry) GetLldpUnknownTlvEntry() []*LldpUnknownTlvEntryItem {
	if x != nil {
		return x.LldpUnknownTlvEntry
	}
	return nil
}

type LldpUnknownTlvEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unknown TLV type
	TlvType uint32 `protobuf:"varint,1,opt,name=tlv_type,json=tlvType,proto3" json:"tlv_type,omitempty"`
	// Unknown TLV payload
	TlvValue []byte `protobuf:"bytes,2,opt,name=tlv_value,json=tlvValue,proto3" json:"tlv_value,omitempty"`
}

func (x *LldpUnknownTlvEntryItem) Reset() {
	*x = LldpUnknownTlvEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpUnknownTlvEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpUnknownTlvEntryItem) ProtoMessage() {}

func (x *LldpUnknownTlvEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpUnknownTlvEntryItem.ProtoReflect.Descriptor instead.
func (*LldpUnknownTlvEntryItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{8}
}

func (x *LldpUnknownTlvEntryItem) GetTlvType() uint32 {
	if x != nil {
		return x.TlvType
	}
	return 0
}

func (x *LldpUnknownTlvEntryItem) GetTlvValue() []byte {
	if x != nil {
		return x.TlvValue
	}
	return nil
}

type LldpOrgDefTlvEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next Org Def TLV entry in list
	LldpOrgDefTlvEntry []*LldpOrgDefTlvEntryItem `protobuf:"bytes,1,rep,name=lldp_org_def_tlv_entry,json=lldpOrgDefTlvEntry,proto3" json:"lldp_org_def_tlv_entry,omitempty"`
}

func (x *LldpOrgDefTlvEntry) Reset() {
	*x = LldpOrgDefTlvEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpOrgDefTlvEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpOrgDefTlvEntry) ProtoMessage() {}

func (x *LldpOrgDefTlvEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpOrgDefTlvEntry.ProtoReflect.Descriptor instead.
func (*LldpOrgDefTlvEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{9}
}

func (x *LldpOrgDefTlvEntry) GetLldpOrgDefTlvEntry() []*LldpOrgDefTlvEntryItem {
	if x != nil {
		return x.LldpOrgDefTlvEntry
	}
	return nil
}

type LldpOrgDefTlvEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Organizationally Unique Identifier
	Oui uint32 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	// Org Def TLV subtype
	TlvSubtype uint32 `protobuf:"varint,2,opt,name=tlv_subtype,json=tlvSubtype,proto3" json:"tlv_subtype,omitempty"`
	// lldpRemOrgDefInfoIndex
	TlvInfoIndes uint32 `protobuf:"varint,3,opt,name=tlv_info_indes,json=tlvInfoIndes,proto3" json:"tlv_info_indes,omitempty"`
	// Org Def TLV payload
	TlvValue []byte `protobuf:"bytes,4,opt,name=tlv_value,json=tlvValue,proto3" json:"tlv_value,omitempty"`
}

func (x *LldpOrgDefTlvEntryItem) Reset() {
	*x = LldpOrgDefTlvEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpOrgDefTlvEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpOrgDefTlvEntryItem) ProtoMessage() {}

func (x *LldpOrgDefTlvEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpOrgDefTlvEntryItem.ProtoReflect.Descriptor instead.
func (*LldpOrgDefTlvEntryItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{10}
}

func (x *LldpOrgDefTlvEntryItem) GetOui() uint32 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *LldpOrgDefTlvEntryItem) GetTlvSubtype() uint32 {
	if x != nil {
		return x.TlvSubtype
	}
	return 0
}

func (x *LldpOrgDefTlvEntryItem) GetTlvInfoIndes() uint32 {
	if x != nil {
		return x.TlvInfoIndes
	}
	return 0
}

func (x *LldpOrgDefTlvEntryItem) GetTlvValue() []byte {
	if x != nil {
		return x.TlvValue
	}
	return nil
}

type LldpNeighborDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port Description
	PortDescription string `protobuf:"bytes,1,opt,name=port_description,json=portDescription,proto3" json:"port_description,omitempty"`
	// System Name
	SystemName string `protobuf:"bytes,2,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	// System Description
	SystemDescription string `protobuf:"bytes,3,opt,name=system_description,json=systemDescription,proto3" json:"system_description,omitempty"`
	// Time remaining
	TimeRemaining uint32 `protobuf:"varint,4,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	// System Capabilities
	SystemCapabilities string `protobuf:"bytes,5,opt,name=system_capabilities,json=systemCapabilities,proto3" json:"system_capabilities,omitempty"`
	// Enabled Capabilities
	EnabledCapabilities string `protobuf:"bytes,6,opt,name=enabled_capabilities,json=enabledCapabilities,proto3" json:"enabled_capabilities,omitempty"`
	// Management Addresses
	NetworkAddresses *LldpAddrEntry `protobuf:"bytes,7,opt,name=network_addresses,json=networkAddresses,proto3" json:"network_addresses,omitempty"`
	// Auto Negotiation
	AutoNegotiation string `protobuf:"bytes,8,opt,name=auto_negotiation,json=autoNegotiation,proto3" json:"auto_negotiation,omitempty"`
	// Physical media capabilities
	PhysicalMediaCapabilities string `protobuf:"bytes,9,opt,name=physical_media_capabilities,json=physicalMediaCapabilities,proto3" json:"physical_media_capabilities,omitempty"`
	// Media Attachment Unit type
	MediaAttachmentUnitType uint32 `protobuf:"varint,10,opt,name=media_attachment_unit_type,json=mediaAttachmentUnitType,proto3" json:"media_attachment_unit_type,omitempty"`
	// Vlan ID
	PortVlanId uint32 `protobuf:"varint,11,opt,name=port_vlan_id,json=portVlanId,proto3" json:"port_vlan_id,omitempty"`
}

func (x *LldpNeighborDetail) Reset() {
	*x = LldpNeighborDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborDetail) ProtoMessage() {}

func (x *LldpNeighborDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborDetail.ProtoReflect.Descriptor instead.
func (*LldpNeighborDetail) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{11}
}

func (x *LldpNeighborDetail) GetPortDescription() string {
	if x != nil {
		return x.PortDescription
	}
	return ""
}

func (x *LldpNeighborDetail) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *LldpNeighborDetail) GetSystemDescription() string {
	if x != nil {
		return x.SystemDescription
	}
	return ""
}

func (x *LldpNeighborDetail) GetTimeRemaining() uint32 {
	if x != nil {
		return x.TimeRemaining
	}
	return 0
}

func (x *LldpNeighborDetail) GetSystemCapabilities() string {
	if x != nil {
		return x.SystemCapabilities
	}
	return ""
}

func (x *LldpNeighborDetail) GetEnabledCapabilities() string {
	if x != nil {
		return x.EnabledCapabilities
	}
	return ""
}

func (x *LldpNeighborDetail) GetNetworkAddresses() *LldpAddrEntry {
	if x != nil {
		return x.NetworkAddresses
	}
	return nil
}

func (x *LldpNeighborDetail) GetAutoNegotiation() string {
	if x != nil {
		return x.AutoNegotiation
	}
	return ""
}

func (x *LldpNeighborDetail) GetPhysicalMediaCapabilities() string {
	if x != nil {
		return x.PhysicalMediaCapabilities
	}
	return ""
}

func (x *LldpNeighborDetail) GetMediaAttachmentUnitType() uint32 {
	if x != nil {
		return x.MediaAttachmentUnitType
	}
	return 0
}

func (x *LldpNeighborDetail) GetPortVlanId() uint32 {
	if x != nil {
		return x.PortVlanId
	}
	return 0
}

type LldpNeighborMib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TimeFilter
	RemTimeMark uint32 `protobuf:"varint,1,opt,name=rem_time_mark,json=remTimeMark,proto3" json:"rem_time_mark,omitempty"`
	// LldpPortNumber
	RemLocalPortNum uint32 `protobuf:"varint,2,opt,name=rem_local_port_num,json=remLocalPortNum,proto3" json:"rem_local_port_num,omitempty"`
	// lldpRemIndex
	RemIndex uint32 `protobuf:"varint,3,opt,name=rem_index,json=remIndex,proto3" json:"rem_index,omitempty"`
	// Chassis ID sub type
	ChassisIdSubType uint32 `protobuf:"varint,4,opt,name=chassis_id_sub_type,json=chassisIdSubType,proto3" json:"chassis_id_sub_type,omitempty"`
	// Chassis ID length
	ChassisIdLen uint32 `protobuf:"varint,5,opt,name=chassis_id_len,json=chassisIdLen,proto3" json:"chassis_id_len,omitempty"`
	// Port ID sub type
	PortIdSubType uint32 `protobuf:"varint,6,opt,name=port_id_sub_type,json=portIdSubType,proto3" json:"port_id_sub_type,omitempty"`
	// Port ID length
	PortIdLen uint32 `protobuf:"varint,7,opt,name=port_id_len,json=portIdLen,proto3" json:"port_id_len,omitempty"`
	// Supported and combined cpabilities
	CombinedCapabilities uint32 `protobuf:"varint,8,opt,name=combined_capabilities,json=combinedCapabilities,proto3" json:"combined_capabilities,omitempty"`
	// Unknown TLV list
	UnknownTlvList *LldpUnknownTlvEntry `protobuf:"bytes,9,opt,name=unknown_tlv_list,json=unknownTlvList,proto3" json:"unknown_tlv_list,omitempty"`
	// Org Def TLV list
	OrgDefTlvList *LldpOrgDefTlvEntry `protobuf:"bytes,10,opt,name=org_def_tlv_list,json=orgDefTlvList,proto3" json:"org_def_tlv_list,omitempty"`
}

func (x *LldpNeighborMib) Reset() {
	*x = LldpNeighborMib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborMib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborMib) ProtoMessage() {}

func (x *LldpNeighborMib) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborMib.ProtoReflect.Descriptor instead.
func (*LldpNeighborMib) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP(), []int{12}
}

func (x *LldpNeighborMib) GetRemTimeMark() uint32 {
	if x != nil {
		return x.RemTimeMark
	}
	return 0
}

func (x *LldpNeighborMib) GetRemLocalPortNum() uint32 {
	if x != nil {
		return x.RemLocalPortNum
	}
	return 0
}

func (x *LldpNeighborMib) GetRemIndex() uint32 {
	if x != nil {
		return x.RemIndex
	}
	return 0
}

func (x *LldpNeighborMib) GetChassisIdSubType() uint32 {
	if x != nil {
		return x.ChassisIdSubType
	}
	return 0
}

func (x *LldpNeighborMib) GetChassisIdLen() uint32 {
	if x != nil {
		return x.ChassisIdLen
	}
	return 0
}

func (x *LldpNeighborMib) GetPortIdSubType() uint32 {
	if x != nil {
		return x.PortIdSubType
	}
	return 0
}

func (x *LldpNeighborMib) GetPortIdLen() uint32 {
	if x != nil {
		return x.PortIdLen
	}
	return 0
}

func (x *LldpNeighborMib) GetCombinedCapabilities() uint32 {
	if x != nil {
		return x.CombinedCapabilities
	}
	return 0
}

func (x *LldpNeighborMib) GetUnknownTlvList() *LldpUnknownTlvEntry {
	if x != nil {
		return x.UnknownTlvList
	}
	return nil
}

func (x *LldpNeighborMib) GetOrgDefTlvList() *LldpOrgDefTlvEntry {
	if x != nil {
		return x.OrgDefTlvList
	}
	return nil
}

var File_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDesc = []byte{
	0x0a, 0x5c, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x75, 0x0a, 0x12, 0x6c, 0x6c, 0x64, 0x70,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x93, 0x01, 0x0a, 0x0d, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x22, 0xf1, 0x04, 0x0a, 0x12, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x18,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x76, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6c,
	0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x6d, 0x0a, 0x03, 0x6d, 0x69,
	0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6d, 0x69, 0x62, 0x52, 0x03, 0x6d, 0x69, 0x62, 0x22, 0x23, 0x0a, 0x0b, 0x69, 0x6e, 0x36,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce,
	0x01, 0x0a, 0x0c, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x78, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c,
	0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x69, 0x6e, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x74, 0x64, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x0f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x6c,
	0x6c, 0x64, 0x70, 0x41, 0x64, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xbe, 0x01, 0x0a,
	0x14, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x70, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6c, 0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x66, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x22, 0xb5, 0x01,
	0x0a, 0x16, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74,
	0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x6c, 0x6c, 0x64,
	0x70, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x52, 0x13, 0x6c, 0x6c, 0x64, 0x70, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x1b, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a,
	0x16, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x6c,
	0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x6c, 0x6c, 0x64, 0x70,
	0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x12, 0x6c, 0x6c, 0x64, 0x70, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x66, 0x54, 0x6c, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x72, 0x67,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x76, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6c, 0x76, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6c, 0x76, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6c, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x74, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x04, 0x0a, 0x14, 0x6c, 0x6c,
	0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64,
	0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xed, 0x04, 0x0a, 0x11,
	0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6d, 0x69,
	0x62, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2d, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49,
	0x64, 0x4c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x33, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74,
	0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x6c, 0x6c, 0x64, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x89, 0x01, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x74, 0x6c, 0x76, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x6c, 0x6c, 0x64,
	0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6f, 0x72,
	0x67, 0x44, 0x65, 0x66, 0x54, 0x6c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescData = file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDesc
)

func file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescData)
	})
	return file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDescData
}

var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_goTypes = []interface{}{
	(*LldpNeighbor_KEYS)(nil),       // 0: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_KEYS
	(*LldpNeighbor)(nil),            // 1: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor
	(*LldpNeighborItem)(nil),        // 2: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_item
	(*In6AddrTd)(nil),               // 3: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.in6_addr_td
	(*LldpL3Addr)(nil),              // 4: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_l3_addr
	(*LldpAddrEntry)(nil),           // 5: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_addr_entry
	(*LldpAddrEntryItem)(nil),       // 6: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_addr_entry_item
	(*LldpUnknownTlvEntry)(nil),     // 7: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_unknown_tlv_entry
	(*LldpUnknownTlvEntryItem)(nil), // 8: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_unknown_tlv_entry_item
	(*LldpOrgDefTlvEntry)(nil),      // 9: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_org_def_tlv_entry
	(*LldpOrgDefTlvEntryItem)(nil),  // 10: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_org_def_tlv_entry_item
	(*LldpNeighborDetail)(nil),      // 11: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_detail
	(*LldpNeighborMib)(nil),         // 12: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_mib
}
var file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_depIdxs = []int32{
	2,  // 0: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor.lldp_neighbor:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_item
	11, // 1: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_item.detail:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_detail
	12, // 2: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_item.mib:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_mib
	3,  // 3: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_l3_addr.ipv6_address:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.in6_addr_td
	6,  // 4: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_addr_entry.lldp_addr_entry:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_addr_entry_item
	4,  // 5: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_addr_entry_item.address:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_l3_addr
	8,  // 6: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_unknown_tlv_entry.lldp_unknown_tlv_entry:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_unknown_tlv_entry_item
	10, // 7: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_org_def_tlv_entry.lldp_org_def_tlv_entry:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_org_def_tlv_entry_item
	5,  // 8: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_detail.network_addresses:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_addr_entry
	7,  // 9: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_mib.unknown_tlv_list:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_unknown_tlv_entry
	9,  // 10: cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_neighbor_mib.org_def_tlv_list:type_name -> cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.details.detail.lldp_org_def_tlv_entry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_init()
}
func file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_init() {
	if File_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighbor_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*In6AddrTd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpL3Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpAddrEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpAddrEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpUnknownTlvEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpUnknownTlvEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpOrgDefTlvEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpOrgDefTlvEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborMib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto = out.File
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_rawDesc = nil
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_goTypes = nil
	file_cisco_ios_xr_ethernet_lldp_oper_lldp_nodes_node_neighbors_details_detail_lldp_neighbor_proto_depIdxs = nil
}
