// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_vrrp_oper/vrrp/ipv6/virtual_routers/virtual_router/vrrp_vrouter_info.proto

package cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Detailed vrID specific information
type VrrpVrouterInfo_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName   string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	VirtualRouterId uint32 `protobuf:"varint,2,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
}

func (x *VrrpVrouterInfo_KEYS) Reset() {
	*x = VrrpVrouterInfo_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrrpVrouterInfo_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrrpVrouterInfo_KEYS) ProtoMessage() {}

func (x *VrrpVrouterInfo_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrrpVrouterInfo_KEYS.ProtoReflect.Descriptor instead.
func (*VrrpVrouterInfo_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescGZIP(), []int{0}
}

func (x *VrrpVrouterInfo_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *VrrpVrouterInfo_KEYS) GetVirtualRouterId() uint32 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

type VrrpVrouterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IM Interface Name
	InterfaceName string `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Virtual Router ID
	VirtualRouterId uint32 `protobuf:"varint,51,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	// VRRP Protocol Version
	Version uint32 `protobuf:"varint,52,opt,name=version,proto3" json:"version,omitempty"`
	// Address family
	AddressFamily string `protobuf:"bytes,53,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty"`
	// Session Name
	SessionName string `protobuf:"bytes,54,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
	// Number of slaves following state
	Slaves uint32 `protobuf:"varint,55,opt,name=slaves,proto3" json:"slaves,omitempty"`
	// Group is a slave group
	IsSlave bool `protobuf:"varint,56,opt,name=is_slave,json=isSlave,proto3" json:"is_slave,omitempty"`
	// Followed Session Name
	FollowedSessionName string `protobuf:"bytes,57,opt,name=followed_session_name,json=followedSessionName,proto3" json:"followed_session_name,omitempty"`
	// Configured VRRP secondary address count
	SecondaryAddressCount uint32 `protobuf:"varint,58,opt,name=secondary_address_count,json=secondaryAddressCount,proto3" json:"secondary_address_count,omitempty"`
	// Operational VRRP address count
	OperationalAddressCount uint32 `protobuf:"varint,59,opt,name=operational_address_count,json=operationalAddressCount,proto3" json:"operational_address_count,omitempty"`
	// Operational IPv4 VRRP addresses
	OperationalAddressList [][]byte `protobuf:"bytes,60,rep,name=operational_address_list,json=operationalAddressList,proto3" json:"operational_address_list,omitempty"`
	// Configured IPv4 Primary address
	PrimaryVirtualIp string `protobuf:"bytes,61,opt,name=primary_virtual_ip,json=primaryVirtualIp,proto3" json:"primary_virtual_ip,omitempty"`
	// IPv6 Operational VRRP addresses
	Ipv6OperationalAddressList []*Ipv6BagAddr_ `protobuf:"bytes,62,rep,name=ipv6_operational_address_list,json=ipv6OperationalAddressList,proto3" json:"ipv6_operational_address_list,omitempty"`
	//  Configured but Down VRRP address count
	ConfiguredDownAddressCount uint32 `protobuf:"varint,63,opt,name=configured_down_address_count,json=configuredDownAddressCount,proto3" json:"configured_down_address_count,omitempty"`
	// IPv4 Configured but Down VRRP addresses
	Ipv4ConfiguredDownAddressList [][]byte `protobuf:"bytes,64,rep,name=ipv4_configured_down_address_list,json=ipv4ConfiguredDownAddressList,proto3" json:"ipv4_configured_down_address_list,omitempty"`
	// IPv6 Configured but Down VRRP addresses
	Ipv6ConfiguredDownAddressList []*Ipv6BagAddr_ `protobuf:"bytes,65,rep,name=ipv6_configured_down_address_list,json=ipv6ConfiguredDownAddressList,proto3" json:"ipv6_configured_down_address_list,omitempty"`
	// Virtual linklocal IPv6 address
	VirtualLinklocalIpv6Address string `protobuf:"bytes,66,opt,name=virtual_linklocal_ipv6_address,json=virtualLinklocalIpv6Address,proto3" json:"virtual_linklocal_ipv6_address,omitempty"`
	// State of primary IP address
	PrimaryState string `protobuf:"bytes,67,opt,name=primary_state,json=primaryState,proto3" json:"primary_state,omitempty"`
	// Master router real IP address
	MasterIpAddress string `protobuf:"bytes,68,opt,name=master_ip_address,json=masterIpAddress,proto3" json:"master_ip_address,omitempty"`
	// Master router real IPv6 address
	MasterIpv6Address string `protobuf:"bytes,69,opt,name=master_ipv6_address,json=masterIpv6Address,proto3" json:"master_ipv6_address,omitempty"`
	// Master router priority
	MasterPriority uint32 `protobuf:"varint,70,opt,name=master_priority,json=masterPriority,proto3" json:"master_priority,omitempty"`
	// VRRP state
	VrrpState string `protobuf:"bytes,71,opt,name=vrrp_state,json=vrrpState,proto3" json:"vrrp_state,omitempty"`
	// Authentication type
	AuthenticationType string `protobuf:"bytes,72,opt,name=authentication_type,json=authenticationType,proto3" json:"authentication_type,omitempty"`
	// Authentication data
	AuthenticationString []uint32 `protobuf:"varint,73,rep,packed,name=authentication_string,json=authenticationString,proto3" json:"authentication_string,omitempty"`
	// Configured advertize time
	ConfiguredAdvertizeTime uint32 `protobuf:"varint,74,opt,name=configured_advertize_time,json=configuredAdvertizeTime,proto3" json:"configured_advertize_time,omitempty"`
	// Operational advertize time
	OperAdvertizeTime uint32 `protobuf:"varint,75,opt,name=oper_advertize_time,json=operAdvertizeTime,proto3" json:"oper_advertize_time,omitempty"`
	// Minimum delay time in msecs
	MinDelayTime uint32 `protobuf:"varint,76,opt,name=min_delay_time,json=minDelayTime,proto3" json:"min_delay_time,omitempty"`
	// Reload delay time in msecs
	ReloadDelayTime uint32 `protobuf:"varint,77,opt,name=reload_delay_time,json=reloadDelayTime,proto3" json:"reload_delay_time,omitempty"`
	// Delay timer running flag
	DelayTimerFlag bool `protobuf:"varint,78,opt,name=delay_timer_flag,json=delayTimerFlag,proto3" json:"delay_timer_flag,omitempty"`
	// Delay timer running time secs
	DelayTimerSecs uint32 `protobuf:"varint,79,opt,name=delay_timer_secs,json=delayTimerSecs,proto3" json:"delay_timer_secs,omitempty"`
	// Delay timer running time msecs
	DelayTimerMsecs uint32 `protobuf:"varint,80,opt,name=delay_timer_msecs,json=delayTimerMsecs,proto3" json:"delay_timer_msecs,omitempty"`
	// Text authentication configured flag
	AuthenticationFlag bool `protobuf:"varint,81,opt,name=authentication_flag,json=authenticationFlag,proto3" json:"authentication_flag,omitempty"`
	// Configured timers forced flag
	ForceTimerFlag bool `protobuf:"varint,82,opt,name=force_timer_flag,json=forceTimerFlag,proto3" json:"force_timer_flag,omitempty"`
	// Preempt configured flag
	PreemptFlag bool `protobuf:"varint,83,opt,name=preempt_flag,json=preemptFlag,proto3" json:"preempt_flag,omitempty"`
	// IP address owner flag
	IpAddressOwnerFlag bool `protobuf:"varint,84,opt,name=ip_address_owner_flag,json=ipAddressOwnerFlag,proto3" json:"ip_address_owner_flag,omitempty"`
	// Is accept mode
	IsAcceptMode bool `protobuf:"varint,85,opt,name=is_accept_mode,json=isAcceptMode,proto3" json:"is_accept_mode,omitempty"`
	// Preempt delay time
	PreemptDelayTime uint32 `protobuf:"varint,86,opt,name=preempt_delay_time,json=preemptDelayTime,proto3" json:"preempt_delay_time,omitempty"`
	// Configured priority
	ConfiguredPriority uint32 `protobuf:"varint,87,opt,name=configured_priority,json=configuredPriority,proto3" json:"configured_priority,omitempty"`
	// Operational priority
	OperationalPriority uint32 `protobuf:"varint,88,opt,name=operational_priority,json=operationalPriority,proto3" json:"operational_priority,omitempty"`
	// Priority decrement
	PriorityDecrement uint32 `protobuf:"varint,89,opt,name=priority_decrement,json=priorityDecrement,proto3" json:"priority_decrement,omitempty"`
	// Number of items tracked
	TrackedInterfaceCount uint32 `protobuf:"varint,90,opt,name=tracked_interface_count,json=trackedInterfaceCount,proto3" json:"tracked_interface_count,omitempty"`
	// Number of tracked items up
	TrackedInterfaceUpCount uint32 `protobuf:"varint,91,opt,name=tracked_interface_up_count,json=trackedInterfaceUpCount,proto3" json:"tracked_interface_up_count,omitempty"`
	// Number of tracked items
	TrackedItemCount uint32 `protobuf:"varint,92,opt,name=tracked_item_count,json=trackedItemCount,proto3" json:"tracked_item_count,omitempty"`
	// Number of tracked items in UP state
	TrackedItemUpCount uint32 `protobuf:"varint,93,opt,name=tracked_item_up_count,json=trackedItemUpCount,proto3" json:"tracked_item_up_count,omitempty"`
	// Time in current state secs
	TimeInCurrentState uint32 `protobuf:"varint,94,opt,name=time_in_current_state,json=timeInCurrentState,proto3" json:"time_in_current_state,omitempty"`
	// Number of state changes
	StateChangeCount uint32 `protobuf:"varint,95,opt,name=state_change_count,json=stateChangeCount,proto3" json:"state_change_count,omitempty"`
	// Time vrouter is up in ticks (10ns units)
	TimeVrouterUp uint32 `protobuf:"varint,96,opt,name=time_vrouter_up,json=timeVrouterUp,proto3" json:"time_vrouter_up,omitempty"`
	// No. of times become Master
	MasterCount uint32 `protobuf:"varint,97,opt,name=master_count,json=masterCount,proto3" json:"master_count,omitempty"`
	// No. of advertisements received
	AdvertsReceivedCount uint32 `protobuf:"varint,98,opt,name=adverts_received_count,json=advertsReceivedCount,proto3" json:"adverts_received_count,omitempty"`
	// Advertise interval errors
	AdvertIntervalErrorCount uint32 `protobuf:"varint,99,opt,name=advert_interval_error_count,json=advertIntervalErrorCount,proto3" json:"advert_interval_error_count,omitempty"`
	// No. of advertisements sent
	AdvertsSentCount uint32 `protobuf:"varint,100,opt,name=adverts_sent_count,json=advertsSentCount,proto3" json:"adverts_sent_count,omitempty"`
	// Authentication failures
	AuthenticationFailCount uint32 `protobuf:"varint,101,opt,name=authentication_fail_count,json=authenticationFailCount,proto3" json:"authentication_fail_count,omitempty"`
	// TTL errors
	TtlErrorCount uint32 `protobuf:"varint,102,opt,name=ttl_error_count,json=ttlErrorCount,proto3" json:"ttl_error_count,omitempty"`
	// No. priority 0 received
	PriorityZeroReceivedCount uint32 `protobuf:"varint,103,opt,name=priority_zero_received_count,json=priorityZeroReceivedCount,proto3" json:"priority_zero_received_count,omitempty"`
	// No. priority 0 sent
	PriorityZeroSentCount uint32 `protobuf:"varint,104,opt,name=priority_zero_sent_count,json=priorityZeroSentCount,proto3" json:"priority_zero_sent_count,omitempty"`
	// Invalid packets received
	InvalidPacketCount uint32 `protobuf:"varint,105,opt,name=invalid_packet_count,json=invalidPacketCount,proto3" json:"invalid_packet_count,omitempty"`
	// Address list errors
	AddressListErrorCount uint32 `protobuf:"varint,106,opt,name=address_list_error_count,json=addressListErrorCount,proto3" json:"address_list_error_count,omitempty"`
	// Invalid authentication type
	InvalidAuthTypeCount uint32 `protobuf:"varint,107,opt,name=invalid_auth_type_count,json=invalidAuthTypeCount,proto3" json:"invalid_auth_type_count,omitempty"`
	// Authentication type mismatches
	AuthTypeMismatchCount uint32 `protobuf:"varint,108,opt,name=auth_type_mismatch_count,json=authTypeMismatchCount,proto3" json:"auth_type_mismatch_count,omitempty"`
	// Packet length errors
	PktLengthErrorsCount uint32 `protobuf:"varint,109,opt,name=pkt_length_errors_count,json=pktLengthErrorsCount,proto3" json:"pkt_length_errors_count,omitempty"`
	// Time since a statistics discontinuity in ticks (10ns units)
	TimeStatsDiscontinuity uint32 `protobuf:"varint,110,opt,name=time_stats_discontinuity,json=timeStatsDiscontinuity,proto3" json:"time_stats_discontinuity,omitempty"`
	// BFD session state
	BfdSessionState string `protobuf:"bytes,111,opt,name=bfd_session_state,json=bfdSessionState,proto3" json:"bfd_session_state,omitempty"`
	// BFD packet send interval
	BfdInterval uint32 `protobuf:"varint,112,opt,name=bfd_interval,json=bfdInterval,proto3" json:"bfd_interval,omitempty"`
	// BFD multiplier
	BfdMultiplier uint32 `protobuf:"varint,113,opt,name=bfd_multiplier,json=bfdMultiplier,proto3" json:"bfd_multiplier,omitempty"`
	// BFD configured remote IP
	BfdCfgRemoteIp string `protobuf:"bytes,114,opt,name=bfd_cfg_remote_ip,json=bfdCfgRemoteIp,proto3" json:"bfd_cfg_remote_ip,omitempty"`
	// BFD configured remote IPv6
	BfdConfiguredRemoteIpv6Address string `protobuf:"bytes,115,opt,name=bfd_configured_remote_ipv6_address,json=bfdConfiguredRemoteIpv6Address,proto3" json:"bfd_configured_remote_ipv6_address,omitempty"`
	// Whether state recovered from checkpoint
	StateFromCheckpoint bool `protobuf:"varint,116,opt,name=state_from_checkpoint,json=stateFromCheckpoint,proto3" json:"state_from_checkpoint,omitempty"`
	// Time last resign was sent
	ResignSentTime *VrrpBagTimestamp `protobuf:"bytes,117,opt,name=resign_sent_time,json=resignSentTime,proto3" json:"resign_sent_time,omitempty"`
	// Time last resign was received
	ResignReceivedTime *VrrpBagTimestamp `protobuf:"bytes,118,opt,name=resign_received_time,json=resignReceivedTime,proto3" json:"resign_received_time,omitempty"`
	// State change history
	StateChangeHistory []*VrrpStateChangeInfoType `protobuf:"bytes,119,rep,name=state_change_history,json=stateChangeHistory,proto3" json:"state_change_history,omitempty"`
	// The Interface Primary IPv4 address
	InterfaceIpv4Address string `protobuf:"bytes,120,opt,name=interface_ipv4_address,json=interfaceIpv4Address,proto3" json:"interface_ipv4_address,omitempty"`
	// The Interface linklocal IPv6 address
	InterfaceIpv6Address string `protobuf:"bytes,121,opt,name=interface_ipv6_address,json=interfaceIpv6Address,proto3" json:"interface_ipv6_address,omitempty"`
	// Virtual mac address
	VirtualMacAddress string `protobuf:"bytes,122,opt,name=virtual_mac_address,json=virtualMacAddress,proto3" json:"virtual_mac_address,omitempty"`
	// Virtual mac address state
	VirtualMacAddressState string `protobuf:"bytes,123,opt,name=virtual_mac_address_state,json=virtualMacAddressState,proto3" json:"virtual_mac_address_state,omitempty"`
}

func (x *VrrpVrouterInfo) Reset() {
	*x = VrrpVrouterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrrpVrouterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrrpVrouterInfo) ProtoMessage() {}

func (x *VrrpVrouterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrrpVrouterInfo.ProtoReflect.Descriptor instead.
func (*VrrpVrouterInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescGZIP(), []int{1}
}

func (x *VrrpVrouterInfo) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *VrrpVrouterInfo) GetVirtualRouterId() uint32 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *VrrpVrouterInfo) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAddressFamily() string {
	if x != nil {
		return x.AddressFamily
	}
	return ""
}

func (x *VrrpVrouterInfo) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *VrrpVrouterInfo) GetSlaves() uint32 {
	if x != nil {
		return x.Slaves
	}
	return 0
}

func (x *VrrpVrouterInfo) GetIsSlave() bool {
	if x != nil {
		return x.IsSlave
	}
	return false
}

func (x *VrrpVrouterInfo) GetFollowedSessionName() string {
	if x != nil {
		return x.FollowedSessionName
	}
	return ""
}

func (x *VrrpVrouterInfo) GetSecondaryAddressCount() uint32 {
	if x != nil {
		return x.SecondaryAddressCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetOperationalAddressCount() uint32 {
	if x != nil {
		return x.OperationalAddressCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetOperationalAddressList() [][]byte {
	if x != nil {
		return x.OperationalAddressList
	}
	return nil
}

func (x *VrrpVrouterInfo) GetPrimaryVirtualIp() string {
	if x != nil {
		return x.PrimaryVirtualIp
	}
	return ""
}

func (x *VrrpVrouterInfo) GetIpv6OperationalAddressList() []*Ipv6BagAddr_ {
	if x != nil {
		return x.Ipv6OperationalAddressList
	}
	return nil
}

func (x *VrrpVrouterInfo) GetConfiguredDownAddressCount() uint32 {
	if x != nil {
		return x.ConfiguredDownAddressCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetIpv4ConfiguredDownAddressList() [][]byte {
	if x != nil {
		return x.Ipv4ConfiguredDownAddressList
	}
	return nil
}

func (x *VrrpVrouterInfo) GetIpv6ConfiguredDownAddressList() []*Ipv6BagAddr_ {
	if x != nil {
		return x.Ipv6ConfiguredDownAddressList
	}
	return nil
}

func (x *VrrpVrouterInfo) GetVirtualLinklocalIpv6Address() string {
	if x != nil {
		return x.VirtualLinklocalIpv6Address
	}
	return ""
}

func (x *VrrpVrouterInfo) GetPrimaryState() string {
	if x != nil {
		return x.PrimaryState
	}
	return ""
}

func (x *VrrpVrouterInfo) GetMasterIpAddress() string {
	if x != nil {
		return x.MasterIpAddress
	}
	return ""
}

func (x *VrrpVrouterInfo) GetMasterIpv6Address() string {
	if x != nil {
		return x.MasterIpv6Address
	}
	return ""
}

func (x *VrrpVrouterInfo) GetMasterPriority() uint32 {
	if x != nil {
		return x.MasterPriority
	}
	return 0
}

func (x *VrrpVrouterInfo) GetVrrpState() string {
	if x != nil {
		return x.VrrpState
	}
	return ""
}

func (x *VrrpVrouterInfo) GetAuthenticationType() string {
	if x != nil {
		return x.AuthenticationType
	}
	return ""
}

func (x *VrrpVrouterInfo) GetAuthenticationString() []uint32 {
	if x != nil {
		return x.AuthenticationString
	}
	return nil
}

func (x *VrrpVrouterInfo) GetConfiguredAdvertizeTime() uint32 {
	if x != nil {
		return x.ConfiguredAdvertizeTime
	}
	return 0
}

func (x *VrrpVrouterInfo) GetOperAdvertizeTime() uint32 {
	if x != nil {
		return x.OperAdvertizeTime
	}
	return 0
}

func (x *VrrpVrouterInfo) GetMinDelayTime() uint32 {
	if x != nil {
		return x.MinDelayTime
	}
	return 0
}

func (x *VrrpVrouterInfo) GetReloadDelayTime() uint32 {
	if x != nil {
		return x.ReloadDelayTime
	}
	return 0
}

func (x *VrrpVrouterInfo) GetDelayTimerFlag() bool {
	if x != nil {
		return x.DelayTimerFlag
	}
	return false
}

func (x *VrrpVrouterInfo) GetDelayTimerSecs() uint32 {
	if x != nil {
		return x.DelayTimerSecs
	}
	return 0
}

func (x *VrrpVrouterInfo) GetDelayTimerMsecs() uint32 {
	if x != nil {
		return x.DelayTimerMsecs
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAuthenticationFlag() bool {
	if x != nil {
		return x.AuthenticationFlag
	}
	return false
}

func (x *VrrpVrouterInfo) GetForceTimerFlag() bool {
	if x != nil {
		return x.ForceTimerFlag
	}
	return false
}

func (x *VrrpVrouterInfo) GetPreemptFlag() bool {
	if x != nil {
		return x.PreemptFlag
	}
	return false
}

func (x *VrrpVrouterInfo) GetIpAddressOwnerFlag() bool {
	if x != nil {
		return x.IpAddressOwnerFlag
	}
	return false
}

func (x *VrrpVrouterInfo) GetIsAcceptMode() bool {
	if x != nil {
		return x.IsAcceptMode
	}
	return false
}

func (x *VrrpVrouterInfo) GetPreemptDelayTime() uint32 {
	if x != nil {
		return x.PreemptDelayTime
	}
	return 0
}

func (x *VrrpVrouterInfo) GetConfiguredPriority() uint32 {
	if x != nil {
		return x.ConfiguredPriority
	}
	return 0
}

func (x *VrrpVrouterInfo) GetOperationalPriority() uint32 {
	if x != nil {
		return x.OperationalPriority
	}
	return 0
}

func (x *VrrpVrouterInfo) GetPriorityDecrement() uint32 {
	if x != nil {
		return x.PriorityDecrement
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTrackedInterfaceCount() uint32 {
	if x != nil {
		return x.TrackedInterfaceCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTrackedInterfaceUpCount() uint32 {
	if x != nil {
		return x.TrackedInterfaceUpCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTrackedItemCount() uint32 {
	if x != nil {
		return x.TrackedItemCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTrackedItemUpCount() uint32 {
	if x != nil {
		return x.TrackedItemUpCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTimeInCurrentState() uint32 {
	if x != nil {
		return x.TimeInCurrentState
	}
	return 0
}

func (x *VrrpVrouterInfo) GetStateChangeCount() uint32 {
	if x != nil {
		return x.StateChangeCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTimeVrouterUp() uint32 {
	if x != nil {
		return x.TimeVrouterUp
	}
	return 0
}

func (x *VrrpVrouterInfo) GetMasterCount() uint32 {
	if x != nil {
		return x.MasterCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAdvertsReceivedCount() uint32 {
	if x != nil {
		return x.AdvertsReceivedCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAdvertIntervalErrorCount() uint32 {
	if x != nil {
		return x.AdvertIntervalErrorCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAdvertsSentCount() uint32 {
	if x != nil {
		return x.AdvertsSentCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAuthenticationFailCount() uint32 {
	if x != nil {
		return x.AuthenticationFailCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTtlErrorCount() uint32 {
	if x != nil {
		return x.TtlErrorCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetPriorityZeroReceivedCount() uint32 {
	if x != nil {
		return x.PriorityZeroReceivedCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetPriorityZeroSentCount() uint32 {
	if x != nil {
		return x.PriorityZeroSentCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetInvalidPacketCount() uint32 {
	if x != nil {
		return x.InvalidPacketCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAddressListErrorCount() uint32 {
	if x != nil {
		return x.AddressListErrorCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetInvalidAuthTypeCount() uint32 {
	if x != nil {
		return x.InvalidAuthTypeCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetAuthTypeMismatchCount() uint32 {
	if x != nil {
		return x.AuthTypeMismatchCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetPktLengthErrorsCount() uint32 {
	if x != nil {
		return x.PktLengthErrorsCount
	}
	return 0
}

func (x *VrrpVrouterInfo) GetTimeStatsDiscontinuity() uint32 {
	if x != nil {
		return x.TimeStatsDiscontinuity
	}
	return 0
}

func (x *VrrpVrouterInfo) GetBfdSessionState() string {
	if x != nil {
		return x.BfdSessionState
	}
	return ""
}

func (x *VrrpVrouterInfo) GetBfdInterval() uint32 {
	if x != nil {
		return x.BfdInterval
	}
	return 0
}

func (x *VrrpVrouterInfo) GetBfdMultiplier() uint32 {
	if x != nil {
		return x.BfdMultiplier
	}
	return 0
}

func (x *VrrpVrouterInfo) GetBfdCfgRemoteIp() string {
	if x != nil {
		return x.BfdCfgRemoteIp
	}
	return ""
}

func (x *VrrpVrouterInfo) GetBfdConfiguredRemoteIpv6Address() string {
	if x != nil {
		return x.BfdConfiguredRemoteIpv6Address
	}
	return ""
}

func (x *VrrpVrouterInfo) GetStateFromCheckpoint() bool {
	if x != nil {
		return x.StateFromCheckpoint
	}
	return false
}

func (x *VrrpVrouterInfo) GetResignSentTime() *VrrpBagTimestamp {
	if x != nil {
		return x.ResignSentTime
	}
	return nil
}

func (x *VrrpVrouterInfo) GetResignReceivedTime() *VrrpBagTimestamp {
	if x != nil {
		return x.ResignReceivedTime
	}
	return nil
}

func (x *VrrpVrouterInfo) GetStateChangeHistory() []*VrrpStateChangeInfoType {
	if x != nil {
		return x.StateChangeHistory
	}
	return nil
}

func (x *VrrpVrouterInfo) GetInterfaceIpv4Address() string {
	if x != nil {
		return x.InterfaceIpv4Address
	}
	return ""
}

func (x *VrrpVrouterInfo) GetInterfaceIpv6Address() string {
	if x != nil {
		return x.InterfaceIpv6Address
	}
	return ""
}

func (x *VrrpVrouterInfo) GetVirtualMacAddress() string {
	if x != nil {
		return x.VirtualMacAddress
	}
	return ""
}

func (x *VrrpVrouterInfo) GetVirtualMacAddressState() string {
	if x != nil {
		return x.VirtualMacAddressState
	}
	return ""
}

type Ipv6BagAddr_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6Address string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *Ipv6BagAddr_) Reset() {
	*x = Ipv6BagAddr_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6BagAddr_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6BagAddr_) ProtoMessage() {}

func (x *Ipv6BagAddr_) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6BagAddr_.ProtoReflect.Descriptor instead.
func (*Ipv6BagAddr_) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv6BagAddr_) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

// Timestamp
type VrrpBagTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Seconds
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Nanoseconds
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *VrrpBagTimestamp) Reset() {
	*x = VrrpBagTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrrpBagTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrrpBagTimestamp) ProtoMessage() {}

func (x *VrrpBagTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrrpBagTimestamp.ProtoReflect.Descriptor instead.
func (*VrrpBagTimestamp) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescGZIP(), []int{3}
}

func (x *VrrpBagTimestamp) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *VrrpBagTimestamp) GetNanoseconds() uint32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

// State change info
type VrrpStateChangeInfoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Old State
	OldState string `protobuf:"bytes,1,opt,name=old_state,json=oldState,proto3" json:"old_state,omitempty"`
	// New State
	NewState string `protobuf:"bytes,2,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	// Reason for state change
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Time of state change
	Time *VrrpBagTimestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VrrpStateChangeInfoType) Reset() {
	*x = VrrpStateChangeInfoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrrpStateChangeInfoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrrpStateChangeInfoType) ProtoMessage() {}

func (x *VrrpStateChangeInfoType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrrpStateChangeInfoType.ProtoReflect.Descriptor instead.
func (*VrrpStateChangeInfoType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescGZIP(), []int{4}
}

func (x *VrrpStateChangeInfoType) GetOldState() string {
	if x != nil {
		return x.OldState
	}
	return ""
}

func (x *VrrpStateChangeInfoType) GetNewState() string {
	if x != nil {
		return x.NewState
	}
	return ""
}

func (x *VrrpStateChangeInfoType) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *VrrpStateChangeInfoType) GetTime() *VrrpBagTimestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDesc = []byte{
	0x0a, 0x5c, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x76, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x44,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x16, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x76, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x8e, 0x20, 0x0a, 0x11, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x76, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x6c, 0x61, 0x76,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49,
	0x70, 0x12, 0x97, 0x01, 0x0a, 0x1d, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x72,
	0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x52,
	0x1a, 0x69, 0x70, 0x76, 0x36, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x6f,
	0x77, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x21, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x1d, 0x69, 0x70, 0x76, 0x34, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x21, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x41,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x62, 0x61, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x52, 0x1d, 0x69, 0x70, 0x76, 0x36,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x72, 0x72, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x72,
	0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6d,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x76, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x18, 0x60, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x74, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x74, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5a, 0x65, 0x72, 0x6f,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6b, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x70, 0x6b, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x69, 0x74, 0x79, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69,
	0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x66, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x66, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x66, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x66, 0x64, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x66, 0x64, 0x5f,
	0x63, 0x66, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x66, 0x64, 0x43, 0x66, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x70, 0x12, 0x4a, 0x0a, 0x22, 0x62, 0x66, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1e, 0x62, 0x66, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x72, 0x72,
	0x70, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x72, 0x72, 0x70,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x72, 0x72, 0x70, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x12, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x77,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x7a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x33, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x62, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x1b, 0x76, 0x72,
	0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x72,
	0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x72, 0x72, 0x70, 0x2e, 0x69, 0x70, 0x76,
	0x36, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescData = file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_goTypes = []interface{}{
	(*VrrpVrouterInfo_KEYS)(nil),    // 0: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info_KEYS
	(*VrrpVrouterInfo)(nil),         // 1: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info
	(*Ipv6BagAddr_)(nil),            // 2: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.ipv6_bag_addr_
	(*VrrpBagTimestamp)(nil),        // 3: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_bag_timestamp
	(*VrrpStateChangeInfoType)(nil), // 4: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_state_change_info_type
}
var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_depIdxs = []int32{
	2, // 0: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info.ipv6_operational_address_list:type_name -> cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.ipv6_bag_addr_
	2, // 1: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info.ipv6_configured_down_address_list:type_name -> cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.ipv6_bag_addr_
	3, // 2: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info.resign_sent_time:type_name -> cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_bag_timestamp
	3, // 3: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info.resign_received_time:type_name -> cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_bag_timestamp
	4, // 4: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info.state_change_history:type_name -> cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_state_change_info_type
	3, // 5: cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_state_change_info_type.time:type_name -> cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_bag_timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_init()
}
func file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_init() {
	if File_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrrpVrouterInfo_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrrpVrouterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6BagAddr_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrrpBagTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrrpStateChangeInfoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto = out.File
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router_vrrp_vrouter_info_proto_depIdxs = nil
}
