// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_ipv4_vrrp_oper/vrrp/summary/vrrp_summary_info.proto

package cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// VRRP summary statistics
type VrrpSummaryInfo_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VrrpSummaryInfo_KEYS) Reset() {
	*x = VrrpSummaryInfo_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrrpSummaryInfo_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrrpSummaryInfo_KEYS) ProtoMessage() {}

func (x *VrrpSummaryInfo_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrrpSummaryInfo_KEYS.ProtoReflect.Descriptor instead.
func (*VrrpSummaryInfo_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescGZIP(), []int{0}
}

type VrrpSummaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of IPv4 sessions in MASTER (owner) state
	Ipv4SessionsMasterOwner uint32 `protobuf:"varint,50,opt,name=ipv4_sessions_master_owner,json=ipv4SessionsMasterOwner,proto3" json:"ipv4_sessions_master_owner,omitempty"`
	// Number of IPv4 sessions in MASTER state
	Ipv4SessionsMaster uint32 `protobuf:"varint,51,opt,name=ipv4_sessions_master,json=ipv4SessionsMaster,proto3" json:"ipv4_sessions_master,omitempty"`
	// Number of IPv4 sessions in BACKUP state
	Ipv4SessionsBackup uint32 `protobuf:"varint,52,opt,name=ipv4_sessions_backup,json=ipv4SessionsBackup,proto3" json:"ipv4_sessions_backup,omitempty"`
	// Number of IPv4 sessions in INIT state
	Ipv4SessionsInit uint32 `protobuf:"varint,53,opt,name=ipv4_sessions_init,json=ipv4SessionsInit,proto3" json:"ipv4_sessions_init,omitempty"`
	// Number of IPv4 slaves in MASTER state
	Ipv4SlavesMaster uint32 `protobuf:"varint,54,opt,name=ipv4_slaves_master,json=ipv4SlavesMaster,proto3" json:"ipv4_slaves_master,omitempty"`
	// Number of IPv4 slaves in BACKUP state
	Ipv4SlavesBackup uint32 `protobuf:"varint,55,opt,name=ipv4_slaves_backup,json=ipv4SlavesBackup,proto3" json:"ipv4_slaves_backup,omitempty"`
	// Number of IPv4 slaves in INIT state
	Ipv4SlavesInit uint32 `protobuf:"varint,56,opt,name=ipv4_slaves_init,json=ipv4SlavesInit,proto3" json:"ipv4_slaves_init,omitempty"`
	// Number of UP IPv4 Virtual IP Addresses on virtual routers in MASTER (owner) state
	Ipv4VirtualIpAddressesMasterOwnerUp uint32 `protobuf:"varint,57,opt,name=ipv4_virtual_ip_addresses_master_owner_up,json=ipv4VirtualIpAddressesMasterOwnerUp,proto3" json:"ipv4_virtual_ip_addresses_master_owner_up,omitempty"`
	// Number of DOWN IPv4 Virtual IP Addresses on virtual routers in MASTER (owner) state
	Ipv4VirtualIpAddressesMasterOwnerDown uint32 `protobuf:"varint,58,opt,name=ipv4_virtual_ip_addresses_master_owner_down,json=ipv4VirtualIpAddressesMasterOwnerDown,proto3" json:"ipv4_virtual_ip_addresses_master_owner_down,omitempty"`
	// Number of UP IPv4 Virtual IP Addresses on virtual routers in MASTER state
	Ipv4VirtualIpAddressesMasterUp uint32 `protobuf:"varint,59,opt,name=ipv4_virtual_ip_addresses_master_up,json=ipv4VirtualIpAddressesMasterUp,proto3" json:"ipv4_virtual_ip_addresses_master_up,omitempty"`
	// Number of DOWN IPv4 Virtual IP Addresses on virtual routers in MASTER state
	Ipv4VirtualIpAddressesMasterDown uint32 `protobuf:"varint,60,opt,name=ipv4_virtual_ip_addresses_master_down,json=ipv4VirtualIpAddressesMasterDown,proto3" json:"ipv4_virtual_ip_addresses_master_down,omitempty"`
	// Number of UP IPv4 Virtual IP Addresses on virtual routers in BACKUP state
	Ipv4VirtualIpAddressesBackupUp uint32 `protobuf:"varint,61,opt,name=ipv4_virtual_ip_addresses_backup_up,json=ipv4VirtualIpAddressesBackupUp,proto3" json:"ipv4_virtual_ip_addresses_backup_up,omitempty"`
	// Number of DOWN IPv4 Virtual IP Addresses on virtual routers in BACKUP state
	Ipv4VirtualIpAddressesBackupDown uint32 `protobuf:"varint,62,opt,name=ipv4_virtual_ip_addresses_backup_down,json=ipv4VirtualIpAddressesBackupDown,proto3" json:"ipv4_virtual_ip_addresses_backup_down,omitempty"`
	// Number of UP IPv4 Virtual IP Addresses on virtual routers in INIT state
	Ipv4VirtualIpAddressesInitUp uint32 `protobuf:"varint,63,opt,name=ipv4_virtual_ip_addresses_init_up,json=ipv4VirtualIpAddressesInitUp,proto3" json:"ipv4_virtual_ip_addresses_init_up,omitempty"`
	// Number of DOWN IPv4 Virtual IP Addresses on virtual routers in INIT state
	Ipv4VirtualIpAddressesInitDown uint32 `protobuf:"varint,64,opt,name=ipv4_virtual_ip_addresses_init_down,json=ipv4VirtualIpAddressesInitDown,proto3" json:"ipv4_virtual_ip_addresses_init_down,omitempty"`
	// Number of IPv6 sessions in MASTER (owner) state
	Ipv6SessionsMasterOwner uint32 `protobuf:"varint,65,opt,name=ipv6_sessions_master_owner,json=ipv6SessionsMasterOwner,proto3" json:"ipv6_sessions_master_owner,omitempty"`
	// Number of IPv6 sessions in MASTER state
	Ipv6SessionsMaster uint32 `protobuf:"varint,66,opt,name=ipv6_sessions_master,json=ipv6SessionsMaster,proto3" json:"ipv6_sessions_master,omitempty"`
	// Number of IPv6 sessions in BACKUP state
	Ipv6SessionsBackup uint32 `protobuf:"varint,67,opt,name=ipv6_sessions_backup,json=ipv6SessionsBackup,proto3" json:"ipv6_sessions_backup,omitempty"`
	// Number of IPv6 sessions in INIT state
	Ipv6SessionsInit uint32 `protobuf:"varint,68,opt,name=ipv6_sessions_init,json=ipv6SessionsInit,proto3" json:"ipv6_sessions_init,omitempty"`
	// Number of IPv6 slaves in MASTER state
	Ipv6SlavesMaster uint32 `protobuf:"varint,69,opt,name=ipv6_slaves_master,json=ipv6SlavesMaster,proto3" json:"ipv6_slaves_master,omitempty"`
	// Number of IPv6 slaves in BACKUP state
	Ipv6SlavesBackup uint32 `protobuf:"varint,70,opt,name=ipv6_slaves_backup,json=ipv6SlavesBackup,proto3" json:"ipv6_slaves_backup,omitempty"`
	// Number of IPv6 slaves in INIT state
	Ipv6SlavesInit uint32 `protobuf:"varint,71,opt,name=ipv6_slaves_init,json=ipv6SlavesInit,proto3" json:"ipv6_slaves_init,omitempty"`
	// Number of UP IPv6 Virtual IP Addresses on virtual routers in MASTER (owner) state
	Ipv6VirtualIpAddressesMasterOwnerUp uint32 `protobuf:"varint,72,opt,name=ipv6_virtual_ip_addresses_master_owner_up,json=ipv6VirtualIpAddressesMasterOwnerUp,proto3" json:"ipv6_virtual_ip_addresses_master_owner_up,omitempty"`
	// Number of DOWN IPv6 Virtual IP Addresses on virtual routers in MASTER (owner) state
	Ipv6VirtualIpAddressesMasterOwnerDown uint32 `protobuf:"varint,73,opt,name=ipv6_virtual_ip_addresses_master_owner_down,json=ipv6VirtualIpAddressesMasterOwnerDown,proto3" json:"ipv6_virtual_ip_addresses_master_owner_down,omitempty"`
	// Number of UP IPv6 Virtual IP Addresses on virtual routers in MASTER state
	Ipv6VirtualIpAddressesMasterUp uint32 `protobuf:"varint,74,opt,name=ipv6_virtual_ip_addresses_master_up,json=ipv6VirtualIpAddressesMasterUp,proto3" json:"ipv6_virtual_ip_addresses_master_up,omitempty"`
	// Number of DOWN IPv6 Virtual IP Addresses on virtual routers in MASTER state
	Ipv6VirtualIpAddressesMasterDown uint32 `protobuf:"varint,75,opt,name=ipv6_virtual_ip_addresses_master_down,json=ipv6VirtualIpAddressesMasterDown,proto3" json:"ipv6_virtual_ip_addresses_master_down,omitempty"`
	// Number of UP IPv6 Virtual IP Addresses on virtual routers in BACKUP state
	Ipv6VirtualIpAddressesBackupUp uint32 `protobuf:"varint,76,opt,name=ipv6_virtual_ip_addresses_backup_up,json=ipv6VirtualIpAddressesBackupUp,proto3" json:"ipv6_virtual_ip_addresses_backup_up,omitempty"`
	// Number of DOWN IPv6 Virtual IP Addresses on virtual routers in BACKUP state
	Ipv6VirtualIpAddressesBackupDown uint32 `protobuf:"varint,77,opt,name=ipv6_virtual_ip_addresses_backup_down,json=ipv6VirtualIpAddressesBackupDown,proto3" json:"ipv6_virtual_ip_addresses_backup_down,omitempty"`
	// Number of UP IPv6 Virtual IP Addresses on virtual routers in INIT state
	Ipv6VirtualIpAddressesInitUp uint32 `protobuf:"varint,78,opt,name=ipv6_virtual_ip_addresses_init_up,json=ipv6VirtualIpAddressesInitUp,proto3" json:"ipv6_virtual_ip_addresses_init_up,omitempty"`
	// Number of DOWN IPv6 Virtual IP Addresses on virtual routers in INIT state
	Ipv6VirtualIpAddressesInitDown uint32 `protobuf:"varint,79,opt,name=ipv6_virtual_ip_addresses_init_down,json=ipv6VirtualIpAddressesInitDown,proto3" json:"ipv6_virtual_ip_addresses_init_down,omitempty"`
	// Number of VRRP interfaces with IPv4 caps in UP state
	InterfacesIpv4StateUp uint32 `protobuf:"varint,80,opt,name=interfaces_ipv4_state_up,json=interfacesIpv4StateUp,proto3" json:"interfaces_ipv4_state_up,omitempty"`
	// Number of VRRP interfaces with IPv4 caps in DOWN state
	InterfacesIpv4StateDown uint32 `protobuf:"varint,81,opt,name=interfaces_ipv4_state_down,json=interfacesIpv4StateDown,proto3" json:"interfaces_ipv4_state_down,omitempty"`
	// Number of tracked interfaces with IPv4 caps in UP state
	TrackedInterfacesIpv4StateUp uint32 `protobuf:"varint,82,opt,name=tracked_interfaces_ipv4_state_up,json=trackedInterfacesIpv4StateUp,proto3" json:"tracked_interfaces_ipv4_state_up,omitempty"`
	// Number of tracked interfaces with IPv4 caps in DOWN state
	TrackedInterfacesIpv4StateDown uint32 `protobuf:"varint,83,opt,name=tracked_interfaces_ipv4_state_down,json=trackedInterfacesIpv4StateDown,proto3" json:"tracked_interfaces_ipv4_state_down,omitempty"`
	// Number of VRRP interfaces with IPv6 caps in UP state
	InterfacesIpv6StateUp uint32 `protobuf:"varint,84,opt,name=interfaces_ipv6_state_up,json=interfacesIpv6StateUp,proto3" json:"interfaces_ipv6_state_up,omitempty"`
	// Number of VRRP interfaces with IPv6 caps in DOWN state
	InterfacesIpv6StateDown uint32 `protobuf:"varint,85,opt,name=interfaces_ipv6_state_down,json=interfacesIpv6StateDown,proto3" json:"interfaces_ipv6_state_down,omitempty"`
	// Number of tracked interfaces with IPv6 caps in UP state
	TrackedInterfacesIpv6StateUp uint32 `protobuf:"varint,86,opt,name=tracked_interfaces_ipv6_state_up,json=trackedInterfacesIpv6StateUp,proto3" json:"tracked_interfaces_ipv6_state_up,omitempty"`
	// Number of tracked interfaces with IPv6 caps in DOWN state
	TrackedInterfacesIpv6StateDown uint32 `protobuf:"varint,87,opt,name=tracked_interfaces_ipv6_state_down,json=trackedInterfacesIpv6StateDown,proto3" json:"tracked_interfaces_ipv6_state_down,omitempty"`
	// Number of tracked objects in UP state
	TrackedObjectsStateUp uint32 `protobuf:"varint,88,opt,name=tracked_objects_state_up,json=trackedObjectsStateUp,proto3" json:"tracked_objects_state_up,omitempty"`
	// Number of tracked objects in DOWN state
	TrackedObjectsStateDown uint32 `protobuf:"varint,89,opt,name=tracked_objects_state_down,json=trackedObjectsStateDown,proto3" json:"tracked_objects_state_down,omitempty"`
	// Number of VRRP IPv4 BFD sessions in UP state
	BfdSessionsUp uint32 `protobuf:"varint,90,opt,name=bfd_sessions_up,json=bfdSessionsUp,proto3" json:"bfd_sessions_up,omitempty"`
	// Number of VRRP IPv4 BFD sessions in DOWN state
	BfdSessionsDown uint32 `protobuf:"varint,91,opt,name=bfd_sessions_down,json=bfdSessionsDown,proto3" json:"bfd_sessions_down,omitempty"`
	// Number of VRRP IPv4 BFD sessions in INACTIVE state
	BfdSessionInactive uint32 `protobuf:"varint,92,opt,name=bfd_session_inactive,json=bfdSessionInactive,proto3" json:"bfd_session_inactive,omitempty"`
	// Number of VRRP IPv6 BFD sessions in UP state
	Ipv6BfdSessionsUp uint32 `protobuf:"varint,93,opt,name=ipv6_bfd_sessions_up,json=ipv6BfdSessionsUp,proto3" json:"ipv6_bfd_sessions_up,omitempty"`
	// Number of VRRP IPv6 BFD sessions in DOWN state
	Ipv6BfdSessionsDown uint32 `protobuf:"varint,94,opt,name=ipv6_bfd_sessions_down,json=ipv6BfdSessionsDown,proto3" json:"ipv6_bfd_sessions_down,omitempty"`
	// Number of VRRP IPv6 BFD sessions in INACTIVE state
	Ipv6BfdSessionInactive uint32 `protobuf:"varint,95,opt,name=ipv6_bfd_session_inactive,json=ipv6BfdSessionInactive,proto3" json:"ipv6_bfd_session_inactive,omitempty"`
}

func (x *VrrpSummaryInfo) Reset() {
	*x = VrrpSummaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrrpSummaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrrpSummaryInfo) ProtoMessage() {}

func (x *VrrpSummaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrrpSummaryInfo.ProtoReflect.Descriptor instead.
func (*VrrpSummaryInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescGZIP(), []int{1}
}

func (x *VrrpSummaryInfo) GetIpv4SessionsMasterOwner() uint32 {
	if x != nil {
		return x.Ipv4SessionsMasterOwner
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4SessionsMaster() uint32 {
	if x != nil {
		return x.Ipv4SessionsMaster
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4SessionsBackup() uint32 {
	if x != nil {
		return x.Ipv4SessionsBackup
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4SessionsInit() uint32 {
	if x != nil {
		return x.Ipv4SessionsInit
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4SlavesMaster() uint32 {
	if x != nil {
		return x.Ipv4SlavesMaster
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4SlavesBackup() uint32 {
	if x != nil {
		return x.Ipv4SlavesBackup
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4SlavesInit() uint32 {
	if x != nil {
		return x.Ipv4SlavesInit
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesMasterOwnerUp() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesMasterOwnerUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesMasterOwnerDown() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesMasterOwnerDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesMasterUp() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesMasterUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesMasterDown() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesMasterDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesBackupUp() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesBackupUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesBackupDown() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesBackupDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesInitUp() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesInitUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv4VirtualIpAddressesInitDown() uint32 {
	if x != nil {
		return x.Ipv4VirtualIpAddressesInitDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6SessionsMasterOwner() uint32 {
	if x != nil {
		return x.Ipv6SessionsMasterOwner
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6SessionsMaster() uint32 {
	if x != nil {
		return x.Ipv6SessionsMaster
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6SessionsBackup() uint32 {
	if x != nil {
		return x.Ipv6SessionsBackup
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6SessionsInit() uint32 {
	if x != nil {
		return x.Ipv6SessionsInit
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6SlavesMaster() uint32 {
	if x != nil {
		return x.Ipv6SlavesMaster
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6SlavesBackup() uint32 {
	if x != nil {
		return x.Ipv6SlavesBackup
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6SlavesInit() uint32 {
	if x != nil {
		return x.Ipv6SlavesInit
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesMasterOwnerUp() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesMasterOwnerUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesMasterOwnerDown() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesMasterOwnerDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesMasterUp() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesMasterUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesMasterDown() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesMasterDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesBackupUp() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesBackupUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesBackupDown() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesBackupDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesInitUp() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesInitUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6VirtualIpAddressesInitDown() uint32 {
	if x != nil {
		return x.Ipv6VirtualIpAddressesInitDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetInterfacesIpv4StateUp() uint32 {
	if x != nil {
		return x.InterfacesIpv4StateUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetInterfacesIpv4StateDown() uint32 {
	if x != nil {
		return x.InterfacesIpv4StateDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetTrackedInterfacesIpv4StateUp() uint32 {
	if x != nil {
		return x.TrackedInterfacesIpv4StateUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetTrackedInterfacesIpv4StateDown() uint32 {
	if x != nil {
		return x.TrackedInterfacesIpv4StateDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetInterfacesIpv6StateUp() uint32 {
	if x != nil {
		return x.InterfacesIpv6StateUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetInterfacesIpv6StateDown() uint32 {
	if x != nil {
		return x.InterfacesIpv6StateDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetTrackedInterfacesIpv6StateUp() uint32 {
	if x != nil {
		return x.TrackedInterfacesIpv6StateUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetTrackedInterfacesIpv6StateDown() uint32 {
	if x != nil {
		return x.TrackedInterfacesIpv6StateDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetTrackedObjectsStateUp() uint32 {
	if x != nil {
		return x.TrackedObjectsStateUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetTrackedObjectsStateDown() uint32 {
	if x != nil {
		return x.TrackedObjectsStateDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetBfdSessionsUp() uint32 {
	if x != nil {
		return x.BfdSessionsUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetBfdSessionsDown() uint32 {
	if x != nil {
		return x.BfdSessionsDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetBfdSessionInactive() uint32 {
	if x != nil {
		return x.BfdSessionInactive
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6BfdSessionsUp() uint32 {
	if x != nil {
		return x.Ipv6BfdSessionsUp
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6BfdSessionsDown() uint32 {
	if x != nil {
		return x.Ipv6BfdSessionsDown
	}
	return 0
}

func (x *VrrpSummaryInfo) GetIpv6BfdSessionInactive() uint32 {
	if x != nil {
		return x.Ipv6BfdSessionInactive
	}
	return 0
}

var File_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDesc = []byte{
	0x0a, 0x40, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x72,
	0x72, 0x70, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x28, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x76, 0x72, 0x72, 0x70, 0x2e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x18, 0x0a, 0x16,
	0x76, 0x72, 0x72, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x22, 0xfa, 0x16, 0x0a, 0x11, 0x76, 0x72, 0x72, 0x70, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x1a,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x69, 0x70, 0x76, 0x34, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x53, 0x6c, 0x61,
	0x76, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x69,
	0x74, 0x12, 0x56, 0x0a, 0x29, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x70, 0x12, 0x5a, 0x0a, 0x2b, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25,
	0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x4b, 0x0a, 0x23, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1e, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x12, 0x4f, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x20, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x4b, 0x0a, 0x23, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x70, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x70,
	0x12, 0x4f, 0x0a, 0x25, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x20, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x47, 0x0a, 0x21, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x75, 0x70, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x69, 0x70,
	0x76, 0x34, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x70, 0x12, 0x4b, 0x0a, 0x23, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x70, 0x76,
	0x36, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73,
	0x6c, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70,
	0x76, 0x36, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x29,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x23, 0x69, 0x70, 0x76, 0x36, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x70, 0x12, 0x5a, 0x0a, 0x2b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x69, 0x70, 0x76, 0x36, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e,
	0x12, 0x4b, 0x0a, 0x23, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x69,
	0x70, 0x76, 0x36, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x12, 0x4f, 0x0a,
	0x25, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x69, 0x70,
	0x76, 0x36, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x4b,
	0x0a, 0x23, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x75, 0x70, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x69, 0x70, 0x76,
	0x36, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x70, 0x12, 0x4f, 0x0a, 0x25, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x69, 0x70, 0x76, 0x36,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x47, 0x0a, 0x21,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x75,
	0x70, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x69, 0x70, 0x76, 0x36, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x55, 0x70, 0x12, 0x4b, 0x0a, 0x23, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1e, 0x69, 0x70, 0x76, 0x36, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x70, 0x76, 0x34, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x12, 0x4a, 0x0a, 0x22, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49,
	0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x37, 0x0a, 0x18,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x70, 0x76, 0x36, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x70, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x70, 0x76, 0x36, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x70, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12,
	0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x59, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x55, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x69, 0x70, 0x76, 0x36, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x55, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x62, 0x66, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x70, 0x76,
	0x36, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescData = file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDesc
)

func file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescData)
	})
	return file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDescData
}

var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_goTypes = []interface{}{
	(*VrrpSummaryInfo_KEYS)(nil), // 0: cisco_ios_xr_ipv4_vrrp_oper.vrrp.summary.vrrp_summary_info_KEYS
	(*VrrpSummaryInfo)(nil),      // 1: cisco_ios_xr_ipv4_vrrp_oper.vrrp.summary.vrrp_summary_info
}
var file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_init() }
func file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_init() {
	if File_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrrpSummaryInfo_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrrpSummaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto = out.File
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_rawDesc = nil
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_goTypes = nil
	file_cisco_ios_xr_ipv4_vrrp_oper_vrrp_summary_vrrp_summary_info_proto_depIdxs = nil
}
