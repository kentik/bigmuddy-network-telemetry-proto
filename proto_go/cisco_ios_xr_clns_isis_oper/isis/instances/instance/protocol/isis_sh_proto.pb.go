// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/protocol/isis_sh_proto.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Information about an IS-IS instance
type IsisShProto_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *IsisShProto_KEYS) Reset() {
	*x = IsisShProto_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShProto_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShProto_KEYS) ProtoMessage() {}

func (x *IsisShProto_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShProto_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShProto_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShProto_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type IsisShProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local system ID
	NsapSystemId string `protobuf:"bytes,50,opt,name=nsap_system_id,json=nsapSystemId,proto3" json:"nsap_system_id,omitempty"`
	// Indicates if system ID valid
	ValidNsapSystemId bool `protobuf:"varint,51,opt,name=valid_nsap_system_id,json=validNsapSystemId,proto3" json:"valid_nsap_system_id,omitempty"`
	// instance id
	InstanceId uint32 `protobuf:"varint,52,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Levels running
	RunningLevels string `protobuf:"bytes,53,opt,name=running_levels,json=runningLevels,proto3" json:"running_levels,omitempty"`
	// Manual area addresses
	ManualAreaAddresses []*OsiAreaAddressType `protobuf:"bytes,54,rep,name=manual_area_addresses,json=manualAreaAddresses,proto3" json:"manual_area_addresses,omitempty"`
	// Active area addresses
	ActiveAreaAddresses []*OsiAreaAddressType `protobuf:"bytes,55,rep,name=active_area_addresses,json=activeAreaAddresses,proto3" json:"active_area_addresses,omitempty"`
	// Configured NSF type
	ConfiguredNsfFlavor string `protobuf:"bytes,56,opt,name=configured_nsf_flavor,json=configuredNsfFlavor,proto3" json:"configured_nsf_flavor,omitempty"`
	// NSF type of last restart
	LastRestartNsfFlavor string `protobuf:"bytes,57,opt,name=last_restart_nsf_flavor,json=lastRestartNsfFlavor,proto3" json:"last_restart_nsf_flavor,omitempty"`
	// Last restart status
	LastRestartStatus string `protobuf:"bytes,58,opt,name=last_restart_status,json=lastRestartStatus,proto3" json:"last_restart_status,omitempty"`
	// Time remaining until the next NSF restart may be attempted
	RemainingTimeForNextNsfRestart uint32 `protobuf:"varint,59,opt,name=remaining_time_for_next_nsf_restart,json=remainingTimeForNextNsfRestart,proto3" json:"remaining_time_for_next_nsf_restart,omitempty"`
	// Per-topology data
	PerTopoData []*IsisShTopo `protobuf:"bytes,60,rep,name=per_topo_data,json=perTopoData,proto3" json:"per_topo_data,omitempty"`
	// Adj Forming count
	AdjFormCount uint32 `protobuf:"varint,61,opt,name=adj_form_count,json=adjFormCount,proto3" json:"adj_form_count,omitempty"`
	// Adj Full count
	AdjFullCount uint32 `protobuf:"varint,62,opt,name=adj_full_count,json=adjFullCount,proto3" json:"adj_full_count,omitempty"`
	// Adjacency Stagger Enabled
	AdjStaggerEnabled bool `protobuf:"varint,63,opt,name=adj_stagger_enabled,json=adjStaggerEnabled,proto3" json:"adj_stagger_enabled,omitempty"`
	// Adjacency Stagger Initiall Number of Forming Neighbors Allowed
	AdjStaggerInit uint32 `protobuf:"varint,64,opt,name=adj_stagger_init,json=adjStaggerInit,proto3" json:"adj_stagger_init,omitempty"`
	// Adjacency Stagger Max Number of Forming Neighbors Allowed
	AdjStaggerMax uint32 `protobuf:"varint,65,opt,name=adj_stagger_max,json=adjStaggerMax,proto3" json:"adj_stagger_max,omitempty"`
}

func (x *IsisShProto) Reset() {
	*x = IsisShProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShProto) ProtoMessage() {}

func (x *IsisShProto) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShProto.ProtoReflect.Descriptor instead.
func (*IsisShProto) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShProto) GetNsapSystemId() string {
	if x != nil {
		return x.NsapSystemId
	}
	return ""
}

func (x *IsisShProto) GetValidNsapSystemId() bool {
	if x != nil {
		return x.ValidNsapSystemId
	}
	return false
}

func (x *IsisShProto) GetInstanceId() uint32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *IsisShProto) GetRunningLevels() string {
	if x != nil {
		return x.RunningLevels
	}
	return ""
}

func (x *IsisShProto) GetManualAreaAddresses() []*OsiAreaAddressType {
	if x != nil {
		return x.ManualAreaAddresses
	}
	return nil
}

func (x *IsisShProto) GetActiveAreaAddresses() []*OsiAreaAddressType {
	if x != nil {
		return x.ActiveAreaAddresses
	}
	return nil
}

func (x *IsisShProto) GetConfiguredNsfFlavor() string {
	if x != nil {
		return x.ConfiguredNsfFlavor
	}
	return ""
}

func (x *IsisShProto) GetLastRestartNsfFlavor() string {
	if x != nil {
		return x.LastRestartNsfFlavor
	}
	return ""
}

func (x *IsisShProto) GetLastRestartStatus() string {
	if x != nil {
		return x.LastRestartStatus
	}
	return ""
}

func (x *IsisShProto) GetRemainingTimeForNextNsfRestart() uint32 {
	if x != nil {
		return x.RemainingTimeForNextNsfRestart
	}
	return 0
}

func (x *IsisShProto) GetPerTopoData() []*IsisShTopo {
	if x != nil {
		return x.PerTopoData
	}
	return nil
}

func (x *IsisShProto) GetAdjFormCount() uint32 {
	if x != nil {
		return x.AdjFormCount
	}
	return 0
}

func (x *IsisShProto) GetAdjFullCount() uint32 {
	if x != nil {
		return x.AdjFullCount
	}
	return 0
}

func (x *IsisShProto) GetAdjStaggerEnabled() bool {
	if x != nil {
		return x.AdjStaggerEnabled
	}
	return false
}

func (x *IsisShProto) GetAdjStaggerInit() uint32 {
	if x != nil {
		return x.AdjStaggerInit
	}
	return 0
}

func (x *IsisShProto) GetAdjStaggerMax() uint32 {
	if x != nil {
		return x.AdjStaggerMax
	}
	return 0
}

type IsisStringType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisStringType) Reset() {
	*x = IsisStringType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisStringType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisStringType) ProtoMessage() {}

func (x *IsisStringType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisStringType.ProtoReflect.Descriptor instead.
func (*IsisStringType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{2}
}

func (x *IsisStringType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *IsisTopoIdType) Reset() {
	*x = IsisTopoIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTopoIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTopoIdType) ProtoMessage() {}

func (x *IsisTopoIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTopoIdType.ProtoReflect.Descriptor instead.
func (*IsisTopoIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{3}
}

func (x *IsisTopoIdType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisTopoIdType) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisTopoIdType) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *IsisTopoIdType) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

type OsiAreaAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OsiAreaAddressType) Reset() {
	*x = OsiAreaAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsiAreaAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsiAreaAddressType) ProtoMessage() {}

func (x *OsiAreaAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsiAreaAddressType.ProtoReflect.Descriptor instead.
func (*OsiAreaAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{4}
}

func (x *OsiAreaAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Redistributed protocol information
type IsisShRedistEntryProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// IS-IS instance identifier
	IsisInstanceId *IsisStringType `protobuf:"bytes,2,opt,name=isis_instance_id,json=isisInstanceId,proto3" json:"isis_instance_id,omitempty"`
	// OSPF process identifier
	OspfProcessId *IsisStringType `protobuf:"bytes,3,opt,name=ospf_process_id,json=ospfProcessId,proto3" json:"ospf_process_id,omitempty"`
	// OSPFv3 process identifier
	OspFv3ProcessId *IsisStringType `protobuf:"bytes,4,opt,name=osp_fv3_process_id,json=ospFv3ProcessId,proto3" json:"osp_fv3_process_id,omitempty"`
	// BGP Autonomous System number
	BgpAsNumber *IsisStringType `protobuf:"bytes,5,opt,name=bgp_as_number,json=bgpAsNumber,proto3" json:"bgp_as_number,omitempty"`
	// EIGRP Autonomous System number
	EigrpAsNumber   *IsisStringType `protobuf:"bytes,6,opt,name=eigrp_as_number,json=eigrpAsNumber,proto3" json:"eigrp_as_number,omitempty"`
	ApplicationName *IsisStringType `protobuf:"bytes,7,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
}

func (x *IsisShRedistEntryProto) Reset() {
	*x = IsisShRedistEntryProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRedistEntryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRedistEntryProto) ProtoMessage() {}

func (x *IsisShRedistEntryProto) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRedistEntryProto.ProtoReflect.Descriptor instead.
func (*IsisShRedistEntryProto) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{5}
}

func (x *IsisShRedistEntryProto) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IsisShRedistEntryProto) GetIsisInstanceId() *IsisStringType {
	if x != nil {
		return x.IsisInstanceId
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetOspfProcessId() *IsisStringType {
	if x != nil {
		return x.OspfProcessId
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetOspFv3ProcessId() *IsisStringType {
	if x != nil {
		return x.OspFv3ProcessId
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetBgpAsNumber() *IsisStringType {
	if x != nil {
		return x.BgpAsNumber
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetEigrpAsNumber() *IsisStringType {
	if x != nil {
		return x.EigrpAsNumber
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetApplicationName() *IsisStringType {
	if x != nil {
		return x.ApplicationName
	}
	return nil
}

// Redistributed protocol entry
type IsisShRedistEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next entry in list
	IsisShRedistEntry []*IsisShRedistEntryItem `protobuf:"bytes,1,rep,name=isis_sh_redist_entry,json=isisShRedistEntry,proto3" json:"isis_sh_redist_entry,omitempty"`
}

func (x *IsisShRedistEntry) Reset() {
	*x = IsisShRedistEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRedistEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRedistEntry) ProtoMessage() {}

func (x *IsisShRedistEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRedistEntry.ProtoReflect.Descriptor instead.
func (*IsisShRedistEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{6}
}

func (x *IsisShRedistEntry) GetIsisShRedistEntry() []*IsisShRedistEntryItem {
	if x != nil {
		return x.IsisShRedistEntry
	}
	return nil
}

type IsisShRedistEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relevant details of the redistributed protocol
	ProtocolDetails *IsisShRedistEntryProto `protobuf:"bytes,1,opt,name=protocol_details,json=protocolDetails,proto3" json:"protocol_details,omitempty"`
}

func (x *IsisShRedistEntryItem) Reset() {
	*x = IsisShRedistEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRedistEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRedistEntryItem) ProtoMessage() {}

func (x *IsisShRedistEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRedistEntryItem.ProtoReflect.Descriptor instead.
func (*IsisShRedistEntryItem) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{7}
}

func (x *IsisShRedistEntryItem) GetProtocolDetails() *IsisShRedistEntryProto {
	if x != nil {
		return x.ProtocolDetails
	}
	return nil
}

// Per-topology, per-area IS-IS protocol data
type IsisShTopoArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The level this data refers to
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// Does this topology use the default link topology
	UsesDefaultLinkTopoFlag bool `protobuf:"varint,2,opt,name=uses_default_link_topo_flag,json=usesDefaultLinkTopoFlag,proto3" json:"uses_default_link_topo_flag,omitempty"`
	// Generate metric style
	GeneratedMetricStyle string `protobuf:"bytes,3,opt,name=generated_metric_style,json=generatedMetricStyle,proto3" json:"generated_metric_style,omitempty"`
	// Accept metric style
	AcceptedMetricStyle string `protobuf:"bytes,4,opt,name=accepted_metric_style,json=acceptedMetricStyle,proto3" json:"accepted_metric_style,omitempty"`
	// Metric
	Metric uint32 `protobuf:"varint,5,opt,name=metric,proto3" json:"metric,omitempty"`
	// ISPF state
	IspfState string `protobuf:"bytes,6,opt,name=ispf_state,json=ispfState,proto3" json:"ispf_state,omitempty"`
	// Indicates whether MPLS TE is enabled
	TeEnabled bool `protobuf:"varint,7,opt,name=te_enabled,json=teEnabled,proto3" json:"te_enabled,omitempty"`
}

func (x *IsisShTopoArea) Reset() {
	*x = IsisShTopoArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTopoArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTopoArea) ProtoMessage() {}

func (x *IsisShTopoArea) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTopoArea.ProtoReflect.Descriptor instead.
func (*IsisShTopoArea) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{8}
}

func (x *IsisShTopoArea) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShTopoArea) GetUsesDefaultLinkTopoFlag() bool {
	if x != nil {
		return x.UsesDefaultLinkTopoFlag
	}
	return false
}

func (x *IsisShTopoArea) GetGeneratedMetricStyle() string {
	if x != nil {
		return x.GeneratedMetricStyle
	}
	return ""
}

func (x *IsisShTopoArea) GetAcceptedMetricStyle() string {
	if x != nil {
		return x.AcceptedMetricStyle
	}
	return ""
}

func (x *IsisShTopoArea) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *IsisShTopoArea) GetIspfState() string {
	if x != nil {
		return x.IspfState
	}
	return ""
}

func (x *IsisShTopoArea) GetTeEnabled() bool {
	if x != nil {
		return x.TeEnabled
	}
	return false
}

// Per-topology IS-IS instance data
type IsisShTopo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topology ID
	Id *IsisTopoIdType `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of redistributed protocols
	RedistProtocolsList *IsisShRedistEntry `protobuf:"bytes,2,opt,name=redist_protocols_list,json=redistProtocolsList,proto3" json:"redist_protocols_list,omitempty"`
	// Default administrative distance
	DefaultAdminDistance uint32 `protobuf:"varint,3,opt,name=default_admin_distance,json=defaultAdminDistance,proto3" json:"default_admin_distance,omitempty"`
	// Advertise passive interface prefixes only
	AdvertisePassiveOnly bool `protobuf:"varint,4,opt,name=advertise_passive_only,json=advertisePassiveOnly,proto3" json:"advertise_passive_only,omitempty"`
	// Per-area data
	PerAreaData []*IsisShTopoArea `protobuf:"bytes,5,rep,name=per_area_data,json=perAreaData,proto3" json:"per_area_data,omitempty"`
}

func (x *IsisShTopo) Reset() {
	*x = IsisShTopo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTopo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTopo) ProtoMessage() {}

func (x *IsisShTopo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTopo.ProtoReflect.Descriptor instead.
func (*IsisShTopo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP(), []int{9}
}

func (x *IsisShTopo) GetId() *IsisTopoIdType {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IsisShTopo) GetRedistProtocolsList() *IsisShRedistEntry {
	if x != nil {
		return x.RedistProtocolsList
	}
	return nil
}

func (x *IsisShTopo) GetDefaultAdminDistance() uint32 {
	if x != nil {
		return x.DefaultAdminDistance
	}
	return 0
}

func (x *IsisShTopo) GetAdvertisePassiveOnly() bool {
	if x != nil {
		return x.AdvertisePassiveOnly
	}
	return false
}

func (x *IsisShTopo) GetPerAreaData() []*IsisShTopoArea {
	if x != nil {
		return x.PerAreaData
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDesc = []byte{
	0x0a, 0x50, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x3c, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x22, 0x39, 0x0a, 0x12, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x07, 0x0a, 0x0d,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x73, 0x61, 0x70, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x73, 0x61, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x73, 0x61,
	0x70, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x73, 0x61, 0x70, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x87, 0x01, 0x0a,
	0x15, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6f, 0x73, 0x69, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6f, 0x73, 0x69, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6e,
	0x73, 0x66, 0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x73, 0x66, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x73, 0x66, 0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4e, 0x73, 0x66, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x23, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x73, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x73,
	0x66, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x64, 0x6a, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x61, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x22, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x15, 0x6f, 0x73,
	0x69, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x06, 0x0a, 0x1a, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x78, 0x0a, 0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x69, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x76,
	0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x73, 0x70, 0x66, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x12, 0x6f, 0x73, 0x70, 0x5f, 0x66, 0x76,
	0x33, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x6f, 0x73, 0x70, 0x46, 0x76, 0x33, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x41,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0f, 0x65, 0x69, 0x67, 0x72, 0x70,
	0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x65, 0x69, 0x67, 0x72, 0x70, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x79, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x69, 0x73, 0x69,
	0x73, 0x53, 0x68, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xa1,
	0x01, 0x0a, 0x19, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x83, 0x01, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c,
	0x0a, 0x1b, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x70, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x70, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xd9, 0x03, 0x0a,
	0x0c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x12, 0x5f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x86,
	0x01, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x73, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x41, 0x72, 0x65, 0x61, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_goTypes = []interface{}{
	(*IsisShProto_KEYS)(nil),       // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_proto_KEYS
	(*IsisShProto)(nil),            // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_proto
	(*IsisStringType)(nil),         // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type
	(*IsisTopoIdType)(nil),         // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_topo_id_type
	(*OsiAreaAddressType)(nil),     // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.osi_area_address_type
	(*IsisShRedistEntryProto)(nil), // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto
	(*IsisShRedistEntry)(nil),      // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry
	(*IsisShRedistEntryItem)(nil),  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_item
	(*IsisShTopoArea)(nil),         // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo_area
	(*IsisShTopo)(nil),             // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_depIdxs = []int32{
	4,  // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_proto.manual_area_addresses:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.osi_area_address_type
	4,  // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_proto.active_area_addresses:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.osi_area_address_type
	9,  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_proto.per_topo_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo
	2,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto.isis_instance_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type
	2,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto.ospf_process_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type
	2,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto.osp_fv3_process_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type
	2,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto.bgp_as_number:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type
	2,  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto.eigrp_as_number:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type
	2,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto.application_name:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_string_type
	7,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry.isis_sh_redist_entry:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_item
	5,  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_item.protocol_details:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry_proto
	3,  // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo.id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_topo_id_type
	6,  // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo.redist_protocols_list:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_redist_entry
	8,  // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo.per_area_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.protocol.isis_sh_topo_area
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShProto_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisStringType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTopoIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsiAreaAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRedistEntryProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRedistEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRedistEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTopoArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTopo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_protocol_isis_sh_proto_proto_depIdxs = nil
}
