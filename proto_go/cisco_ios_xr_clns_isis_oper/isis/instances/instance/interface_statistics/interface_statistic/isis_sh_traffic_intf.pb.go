// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/interface_statistics/interface_statistic/isis_sh_traffic_intf.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IS-IS interface traffic data
type IsisShTrafficIntf_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *IsisShTrafficIntf_KEYS) Reset() {
	*x = IsisShTrafficIntf_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTrafficIntf_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTrafficIntf_KEYS) ProtoMessage() {}

func (x *IsisShTrafficIntf_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTrafficIntf_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShTrafficIntf_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShTrafficIntf_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShTrafficIntf_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type IsisShTrafficIntf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface to which traffic statistics apply
	TrafficInterface string `protobuf:"bytes,50,opt,name=traffic_interface,json=trafficInterface,proto3" json:"traffic_interface,omitempty"`
	// Interface media class
	InterfaceMediaType string `protobuf:"bytes,51,opt,name=interface_media_type,json=interfaceMediaType,proto3" json:"interface_media_type,omitempty"`
	// P2P interface statistics. NULL for non-P2P interfaces
	P2PStatistics *IsisTrafficIntfP2PType `protobuf:"bytes,52,opt,name=p2_p_statistics,json=p2PStatistics,proto3" json:"p2_p_statistics,omitempty"`
	// Per-area data
	PerAreaData []*IsisShTrafficIntfArea `protobuf:"bytes,53,rep,name=per_area_data,json=perAreaData,proto3" json:"per_area_data,omitempty"`
}

func (x *IsisShTrafficIntf) Reset() {
	*x = IsisShTrafficIntf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTrafficIntf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTrafficIntf) ProtoMessage() {}

func (x *IsisShTrafficIntf) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTrafficIntf.ProtoReflect.Descriptor instead.
func (*IsisShTrafficIntf) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShTrafficIntf) GetTrafficInterface() string {
	if x != nil {
		return x.TrafficInterface
	}
	return ""
}

func (x *IsisShTrafficIntf) GetInterfaceMediaType() string {
	if x != nil {
		return x.InterfaceMediaType
	}
	return ""
}

func (x *IsisShTrafficIntf) GetP2PStatistics() *IsisTrafficIntfP2PType {
	if x != nil {
		return x.P2PStatistics
	}
	return nil
}

func (x *IsisShTrafficIntf) GetPerAreaData() []*IsisShTrafficIntfArea {
	if x != nil {
		return x.PerAreaData
	}
	return nil
}

// Per-interface, per-PDU statistics
type IsisTrafficPduCountType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PDUs received
	PduReceiveCount uint32 `protobuf:"varint,1,opt,name=pdu_receive_count,json=pduReceiveCount,proto3" json:"pdu_receive_count,omitempty"`
	// PDUs sent
	PduSendCount uint32 `protobuf:"varint,2,opt,name=pdu_send_count,json=pduSendCount,proto3" json:"pdu_send_count,omitempty"`
}

func (x *IsisTrafficPduCountType) Reset() {
	*x = IsisTrafficPduCountType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTrafficPduCountType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTrafficPduCountType) ProtoMessage() {}

func (x *IsisTrafficPduCountType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTrafficPduCountType.ProtoReflect.Descriptor instead.
func (*IsisTrafficPduCountType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP(), []int{2}
}

func (x *IsisTrafficPduCountType) GetPduReceiveCount() uint32 {
	if x != nil {
		return x.PduReceiveCount
	}
	return 0
}

func (x *IsisTrafficPduCountType) GetPduSendCount() uint32 {
	if x != nil {
		return x.PduSendCount
	}
	return 0
}

// Per-interface point-to-point statistics
type IsisTrafficIntfP2PType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IIH statistics
	IihCount *IsisTrafficPduCountType `protobuf:"bytes,1,opt,name=iih_count,json=iihCount,proto3" json:"iih_count,omitempty"`
	// IIHs not sent due to memory exhaustion
	MemoryExhaustedIihCount uint32 `protobuf:"varint,2,opt,name=memory_exhausted_iih_count,json=memoryExhaustedIihCount,proto3" json:"memory_exhausted_iih_count,omitempty"`
	// LSP retransmissions
	LspRetransmitCount uint32 `protobuf:"varint,3,opt,name=lsp_retransmit_count,json=lspRetransmitCount,proto3" json:"lsp_retransmit_count,omitempty"`
}

func (x *IsisTrafficIntfP2PType) Reset() {
	*x = IsisTrafficIntfP2PType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTrafficIntfP2PType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTrafficIntfP2PType) ProtoMessage() {}

func (x *IsisTrafficIntfP2PType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTrafficIntfP2PType.ProtoReflect.Descriptor instead.
func (*IsisTrafficIntfP2PType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP(), []int{3}
}

func (x *IsisTrafficIntfP2PType) GetIihCount() *IsisTrafficPduCountType {
	if x != nil {
		return x.IihCount
	}
	return nil
}

func (x *IsisTrafficIntfP2PType) GetMemoryExhaustedIihCount() uint32 {
	if x != nil {
		return x.MemoryExhaustedIihCount
	}
	return 0
}

func (x *IsisTrafficIntfP2PType) GetLspRetransmitCount() uint32 {
	if x != nil {
		return x.LspRetransmitCount
	}
	return 0
}

// Per-interface, per-area LAN-only statistics
type IsisTrafficIntfAreaLanType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IIH statistics
	IihCount *IsisTrafficPduCountType `protobuf:"bytes,1,opt,name=iih_count,json=iihCount,proto3" json:"iih_count,omitempty"`
	// IIHs not sent due to memory exhaustion
	MemoryExhaustedIihCount uint32 `protobuf:"varint,2,opt,name=memory_exhausted_iih_count,json=memoryExhaustedIihCount,proto3" json:"memory_exhausted_iih_count,omitempty"`
	// DIS elections
	DisElectionCount uint32 `protobuf:"varint,3,opt,name=dis_election_count,json=disElectionCount,proto3" json:"dis_election_count,omitempty"`
}

func (x *IsisTrafficIntfAreaLanType) Reset() {
	*x = IsisTrafficIntfAreaLanType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTrafficIntfAreaLanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTrafficIntfAreaLanType) ProtoMessage() {}

func (x *IsisTrafficIntfAreaLanType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTrafficIntfAreaLanType.ProtoReflect.Descriptor instead.
func (*IsisTrafficIntfAreaLanType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP(), []int{4}
}

func (x *IsisTrafficIntfAreaLanType) GetIihCount() *IsisTrafficPduCountType {
	if x != nil {
		return x.IihCount
	}
	return nil
}

func (x *IsisTrafficIntfAreaLanType) GetMemoryExhaustedIihCount() uint32 {
	if x != nil {
		return x.MemoryExhaustedIihCount
	}
	return 0
}

func (x *IsisTrafficIntfAreaLanType) GetDisElectionCount() uint32 {
	if x != nil {
		return x.DisElectionCount
	}
	return 0
}

// Per-interface, per-area statistics
type IsisTrafficIntfAreaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LSP statistics
	LspCount *IsisTrafficPduCountType `protobuf:"bytes,1,opt,name=lsp_count,json=lspCount,proto3" json:"lsp_count,omitempty"`
	// Count of LSPs dropped due to minimum arrival time config
	LspDropCount uint32 `protobuf:"varint,2,opt,name=lsp_drop_count,json=lspDropCount,proto3" json:"lsp_drop_count,omitempty"`
	// CSNP statistics
	CsnpCount *IsisTrafficPduCountType `protobuf:"bytes,3,opt,name=csnp_count,json=csnpCount,proto3" json:"csnp_count,omitempty"`
	// PSNP statistics
	PsnpCount *IsisTrafficPduCountType `protobuf:"bytes,4,opt,name=psnp_count,json=psnpCount,proto3" json:"psnp_count,omitempty"`
	// Count of LSPs already received by neighbors and not flooded
	LspFloodingDupCount uint32 `protobuf:"varint,5,opt,name=lsp_flooding_dup_count,json=lspFloodingDupCount,proto3" json:"lsp_flooding_dup_count,omitempty"`
}

func (x *IsisTrafficIntfAreaType) Reset() {
	*x = IsisTrafficIntfAreaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTrafficIntfAreaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTrafficIntfAreaType) ProtoMessage() {}

func (x *IsisTrafficIntfAreaType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTrafficIntfAreaType.ProtoReflect.Descriptor instead.
func (*IsisTrafficIntfAreaType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP(), []int{5}
}

func (x *IsisTrafficIntfAreaType) GetLspCount() *IsisTrafficPduCountType {
	if x != nil {
		return x.LspCount
	}
	return nil
}

func (x *IsisTrafficIntfAreaType) GetLspDropCount() uint32 {
	if x != nil {
		return x.LspDropCount
	}
	return 0
}

func (x *IsisTrafficIntfAreaType) GetCsnpCount() *IsisTrafficPduCountType {
	if x != nil {
		return x.CsnpCount
	}
	return nil
}

func (x *IsisTrafficIntfAreaType) GetPsnpCount() *IsisTrafficPduCountType {
	if x != nil {
		return x.PsnpCount
	}
	return nil
}

func (x *IsisTrafficIntfAreaType) GetLspFloodingDupCount() uint32 {
	if x != nil {
		return x.LspFloodingDupCount
	}
	return 0
}

// Per-interface, per-area data
type IsisShTrafficIntfArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level of the area this data relates to
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// Statistics
	Statistics *IsisTrafficIntfAreaType `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// LAN interface statistics. NULL for non-LAN interfaces
	LanData *IsisTrafficIntfAreaLanType `protobuf:"bytes,3,opt,name=lan_data,json=lanData,proto3" json:"lan_data,omitempty"`
}

func (x *IsisShTrafficIntfArea) Reset() {
	*x = IsisShTrafficIntfArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTrafficIntfArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTrafficIntfArea) ProtoMessage() {}

func (x *IsisShTrafficIntfArea) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTrafficIntfArea.ProtoReflect.Descriptor instead.
func (*IsisShTrafficIntfArea) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP(), []int{6}
}

func (x *IsisShTrafficIntfArea) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShTrafficIntfArea) GetStatistics() *IsisTrafficIntfAreaType {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *IsisShTrafficIntfArea) GetLanData() *IsisTrafficIntfAreaLanType {
	if x != nil {
		return x.LanData
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDesc = []byte{
	0x0a, 0x77, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69,
	0x6e, 0x74, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5c, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x67, 0x0a, 0x19, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xb6, 0x03, 0x0a, 0x14, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x70, 0x32, 0x5f,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69,
	0x6e, 0x74, 0x66, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x32,
	0x50, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0d,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x41, 0x72, 0x65, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x1b, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x64, 0x75, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x64, 0x75, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x64, 0x75, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x64,
	0x75, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x1a, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66,
	0x5f, 0x70, 0x32, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x69, 0x69,
	0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x69, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x68,
	0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x69, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78,
	0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x69, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c,
	0x73, 0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa5, 0x02, 0x0a, 0x1f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x69, 0x69, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x69, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x69, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x49, 0x69, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x69, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x69, 0x73, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc7, 0x04, 0x0a, 0x1b, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x6c, 0x73,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x73, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x73, 0x70, 0x44,
	0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x63, 0x73, 0x6e,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x73, 0x6e, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x73, 0x6e, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x6c, 0x73, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6c, 0x73, 0x70, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe8, 0x02, 0x0a, 0x19, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x99, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_goTypes = []interface{}{
	(*IsisShTrafficIntf_KEYS)(nil),     // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf_KEYS
	(*IsisShTrafficIntf)(nil),          // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf
	(*IsisTrafficPduCountType)(nil),    // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_pdu_count_type
	(*IsisTrafficIntfP2PType)(nil),     // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_p2p_type
	(*IsisTrafficIntfAreaLanType)(nil), // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_lan_type
	(*IsisTrafficIntfAreaType)(nil),    // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_type
	(*IsisShTrafficIntfArea)(nil),      // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf_area
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_depIdxs = []int32{
	3, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf.p2_p_statistics:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_p2p_type
	6, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf.per_area_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf_area
	2, // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_p2p_type.iih_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_pdu_count_type
	2, // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_lan_type.iih_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_pdu_count_type
	2, // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_type.lsp_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_pdu_count_type
	2, // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_type.csnp_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_pdu_count_type
	2, // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_type.psnp_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_pdu_count_type
	5, // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf_area.statistics:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_type
	4, // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_sh_traffic_intf_area.lan_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interface_statistics.interface_statistic.isis_traffic_intf_area_lan_type
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTrafficIntf_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTrafficIntf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTrafficPduCountType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTrafficIntfP2PType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTrafficIntfAreaLanType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTrafficIntfAreaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTrafficIntfArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interface_statistics_interface_statistic_isis_sh_traffic_intf_proto_depIdxs = nil
}
