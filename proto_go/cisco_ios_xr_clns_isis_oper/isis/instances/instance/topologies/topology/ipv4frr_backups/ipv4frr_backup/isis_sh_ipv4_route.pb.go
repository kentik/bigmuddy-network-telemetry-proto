// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/topologies/topology/ipv4frr_backups/ipv4frr_backup/isis_sh_ipv4_route.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IS-IS IPv4 route
type IsisShIpv4Route_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	Prefix       string `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLength uint32 `protobuf:"varint,6,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *IsisShIpv4Route_KEYS) Reset() {
	*x = IsisShIpv4Route_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4Route_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4Route_KEYS) ProtoMessage() {}

func (x *IsisShIpv4Route_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4Route_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShIpv4Route_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShIpv4Route_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShIpv4Route_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisShIpv4Route_KEYS) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisShIpv4Route_KEYS) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

func (x *IsisShIpv4Route_KEYS) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IsisShIpv4Route_KEYS) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type IsisShIpv4Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of IS-IS directly connected routes to the prefix
	ConnectedStatus *IsisShRouteConnStatus `protobuf:"bytes,50,opt,name=connected_status,json=connectedStatus,proto3" json:"connected_status,omitempty"`
	// Status of other protocols' routes redistributed into IS-IS
	RedistributedStatus *IsisShRouteRedistStatus `protobuf:"bytes,51,opt,name=redistributed_status,json=redistributedStatus,proto3" json:"redistributed_status,omitempty"`
	// Status of native IS-IS routes to the prefix
	NativeStatus *IsisShIpv4RouteNativeStatus `protobuf:"bytes,52,opt,name=native_status,json=nativeStatus,proto3" json:"native_status,omitempty"`
	// Per level details of how the local system advertises the prefix
	PerLevelAdvertisingDetails []*IsisShIpv4RouteAdv `protobuf:"bytes,53,rep,name=per_level_advertising_details,json=perLevelAdvertisingDetails,proto3" json:"per_level_advertising_details,omitempty"`
}

func (x *IsisShIpv4Route) Reset() {
	*x = IsisShIpv4Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4Route) ProtoMessage() {}

func (x *IsisShIpv4Route) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4Route.ProtoReflect.Descriptor instead.
func (*IsisShIpv4Route) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShIpv4Route) GetConnectedStatus() *IsisShRouteConnStatus {
	if x != nil {
		return x.ConnectedStatus
	}
	return nil
}

func (x *IsisShIpv4Route) GetRedistributedStatus() *IsisShRouteRedistStatus {
	if x != nil {
		return x.RedistributedStatus
	}
	return nil
}

func (x *IsisShIpv4Route) GetNativeStatus() *IsisShIpv4RouteNativeStatus {
	if x != nil {
		return x.NativeStatus
	}
	return nil
}

func (x *IsisShIpv4Route) GetPerLevelAdvertisingDetails() []*IsisShIpv4RouteAdv {
	if x != nil {
		return x.PerLevelAdvertisingDetails
	}
	return nil
}

type IsisNodalSidType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SidValue  uint32 `protobuf:"varint,1,opt,name=sid_value,json=sidValue,proto3" json:"sid_value,omitempty"`
	Rflag     uint32 `protobuf:"varint,2,opt,name=rflag,proto3" json:"rflag,omitempty"`
	Nflag     uint32 `protobuf:"varint,3,opt,name=nflag,proto3" json:"nflag,omitempty"`
	Pflag     uint32 `protobuf:"varint,4,opt,name=pflag,proto3" json:"pflag,omitempty"`
	Eflag     uint32 `protobuf:"varint,5,opt,name=eflag,proto3" json:"eflag,omitempty"`
	Vflag     uint32 `protobuf:"varint,6,opt,name=vflag,proto3" json:"vflag,omitempty"`
	Lflag     uint32 `protobuf:"varint,7,opt,name=lflag,proto3" json:"lflag,omitempty"`
	Algorithm uint32 `protobuf:"varint,8,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (x *IsisNodalSidType) Reset() {
	*x = IsisNodalSidType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisNodalSidType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisNodalSidType) ProtoMessage() {}

func (x *IsisNodalSidType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisNodalSidType.ProtoReflect.Descriptor instead.
func (*IsisNodalSidType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{2}
}

func (x *IsisNodalSidType) GetSidValue() uint32 {
	if x != nil {
		return x.SidValue
	}
	return 0
}

func (x *IsisNodalSidType) GetRflag() uint32 {
	if x != nil {
		return x.Rflag
	}
	return 0
}

func (x *IsisNodalSidType) GetNflag() uint32 {
	if x != nil {
		return x.Nflag
	}
	return 0
}

func (x *IsisNodalSidType) GetPflag() uint32 {
	if x != nil {
		return x.Pflag
	}
	return 0
}

func (x *IsisNodalSidType) GetEflag() uint32 {
	if x != nil {
		return x.Eflag
	}
	return 0
}

func (x *IsisNodalSidType) GetVflag() uint32 {
	if x != nil {
		return x.Vflag
	}
	return 0
}

func (x *IsisNodalSidType) GetLflag() uint32 {
	if x != nil {
		return x.Lflag
	}
	return 0
}

func (x *IsisNodalSidType) GetAlgorithm() uint32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

type IsisStringType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisStringType) Reset() {
	*x = IsisStringType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisStringType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisStringType) ProtoMessage() {}

func (x *IsisStringType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisStringType.ProtoReflect.Descriptor instead.
func (*IsisStringType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{3}
}

func (x *IsisStringType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPv4 address and prefix length
type IsisIpv4PrefixType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *IsisIpv4PrefixType) Reset() {
	*x = IsisIpv4PrefixType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv4PrefixType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv4PrefixType) ProtoMessage() {}

func (x *IsisIpv4PrefixType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv4PrefixType.ProtoReflect.Descriptor instead.
func (*IsisIpv4PrefixType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{4}
}

func (x *IsisIpv4PrefixType) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IsisIpv4PrefixType) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type IsisSnpaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisSnpaType) Reset() {
	*x = IsisSnpaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisSnpaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisSnpaType) ProtoMessage() {}

func (x *IsisSnpaType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisSnpaType.ProtoReflect.Descriptor instead.
func (*IsisSnpaType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{5}
}

func (x *IsisSnpaType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IsisShInterfaceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisShInterfaceName) Reset() {
	*x = IsisShInterfaceName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShInterfaceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShInterfaceName) ProtoMessage() {}

func (x *IsisShInterfaceName) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShInterfaceName.ProtoReflect.Descriptor instead.
func (*IsisShInterfaceName) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{6}
}

func (x *IsisShInterfaceName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// OSPF Repair Element
type IsisShRepEl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepairElementNodeID
	RepairElementNodeId string `protobuf:"bytes,1,opt,name=repair_element_node_id,json=repairElementNodeId,proto3" json:"repair_element_node_id,omitempty"`
	// RepairIPv4Addr
	RepairIpv4Addr string `protobuf:"bytes,2,opt,name=repair_ipv4_addr,json=repairIpv4Addr,proto3" json:"repair_ipv4_addr,omitempty"`
	// RepairIPv6Addr
	RepairIpv6Addr string `protobuf:"bytes,3,opt,name=repair_ipv6_addr,json=repairIpv6Addr,proto3" json:"repair_ipv6_addr,omitempty"`
	// Repair Label
	RepairLabel uint32 `protobuf:"varint,4,opt,name=repair_label,json=repairLabel,proto3" json:"repair_label,omitempty"`
	// Repair Element Type
	RepairElementType uint32 `protobuf:"varint,5,opt,name=repair_element_type,json=repairElementType,proto3" json:"repair_element_type,omitempty"`
}

func (x *IsisShRepEl) Reset() {
	*x = IsisShRepEl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRepEl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRepEl) ProtoMessage() {}

func (x *IsisShRepEl) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRepEl.ProtoReflect.Descriptor instead.
func (*IsisShRepEl) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{7}
}

func (x *IsisShRepEl) GetRepairElementNodeId() string {
	if x != nil {
		return x.RepairElementNodeId
	}
	return ""
}

func (x *IsisShRepEl) GetRepairIpv4Addr() string {
	if x != nil {
		return x.RepairIpv4Addr
	}
	return ""
}

func (x *IsisShRepEl) GetRepairIpv6Addr() string {
	if x != nil {
		return x.RepairIpv6Addr
	}
	return ""
}

func (x *IsisShRepEl) GetRepairLabel() uint32 {
	if x != nil {
		return x.RepairLabel
	}
	return 0
}

func (x *IsisShRepEl) GetRepairElementType() uint32 {
	if x != nil {
		return x.RepairElementType
	}
	return 0
}

// FRR backup path
type IsisShIpv4FrrBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface,proto3" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Tunnel Interface to send the packet out of
	TunnelEgressInterface string `protobuf:"bytes,4,opt,name=tunnel_egress_interface,json=tunnelEgressInterface,proto3" json:"tunnel_egress_interface,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,5,opt,name=neighbor_snpa,json=neighborSnpa,proto3" json:"neighbor_snpa,omitempty"`
	// Remote LFA PQ Node's ID
	RemoteLfaSystemId string `protobuf:"bytes,6,opt,name=remote_lfa_system_id,json=remoteLfaSystemId,proto3" json:"remote_lfa_system_id,omitempty"`
	// Remote LFA Router ID
	RemoteLfaRouterId string `protobuf:"bytes,7,opt,name=remote_lfa_router_id,json=remoteLfaRouterId,proto3" json:"remote_lfa_router_id,omitempty"`
	// Remote LFA PQ Node's ID
	RemoteLfaSystemPid string `protobuf:"bytes,8,opt,name=remote_lfa_system_pid,json=remoteLfaSystemPid,proto3" json:"remote_lfa_system_pid,omitempty"`
	// Remote LFA Router ID
	RemoteLfaRouterPid string `protobuf:"bytes,9,opt,name=remote_lfa_router_pid,json=remoteLfaRouterPid,proto3" json:"remote_lfa_router_pid,omitempty"`
	// Distance to the network via this backup path
	TotalBackupDistance uint32 `protobuf:"varint,10,opt,name=total_backup_distance,json=totalBackupDistance,proto3" json:"total_backup_distance,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,11,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue,proto3" json:"segment_routing_sid_value,omitempty"`
	// Number of SIDs in TI-LFA/rLFA
	NumSid uint32 `protobuf:"varint,12,opt,name=num_sid,json=numSid,proto3" json:"num_sid,omitempty"`
	// Segment routing sid values for TI-LFA/rLFA
	SegmentRoutingSidValues []uint32 `protobuf:"varint,13,rep,packed,name=segment_routing_sid_values,json=segmentRoutingSidValues,proto3" json:"segment_routing_sid_values,omitempty"`
	// Backup Repair List Size
	BackupRepairListSize uint32 `protobuf:"varint,14,opt,name=backup_repair_list_size,json=backupRepairListSize,proto3" json:"backup_repair_list_size,omitempty"`
	// Ti LFA computation which provided backup path
	TilfaComputation string `protobuf:"bytes,15,opt,name=tilfa_computation,json=tilfaComputation,proto3" json:"tilfa_computation,omitempty"`
	// Backup Repair List
	BackupRepairList []*IsisShRepEl `protobuf:"bytes,16,rep,name=backup_repair_list,json=backupRepairList,proto3" json:"backup_repair_list,omitempty"`
	// Is the backup path via downstream node?
	IsDownstream bool `protobuf:"varint,17,opt,name=is_downstream,json=isDownstream,proto3" json:"is_downstream,omitempty"`
	// Is the backup path line card disjoint with primary?
	IsLcDisjoint bool `protobuf:"varint,18,opt,name=is_lc_disjoint,json=isLcDisjoint,proto3" json:"is_lc_disjoint,omitempty"`
	// Is the backup path node protecting?
	IsNodeProtecting bool `protobuf:"varint,19,opt,name=is_node_protecting,json=isNodeProtecting,proto3" json:"is_node_protecting,omitempty"`
	// Is the backup path an ECMP to the network?
	IsPrimaryPath bool `protobuf:"varint,20,opt,name=is_primary_path,json=isPrimaryPath,proto3" json:"is_primary_path,omitempty"`
	// Is the backup path SRLG disjoint with primary?
	IsSrlgDisjoint bool `protobuf:"varint,21,opt,name=is_srlg_disjoint,json=isSrlgDisjoint,proto3" json:"is_srlg_disjoint,omitempty"`
	// Is the backup path via a Remote LFA?
	IsRemoteLfa bool `protobuf:"varint,22,opt,name=is_remote_lfa,json=isRemoteLfa,proto3" json:"is_remote_lfa,omitempty"`
	// Is the backup path via a TI-LFA?
	IsEpcfrrLfa bool `protobuf:"varint,23,opt,name=is_epcfrr_lfa,json=isEpcfrrLfa,proto3" json:"is_epcfrr_lfa,omitempty"`
	// Is SR TE tunnel requested
	IsTunnelRequested bool `protobuf:"varint,24,opt,name=is_tunnel_requested,json=isTunnelRequested,proto3" json:"is_tunnel_requested,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,25,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *IsisShIpv4FrrBackup) Reset() {
	*x = IsisShIpv4FrrBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4FrrBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4FrrBackup) ProtoMessage() {}

func (x *IsisShIpv4FrrBackup) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4FrrBackup.ProtoReflect.Descriptor instead.
func (*IsisShIpv4FrrBackup) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{8}
}

func (x *IsisShIpv4FrrBackup) GetNeighborId() string {
	if x != nil {
		return x.NeighborId
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetEgressInterface() string {
	if x != nil {
		return x.EgressInterface
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetTunnelEgressInterface() string {
	if x != nil {
		return x.TunnelEgressInterface
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetNeighborSnpa() *IsisSnpaType {
	if x != nil {
		return x.NeighborSnpa
	}
	return nil
}

func (x *IsisShIpv4FrrBackup) GetRemoteLfaSystemId() string {
	if x != nil {
		return x.RemoteLfaSystemId
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetRemoteLfaRouterId() string {
	if x != nil {
		return x.RemoteLfaRouterId
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetRemoteLfaSystemPid() string {
	if x != nil {
		return x.RemoteLfaSystemPid
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetRemoteLfaRouterPid() string {
	if x != nil {
		return x.RemoteLfaRouterPid
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetTotalBackupDistance() uint32 {
	if x != nil {
		return x.TotalBackupDistance
	}
	return 0
}

func (x *IsisShIpv4FrrBackup) GetSegmentRoutingSidValue() uint32 {
	if x != nil {
		return x.SegmentRoutingSidValue
	}
	return 0
}

func (x *IsisShIpv4FrrBackup) GetNumSid() uint32 {
	if x != nil {
		return x.NumSid
	}
	return 0
}

func (x *IsisShIpv4FrrBackup) GetSegmentRoutingSidValues() []uint32 {
	if x != nil {
		return x.SegmentRoutingSidValues
	}
	return nil
}

func (x *IsisShIpv4FrrBackup) GetBackupRepairListSize() uint32 {
	if x != nil {
		return x.BackupRepairListSize
	}
	return 0
}

func (x *IsisShIpv4FrrBackup) GetTilfaComputation() string {
	if x != nil {
		return x.TilfaComputation
	}
	return ""
}

func (x *IsisShIpv4FrrBackup) GetBackupRepairList() []*IsisShRepEl {
	if x != nil {
		return x.BackupRepairList
	}
	return nil
}

func (x *IsisShIpv4FrrBackup) GetIsDownstream() bool {
	if x != nil {
		return x.IsDownstream
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetIsLcDisjoint() bool {
	if x != nil {
		return x.IsLcDisjoint
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetIsNodeProtecting() bool {
	if x != nil {
		return x.IsNodeProtecting
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetIsPrimaryPath() bool {
	if x != nil {
		return x.IsPrimaryPath
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetIsSrlgDisjoint() bool {
	if x != nil {
		return x.IsSrlgDisjoint
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetIsRemoteLfa() bool {
	if x != nil {
		return x.IsRemoteLfa
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetIsEpcfrrLfa() bool {
	if x != nil {
		return x.IsEpcfrrLfa
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetIsTunnelRequested() bool {
	if x != nil {
		return x.IsTunnelRequested
	}
	return false
}

func (x *IsisShIpv4FrrBackup) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// IPv4 path to a destination
type IsisShIpv4Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface,proto3" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,4,opt,name=neighbor_snpa,json=neighborSnpa,proto3" json:"neighbor_snpa,omitempty"`
	// Tag associated with the path
	Tag uint32 `protobuf:"varint,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// FRR backup for this path
	FrrBackup *IsisShIpv4FrrBackup `protobuf:"bytes,6,opt,name=frr_backup,json=frrBackup,proto3" json:"frr_backup,omitempty"`
	// Uloop Explicit List
	UloopExplicitList []*IsisShRepEl `protobuf:"bytes,7,rep,name=uloop_explicit_list,json=uloopExplicitList,proto3" json:"uloop_explicit_list,omitempty"`
	// Explicit path tunnel interface
	TunnelInterface string `protobuf:"bytes,8,opt,name=tunnel_interface,json=tunnelInterface,proto3" json:"tunnel_interface,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,9,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue,proto3" json:"segment_routing_sid_value,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *IsisShIpv4Path) Reset() {
	*x = IsisShIpv4Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4Path) ProtoMessage() {}

func (x *IsisShIpv4Path) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4Path.ProtoReflect.Descriptor instead.
func (*IsisShIpv4Path) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{9}
}

func (x *IsisShIpv4Path) GetNeighborId() string {
	if x != nil {
		return x.NeighborId
	}
	return ""
}

func (x *IsisShIpv4Path) GetEgressInterface() string {
	if x != nil {
		return x.EgressInterface
	}
	return ""
}

func (x *IsisShIpv4Path) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *IsisShIpv4Path) GetNeighborSnpa() *IsisSnpaType {
	if x != nil {
		return x.NeighborSnpa
	}
	return nil
}

func (x *IsisShIpv4Path) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *IsisShIpv4Path) GetFrrBackup() *IsisShIpv4FrrBackup {
	if x != nil {
		return x.FrrBackup
	}
	return nil
}

func (x *IsisShIpv4Path) GetUloopExplicitList() []*IsisShRepEl {
	if x != nil {
		return x.UloopExplicitList
	}
	return nil
}

func (x *IsisShIpv4Path) GetTunnelInterface() string {
	if x != nil {
		return x.TunnelInterface
	}
	return ""
}

func (x *IsisShIpv4Path) GetSegmentRoutingSidValue() uint32 {
	if x != nil {
		return x.SegmentRoutingSidValue
	}
	return 0
}

func (x *IsisShIpv4Path) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// IPv4 path to a destination
type IsisShIpv4UcmpPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface,proto3" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,4,opt,name=neighbor_snpa,json=neighborSnpa,proto3" json:"neighbor_snpa,omitempty"`
	// Tag associated with the path
	Tag uint32 `protobuf:"varint,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// Distance to the network via this UCMP next hop
	TotalUcmpDistance uint32 `protobuf:"varint,6,opt,name=total_ucmp_distance,json=totalUcmpDistance,proto3" json:"total_ucmp_distance,omitempty"`
	// FRR backup for this path
	FrrBackup *IsisShIpv4FrrBackup `protobuf:"bytes,7,opt,name=frr_backup,json=frrBackup,proto3" json:"frr_backup,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,8,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue,proto3" json:"segment_routing_sid_value,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,9,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *IsisShIpv4UcmpPath) Reset() {
	*x = IsisShIpv4UcmpPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4UcmpPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4UcmpPath) ProtoMessage() {}

func (x *IsisShIpv4UcmpPath) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4UcmpPath.ProtoReflect.Descriptor instead.
func (*IsisShIpv4UcmpPath) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{10}
}

func (x *IsisShIpv4UcmpPath) GetNeighborId() string {
	if x != nil {
		return x.NeighborId
	}
	return ""
}

func (x *IsisShIpv4UcmpPath) GetEgressInterface() string {
	if x != nil {
		return x.EgressInterface
	}
	return ""
}

func (x *IsisShIpv4UcmpPath) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *IsisShIpv4UcmpPath) GetNeighborSnpa() *IsisSnpaType {
	if x != nil {
		return x.NeighborSnpa
	}
	return nil
}

func (x *IsisShIpv4UcmpPath) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *IsisShIpv4UcmpPath) GetTotalUcmpDistance() uint32 {
	if x != nil {
		return x.TotalUcmpDistance
	}
	return 0
}

func (x *IsisShIpv4UcmpPath) GetFrrBackup() *IsisShIpv4FrrBackup {
	if x != nil {
		return x.FrrBackup
	}
	return nil
}

func (x *IsisShIpv4UcmpPath) GetSegmentRoutingSidValue() uint32 {
	if x != nil {
		return x.SegmentRoutingSidValue
	}
	return 0
}

func (x *IsisShIpv4UcmpPath) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type IsisShRedistEntryProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol        string          `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	IsisInstanceId  *IsisStringType `protobuf:"bytes,2,opt,name=isis_instance_id,json=isisInstanceId,proto3" json:"isis_instance_id,omitempty"`
	OspfProcessId   *IsisStringType `protobuf:"bytes,3,opt,name=ospf_process_id,json=ospfProcessId,proto3" json:"ospf_process_id,omitempty"`
	OspFv3ProcessId *IsisStringType `protobuf:"bytes,4,opt,name=osp_fv3_process_id,json=ospFv3ProcessId,proto3" json:"osp_fv3_process_id,omitempty"`
	BgpAsNumber     *IsisStringType `protobuf:"bytes,5,opt,name=bgp_as_number,json=bgpAsNumber,proto3" json:"bgp_as_number,omitempty"`
	EigrpAsNumber   *IsisStringType `protobuf:"bytes,6,opt,name=eigrp_as_number,json=eigrpAsNumber,proto3" json:"eigrp_as_number,omitempty"`
	ApplicationName *IsisStringType `protobuf:"bytes,7,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
}

func (x *IsisShRedistEntryProto) Reset() {
	*x = IsisShRedistEntryProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRedistEntryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRedistEntryProto) ProtoMessage() {}

func (x *IsisShRedistEntryProto) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRedistEntryProto.ProtoReflect.Descriptor instead.
func (*IsisShRedistEntryProto) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{11}
}

func (x *IsisShRedistEntryProto) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IsisShRedistEntryProto) GetIsisInstanceId() *IsisStringType {
	if x != nil {
		return x.IsisInstanceId
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetOspfProcessId() *IsisStringType {
	if x != nil {
		return x.OspfProcessId
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetOspFv3ProcessId() *IsisStringType {
	if x != nil {
		return x.OspFv3ProcessId
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetBgpAsNumber() *IsisStringType {
	if x != nil {
		return x.BgpAsNumber
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetEigrpAsNumber() *IsisStringType {
	if x != nil {
		return x.EigrpAsNumber
	}
	return nil
}

func (x *IsisShRedistEntryProto) GetApplicationName() *IsisStringType {
	if x != nil {
		return x.ApplicationName
	}
	return nil
}

// Details of an IS-IS directly connected prefix
type IsisShRouteConnDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interfaces
	Interfaces []*IsisShInterfaceName `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *IsisShRouteConnDetails) Reset() {
	*x = IsisShRouteConnDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRouteConnDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRouteConnDetails) ProtoMessage() {}

func (x *IsisShRouteConnDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRouteConnDetails.ProtoReflect.Descriptor instead.
func (*IsisShRouteConnDetails) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{12}
}

func (x *IsisShRouteConnDetails) GetInterfaces() []*IsisShInterfaceName {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// Status of an IS-IS directly connected prefix
type IsisShRouteConnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	// Details of the directly connected prefix
	ConnectedDetails *IsisShRouteConnDetails `protobuf:"bytes,2,opt,name=connected_details,json=connectedDetails,proto3" json:"connected_details,omitempty"`
}

func (x *IsisShRouteConnStatus) Reset() {
	*x = IsisShRouteConnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRouteConnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRouteConnStatus) ProtoMessage() {}

func (x *IsisShRouteConnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRouteConnStatus.ProtoReflect.Descriptor instead.
func (*IsisShRouteConnStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{13}
}

func (x *IsisShRouteConnStatus) GetIsValid() string {
	if x != nil {
		return x.IsValid
	}
	return ""
}

func (x *IsisShRouteConnStatus) GetConnectedDetails() *IsisShRouteConnDetails {
	if x != nil {
		return x.ConnectedDetails
	}
	return nil
}

type IsisShRouteRedistLevelDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level string                  `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Owner *IsisShRedistEntryProto `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *IsisShRouteRedistLevelDetails) Reset() {
	*x = IsisShRouteRedistLevelDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRouteRedistLevelDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRouteRedistLevelDetails) ProtoMessage() {}

func (x *IsisShRouteRedistLevelDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRouteRedistLevelDetails.ProtoReflect.Descriptor instead.
func (*IsisShRouteRedistLevelDetails) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{14}
}

func (x *IsisShRouteRedistLevelDetails) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShRouteRedistLevelDetails) GetOwner() *IsisShRedistEntryProto {
	if x != nil {
		return x.Owner
	}
	return nil
}

type IsisShRouteRedistDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*IsisShRouteRedistLevelDetails `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisShRouteRedistDetails) Reset() {
	*x = IsisShRouteRedistDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRouteRedistDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRouteRedistDetails) ProtoMessage() {}

func (x *IsisShRouteRedistDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRouteRedistDetails.ProtoReflect.Descriptor instead.
func (*IsisShRouteRedistDetails) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{15}
}

func (x *IsisShRouteRedistDetails) GetValue() []*IsisShRouteRedistLevelDetails {
	if x != nil {
		return x.Value
	}
	return nil
}

// Status of redistributed routes to a prefix
type IsisShRouteRedistStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	// Per level details of the redistributed route
	RedistributionDetails *IsisShRouteRedistDetails `protobuf:"bytes,2,opt,name=redistribution_details,json=redistributionDetails,proto3" json:"redistribution_details,omitempty"`
}

func (x *IsisShRouteRedistStatus) Reset() {
	*x = IsisShRouteRedistStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRouteRedistStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRouteRedistStatus) ProtoMessage() {}

func (x *IsisShRouteRedistStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRouteRedistStatus.ProtoReflect.Descriptor instead.
func (*IsisShRouteRedistStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{16}
}

func (x *IsisShRouteRedistStatus) GetIsValid() string {
	if x != nil {
		return x.IsValid
	}
	return ""
}

func (x *IsisShRouteRedistStatus) GetRedistributionDetails() *IsisShRouteRedistDetails {
	if x != nil {
		return x.RedistributionDetails
	}
	return nil
}

// Source of a native route
type IsisShIpv4RouteNativeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the LSP advertising the prefix
	SourceLspId string `protobuf:"bytes,1,opt,name=source_lsp_id,json=sourceLspId,proto3" json:"source_lsp_id,omitempty"`
	// Source address of the IS advertising the prefix
	SourceAddress string `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	// Tags associated with the prefix item
	Tags []uint32 `protobuf:"varint,3,rep,packed,name=tags,proto3" json:"tags,omitempty"`
	// Nodal SIDs with the prefix item
	NodalSids []*IsisNodalSidType `protobuf:"bytes,4,rep,name=nodal_sids,json=nodalSids,proto3" json:"nodal_sids,omitempty"`
}

func (x *IsisShIpv4RouteNativeSource) Reset() {
	*x = IsisShIpv4RouteNativeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4RouteNativeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4RouteNativeSource) ProtoMessage() {}

func (x *IsisShIpv4RouteNativeSource) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4RouteNativeSource.ProtoReflect.Descriptor instead.
func (*IsisShIpv4RouteNativeSource) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{17}
}

func (x *IsisShIpv4RouteNativeSource) GetSourceLspId() string {
	if x != nil {
		return x.SourceLspId
	}
	return ""
}

func (x *IsisShIpv4RouteNativeSource) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *IsisShIpv4RouteNativeSource) GetTags() []uint32 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *IsisShIpv4RouteNativeSource) GetNodalSids() []*IsisNodalSidType {
	if x != nil {
		return x.NodalSids
	}
	return nil
}

// Paths and sources for a native route at a particular preference
type IsisShIpv4RouteNativePreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Origin of route
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// Distance to network
	Metric uint32 `protobuf:"varint,2,opt,name=metric,proto3" json:"metric,omitempty"`
	// Multicast-intact distance to network
	MulticastMetric uint32 `protobuf:"varint,3,opt,name=multicast_metric,json=multicastMetric,proto3" json:"multicast_metric,omitempty"`
	// Is the metric an external metric?
	IsExternalMetric bool `protobuf:"varint,4,opt,name=is_external_metric,json=isExternalMetric,proto3" json:"is_external_metric,omitempty"`
	// Administrative Distance
	AdministrativeDistance uint32 `protobuf:"varint,5,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"`
	// First hops toward the prefix
	Paths []*IsisShIpv4Path `protobuf:"bytes,6,rep,name=paths,proto3" json:"paths,omitempty"`
	// UCMP first hops toward the prefix
	UcmpNextHops []*IsisShIpv4UcmpPath `protobuf:"bytes,7,rep,name=ucmp_next_hops,json=ucmpNextHops,proto3" json:"ucmp_next_hops,omitempty"`
	// Multicast intact first hops toward the prefix
	MulticastPaths []*IsisShIpv4Path `protobuf:"bytes,8,rep,name=multicast_paths,json=multicastPaths,proto3" json:"multicast_paths,omitempty"`
	// SR-TE native first hops toward the prefix
	SRtePaths []*IsisShIpv4Path `protobuf:"bytes,9,rep,name=s_rte_paths,json=sRtePaths,proto3" json:"s_rte_paths,omitempty"`
	// SR microloop avoidance paths
	ExplicitPaths []*IsisShIpv4Path `protobuf:"bytes,10,rep,name=explicit_paths,json=explicitPaths,proto3" json:"explicit_paths,omitempty"`
	// Sources advertising the prefix
	Sources []*IsisShIpv4RouteNativeSource `protobuf:"bytes,11,rep,name=sources,proto3" json:"sources,omitempty"`
	// Multicast-intact sources advertising the prefix
	MulticastSources []*IsisShIpv4RouteNativeSource `protobuf:"bytes,12,rep,name=multicast_sources,json=multicastSources,proto3" json:"multicast_sources,omitempty"`
}

func (x *IsisShIpv4RouteNativePreference) Reset() {
	*x = IsisShIpv4RouteNativePreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4RouteNativePreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4RouteNativePreference) ProtoMessage() {}

func (x *IsisShIpv4RouteNativePreference) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4RouteNativePreference.ProtoReflect.Descriptor instead.
func (*IsisShIpv4RouteNativePreference) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{18}
}

func (x *IsisShIpv4RouteNativePreference) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *IsisShIpv4RouteNativePreference) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *IsisShIpv4RouteNativePreference) GetMulticastMetric() uint32 {
	if x != nil {
		return x.MulticastMetric
	}
	return 0
}

func (x *IsisShIpv4RouteNativePreference) GetIsExternalMetric() bool {
	if x != nil {
		return x.IsExternalMetric
	}
	return false
}

func (x *IsisShIpv4RouteNativePreference) GetAdministrativeDistance() uint32 {
	if x != nil {
		return x.AdministrativeDistance
	}
	return 0
}

func (x *IsisShIpv4RouteNativePreference) GetPaths() []*IsisShIpv4Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *IsisShIpv4RouteNativePreference) GetUcmpNextHops() []*IsisShIpv4UcmpPath {
	if x != nil {
		return x.UcmpNextHops
	}
	return nil
}

func (x *IsisShIpv4RouteNativePreference) GetMulticastPaths() []*IsisShIpv4Path {
	if x != nil {
		return x.MulticastPaths
	}
	return nil
}

func (x *IsisShIpv4RouteNativePreference) GetSRtePaths() []*IsisShIpv4Path {
	if x != nil {
		return x.SRtePaths
	}
	return nil
}

func (x *IsisShIpv4RouteNativePreference) GetExplicitPaths() []*IsisShIpv4Path {
	if x != nil {
		return x.ExplicitPaths
	}
	return nil
}

func (x *IsisShIpv4RouteNativePreference) GetSources() []*IsisShIpv4RouteNativeSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *IsisShIpv4RouteNativePreference) GetMulticastSources() []*IsisShIpv4RouteNativeSource {
	if x != nil {
		return x.MulticastSources
	}
	return nil
}

// Details of a native IS-IS route to a prefix
type IsisShIpv4RouteNativeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary paths to prefix
	Primary *IsisShIpv4RouteNativePreference `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	// Backup paths to prefix
	Backups []*IsisShIpv4RouteNativePreference `protobuf:"bytes,2,rep,name=backups,proto3" json:"backups,omitempty"`
	// Relative importance of the prefix
	Priority string `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *IsisShIpv4RouteNativeDetails) Reset() {
	*x = IsisShIpv4RouteNativeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4RouteNativeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4RouteNativeDetails) ProtoMessage() {}

func (x *IsisShIpv4RouteNativeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4RouteNativeDetails.ProtoReflect.Descriptor instead.
func (*IsisShIpv4RouteNativeDetails) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{19}
}

func (x *IsisShIpv4RouteNativeDetails) GetPrimary() *IsisShIpv4RouteNativePreference {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *IsisShIpv4RouteNativeDetails) GetBackups() []*IsisShIpv4RouteNativePreference {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *IsisShIpv4RouteNativeDetails) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

// Status of a native IS-IS route to a prefix
type IsisShIpv4RouteNativeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	// Details of the native route
	NativeDetails *IsisShIpv4RouteNativeDetails `protobuf:"bytes,2,opt,name=native_details,json=nativeDetails,proto3" json:"native_details,omitempty"`
}

func (x *IsisShIpv4RouteNativeStatus) Reset() {
	*x = IsisShIpv4RouteNativeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4RouteNativeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4RouteNativeStatus) ProtoMessage() {}

func (x *IsisShIpv4RouteNativeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4RouteNativeStatus.ProtoReflect.Descriptor instead.
func (*IsisShIpv4RouteNativeStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{20}
}

func (x *IsisShIpv4RouteNativeStatus) GetIsValid() string {
	if x != nil {
		return x.IsValid
	}
	return ""
}

func (x *IsisShIpv4RouteNativeStatus) GetNativeDetails() *IsisShIpv4RouteNativeDetails {
	if x != nil {
		return x.NativeDetails
	}
	return nil
}

// Summarization status
type IsisShIpv4RouteSummarizationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	// Summarizing Prefix
	SummaryPrefix *IsisIpv4PrefixType `protobuf:"bytes,2,opt,name=summary_prefix,json=summaryPrefix,proto3" json:"summary_prefix,omitempty"`
}

func (x *IsisShIpv4RouteSummarizationStatus) Reset() {
	*x = IsisShIpv4RouteSummarizationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4RouteSummarizationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4RouteSummarizationStatus) ProtoMessage() {}

func (x *IsisShIpv4RouteSummarizationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4RouteSummarizationStatus.ProtoReflect.Descriptor instead.
func (*IsisShIpv4RouteSummarizationStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{21}
}

func (x *IsisShIpv4RouteSummarizationStatus) GetIsValid() string {
	if x != nil {
		return x.IsValid
	}
	return ""
}

func (x *IsisShIpv4RouteSummarizationStatus) GetSummaryPrefix() *IsisIpv4PrefixType {
	if x != nil {
		return x.SummaryPrefix
	}
	return nil
}

// How a prefix is advertised in a particular level
type IsisShIpv4RouteAdv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level in which the prefix is advertised
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// The origin of the advertisement
	AdvertisingOrigin string `protobuf:"bytes,2,opt,name=advertising_origin,json=advertisingOrigin,proto3" json:"advertising_origin,omitempty"`
	// Metric with which the prefix is advertised
	Metric uint32 `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	// Has the prefix been propagated from another level?
	IsPropagated bool `protobuf:"varint,4,opt,name=is_propagated,json=isPropagated,proto3" json:"is_propagated,omitempty"`
	// Is the metric an external metric?
	IsExternalMetric bool `protobuf:"varint,5,opt,name=is_external_metric,json=isExternalMetric,proto3" json:"is_external_metric,omitempty"`
	// Status of summarization for the prefix
	SummarizationStatus *IsisShIpv4RouteSummarizationStatus `protobuf:"bytes,6,opt,name=summarization_status,json=summarizationStatus,proto3" json:"summarization_status,omitempty"`
	// Is the prefix external to the IS-IS domain?
	IsExternalReachability bool `protobuf:"varint,7,opt,name=is_external_reachability,json=isExternalReachability,proto3" json:"is_external_reachability,omitempty"`
	// Is the up/down bit set?
	IsInterarea bool `protobuf:"varint,8,opt,name=is_interarea,json=isInterarea,proto3" json:"is_interarea,omitempty"`
	// Tags associated with the prefix
	Tags []uint32 `protobuf:"varint,9,rep,packed,name=tags,proto3" json:"tags,omitempty"`
	// Nodal SIDs with the prefix item
	NodalSids []*IsisNodalSidType `protobuf:"bytes,10,rep,name=nodal_sids,json=nodalSids,proto3" json:"nodal_sids,omitempty"`
}

func (x *IsisShIpv4RouteAdv) Reset() {
	*x = IsisShIpv4RouteAdv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv4RouteAdv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv4RouteAdv) ProtoMessage() {}

func (x *IsisShIpv4RouteAdv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv4RouteAdv.ProtoReflect.Descriptor instead.
func (*IsisShIpv4RouteAdv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP(), []int{22}
}

func (x *IsisShIpv4RouteAdv) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShIpv4RouteAdv) GetAdvertisingOrigin() string {
	if x != nil {
		return x.AdvertisingOrigin
	}
	return ""
}

func (x *IsisShIpv4RouteAdv) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *IsisShIpv4RouteAdv) GetIsPropagated() bool {
	if x != nil {
		return x.IsPropagated
	}
	return false
}

func (x *IsisShIpv4RouteAdv) GetIsExternalMetric() bool {
	if x != nil {
		return x.IsExternalMetric
	}
	return false
}

func (x *IsisShIpv4RouteAdv) GetSummarizationStatus() *IsisShIpv4RouteSummarizationStatus {
	if x != nil {
		return x.SummarizationStatus
	}
	return nil
}

func (x *IsisShIpv4RouteAdv) GetIsExternalReachability() bool {
	if x != nil {
		return x.IsExternalReachability
	}
	return false
}

func (x *IsisShIpv4RouteAdv) GetIsInterarea() bool {
	if x != nil {
		return x.IsInterarea
	}
	return false
}

func (x *IsisShIpv4RouteAdv) GetTags() []uint32 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *IsisShIpv4RouteAdv) GetNodalSids() []*IsisNodalSidType {
	if x != nil {
		return x.NodalSids
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDesc = []byte{
	0x0a, 0x7f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72,
	0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72,
	0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x66, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66,
	0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66,
	0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0xf3, 0x05, 0x0a, 0x12, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xae, 0x01, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1d, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6e, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x66, 0x6c, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6e, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x72, 0x65, 0x70, 0x5f, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x49,
	0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xd9, 0x0a, 0x0a, 0x17, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6e, 0x70,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x6e, 0x70, 0x61, 0x12, 0x2f, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4c, 0x66, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x66, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x66, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66, 0x61,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x66, 0x61, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x50, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x53, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x17, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6c, 0x66, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x69,
	0x6c, 0x66, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa4,
	0x01, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70,
	0x5f, 0x65, 0x6c, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x6c, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4c, 0x63, 0x44, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x72, 0x6c,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x53, 0x72, 0x6c, 0x67, 0x44, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66,
	0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4c, 0x66, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x66, 0x72,
	0x72, 0x5f, 0x6c, 0x66, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45,
	0x70, 0x63, 0x66, 0x72, 0x72, 0x4c, 0x66, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x82, 0x06, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x6e, 0x70, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x9e, 0x01,
	0x0a, 0x0a, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x09, 0x66, 0x72, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0xa6,
	0x01, 0x0a, 0x13, 0x75, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65,
	0x70, 0x5f, 0x65, 0x6c, 0x52, 0x11, 0x75, 0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe3, 0x04, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x63, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x76, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72,
	0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72,
	0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x6e,
	0x70, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x6e, 0x70, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x75, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x63, 0x6d, 0x70, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0a, 0x66, 0x72, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x66,
	0x72, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x90, 0x08, 0x0a, 0x1a,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0xa2, 0x01, 0x0a, 0x10, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x73, 0x69,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x0f,
	0x6f, 0x73, 0x70, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6f, 0x73, 0x70, 0x66, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0xa5,
	0x01, 0x0a, 0x12, 0x6f, 0x73, 0x70, 0x5f, 0x66, 0x76, 0x33, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6f, 0x73, 0x70, 0x46, 0x76, 0x33, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x61,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x78,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x41, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x65, 0x69, 0x67, 0x72, 0x70, 0x5f,
	0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72,
	0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72,
	0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x69, 0x67, 0x72, 0x70,
	0x41, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x78, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x1a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x9e, 0x01,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xe9,
	0x01, 0x0a, 0x19, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x22, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x99, 0x01, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x8a, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0xbc, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x15, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x20, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x73, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x61, 0x6c, 0x53,
	0x69, 0x64, 0x73, 0x22, 0xe4, 0x0a, 0x0a, 0x24, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x79,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x75, 0x63, 0x6d, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x75, 0x63, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0c, 0x75, 0x63, 0x6d, 0x70, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x79, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x99, 0x01, 0x0a,
	0x0b, 0x73, 0x5f, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x79, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76,
	0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x09, 0x73,
	0x52, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x79, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34,
	0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x88, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0xb6, 0x01, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x88, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x21, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0xa7, 0x01, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x8c, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70,
	0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0xa7, 0x01, 0x0a, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x8c, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0xf1, 0x01, 0x0a, 0x20, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0xb1, 0x01, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x27, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x0e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69,
	0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0x9c, 0x05, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0xc3, 0x01,
	0x0a, 0x14, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8f, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x72, 0x65, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x61, 0x6c, 0x53, 0x69, 0x64,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_goTypes = []interface{}{
	(*IsisShIpv4Route_KEYS)(nil),               // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_KEYS
	(*IsisShIpv4Route)(nil),                    // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route
	(*IsisNodalSidType)(nil),                   // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_nodal_sid_type
	(*IsisStringType)(nil),                     // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_string_type
	(*IsisIpv4PrefixType)(nil),                 // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_ipv4_prefix_type
	(*IsisSnpaType)(nil),                       // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_snpa_type
	(*IsisShInterfaceName)(nil),                // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_interface_name
	(*IsisShRepEl)(nil),                        // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_rep_el
	(*IsisShIpv4FrrBackup)(nil),                // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_frr_backup
	(*IsisShIpv4Path)(nil),                     // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path
	(*IsisShIpv4UcmpPath)(nil),                 // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_ucmp_path
	(*IsisShRedistEntryProto)(nil),             // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto
	(*IsisShRouteConnDetails)(nil),             // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_conn_details
	(*IsisShRouteConnStatus)(nil),              // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_conn_status
	(*IsisShRouteRedistLevelDetails)(nil),      // 14: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_level_details
	(*IsisShRouteRedistDetails)(nil),           // 15: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_details
	(*IsisShRouteRedistStatus)(nil),            // 16: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_status
	(*IsisShIpv4RouteNativeSource)(nil),        // 17: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_source
	(*IsisShIpv4RouteNativePreference)(nil),    // 18: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference
	(*IsisShIpv4RouteNativeDetails)(nil),       // 19: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_details
	(*IsisShIpv4RouteNativeStatus)(nil),        // 20: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_status
	(*IsisShIpv4RouteSummarizationStatus)(nil), // 21: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_summarization_status
	(*IsisShIpv4RouteAdv)(nil),                 // 22: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_adv
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_depIdxs = []int32{
	13, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route.connected_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_conn_status
	16, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route.redistributed_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_status
	20, // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route.native_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_status
	22, // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route.per_level_advertising_details:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_adv
	5,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_frr_backup.neighbor_snpa:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_snpa_type
	7,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_frr_backup.backup_repair_list:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_rep_el
	5,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path.neighbor_snpa:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_snpa_type
	8,  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path.frr_backup:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_frr_backup
	7,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path.uloop_explicit_list:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_rep_el
	5,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_ucmp_path.neighbor_snpa:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_snpa_type
	8,  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_ucmp_path.frr_backup:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_frr_backup
	3,  // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto.isis_instance_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_string_type
	3,  // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto.ospf_process_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_string_type
	3,  // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto.osp_fv3_process_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_string_type
	3,  // 14: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto.bgp_as_number:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_string_type
	3,  // 15: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto.eigrp_as_number:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_string_type
	3,  // 16: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto.application_name:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_string_type
	6,  // 17: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_conn_details.interfaces:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_interface_name
	12, // 18: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_conn_status.connected_details:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_conn_details
	11, // 19: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_level_details.owner:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_redist_entry_proto
	14, // 20: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_details.value:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_level_details
	15, // 21: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_status.redistribution_details:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_route_redist_details
	2,  // 22: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_source.nodal_sids:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_nodal_sid_type
	9,  // 23: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference.paths:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path
	10, // 24: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference.ucmp_next_hops:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_ucmp_path
	9,  // 25: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference.multicast_paths:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path
	9,  // 26: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference.s_rte_paths:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path
	9,  // 27: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference.explicit_paths:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_path
	17, // 28: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference.sources:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_source
	17, // 29: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference.multicast_sources:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_source
	18, // 30: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_details.primary:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference
	18, // 31: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_details.backups:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_preference
	19, // 32: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_status.native_details:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_native_details
	4,  // 33: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_summarization_status.summary_prefix:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_ipv4_prefix_type
	21, // 34: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_adv.summarization_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_summarization_status
	2,  // 35: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_sh_ipv4_route_adv.nodal_sids:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4frr_backups.ipv4frr_backup.isis_nodal_sid_type
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4Route_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisNodalSidType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisStringType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv4PrefixType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisSnpaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShInterfaceName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRepEl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4FrrBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4UcmpPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRedistEntryProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRouteConnDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRouteConnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRouteRedistLevelDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRouteRedistDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRouteRedistStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4RouteNativeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4RouteNativePreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4RouteNativeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4RouteNativeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4RouteSummarizationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv4RouteAdv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4frr_backups_ipv4frr_backup_isis_sh_ipv4_route_proto_depIdxs = nil
}
