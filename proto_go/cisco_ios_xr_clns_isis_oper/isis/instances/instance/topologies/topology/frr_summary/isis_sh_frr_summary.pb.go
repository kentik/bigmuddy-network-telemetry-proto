// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/topologies/topology/frr_summary/isis_sh_frr_summary.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FRR summary for an ISIS topology
type IsisShFrrSummary_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *IsisShFrrSummary_KEYS) Reset() {
	*x = IsisShFrrSummary_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShFrrSummary_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShFrrSummary_KEYS) ProtoMessage() {}

func (x *IsisShFrrSummary_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShFrrSummary_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShFrrSummary_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShFrrSummary_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShFrrSummary_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisShFrrSummary_KEYS) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisShFrrSummary_KEYS) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

type IsisShFrrSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FRR summary for prefixes reachable in L1
	Level1Prefixes *IsisShFrrLevelSummary `protobuf:"bytes,50,opt,name=level1_prefixes,json=level1Prefixes,proto3" json:"level1_prefixes,omitempty"`
	// FRR summary for prefixes reachable in L2
	Level2Prefixes *IsisShFrrLevelSummary `protobuf:"bytes,51,opt,name=level2_prefixes,json=level2Prefixes,proto3" json:"level2_prefixes,omitempty"`
	// Unreachable prefixes
	UnreachablePrefixes *IsisPerPriorityCounts `protobuf:"bytes,52,opt,name=unreachable_prefixes,json=unreachablePrefixes,proto3" json:"unreachable_prefixes,omitempty"`
}

func (x *IsisShFrrSummary) Reset() {
	*x = IsisShFrrSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShFrrSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShFrrSummary) ProtoMessage() {}

func (x *IsisShFrrSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShFrrSummary.ProtoReflect.Descriptor instead.
func (*IsisShFrrSummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShFrrSummary) GetLevel1Prefixes() *IsisShFrrLevelSummary {
	if x != nil {
		return x.Level1Prefixes
	}
	return nil
}

func (x *IsisShFrrSummary) GetLevel2Prefixes() *IsisShFrrLevelSummary {
	if x != nil {
		return x.Level2Prefixes
	}
	return nil
}

func (x *IsisShFrrSummary) GetUnreachablePrefixes() *IsisPerPriorityCounts {
	if x != nil {
		return x.UnreachablePrefixes
	}
	return nil
}

// Per-priority counts
type IsisPerPriorityCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Critical priority
	Critical uint32 `protobuf:"varint,1,opt,name=critical,proto3" json:"critical,omitempty"`
	// High priority
	High uint32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
	// Medium priority
	Medium uint32 `protobuf:"varint,3,opt,name=medium,proto3" json:"medium,omitempty"`
	// Low priority
	Low uint32 `protobuf:"varint,4,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *IsisPerPriorityCounts) Reset() {
	*x = IsisPerPriorityCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisPerPriorityCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisPerPriorityCounts) ProtoMessage() {}

func (x *IsisPerPriorityCounts) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisPerPriorityCounts.ProtoReflect.Descriptor instead.
func (*IsisPerPriorityCounts) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescGZIP(), []int{2}
}

func (x *IsisPerPriorityCounts) GetCritical() uint32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetMedium() uint32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

// FRR backup statistics for one level
type IsisShFrrLevelSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of prefixes with all paths having FRR backup
	AllPathsProtected *IsisPerPriorityCounts `protobuf:"bytes,1,opt,name=all_paths_protected,json=allPathsProtected,proto3" json:"all_paths_protected,omitempty"`
	// Number of prefixes with some paths having FRR backup
	SomePathsProtected *IsisPerPriorityCounts `protobuf:"bytes,2,opt,name=some_paths_protected,json=somePathsProtected,proto3" json:"some_paths_protected,omitempty"`
	// Number of reachable prefixes without FRR backup
	Unprotected *IsisPerPriorityCounts `protobuf:"bytes,3,opt,name=unprotected,proto3" json:"unprotected,omitempty"`
}

func (x *IsisShFrrLevelSummary) Reset() {
	*x = IsisShFrrLevelSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShFrrLevelSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShFrrLevelSummary) ProtoMessage() {}

func (x *IsisShFrrLevelSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShFrrLevelSummary.ProtoReflect.Descriptor instead.
func (*IsisShFrrLevelSummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescGZIP(), []int{3}
}

func (x *IsisShFrrLevelSummary) GetAllPathsProtected() *IsisPerPriorityCounts {
	if x != nil {
		return x.AllPathsProtected
	}
	return nil
}

func (x *IsisShFrrLevelSummary) GetSomePathsProtected() *IsisPerPriorityCounts {
	if x != nil {
		return x.SomePathsProtected
	}
	return nil
}

func (x *IsisShFrrLevelSummary) GetUnprotected() *IsisPerPriorityCounts {
	if x != nil {
		return x.Unprotected
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDesc = []byte{
	0x0a, 0x6d, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x66, 0x72,
	0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x53, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x4b, 0x45, 0x59,
	0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xec, 0x03, 0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x72, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x31, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x66, 0x72, 0x72, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x66, 0x72, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x14,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x74,
	0x0a, 0x18, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x22, 0xef, 0x03, 0x0a, 0x19, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x66, 0x72, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x66, 0x72, 0x72, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x66, 0x72, 0x72, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x12, 0x73, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x0b, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x66, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x75, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_goTypes = []interface{}{
	(*IsisShFrrSummary_KEYS)(nil), // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_summary_KEYS
	(*IsisShFrrSummary)(nil),      // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_summary
	(*IsisPerPriorityCounts)(nil), // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_per_priority_counts
	(*IsisShFrrLevelSummary)(nil), // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_level_summary
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_depIdxs = []int32{
	3, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_summary.level1_prefixes:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_level_summary
	3, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_summary.level2_prefixes:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_level_summary
	2, // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_summary.unreachable_prefixes:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_per_priority_counts
	2, // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_level_summary.all_paths_protected:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_per_priority_counts
	2, // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_level_summary.some_paths_protected:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_per_priority_counts
	2, // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_sh_frr_level_summary.unprotected:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.frr_summary.isis_per_priority_counts
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShFrrSummary_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShFrrSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisPerPriorityCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShFrrLevelSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_frr_summary_isis_sh_frr_summary_proto_depIdxs = nil
}
