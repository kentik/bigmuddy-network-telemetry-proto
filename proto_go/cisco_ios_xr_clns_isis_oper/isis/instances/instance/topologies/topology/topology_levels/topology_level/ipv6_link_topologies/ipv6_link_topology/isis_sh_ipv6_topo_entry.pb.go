// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/topologies/topology/topology_levels/topology_level/ipv6_link_topologies/ipv6_link_topology/isis_sh_ipv6_topo_entry.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IPv6 IS Link Topology Entry
type IsisShIpv6TopoEntry_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	Level        string `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	SystemId     string `protobuf:"bytes,6,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
}

func (x *IsisShIpv6TopoEntry_KEYS) Reset() {
	*x = IsisShIpv6TopoEntry_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv6TopoEntry_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv6TopoEntry_KEYS) ProtoMessage() {}

func (x *IsisShIpv6TopoEntry_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv6TopoEntry_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShIpv6TopoEntry_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShIpv6TopoEntry_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShIpv6TopoEntry_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisShIpv6TopoEntry_KEYS) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisShIpv6TopoEntry_KEYS) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

func (x *IsisShIpv6TopoEntry_KEYS) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShIpv6TopoEntry_KEYS) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

type IsisShIpv6TopoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source Address
	SourceAddress string `protobuf:"bytes,50,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	// Does the IS participate in the topology?
	IsParticipant bool `protobuf:"varint,51,opt,name=is_participant,json=isParticipant,proto3" json:"is_participant,omitempty"`
	// Is the IS overloaded?
	IsOverloaded bool `protobuf:"varint,52,opt,name=is_overloaded,json=isOverloaded,proto3" json:"is_overloaded,omitempty"`
	// Is the IS attached?
	IsAttached bool `protobuf:"varint,53,opt,name=is_attached,json=isAttached,proto3" json:"is_attached,omitempty"`
	// Is the IS reachable, and, if so, its status within the SPT
	ReachabilityStatus *IsisShIpv6TopoReachableStatus `protobuf:"bytes,54,opt,name=reachability_status,json=reachabilityStatus,proto3" json:"reachability_status,omitempty"`
	// Per-priority counts of prefix items advertised by the IS
	AdvertisedPrefixItemCounts *IsisPerPriorityCounts `protobuf:"bytes,55,opt,name=advertised_prefix_item_counts,json=advertisedPrefixItemCounts,proto3" json:"advertised_prefix_item_counts,omitempty"`
}

func (x *IsisShIpv6TopoEntry) Reset() {
	*x = IsisShIpv6TopoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv6TopoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv6TopoEntry) ProtoMessage() {}

func (x *IsisShIpv6TopoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv6TopoEntry.ProtoReflect.Descriptor instead.
func (*IsisShIpv6TopoEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShIpv6TopoEntry) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *IsisShIpv6TopoEntry) GetIsParticipant() bool {
	if x != nil {
		return x.IsParticipant
	}
	return false
}

func (x *IsisShIpv6TopoEntry) GetIsOverloaded() bool {
	if x != nil {
		return x.IsOverloaded
	}
	return false
}

func (x *IsisShIpv6TopoEntry) GetIsAttached() bool {
	if x != nil {
		return x.IsAttached
	}
	return false
}

func (x *IsisShIpv6TopoEntry) GetReachabilityStatus() *IsisShIpv6TopoReachableStatus {
	if x != nil {
		return x.ReachabilityStatus
	}
	return nil
}

func (x *IsisShIpv6TopoEntry) GetAdvertisedPrefixItemCounts() *IsisPerPriorityCounts {
	if x != nil {
		return x.AdvertisedPrefixItemCounts
	}
	return nil
}

type IsisNodeIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisNodeIdType) Reset() {
	*x = IsisNodeIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisNodeIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisNodeIdType) ProtoMessage() {}

func (x *IsisNodeIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisNodeIdType.ProtoReflect.Descriptor instead.
func (*IsisNodeIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{2}
}

func (x *IsisNodeIdType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IsisSnpaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisSnpaType) Reset() {
	*x = IsisSnpaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisSnpaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisSnpaType) ProtoMessage() {}

func (x *IsisSnpaType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisSnpaType.ProtoReflect.Descriptor instead.
func (*IsisSnpaType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{3}
}

func (x *IsisSnpaType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Per-priority counts
type IsisPerPriorityCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Critical priority
	Critical uint32 `protobuf:"varint,1,opt,name=critical,proto3" json:"critical,omitempty"`
	// High priority
	High uint32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
	// Medium priority
	Medium uint32 `protobuf:"varint,3,opt,name=medium,proto3" json:"medium,omitempty"`
	// Low priority
	Low uint32 `protobuf:"varint,4,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *IsisPerPriorityCounts) Reset() {
	*x = IsisPerPriorityCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisPerPriorityCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisPerPriorityCounts) ProtoMessage() {}

func (x *IsisPerPriorityCounts) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisPerPriorityCounts.ProtoReflect.Descriptor instead.
func (*IsisPerPriorityCounts) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{4}
}

func (x *IsisPerPriorityCounts) GetCritical() uint32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetMedium() uint32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

// OSPF Repair Element
type IsisShRepEl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepairElementNodeID
	RepairElementNodeId string `protobuf:"bytes,1,opt,name=repair_element_node_id,json=repairElementNodeId,proto3" json:"repair_element_node_id,omitempty"`
	// RepairIPv4Addr
	RepairIpv4Addr string `protobuf:"bytes,2,opt,name=repair_ipv4_addr,json=repairIpv4Addr,proto3" json:"repair_ipv4_addr,omitempty"`
	// RepairIPv6Addr
	RepairIpv6Addr string `protobuf:"bytes,3,opt,name=repair_ipv6_addr,json=repairIpv6Addr,proto3" json:"repair_ipv6_addr,omitempty"`
	// Repair Label
	RepairLabel uint32 `protobuf:"varint,4,opt,name=repair_label,json=repairLabel,proto3" json:"repair_label,omitempty"`
	// Repair Element Type
	RepairElementType uint32 `protobuf:"varint,5,opt,name=repair_element_type,json=repairElementType,proto3" json:"repair_element_type,omitempty"`
}

func (x *IsisShRepEl) Reset() {
	*x = IsisShRepEl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShRepEl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShRepEl) ProtoMessage() {}

func (x *IsisShRepEl) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShRepEl.ProtoReflect.Descriptor instead.
func (*IsisShRepEl) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{5}
}

func (x *IsisShRepEl) GetRepairElementNodeId() string {
	if x != nil {
		return x.RepairElementNodeId
	}
	return ""
}

func (x *IsisShRepEl) GetRepairIpv4Addr() string {
	if x != nil {
		return x.RepairIpv4Addr
	}
	return ""
}

func (x *IsisShRepEl) GetRepairIpv6Addr() string {
	if x != nil {
		return x.RepairIpv6Addr
	}
	return ""
}

func (x *IsisShRepEl) GetRepairLabel() uint32 {
	if x != nil {
		return x.RepairLabel
	}
	return 0
}

func (x *IsisShRepEl) GetRepairElementType() uint32 {
	if x != nil {
		return x.RepairElementType
	}
	return 0
}

// FRR backup path
type IsisShIpv6FrrBackup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface,proto3" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Tunnel interface to send the packet out of
	TunnelEgressInterface string `protobuf:"bytes,4,opt,name=tunnel_egress_interface,json=tunnelEgressInterface,proto3" json:"tunnel_egress_interface,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,5,opt,name=neighbor_snpa,json=neighborSnpa,proto3" json:"neighbor_snpa,omitempty"`
	// Remote LFA PQ Node's ID
	RemoteLfaSystemId string `protobuf:"bytes,6,opt,name=remote_lfa_system_id,json=remoteLfaSystemId,proto3" json:"remote_lfa_system_id,omitempty"`
	// Remote LFA Router ID
	RemoteLfaRouterId string `protobuf:"bytes,7,opt,name=remote_lfa_router_id,json=remoteLfaRouterId,proto3" json:"remote_lfa_router_id,omitempty"`
	// Remote LFA PQ Node's ID
	RemoteLfaSystemPid string `protobuf:"bytes,8,opt,name=remote_lfa_system_pid,json=remoteLfaSystemPid,proto3" json:"remote_lfa_system_pid,omitempty"`
	// Remote LFA Router ID
	RemoteLfaRouterPid string `protobuf:"bytes,9,opt,name=remote_lfa_router_pid,json=remoteLfaRouterPid,proto3" json:"remote_lfa_router_pid,omitempty"`
	// Distance to the network via this backup path
	TotalBackupDistance uint32 `protobuf:"varint,10,opt,name=total_backup_distance,json=totalBackupDistance,proto3" json:"total_backup_distance,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,11,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue,proto3" json:"segment_routing_sid_value,omitempty"`
	// Number of SIDs in TI-LFA/rLFA
	NumSid uint32 `protobuf:"varint,12,opt,name=num_sid,json=numSid,proto3" json:"num_sid,omitempty"`
	// Segment routing sid values for TI-LFA/rLFA
	SegmentRoutingSidValues []uint32 `protobuf:"varint,13,rep,packed,name=segment_routing_sid_values,json=segmentRoutingSidValues,proto3" json:"segment_routing_sid_values,omitempty"`
	// Backup Repair List Size
	BackupRepairListSize uint32 `protobuf:"varint,14,opt,name=backup_repair_list_size,json=backupRepairListSize,proto3" json:"backup_repair_list_size,omitempty"`
	// Ti LFA computation which provided backup path
	TilfaComputation string `protobuf:"bytes,15,opt,name=tilfa_computation,json=tilfaComputation,proto3" json:"tilfa_computation,omitempty"`
	// BAckup Repair List
	BackupRepairList []*IsisShRepEl `protobuf:"bytes,16,rep,name=backup_repair_list,json=backupRepairList,proto3" json:"backup_repair_list,omitempty"`
	// Is the backup path via downstream node?
	IsDownstream bool `protobuf:"varint,17,opt,name=is_downstream,json=isDownstream,proto3" json:"is_downstream,omitempty"`
	// Is the backup path line card disjoint with primary?
	IsLcDisjoint bool `protobuf:"varint,18,opt,name=is_lc_disjoint,json=isLcDisjoint,proto3" json:"is_lc_disjoint,omitempty"`
	// Is the backup path node protecting?
	IsNodeProtecting bool `protobuf:"varint,19,opt,name=is_node_protecting,json=isNodeProtecting,proto3" json:"is_node_protecting,omitempty"`
	// Is the backup path an ECMP to the network?
	IsPrimaryPath bool `protobuf:"varint,20,opt,name=is_primary_path,json=isPrimaryPath,proto3" json:"is_primary_path,omitempty"`
	// Is the backup path SRLG disjoint with primary?
	IsSrlgDisjoint bool `protobuf:"varint,21,opt,name=is_srlg_disjoint,json=isSrlgDisjoint,proto3" json:"is_srlg_disjoint,omitempty"`
	// Is the backup path via a Remote LFA?
	IsRemoteLfa bool `protobuf:"varint,22,opt,name=is_remote_lfa,json=isRemoteLfa,proto3" json:"is_remote_lfa,omitempty"`
	// Is the backup path via a TI-LFA?
	IsEpcfrrLfa bool `protobuf:"varint,23,opt,name=is_epcfrr_lfa,json=isEpcfrrLfa,proto3" json:"is_epcfrr_lfa,omitempty"`
	// Is SR TE tunnel requested
	IsTunnelRequested bool `protobuf:"varint,24,opt,name=is_tunnel_requested,json=isTunnelRequested,proto3" json:"is_tunnel_requested,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,25,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *IsisShIpv6FrrBackup) Reset() {
	*x = IsisShIpv6FrrBackup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv6FrrBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv6FrrBackup) ProtoMessage() {}

func (x *IsisShIpv6FrrBackup) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv6FrrBackup.ProtoReflect.Descriptor instead.
func (*IsisShIpv6FrrBackup) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{6}
}

func (x *IsisShIpv6FrrBackup) GetNeighborId() string {
	if x != nil {
		return x.NeighborId
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetEgressInterface() string {
	if x != nil {
		return x.EgressInterface
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetTunnelEgressInterface() string {
	if x != nil {
		return x.TunnelEgressInterface
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetNeighborSnpa() *IsisSnpaType {
	if x != nil {
		return x.NeighborSnpa
	}
	return nil
}

func (x *IsisShIpv6FrrBackup) GetRemoteLfaSystemId() string {
	if x != nil {
		return x.RemoteLfaSystemId
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetRemoteLfaRouterId() string {
	if x != nil {
		return x.RemoteLfaRouterId
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetRemoteLfaSystemPid() string {
	if x != nil {
		return x.RemoteLfaSystemPid
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetRemoteLfaRouterPid() string {
	if x != nil {
		return x.RemoteLfaRouterPid
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetTotalBackupDistance() uint32 {
	if x != nil {
		return x.TotalBackupDistance
	}
	return 0
}

func (x *IsisShIpv6FrrBackup) GetSegmentRoutingSidValue() uint32 {
	if x != nil {
		return x.SegmentRoutingSidValue
	}
	return 0
}

func (x *IsisShIpv6FrrBackup) GetNumSid() uint32 {
	if x != nil {
		return x.NumSid
	}
	return 0
}

func (x *IsisShIpv6FrrBackup) GetSegmentRoutingSidValues() []uint32 {
	if x != nil {
		return x.SegmentRoutingSidValues
	}
	return nil
}

func (x *IsisShIpv6FrrBackup) GetBackupRepairListSize() uint32 {
	if x != nil {
		return x.BackupRepairListSize
	}
	return 0
}

func (x *IsisShIpv6FrrBackup) GetTilfaComputation() string {
	if x != nil {
		return x.TilfaComputation
	}
	return ""
}

func (x *IsisShIpv6FrrBackup) GetBackupRepairList() []*IsisShRepEl {
	if x != nil {
		return x.BackupRepairList
	}
	return nil
}

func (x *IsisShIpv6FrrBackup) GetIsDownstream() bool {
	if x != nil {
		return x.IsDownstream
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetIsLcDisjoint() bool {
	if x != nil {
		return x.IsLcDisjoint
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetIsNodeProtecting() bool {
	if x != nil {
		return x.IsNodeProtecting
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetIsPrimaryPath() bool {
	if x != nil {
		return x.IsPrimaryPath
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetIsSrlgDisjoint() bool {
	if x != nil {
		return x.IsSrlgDisjoint
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetIsRemoteLfa() bool {
	if x != nil {
		return x.IsRemoteLfa
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetIsEpcfrrLfa() bool {
	if x != nil {
		return x.IsEpcfrrLfa
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetIsTunnelRequested() bool {
	if x != nil {
		return x.IsTunnelRequested
	}
	return false
}

func (x *IsisShIpv6FrrBackup) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// IPv6 path to a destination
type IsisShIpv6Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface,proto3" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,4,opt,name=neighbor_snpa,json=neighborSnpa,proto3" json:"neighbor_snpa,omitempty"`
	// Tag associated with the path
	Tag uint32 `protobuf:"varint,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// FRR backup for this path
	FrrBackup *IsisShIpv6FrrBackup `protobuf:"bytes,6,opt,name=frr_backup,json=frrBackup,proto3" json:"frr_backup,omitempty"`
	// Uloop Explicit List
	UloopExplicitList []*IsisShRepEl `protobuf:"bytes,7,rep,name=uloop_explicit_list,json=uloopExplicitList,proto3" json:"uloop_explicit_list,omitempty"`
	// Explicit path tunnel interface
	TunnelInterface string `protobuf:"bytes,8,opt,name=tunnel_interface,json=tunnelInterface,proto3" json:"tunnel_interface,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,9,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue,proto3" json:"segment_routing_sid_value,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *IsisShIpv6Path) Reset() {
	*x = IsisShIpv6Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv6Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv6Path) ProtoMessage() {}

func (x *IsisShIpv6Path) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv6Path.ProtoReflect.Descriptor instead.
func (*IsisShIpv6Path) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{7}
}

func (x *IsisShIpv6Path) GetNeighborId() string {
	if x != nil {
		return x.NeighborId
	}
	return ""
}

func (x *IsisShIpv6Path) GetEgressInterface() string {
	if x != nil {
		return x.EgressInterface
	}
	return ""
}

func (x *IsisShIpv6Path) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *IsisShIpv6Path) GetNeighborSnpa() *IsisSnpaType {
	if x != nil {
		return x.NeighborSnpa
	}
	return nil
}

func (x *IsisShIpv6Path) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *IsisShIpv6Path) GetFrrBackup() *IsisShIpv6FrrBackup {
	if x != nil {
		return x.FrrBackup
	}
	return nil
}

func (x *IsisShIpv6Path) GetUloopExplicitList() []*IsisShRepEl {
	if x != nil {
		return x.UloopExplicitList
	}
	return nil
}

func (x *IsisShIpv6Path) GetTunnelInterface() string {
	if x != nil {
		return x.TunnelInterface
	}
	return ""
}

func (x *IsisShIpv6Path) GetSegmentRoutingSidValue() uint32 {
	if x != nil {
		return x.SegmentRoutingSidValue
	}
	return 0
}

func (x *IsisShIpv6Path) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// SPT Neighbor
type IsisShTopoNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"`
	// Pseudonode between system and its neighbor
	IntermediatePseudonode *IsisNodeIdType `protobuf:"bytes,2,opt,name=intermediate_pseudonode,json=intermediatePseudonode,proto3" json:"intermediate_pseudonode,omitempty"`
}

func (x *IsisShTopoNeighbor) Reset() {
	*x = IsisShTopoNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTopoNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTopoNeighbor) ProtoMessage() {}

func (x *IsisShTopoNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTopoNeighbor.ProtoReflect.Descriptor instead.
func (*IsisShTopoNeighbor) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{8}
}

func (x *IsisShTopoNeighbor) GetNeighborId() string {
	if x != nil {
		return x.NeighborId
	}
	return ""
}

func (x *IsisShTopoNeighbor) GetIntermediatePseudonode() *IsisNodeIdType {
	if x != nil {
		return x.IntermediatePseudonode
	}
	return nil
}

// Status of a reachable IPv6 IS
type IsisShIpv6TopoReachableDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Distance to the IS
	RootDistance uint32 `protobuf:"varint,1,opt,name=root_distance,json=rootDistance,proto3" json:"root_distance,omitempty"`
	// Distance to the IS
	MulticastRootDistance uint32 `protobuf:"varint,2,opt,name=multicast_root_distance,json=multicastRootDistance,proto3" json:"multicast_root_distance,omitempty"`
	// First hops towards the IS
	Paths []*IsisShIpv6Path `protobuf:"bytes,3,rep,name=paths,proto3" json:"paths,omitempty"`
	// Multicast intact first hops towards the IS
	MulticastPaths []*IsisShIpv6Path `protobuf:"bytes,4,rep,name=multicast_paths,json=multicastPaths,proto3" json:"multicast_paths,omitempty"`
	// Parents of the IS within the SPT
	Parents []*IsisShTopoNeighbor `protobuf:"bytes,5,rep,name=parents,proto3" json:"parents,omitempty"`
	// Children of the IS within the SPT
	Children []*IsisShTopoNeighbor `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *IsisShIpv6TopoReachableDetails) Reset() {
	*x = IsisShIpv6TopoReachableDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv6TopoReachableDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv6TopoReachableDetails) ProtoMessage() {}

func (x *IsisShIpv6TopoReachableDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv6TopoReachableDetails.ProtoReflect.Descriptor instead.
func (*IsisShIpv6TopoReachableDetails) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{9}
}

func (x *IsisShIpv6TopoReachableDetails) GetRootDistance() uint32 {
	if x != nil {
		return x.RootDistance
	}
	return 0
}

func (x *IsisShIpv6TopoReachableDetails) GetMulticastRootDistance() uint32 {
	if x != nil {
		return x.MulticastRootDistance
	}
	return 0
}

func (x *IsisShIpv6TopoReachableDetails) GetPaths() []*IsisShIpv6Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *IsisShIpv6TopoReachableDetails) GetMulticastPaths() []*IsisShIpv6Path {
	if x != nil {
		return x.MulticastPaths
	}
	return nil
}

func (x *IsisShIpv6TopoReachableDetails) GetParents() []*IsisShTopoNeighbor {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *IsisShIpv6TopoReachableDetails) GetChildren() []*IsisShTopoNeighbor {
	if x != nil {
		return x.Children
	}
	return nil
}

// Reachability status of an IPv6 IS
type IsisShIpv6TopoReachableStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReachableStatus string `protobuf:"bytes,1,opt,name=reachable_status,json=reachableStatus,proto3" json:"reachable_status,omitempty"`
	// Status of the IS within the SPT
	ReachableDetails *IsisShIpv6TopoReachableDetails `protobuf:"bytes,2,opt,name=reachable_details,json=reachableDetails,proto3" json:"reachable_details,omitempty"`
}

func (x *IsisShIpv6TopoReachableStatus) Reset() {
	*x = IsisShIpv6TopoReachableStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIpv6TopoReachableStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIpv6TopoReachableStatus) ProtoMessage() {}

func (x *IsisShIpv6TopoReachableStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIpv6TopoReachableStatus.ProtoReflect.Descriptor instead.
func (*IsisShIpv6TopoReachableStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP(), []int{10}
}

func (x *IsisShIpv6TopoReachableStatus) GetReachableStatus() string {
	if x != nil {
		return x.ReachableStatus
	}
	return ""
}

func (x *IsisShIpv6TopoReachableStatus) GetReachableDetails() *IsisShIpv6TopoReachableDetails {
	if x != nil {
		return x.ReachableDetails
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDesc = []byte{
	0x0a, 0xac, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69,
	0x73, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x8e, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x22, 0xcf, 0x01, 0x0a, 0x1c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x4b, 0x45, 0x59,
	0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x83, 0x05, 0x0a, 0x17, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x12, 0xe4, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0xb2, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xec, 0x01, 0x0a, 0x1d, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0xa8, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x1a, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x74, 0x0a, 0x18, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65,
	0x70, 0x5f, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x70, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xab, 0x0b, 0x0a, 0x17, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x0d,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x9e, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x6e,
	0x70, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66, 0x61,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x66, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66,
	0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x66, 0x61, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c,
	0x66, 0x61, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x66, 0x61, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6c, 0x66, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x66,
	0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x53,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6c, 0x66, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x69, 0x6c, 0x66, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xcd, 0x01, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x9e, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x5f, 0x65,
	0x6c, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c,
	0x63, 0x5f, 0x64, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x4c, 0x63, 0x44, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x72, 0x6c, 0x67, 0x5f,
	0x64, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x53, 0x72, 0x6c, 0x67, 0x44, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x66, 0x61, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c,
	0x66, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x70, 0x63, 0x66, 0x72, 0x72, 0x5f,
	0x6c, 0x66, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x70, 0x63,
	0x66, 0x72, 0x72, 0x4c, 0x66, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfd,
	0x06, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x0d,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x9e, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x6e,
	0x70, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0xc7, 0x01, 0x0a, 0x0a, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa7, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x09, 0x66, 0x72, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0xcf,
	0x01, 0x0a, 0x13, 0x75, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x9e, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x5f, 0x65, 0x6c, 0x52, 0x11, 0x75,
	0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x96,
	0x02, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x12, 0xdb, 0x01, 0x0a, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xa1, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x50, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x07, 0x0a, 0x23, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xb8, 0x01, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xa1, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0xa1, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xa5, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0xa5, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xb3, 0x02,
	0x0a, 0x22, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0xe1, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0xb3, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x10, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_goTypes = []interface{}{
	(*IsisShIpv6TopoEntry_KEYS)(nil),       // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_entry_KEYS
	(*IsisShIpv6TopoEntry)(nil),            // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_entry
	(*IsisNodeIdType)(nil),                 // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_node_id_type
	(*IsisSnpaType)(nil),                   // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_snpa_type
	(*IsisPerPriorityCounts)(nil),          // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_per_priority_counts
	(*IsisShRepEl)(nil),                    // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_rep_el
	(*IsisShIpv6FrrBackup)(nil),            // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_frr_backup
	(*IsisShIpv6Path)(nil),                 // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_path
	(*IsisShTopoNeighbor)(nil),             // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_topo_neighbor
	(*IsisShIpv6TopoReachableDetails)(nil), // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_details
	(*IsisShIpv6TopoReachableStatus)(nil),  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_status
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_depIdxs = []int32{
	10, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_entry.reachability_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_status
	4,  // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_entry.advertised_prefix_item_counts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_per_priority_counts
	3,  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_frr_backup.neighbor_snpa:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_snpa_type
	5,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_frr_backup.backup_repair_list:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_rep_el
	3,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_path.neighbor_snpa:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_snpa_type
	6,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_path.frr_backup:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_frr_backup
	5,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_path.uloop_explicit_list:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_rep_el
	2,  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_topo_neighbor.intermediate_pseudonode:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_node_id_type
	7,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_details.paths:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_path
	7,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_details.multicast_paths:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_path
	8,  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_details.parents:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_topo_neighbor
	8,  // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_details.children:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_topo_neighbor
	9,  // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_status.reachable_details:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv6_link_topologies.ipv6_link_topology.isis_sh_ipv6_topo_reachable_details
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv6TopoEntry_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv6TopoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisNodeIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisSnpaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisPerPriorityCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShRepEl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv6FrrBackup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv6Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTopoNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv6TopoReachableDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIpv6TopoReachableStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_ipv6_link_topologies_ipv6_link_topology_isis_sh_ipv6_topo_entry_proto_depIdxs = nil
}
