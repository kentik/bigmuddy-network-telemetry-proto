// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/topologies/topology/topology_levels/topology_level/te_advertisements/isis_sh_te_adv.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TE advertisements for an IS-IS level
type IsisShTeAdv_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	Level        string `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *IsisShTeAdv_KEYS) Reset() {
	*x = IsisShTeAdv_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTeAdv_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTeAdv_KEYS) ProtoMessage() {}

func (x *IsisShTeAdv_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTeAdv_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShTeAdv_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShTeAdv_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShTeAdv_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisShTeAdv_KEYS) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisShTeAdv_KEYS) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

func (x *IsisShTeAdv_KEYS) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type IsisShTeAdv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether any TE advertisements are present
	TeAdvDataPresent bool `protobuf:"varint,50,opt,name=te_adv_data_present,json=teAdvDataPresent,proto3" json:"te_adv_data_present,omitempty"`
	// Local system ID
	TeSystemId string `protobuf:"bytes,51,opt,name=te_system_id,json=teSystemId,proto3" json:"te_system_id,omitempty"`
	// Local TE router ID
	TeLocalRouterId string `protobuf:"bytes,52,opt,name=te_local_router_id,json=teLocalRouterId,proto3" json:"te_local_router_id,omitempty"`
	// List of TE advertisement entries
	TeAdvList []*IsisShTeAdvEntryP `protobuf:"bytes,53,rep,name=te_adv_list,json=teAdvList,proto3" json:"te_adv_list,omitempty"`
	// TE PCE advertisements
	Tepceadv *IsisShTePceAdv `protobuf:"bytes,54,opt,name=tepceadv,proto3" json:"tepceadv,omitempty"`
}

func (x *IsisShTeAdv) Reset() {
	*x = IsisShTeAdv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTeAdv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTeAdv) ProtoMessage() {}

func (x *IsisShTeAdv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTeAdv.ProtoReflect.Descriptor instead.
func (*IsisShTeAdv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShTeAdv) GetTeAdvDataPresent() bool {
	if x != nil {
		return x.TeAdvDataPresent
	}
	return false
}

func (x *IsisShTeAdv) GetTeSystemId() string {
	if x != nil {
		return x.TeSystemId
	}
	return ""
}

func (x *IsisShTeAdv) GetTeLocalRouterId() string {
	if x != nil {
		return x.TeLocalRouterId
	}
	return ""
}

func (x *IsisShTeAdv) GetTeAdvList() []*IsisShTeAdvEntryP {
	if x != nil {
		return x.TeAdvList
	}
	return nil
}

func (x *IsisShTeAdv) GetTepceadv() *IsisShTePceAdv {
	if x != nil {
		return x.Tepceadv
	}
	return nil
}

type IsisShTeAdvSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeSubTlvType   uint32 `protobuf:"varint,1,opt,name=te_sub_tlv_type,json=teSubTlvType,proto3" json:"te_sub_tlv_type,omitempty"`
	TeSubTlvLength uint32 `protobuf:"varint,2,opt,name=te_sub_tlv_length,json=teSubTlvLength,proto3" json:"te_sub_tlv_length,omitempty"`
	TeSubTlvValue  []byte `protobuf:"bytes,3,opt,name=te_sub_tlv_value,json=teSubTlvValue,proto3" json:"te_sub_tlv_value,omitempty"`
}

func (x *IsisShTeAdvSubTlv) Reset() {
	*x = IsisShTeAdvSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTeAdvSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTeAdvSubTlv) ProtoMessage() {}

func (x *IsisShTeAdvSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTeAdvSubTlv.ProtoReflect.Descriptor instead.
func (*IsisShTeAdvSubTlv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP(), []int{2}
}

func (x *IsisShTeAdvSubTlv) GetTeSubTlvType() uint32 {
	if x != nil {
		return x.TeSubTlvType
	}
	return 0
}

func (x *IsisShTeAdvSubTlv) GetTeSubTlvLength() uint32 {
	if x != nil {
		return x.TeSubTlvLength
	}
	return 0
}

func (x *IsisShTeAdvSubTlv) GetTeSubTlvValue() []byte {
	if x != nil {
		return x.TeSubTlvValue
	}
	return nil
}

type IsisShTeAdvSubTlvP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *IsisShTeAdvSubTlv `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisShTeAdvSubTlvP) Reset() {
	*x = IsisShTeAdvSubTlvP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTeAdvSubTlvP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTeAdvSubTlvP) ProtoMessage() {}

func (x *IsisShTeAdvSubTlvP) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTeAdvSubTlvP.ProtoReflect.Descriptor instead.
func (*IsisShTeAdvSubTlvP) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP(), []int{3}
}

func (x *IsisShTeAdvSubTlvP) GetValue() *IsisShTeAdvSubTlv {
	if x != nil {
		return x.Value
	}
	return nil
}

type IsisShTeAdvEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeNeighborSystemId             string                `protobuf:"bytes,1,opt,name=te_neighbor_system_id,json=teNeighborSystemId,proto3" json:"te_neighbor_system_id,omitempty"`
	LinkType                       string                `protobuf:"bytes,2,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	LocalIpAddress                 string                `protobuf:"bytes,3,opt,name=local_ip_address,json=localIpAddress,proto3" json:"local_ip_address,omitempty"`
	TeNeighborIpAddress            string                `protobuf:"bytes,4,opt,name=te_neighbor_ip_address,json=teNeighborIpAddress,proto3" json:"te_neighbor_ip_address,omitempty"`
	TeMetric                       uint32                `protobuf:"varint,5,opt,name=te_metric,json=teMetric,proto3" json:"te_metric,omitempty"`
	TePhysicalLinkBandwidth        uint32                `protobuf:"varint,6,opt,name=te_physical_link_bandwidth,json=tePhysicalLinkBandwidth,proto3" json:"te_physical_link_bandwidth,omitempty"`
	TeReservedLinkBandwidth        uint32                `protobuf:"varint,7,opt,name=te_reserved_link_bandwidth,json=teReservedLinkBandwidth,proto3" json:"te_reserved_link_bandwidth,omitempty"`
	TeTransmittedBandwidth         []uint32              `protobuf:"varint,8,rep,packed,name=te_transmitted_bandwidth,json=teTransmittedBandwidth,proto3" json:"te_transmitted_bandwidth,omitempty"`
	TeSubpoolReservedLinkBandwidth uint32                `protobuf:"varint,9,opt,name=te_subpool_reserved_link_bandwidth,json=teSubpoolReservedLinkBandwidth,proto3" json:"te_subpool_reserved_link_bandwidth,omitempty"`
	TeSubpoolTransmittedBandwidth  []uint32              `protobuf:"varint,10,rep,packed,name=te_subpool_transmitted_bandwidth,json=teSubpoolTransmittedBandwidth,proto3" json:"te_subpool_transmitted_bandwidth,omitempty"`
	TeAffinity                     uint32                `protobuf:"varint,11,opt,name=te_affinity,json=teAffinity,proto3" json:"te_affinity,omitempty"`
	TeExtAdminNum                  uint32                `protobuf:"varint,12,opt,name=te_ext_admin_num,json=teExtAdminNum,proto3" json:"te_ext_admin_num,omitempty"`
	TeExtAdminSub                  []uint32              `protobuf:"varint,13,rep,packed,name=te_ext_admin_sub,json=teExtAdminSub,proto3" json:"te_ext_admin_sub,omitempty"`
	TeSubTlvDataPresent            bool                  `protobuf:"varint,14,opt,name=te_sub_tlv_data_present,json=teSubTlvDataPresent,proto3" json:"te_sub_tlv_data_present,omitempty"`
	TeSubTlvList                   []*IsisShTeAdvSubTlvP `protobuf:"bytes,15,rep,name=te_sub_tlv_list,json=teSubTlvList,proto3" json:"te_sub_tlv_list,omitempty"`
}

func (x *IsisShTeAdvEntry) Reset() {
	*x = IsisShTeAdvEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTeAdvEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTeAdvEntry) ProtoMessage() {}

func (x *IsisShTeAdvEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTeAdvEntry.ProtoReflect.Descriptor instead.
func (*IsisShTeAdvEntry) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP(), []int{4}
}

func (x *IsisShTeAdvEntry) GetTeNeighborSystemId() string {
	if x != nil {
		return x.TeNeighborSystemId
	}
	return ""
}

func (x *IsisShTeAdvEntry) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *IsisShTeAdvEntry) GetLocalIpAddress() string {
	if x != nil {
		return x.LocalIpAddress
	}
	return ""
}

func (x *IsisShTeAdvEntry) GetTeNeighborIpAddress() string {
	if x != nil {
		return x.TeNeighborIpAddress
	}
	return ""
}

func (x *IsisShTeAdvEntry) GetTeMetric() uint32 {
	if x != nil {
		return x.TeMetric
	}
	return 0
}

func (x *IsisShTeAdvEntry) GetTePhysicalLinkBandwidth() uint32 {
	if x != nil {
		return x.TePhysicalLinkBandwidth
	}
	return 0
}

func (x *IsisShTeAdvEntry) GetTeReservedLinkBandwidth() uint32 {
	if x != nil {
		return x.TeReservedLinkBandwidth
	}
	return 0
}

func (x *IsisShTeAdvEntry) GetTeTransmittedBandwidth() []uint32 {
	if x != nil {
		return x.TeTransmittedBandwidth
	}
	return nil
}

func (x *IsisShTeAdvEntry) GetTeSubpoolReservedLinkBandwidth() uint32 {
	if x != nil {
		return x.TeSubpoolReservedLinkBandwidth
	}
	return 0
}

func (x *IsisShTeAdvEntry) GetTeSubpoolTransmittedBandwidth() []uint32 {
	if x != nil {
		return x.TeSubpoolTransmittedBandwidth
	}
	return nil
}

func (x *IsisShTeAdvEntry) GetTeAffinity() uint32 {
	if x != nil {
		return x.TeAffinity
	}
	return 0
}

func (x *IsisShTeAdvEntry) GetTeExtAdminNum() uint32 {
	if x != nil {
		return x.TeExtAdminNum
	}
	return 0
}

func (x *IsisShTeAdvEntry) GetTeExtAdminSub() []uint32 {
	if x != nil {
		return x.TeExtAdminSub
	}
	return nil
}

func (x *IsisShTeAdvEntry) GetTeSubTlvDataPresent() bool {
	if x != nil {
		return x.TeSubTlvDataPresent
	}
	return false
}

func (x *IsisShTeAdvEntry) GetTeSubTlvList() []*IsisShTeAdvSubTlvP {
	if x != nil {
		return x.TeSubTlvList
	}
	return nil
}

type IsisShTeAdvEntryP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *IsisShTeAdvEntry `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisShTeAdvEntryP) Reset() {
	*x = IsisShTeAdvEntryP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTeAdvEntryP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTeAdvEntryP) ProtoMessage() {}

func (x *IsisShTeAdvEntryP) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTeAdvEntryP.ProtoReflect.Descriptor instead.
func (*IsisShTeAdvEntryP) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP(), []int{5}
}

func (x *IsisShTeAdvEntryP) GetValue() *IsisShTeAdvEntry {
	if x != nil {
		return x.Value
	}
	return nil
}

// TE PCE advertisements for an IS-IS level
type IsisShTePceAdv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether any PCE advertisements are present
	PceAdvDataPresent bool `protobuf:"varint,1,opt,name=pce_adv_data_present,json=pceAdvDataPresent,proto3" json:"pce_adv_data_present,omitempty"`
	// Flooding scope for PCE advertisement
	PceFloodingScope string `protobuf:"bytes,2,opt,name=pce_flooding_scope,json=pceFloodingScope,proto3" json:"pce_flooding_scope,omitempty"`
	// IPv4 PCE address
	PceAddressIpv4 string `protobuf:"bytes,3,opt,name=pce_address_ipv4,json=pceAddressIpv4,proto3" json:"pce_address_ipv4,omitempty"`
	// PCE path scope bits
	PcePathScopeBits uint32 `protobuf:"varint,4,opt,name=pce_path_scope_bits,json=pcePathScopeBits,proto3" json:"pce_path_scope_bits,omitempty"`
	// PCE path scope preferences
	PcePathScopePrefs uint32 `protobuf:"varint,5,opt,name=pce_path_scope_prefs,json=pcePathScopePrefs,proto3" json:"pce_path_scope_prefs,omitempty"`
}

func (x *IsisShTePceAdv) Reset() {
	*x = IsisShTePceAdv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTePceAdv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTePceAdv) ProtoMessage() {}

func (x *IsisShTePceAdv) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTePceAdv.ProtoReflect.Descriptor instead.
func (*IsisShTePceAdv) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP(), []int{6}
}

func (x *IsisShTePceAdv) GetPceAdvDataPresent() bool {
	if x != nil {
		return x.PceAdvDataPresent
	}
	return false
}

func (x *IsisShTePceAdv) GetPceFloodingScope() string {
	if x != nil {
		return x.PceFloodingScope
	}
	return ""
}

func (x *IsisShTePceAdv) GetPceAddressIpv4() string {
	if x != nil {
		return x.PceAddressIpv4
	}
	return ""
}

func (x *IsisShTePceAdv) GetPcePathScopeBits() uint32 {
	if x != nil {
		return x.PcePathScopeBits
	}
	return 0
}

func (x *IsisShTePceAdv) GetPcePathScopePrefs() uint32 {
	if x != nil {
		return x.PcePathScopePrefs
	}
	return 0
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDesc = []byte{
	0x0a, 0x8d, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69,
	0x73, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x78, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xee, 0x03, 0x0a, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x65, 0x41, 0x64, 0x76, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x0b, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x90, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70,
	0x52, 0x09, 0x74, 0x65, 0x41, 0x64, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x08,
	0x74, 0x65, 0x70, 0x63, 0x65, 0x61, 0x64, 0x76, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8c,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x52, 0x08, 0x74,
	0x65, 0x70, 0x63, 0x65, 0x61, 0x64, 0x76, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x6c, 0x76, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x6c, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc4, 0x01,
	0x0a, 0x18, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x70, 0x12, 0xa7, 0x01, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x90, 0x01, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x07, 0x0a, 0x14, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x15, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x65, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x5f,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74,
	0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4a, 0x0a,
	0x22, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x1d, 0x74, 0x65, 0x53, 0x75, 0x62, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x10,
	0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x45, 0x78, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x75, 0x62, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x6c, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x0f,
	0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x70, 0x52, 0x0c, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x54, 0x6c, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x70, 0x12, 0xa5, 0x01, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x8e, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x12,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x5f, 0x70, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x76, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x70, 0x63, 0x65, 0x41, 0x64, 0x76, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x34, 0x12, 0x2d, 0x0a, 0x13, 0x70,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_goTypes = []interface{}{
	(*IsisShTeAdv_KEYS)(nil),   // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_KEYS
	(*IsisShTeAdv)(nil),        // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv
	(*IsisShTeAdvSubTlv)(nil),  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_sub_tlv
	(*IsisShTeAdvSubTlvP)(nil), // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_sub_tlv_p
	(*IsisShTeAdvEntry)(nil),   // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_entry
	(*IsisShTeAdvEntryP)(nil),  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_entry_p
	(*IsisShTePceAdv)(nil),     // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_pce_adv
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_depIdxs = []int32{
	5, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv.te_adv_list:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_entry_p
	6, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv.tepceadv:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_pce_adv
	2, // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_sub_tlv_p.value:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_sub_tlv
	3, // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_entry.te_sub_tlv_list:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_sub_tlv_p
	4, // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_entry_p.value:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.te_advertisements.isis_sh_te_adv_entry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTeAdv_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTeAdv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTeAdvSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTeAdvSubTlvP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTeAdvEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTeAdvEntryP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTePceAdv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_te_advertisements_isis_sh_te_adv_proto_depIdxs = nil
}
