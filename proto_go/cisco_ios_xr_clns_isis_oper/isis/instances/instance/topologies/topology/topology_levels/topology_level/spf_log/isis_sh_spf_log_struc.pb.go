// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/topologies/topology/topology_levels/topology_level/spf_log/isis_sh_spf_log_struc.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Log of IS-IS route calculations
type IsisShSpfLogStruc_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	Level        string `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *IsisShSpfLogStruc_KEYS) Reset() {
	*x = IsisShSpfLogStruc_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogStruc_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogStruc_KEYS) ProtoMessage() {}

func (x *IsisShSpfLogStruc_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogStruc_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogStruc_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShSpfLogStruc_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShSpfLogStruc_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisShSpfLogStruc_KEYS) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisShSpfLogStruc_KEYS) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

func (x *IsisShSpfLogStruc_KEYS) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type IsisShSpfLogStruc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SPF Log entries
	LogEntry []*IsisShSpfLogEnt `protobuf:"bytes,50,rep,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
}

func (x *IsisShSpfLogStruc) Reset() {
	*x = IsisShSpfLogStruc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogStruc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogStruc) ProtoMessage() {}

func (x *IsisShSpfLogStruc) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogStruc.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogStruc) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShSpfLogStruc) GetLogEntry() []*IsisShSpfLogEnt {
	if x != nil {
		return x.LogEntry
	}
	return nil
}

type IsisSystemIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisSystemIdType) Reset() {
	*x = IsisSystemIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisSystemIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisSystemIdType) ProtoMessage() {}

func (x *IsisSystemIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisSystemIdType.ProtoReflect.Descriptor instead.
func (*IsisSystemIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{2}
}

func (x *IsisSystemIdType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IsisNodeIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisNodeIdType) Reset() {
	*x = IsisNodeIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisNodeIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisNodeIdType) ProtoMessage() {}

func (x *IsisNodeIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisNodeIdType.ProtoReflect.Descriptor instead.
func (*IsisNodeIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{3}
}

func (x *IsisNodeIdType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPv4 address and prefix length
type IsisIpv4PrefixType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *IsisIpv4PrefixType) Reset() {
	*x = IsisIpv4PrefixType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv4PrefixType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv4PrefixType) ProtoMessage() {}

func (x *IsisIpv4PrefixType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv4PrefixType.ProtoReflect.Descriptor instead.
func (*IsisIpv4PrefixType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{4}
}

func (x *IsisIpv4PrefixType) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IsisIpv4PrefixType) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

// IPv4 address and prefix length
type IsisIpv6PrefixType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *IsisIpv6PrefixType) Reset() {
	*x = IsisIpv6PrefixType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv6PrefixType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv6PrefixType) ProtoMessage() {}

func (x *IsisIpv6PrefixType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv6PrefixType.ProtoReflect.Descriptor instead.
func (*IsisIpv6PrefixType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{5}
}

func (x *IsisIpv6PrefixType) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IsisIpv6PrefixType) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type IsisIpPrefixType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfName string              `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4   *IsisIpv4PrefixType `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6   *IsisIpv6PrefixType `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *IsisIpPrefixType) Reset() {
	*x = IsisIpPrefixType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpPrefixType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpPrefixType) ProtoMessage() {}

func (x *IsisIpPrefixType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpPrefixType.ProtoReflect.Descriptor instead.
func (*IsisIpPrefixType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{6}
}

func (x *IsisIpPrefixType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisIpPrefixType) GetIpv4() *IsisIpv4PrefixType {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *IsisIpPrefixType) GetIpv6() *IsisIpv6PrefixType {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

type IsisLspIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisLspIdType) Reset() {
	*x = IsisLspIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspIdType) ProtoMessage() {}

func (x *IsisLspIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspIdType.ProtoReflect.Descriptor instead.
func (*IsisLspIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{7}
}

func (x *IsisLspIdType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Per-priority counts
type IsisPerPriorityCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Critical priority
	Critical uint32 `protobuf:"varint,1,opt,name=critical,proto3" json:"critical,omitempty"`
	// High priority
	High uint32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
	// Medium priority
	Medium uint32 `protobuf:"varint,3,opt,name=medium,proto3" json:"medium,omitempty"`
	// Low priority
	Low uint32 `protobuf:"varint,4,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *IsisPerPriorityCounts) Reset() {
	*x = IsisPerPriorityCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisPerPriorityCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisPerPriorityCounts) ProtoMessage() {}

func (x *IsisPerPriorityCounts) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisPerPriorityCounts.ProtoReflect.Descriptor instead.
func (*IsisPerPriorityCounts) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{8}
}

func (x *IsisPerPriorityCounts) GetCritical() uint32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetMedium() uint32 {
	if x != nil {
		return x.Medium
	}
	return 0
}

func (x *IsisPerPriorityCounts) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

// Duration of an event in real and CPU time
type IsisTimingsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Real time duration in milliseconds
	RealDuration uint32 `protobuf:"varint,1,opt,name=real_duration,json=realDuration,proto3" json:"real_duration,omitempty"`
	// CPU time duration in milliseconds
	CpuDuration uint32 `protobuf:"varint,2,opt,name=cpu_duration,json=cpuDuration,proto3" json:"cpu_duration,omitempty"`
}

func (x *IsisTimingsType) Reset() {
	*x = IsisTimingsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTimingsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTimingsType) ProtoMessage() {}

func (x *IsisTimingsType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTimingsType.ProtoReflect.Descriptor instead.
func (*IsisTimingsType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{9}
}

func (x *IsisTimingsType) GetRealDuration() uint32 {
	if x != nil {
		return x.RealDuration
	}
	return 0
}

func (x *IsisTimingsType) GetCpuDuration() uint32 {
	if x != nil {
		return x.CpuDuration
	}
	return 0
}

// Per-priority timings
type IsisPerPriorityTimings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Critical priority
	Critical *IsisTimingsType `protobuf:"bytes,1,opt,name=critical,proto3" json:"critical,omitempty"`
	// High priority
	High *IsisTimingsType `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
	// Medium priority
	Medium *IsisTimingsType `protobuf:"bytes,3,opt,name=medium,proto3" json:"medium,omitempty"`
	// Low priority
	Low *IsisTimingsType `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *IsisPerPriorityTimings) Reset() {
	*x = IsisPerPriorityTimings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisPerPriorityTimings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisPerPriorityTimings) ProtoMessage() {}

func (x *IsisPerPriorityTimings) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisPerPriorityTimings.ProtoReflect.Descriptor instead.
func (*IsisPerPriorityTimings) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{10}
}

func (x *IsisPerPriorityTimings) GetCritical() *IsisTimingsType {
	if x != nil {
		return x.Critical
	}
	return nil
}

func (x *IsisPerPriorityTimings) GetHigh() *IsisTimingsType {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *IsisPerPriorityTimings) GetMedium() *IsisTimingsType {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *IsisPerPriorityTimings) GetLow() *IsisTimingsType {
	if x != nil {
		return x.Low
	}
	return nil
}

// Timestamp for an event
type IsisShTimestampType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds,proto3" json:"nano_seconds,omitempty"`
}

func (x *IsisShTimestampType) Reset() {
	*x = IsisShTimestampType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTimestampType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTimestampType) ProtoMessage() {}

func (x *IsisShTimestampType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTimestampType.ProtoReflect.Descriptor instead.
func (*IsisShTimestampType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{11}
}

func (x *IsisShTimestampType) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *IsisShTimestampType) GetNanoSeconds() uint32 {
	if x != nil {
		return x.NanoSeconds
	}
	return 0
}

// Generic portion of a log entry
type IsisShGenericLogEnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in UTC relative to Jan 1st, 1970
	Timestamp *IsisShTimestampType `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *IsisShGenericLogEnt) Reset() {
	*x = IsisShGenericLogEnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShGenericLogEnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShGenericLogEnt) ProtoMessage() {}

func (x *IsisShGenericLogEnt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShGenericLogEnt.ProtoReflect.Descriptor instead.
func (*IsisShGenericLogEnt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{12}
}

func (x *IsisShGenericLogEnt) GetTimestamp() *IsisShTimestampType {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// The reasons for running a calculation
type IsisShSpfLogTriggers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Triggers applying to this log entry
	Triggers []string `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// Number of unique triggers on this run
	UniqueTriggerCount uint32 `protobuf:"varint,2,opt,name=unique_trigger_count,json=uniqueTriggerCount,proto3" json:"unique_trigger_count,omitempty"`
	// ID of the first LSP to trigger the calculation, if any
	FirstTriggerLspId *IsisLspIdType `protobuf:"bytes,3,opt,name=first_trigger_lsp_id,json=firstTriggerLspId,proto3" json:"first_trigger_lsp_id,omitempty"`
	// ID of a changed link in the first trigger LSP, if any
	TriggerLink *IsisNodeIdType `protobuf:"bytes,4,opt,name=trigger_link,json=triggerLink,proto3" json:"trigger_link,omitempty"`
	// ID of a changed prefix in the first trigger LSP, if any
	TriggerPrefix *IsisIpPrefixType `protobuf:"bytes,5,opt,name=trigger_prefix,json=triggerPrefix,proto3" json:"trigger_prefix,omitempty"`
	// ID of a changed next hop, if any
	TriggerNextHopId *IsisSystemIdType `protobuf:"bytes,6,opt,name=trigger_next_hop_id,json=triggerNextHopId,proto3" json:"trigger_next_hop_id,omitempty"`
	// Is this SR micro loop calculation?
	IsSrUloopCalculation bool `protobuf:"varint,7,opt,name=is_sr_uloop_calculation,json=isSrUloopCalculation,proto3" json:"is_sr_uloop_calculation,omitempty"`
	// Is this SR micro loop calculation for link down?
	IsSrUloopLinkDown bool `protobuf:"varint,8,opt,name=is_sr_uloop_link_down,json=isSrUloopLinkDown,proto3" json:"is_sr_uloop_link_down,omitempty"`
}

func (x *IsisShSpfLogTriggers) Reset() {
	*x = IsisShSpfLogTriggers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogTriggers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogTriggers) ProtoMessage() {}

func (x *IsisShSpfLogTriggers) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogTriggers.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogTriggers) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{13}
}

func (x *IsisShSpfLogTriggers) GetTriggers() []string {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *IsisShSpfLogTriggers) GetUniqueTriggerCount() uint32 {
	if x != nil {
		return x.UniqueTriggerCount
	}
	return 0
}

func (x *IsisShSpfLogTriggers) GetFirstTriggerLspId() *IsisLspIdType {
	if x != nil {
		return x.FirstTriggerLspId
	}
	return nil
}

func (x *IsisShSpfLogTriggers) GetTriggerLink() *IsisNodeIdType {
	if x != nil {
		return x.TriggerLink
	}
	return nil
}

func (x *IsisShSpfLogTriggers) GetTriggerPrefix() *IsisIpPrefixType {
	if x != nil {
		return x.TriggerPrefix
	}
	return nil
}

func (x *IsisShSpfLogTriggers) GetTriggerNextHopId() *IsisSystemIdType {
	if x != nil {
		return x.TriggerNextHopId
	}
	return nil
}

func (x *IsisShSpfLogTriggers) GetIsSrUloopCalculation() bool {
	if x != nil {
		return x.IsSrUloopCalculation
	}
	return false
}

func (x *IsisShSpfLogTriggers) GetIsSrUloopLinkDown() bool {
	if x != nil {
		return x.IsSrUloopLinkDown
	}
	return false
}

// Node counts for the SPT calculation phase
type IsisShSpfLogSptCalcNodeCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of unreachable nodes in the database
	Unreachable uint32 `protobuf:"varint,1,opt,name=unreachable,proto3" json:"unreachable,omitempty"`
	// Number of reachable nodes in the database
	Reachable uint32 `protobuf:"varint,2,opt,name=reachable,proto3" json:"reachable,omitempty"`
	// Number of nodes added to the SPT
	Added uint32 `protobuf:"varint,3,opt,name=added,proto3" json:"added,omitempty"`
	// Number of nodes deleted from the SPT
	Deleted uint32 `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Number of modified nodes (first hop and/or metric change)
	Modified uint32 `protobuf:"varint,5,opt,name=modified,proto3" json:"modified,omitempty"`
	// Number of nodes touched whilst calculating the SPT
	Touched uint32 `protobuf:"varint,6,opt,name=touched,proto3" json:"touched,omitempty"`
}

func (x *IsisShSpfLogSptCalcNodeCounts) Reset() {
	*x = IsisShSpfLogSptCalcNodeCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogSptCalcNodeCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogSptCalcNodeCounts) ProtoMessage() {}

func (x *IsisShSpfLogSptCalcNodeCounts) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogSptCalcNodeCounts.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogSptCalcNodeCounts) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{14}
}

func (x *IsisShSpfLogSptCalcNodeCounts) GetUnreachable() uint32 {
	if x != nil {
		return x.Unreachable
	}
	return 0
}

func (x *IsisShSpfLogSptCalcNodeCounts) GetReachable() uint32 {
	if x != nil {
		return x.Reachable
	}
	return 0
}

func (x *IsisShSpfLogSptCalcNodeCounts) GetAdded() uint32 {
	if x != nil {
		return x.Added
	}
	return 0
}

func (x *IsisShSpfLogSptCalcNodeCounts) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *IsisShSpfLogSptCalcNodeCounts) GetModified() uint32 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *IsisShSpfLogSptCalcNodeCounts) GetTouched() uint32 {
	if x != nil {
		return x.Touched
	}
	return 0
}

// Statistics for the SPT calculation phase
type IsisShSpfLogSptCalc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of the SPT calculation
	Duration *IsisTimingsType `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// Node counts
	NodeCounts *IsisShSpfLogSptCalcNodeCounts `protobuf:"bytes,2,opt,name=node_counts,json=nodeCounts,proto3" json:"node_counts,omitempty"`
}

func (x *IsisShSpfLogSptCalc) Reset() {
	*x = IsisShSpfLogSptCalc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogSptCalc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogSptCalc) ProtoMessage() {}

func (x *IsisShSpfLogSptCalc) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogSptCalc.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogSptCalc) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{15}
}

func (x *IsisShSpfLogSptCalc) GetDuration() *IsisTimingsType {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *IsisShSpfLogSptCalc) GetNodeCounts() *IsisShSpfLogSptCalcNodeCounts {
	if x != nil {
		return x.NodeCounts
	}
	return nil
}

// Node counts for the route update phase
type IsisShSpfLogRouteUpdateNodeCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per-priority count of nodes considered during route update
	PerPriorityTouched *IsisPerPriorityCounts `protobuf:"bytes,1,opt,name=per_priority_touched,json=perPriorityTouched,proto3" json:"per_priority_touched,omitempty"`
	// Total number of nodes considered during route update
	TotalTouched uint32 `protobuf:"varint,2,opt,name=total_touched,json=totalTouched,proto3" json:"total_touched,omitempty"`
}

func (x *IsisShSpfLogRouteUpdateNodeCounts) Reset() {
	*x = IsisShSpfLogRouteUpdateNodeCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogRouteUpdateNodeCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogRouteUpdateNodeCounts) ProtoMessage() {}

func (x *IsisShSpfLogRouteUpdateNodeCounts) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogRouteUpdateNodeCounts.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogRouteUpdateNodeCounts) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{16}
}

func (x *IsisShSpfLogRouteUpdateNodeCounts) GetPerPriorityTouched() *IsisPerPriorityCounts {
	if x != nil {
		return x.PerPriorityTouched
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdateNodeCounts) GetTotalTouched() uint32 {
	if x != nil {
		return x.TotalTouched
	}
	return 0
}

// Prefix item counts for the route update phase
type IsisShSpfLogRouteUpdatePrefixCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of unreachable prefixes in the database
	Unreachable *IsisPerPriorityCounts `protobuf:"bytes,1,opt,name=unreachable,proto3" json:"unreachable,omitempty"`
	// Number of reachable prefixes in the database
	Reachable *IsisPerPriorityCounts `protobuf:"bytes,2,opt,name=reachable,proto3" json:"reachable,omitempty"`
	// Number of prefixes added during calculation
	Added *IsisPerPriorityCounts `protobuf:"bytes,3,opt,name=added,proto3" json:"added,omitempty"`
	// Number of prefixes deleted during calculation
	Deleted *IsisPerPriorityCounts `protobuf:"bytes,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Number of prefixes modified, i.e. a first hop and/or metric change
	Modified *IsisPerPriorityCounts `protobuf:"bytes,5,opt,name=modified,proto3" json:"modified,omitempty"`
	// Number of prefixes considered whilst updating the routing table
	Touched *IsisPerPriorityCounts `protobuf:"bytes,6,opt,name=touched,proto3" json:"touched,omitempty"`
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) Reset() {
	*x = IsisShSpfLogRouteUpdatePrefixCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogRouteUpdatePrefixCounts) ProtoMessage() {}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogRouteUpdatePrefixCounts.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogRouteUpdatePrefixCounts) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{17}
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) GetUnreachable() *IsisPerPriorityCounts {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) GetReachable() *IsisPerPriorityCounts {
	if x != nil {
		return x.Reachable
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) GetAdded() *IsisPerPriorityCounts {
	if x != nil {
		return x.Added
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) GetDeleted() *IsisPerPriorityCounts {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) GetModified() *IsisPerPriorityCounts {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdatePrefixCounts) GetTouched() *IsisPerPriorityCounts {
	if x != nil {
		return x.Touched
	}
	return nil
}

// Breakdown of the time taken to perform the route update
type IsisShSpfLogRouteUpdateTimingsBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time to update IS-IS's local RIB
	LocalRibUpdate *IsisPerPriorityTimings `protobuf:"bytes,1,opt,name=local_rib_update,json=localRibUpdate,proto3" json:"local_rib_update,omitempty"`
	// Time to build the update to send to the global RIB
	GlobalRibBuild *IsisPerPriorityTimings `protobuf:"bytes,2,opt,name=global_rib_build,json=globalRibBuild,proto3" json:"global_rib_build,omitempty"`
	// Time to send the update to the global RIB
	GlobalRibSend *IsisPerPriorityTimings `protobuf:"bytes,3,opt,name=global_rib_send,json=globalRibSend,proto3" json:"global_rib_send,omitempty"`
}

func (x *IsisShSpfLogRouteUpdateTimingsBreakdown) Reset() {
	*x = IsisShSpfLogRouteUpdateTimingsBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogRouteUpdateTimingsBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogRouteUpdateTimingsBreakdown) ProtoMessage() {}

func (x *IsisShSpfLogRouteUpdateTimingsBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogRouteUpdateTimingsBreakdown.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogRouteUpdateTimingsBreakdown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{18}
}

func (x *IsisShSpfLogRouteUpdateTimingsBreakdown) GetLocalRibUpdate() *IsisPerPriorityTimings {
	if x != nil {
		return x.LocalRibUpdate
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdateTimingsBreakdown) GetGlobalRibBuild() *IsisPerPriorityTimings {
	if x != nil {
		return x.GlobalRibBuild
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdateTimingsBreakdown) GetGlobalRibSend() *IsisPerPriorityTimings {
	if x != nil {
		return x.GlobalRibSend
	}
	return nil
}

// Statistics for the route update phase of the calculation
type IsisShSpfLogRouteUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of the routing table update
	Duration *IsisTimingsType `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// Breakdown of the time taken by the routing table update
	DurationBreakdown *IsisShSpfLogRouteUpdateTimingsBreakdown `protobuf:"bytes,2,opt,name=duration_breakdown,json=durationBreakdown,proto3" json:"duration_breakdown,omitempty"`
	// Node counts
	NodeCounts *IsisShSpfLogRouteUpdateNodeCounts `protobuf:"bytes,3,opt,name=node_counts,json=nodeCounts,proto3" json:"node_counts,omitempty"`
	// Prefix item counts
	ItemCounts *IsisShSpfLogRouteUpdatePrefixCounts `protobuf:"bytes,4,opt,name=item_counts,json=itemCounts,proto3" json:"item_counts,omitempty"`
	// Distinct prefix counts
	RouteCounts *IsisShSpfLogRouteUpdatePrefixCounts `protobuf:"bytes,5,opt,name=route_counts,json=routeCounts,proto3" json:"route_counts,omitempty"`
	// Number of RIB batches sent
	RibBatchCounts *IsisPerPriorityCounts `protobuf:"bytes,6,opt,name=rib_batch_counts,json=ribBatchCounts,proto3" json:"rib_batch_counts,omitempty"`
}

func (x *IsisShSpfLogRouteUpdate) Reset() {
	*x = IsisShSpfLogRouteUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogRouteUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogRouteUpdate) ProtoMessage() {}

func (x *IsisShSpfLogRouteUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogRouteUpdate.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogRouteUpdate) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{19}
}

func (x *IsisShSpfLogRouteUpdate) GetDuration() *IsisTimingsType {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdate) GetDurationBreakdown() *IsisShSpfLogRouteUpdateTimingsBreakdown {
	if x != nil {
		return x.DurationBreakdown
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdate) GetNodeCounts() *IsisShSpfLogRouteUpdateNodeCounts {
	if x != nil {
		return x.NodeCounts
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdate) GetItemCounts() *IsisShSpfLogRouteUpdatePrefixCounts {
	if x != nil {
		return x.ItemCounts
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdate) GetRouteCounts() *IsisShSpfLogRouteUpdatePrefixCounts {
	if x != nil {
		return x.RouteCounts
	}
	return nil
}

func (x *IsisShSpfLogRouteUpdate) GetRibBatchCounts() *IsisPerPriorityCounts {
	if x != nil {
		return x.RibBatchCounts
	}
	return nil
}

// IS-IS route calculation log entry
type IsisShSpfLogEnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generic entry data.
	GenericData *IsisShGenericLogEnt `protobuf:"bytes,1,opt,name=generic_data,json=genericData,proto3" json:"generic_data,omitempty"`
	// Type of calculation.
	Class string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	// Trigger information
	Triggers *IsisShSpfLogTriggers `protobuf:"bytes,3,opt,name=triggers,proto3" json:"triggers,omitempty"`
	// Statistics for the SPT calculation phase
	SptCalculationStatistics *IsisShSpfLogSptCalc `protobuf:"bytes,4,opt,name=spt_calculation_statistics,json=sptCalculationStatistics,proto3" json:"spt_calculation_statistics,omitempty"`
	// Statistics for the route update phase
	RouteUpdateStatistics *IsisShSpfLogRouteUpdate `protobuf:"bytes,5,opt,name=route_update_statistics,json=routeUpdateStatistics,proto3" json:"route_update_statistics,omitempty"`
	// Time between the first trigger and the start of the route calculation, in milliseconds.
	WaitEnforced uint32 `protobuf:"varint,6,opt,name=wait_enforced,json=waitEnforced,proto3" json:"wait_enforced,omitempty"`
	// Minimum time from end of this route calculation until the start of the next, in milliseconds
	NextWaitInterval uint32 `protobuf:"varint,7,opt,name=next_wait_interval,json=nextWaitInterval,proto3" json:"next_wait_interval,omitempty"`
	// Number of LSPs which arrived during the route calculation
	UpdatedLspCount uint32 `protobuf:"varint,8,opt,name=updated_lsp_count,json=updatedLspCount,proto3" json:"updated_lsp_count,omitempty"`
}

func (x *IsisShSpfLogEnt) Reset() {
	*x = IsisShSpfLogEnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShSpfLogEnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShSpfLogEnt) ProtoMessage() {}

func (x *IsisShSpfLogEnt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShSpfLogEnt.ProtoReflect.Descriptor instead.
func (*IsisShSpfLogEnt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP(), []int{20}
}

func (x *IsisShSpfLogEnt) GetGenericData() *IsisShGenericLogEnt {
	if x != nil {
		return x.GenericData
	}
	return nil
}

func (x *IsisShSpfLogEnt) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *IsisShSpfLogEnt) GetTriggers() *IsisShSpfLogTriggers {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *IsisShSpfLogEnt) GetSptCalculationStatistics() *IsisShSpfLogSptCalc {
	if x != nil {
		return x.SptCalculationStatistics
	}
	return nil
}

func (x *IsisShSpfLogEnt) GetRouteUpdateStatistics() *IsisShSpfLogRouteUpdate {
	if x != nil {
		return x.RouteUpdateStatistics
	}
	return nil
}

func (x *IsisShSpfLogEnt) GetWaitEnforced() uint32 {
	if x != nil {
		return x.WaitEnforced
	}
	return 0
}

func (x *IsisShSpfLogEnt) GetNextWaitInterval() uint32 {
	if x != nil {
		return x.NextWaitInterval
	}
	return 0
}

func (x *IsisShSpfLogEnt) GetUpdatedLspCount() uint32 {
	if x != nil {
		return x.UpdatedLspCount
	}
	return 0
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDesc = []byte{
	0x0a, 0x8a, 0x01, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69,
	0x73, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f,
	0x67, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x22, 0xb0, 0x01,
	0x0a, 0x1a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0xbb, 0x01, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x12, 0xa1, 0x01, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x83,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x2b,
	0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x54, 0x0a, 0x15,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34,
	0x12, 0x9a, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x22, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x74, 0x0a, 0x18, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x22, 0x5b, 0x0a,
	0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x70, 0x75, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x05, 0x0a, 0x19, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x96, 0x01, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70,
	0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x94, 0x01, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x22, 0x55, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xc1, 0x01,
	0x0a, 0x17, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x92, 0x07, 0x0a, 0x18, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70,
	0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xb2, 0x01, 0x0a,
	0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x73, 0x70, 0x49,
	0x64, 0x12, 0xa5, 0x01, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0xab, 0x01, 0x0a, 0x0e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xb3, 0x01, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x83, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x73, 0x72, 0x5f, 0x75, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x53, 0x72, 0x55, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x73, 0x72, 0x5f, 0x75, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x72, 0x55, 0x6c, 0x6f, 0x6f, 0x70, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x24, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x70, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x64, 0x22, 0xf4, 0x02, 0x0a, 0x18, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x70, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x63, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xb6, 0x01, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x70, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x8d, 0x02, 0x0a,
	0x28, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x14, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x12, 0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x22, 0x9a, 0x08, 0x0a,
	0x2a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x0b,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f,
	0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70,
	0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x05,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0xa3, 0x01, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0xa3, 0x01, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x07, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x22, 0xd3, 0x04, 0x0a, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0xb4, 0x01, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x62, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x69, 0x62, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73,
	0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x22,
	0x83, 0x09, 0x0a, 0x1c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x9e, 0x01, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70,
	0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xce, 0x01, 0x0a, 0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9e,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x11, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0xbc, 0x01, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9a, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xbe,
	0x01, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x9a, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0xb3, 0x01, 0x0a, 0x10, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x72, 0x69, 0x62, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x92, 0x07, 0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73,
	0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0xa5, 0x01, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x88, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73,
	0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73,
	0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52,
	0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x1a, 0x73, 0x70,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x88,
	0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x70, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x52, 0x18, 0x73, 0x70, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x8c, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x73, 0x70, 0x66, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x57, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_goTypes = []interface{}{
	(*IsisShSpfLogStruc_KEYS)(nil),                  // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_struc_KEYS
	(*IsisShSpfLogStruc)(nil),                       // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_struc
	(*IsisSystemIdType)(nil),                        // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_system_id_type
	(*IsisNodeIdType)(nil),                          // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_node_id_type
	(*IsisIpv4PrefixType)(nil),                      // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ipv4_prefix_type
	(*IsisIpv6PrefixType)(nil),                      // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ipv6_prefix_type
	(*IsisIpPrefixType)(nil),                        // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ip_prefix_type
	(*IsisLspIdType)(nil),                           // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_lsp_id_type
	(*IsisPerPriorityCounts)(nil),                   // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	(*IsisTimingsType)(nil),                         // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type
	(*IsisPerPriorityTimings)(nil),                  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings
	(*IsisShTimestampType)(nil),                     // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_timestamp_type
	(*IsisShGenericLogEnt)(nil),                     // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_generic_log_ent
	(*IsisShSpfLogTriggers)(nil),                    // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_triggers
	(*IsisShSpfLogSptCalcNodeCounts)(nil),           // 14: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc_node_counts
	(*IsisShSpfLogSptCalc)(nil),                     // 15: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc
	(*IsisShSpfLogRouteUpdateNodeCounts)(nil),       // 16: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_node_counts
	(*IsisShSpfLogRouteUpdatePrefixCounts)(nil),     // 17: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts
	(*IsisShSpfLogRouteUpdateTimingsBreakdown)(nil), // 18: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_timings_breakdown
	(*IsisShSpfLogRouteUpdate)(nil),                 // 19: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update
	(*IsisShSpfLogEnt)(nil),                         // 20: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_ent
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_depIdxs = []int32{
	20, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_struc.log_entry:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_ent
	4,  // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ip_prefix_type.ipv4:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ipv4_prefix_type
	5,  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ip_prefix_type.ipv6:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ipv6_prefix_type
	9,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings.critical:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type
	9,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings.high:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type
	9,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings.medium:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type
	9,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings.low:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type
	11, // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_generic_log_ent.timestamp:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_timestamp_type
	7,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_triggers.first_trigger_lsp_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_lsp_id_type
	3,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_triggers.trigger_link:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_node_id_type
	6,  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_triggers.trigger_prefix:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_ip_prefix_type
	2,  // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_triggers.trigger_next_hop_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_system_id_type
	9,  // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc.duration:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type
	14, // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc.node_counts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc_node_counts
	8,  // 14: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_node_counts.per_priority_touched:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	8,  // 15: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts.unreachable:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	8,  // 16: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts.reachable:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	8,  // 17: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts.added:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	8,  // 18: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts.deleted:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	8,  // 19: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts.modified:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	8,  // 20: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts.touched:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	10, // 21: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_timings_breakdown.local_rib_update:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings
	10, // 22: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_timings_breakdown.global_rib_build:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings
	10, // 23: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_timings_breakdown.global_rib_send:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_timings
	9,  // 24: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update.duration:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_timings_type
	18, // 25: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update.duration_breakdown:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_timings_breakdown
	16, // 26: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update.node_counts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_node_counts
	17, // 27: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update.item_counts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts
	17, // 28: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update.route_counts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update_prefix_counts
	8,  // 29: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update.rib_batch_counts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_per_priority_counts
	12, // 30: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_ent.generic_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_generic_log_ent
	13, // 31: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_ent.triggers:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_triggers
	15, // 32: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_ent.spt_calculation_statistics:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_spt_calc
	19, // 33: cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_ent.route_update_statistics:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.spf_log.isis_sh_spf_log_route_update
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogStruc_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogStruc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisSystemIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisNodeIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv4PrefixType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv6PrefixType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpPrefixType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisPerPriorityCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTimingsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisPerPriorityTimings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTimestampType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShGenericLogEnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogTriggers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogSptCalcNodeCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogSptCalc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogRouteUpdateNodeCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogRouteUpdatePrefixCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogRouteUpdateTimingsBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogRouteUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShSpfLogEnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_topology_levels_topology_level_spf_log_isis_sh_spf_log_struc_proto_depIdxs = nil
}
