// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/statistics_global/isis_sh_traffic_global.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IS-IS process traffic data
type IsisShTrafficGlobal_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *IsisShTrafficGlobal_KEYS) Reset() {
	*x = IsisShTrafficGlobal_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTrafficGlobal_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTrafficGlobal_KEYS) ProtoMessage() {}

func (x *IsisShTrafficGlobal_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTrafficGlobal_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShTrafficGlobal_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShTrafficGlobal_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type IsisShTrafficGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statistics
	Statistics *IsisTrafficGlobalType `protobuf:"bytes,50,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// Per-area data
	PerAreaData []*IsisShTrafficArea `protobuf:"bytes,51,rep,name=per_area_data,json=perAreaData,proto3" json:"per_area_data,omitempty"`
}

func (x *IsisShTrafficGlobal) Reset() {
	*x = IsisShTrafficGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTrafficGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTrafficGlobal) ProtoMessage() {}

func (x *IsisShTrafficGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTrafficGlobal.ProtoReflect.Descriptor instead.
func (*IsisShTrafficGlobal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShTrafficGlobal) GetStatistics() *IsisTrafficGlobalType {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *IsisShTrafficGlobal) GetPerAreaData() []*IsisShTrafficArea {
	if x != nil {
		return x.PerAreaData
	}
	return nil
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *IsisTopoIdType) Reset() {
	*x = IsisTopoIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTopoIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTopoIdType) ProtoMessage() {}

func (x *IsisTopoIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTopoIdType.ProtoReflect.Descriptor instead.
func (*IsisTopoIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{2}
}

func (x *IsisTopoIdType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisTopoIdType) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisTopoIdType) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *IsisTopoIdType) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

// Timestamp for an event
type IsisShTimestampType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds,proto3" json:"nano_seconds,omitempty"`
}

func (x *IsisShTimestampType) Reset() {
	*x = IsisShTimestampType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTimestampType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTimestampType) ProtoMessage() {}

func (x *IsisShTimestampType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTimestampType.ProtoReflect.Descriptor instead.
func (*IsisShTimestampType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{3}
}

func (x *IsisShTimestampType) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *IsisShTimestampType) GetNanoSeconds() uint32 {
	if x != nil {
		return x.NanoSeconds
	}
	return 0
}

// Per-area, per-topology traffic statistics
type IsisAreaTopoStatsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of full SPF calculations run
	SpfRunCount uint32 `protobuf:"varint,1,opt,name=spf_run_count,json=spfRunCount,proto3" json:"spf_run_count,omitempty"`
	// Number of ISPF calculations run
	IspfRunCount uint32 `protobuf:"varint,2,opt,name=ispf_run_count,json=ispfRunCount,proto3" json:"ispf_run_count,omitempty"`
	// Number of Next Hop Calculations run
	NhcRunCount uint32 `protobuf:"varint,3,opt,name=nhc_run_count,json=nhcRunCount,proto3" json:"nhc_run_count,omitempty"`
	// Number of PRCs run
	PrcRunCount uint32 `protobuf:"varint,4,opt,name=prc_run_count,json=prcRunCount,proto3" json:"prc_run_count,omitempty"`
	// Number of periodic SPF calculations run
	PeriodicRunCount uint32 `protobuf:"varint,5,opt,name=periodic_run_count,json=periodicRunCount,proto3" json:"periodic_run_count,omitempty"`
}

func (x *IsisAreaTopoStatsType) Reset() {
	*x = IsisAreaTopoStatsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisAreaTopoStatsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisAreaTopoStatsType) ProtoMessage() {}

func (x *IsisAreaTopoStatsType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisAreaTopoStatsType.ProtoReflect.Descriptor instead.
func (*IsisAreaTopoStatsType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{4}
}

func (x *IsisAreaTopoStatsType) GetSpfRunCount() uint32 {
	if x != nil {
		return x.SpfRunCount
	}
	return 0
}

func (x *IsisAreaTopoStatsType) GetIspfRunCount() uint32 {
	if x != nil {
		return x.IspfRunCount
	}
	return 0
}

func (x *IsisAreaTopoStatsType) GetNhcRunCount() uint32 {
	if x != nil {
		return x.NhcRunCount
	}
	return 0
}

func (x *IsisAreaTopoStatsType) GetPrcRunCount() uint32 {
	if x != nil {
		return x.PrcRunCount
	}
	return 0
}

func (x *IsisAreaTopoStatsType) GetPeriodicRunCount() uint32 {
	if x != nil {
		return x.PeriodicRunCount
	}
	return 0
}

// Per-area, per-topology traffic data
type IsisShTrafficAreaTopo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topology ID
	Id *IsisTopoIdType `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Statistics
	Statistics *IsisAreaTopoStatsType `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *IsisShTrafficAreaTopo) Reset() {
	*x = IsisShTrafficAreaTopo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTrafficAreaTopo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTrafficAreaTopo) ProtoMessage() {}

func (x *IsisShTrafficAreaTopo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTrafficAreaTopo.ProtoReflect.Descriptor instead.
func (*IsisShTrafficAreaTopo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{5}
}

func (x *IsisShTrafficAreaTopo) GetId() *IsisTopoIdType {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IsisShTrafficAreaTopo) GetStatistics() *IsisAreaTopoStatsType {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Per-area traffic statistics
type IsisAreaStatsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of times system LSP rebuilt
	SystemLspBuildCount uint32 `protobuf:"varint,1,opt,name=system_lsp_build_count,json=systemLspBuildCount,proto3" json:"system_lsp_build_count,omitempty"`
	// Number of times system LSP refreshed
	SystemLspRefreshCount uint32 `protobuf:"varint,2,opt,name=system_lsp_refresh_count,json=systemLspRefreshCount,proto3" json:"system_lsp_refresh_count,omitempty"`
}

func (x *IsisAreaStatsType) Reset() {
	*x = IsisAreaStatsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisAreaStatsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisAreaStatsType) ProtoMessage() {}

func (x *IsisAreaStatsType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisAreaStatsType.ProtoReflect.Descriptor instead.
func (*IsisAreaStatsType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{6}
}

func (x *IsisAreaStatsType) GetSystemLspBuildCount() uint32 {
	if x != nil {
		return x.SystemLspBuildCount
	}
	return 0
}

func (x *IsisAreaStatsType) GetSystemLspRefreshCount() uint32 {
	if x != nil {
		return x.SystemLspRefreshCount
	}
	return 0
}

// Per-area traffic data
type IsisShTrafficArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level this data applies to
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// Statistics
	Statistics *IsisAreaStatsType `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// Per-topoogy statistics
	PerTopologyData []*IsisShTrafficAreaTopo `protobuf:"bytes,3,rep,name=per_topology_data,json=perTopologyData,proto3" json:"per_topology_data,omitempty"`
}

func (x *IsisShTrafficArea) Reset() {
	*x = IsisShTrafficArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTrafficArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTrafficArea) ProtoMessage() {}

func (x *IsisShTrafficArea) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTrafficArea.ProtoReflect.Descriptor instead.
func (*IsisShTrafficArea) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{7}
}

func (x *IsisShTrafficArea) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShTrafficArea) GetStatistics() *IsisAreaStatsType {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *IsisShTrafficArea) GetPerTopologyData() []*IsisShTrafficAreaTopo {
	if x != nil {
		return x.PerTopologyData
	}
	return nil
}

// IS-IS process traffic statistics
type IsisTrafficGlobalType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fast-PSNP cache lookups
	FastPsnpLookupCount uint32 `protobuf:"varint,1,opt,name=fast_psnp_lookup_count,json=fastPsnpLookupCount,proto3" json:"fast_psnp_lookup_count,omitempty"`
	// Fast-PSNP cache hits
	FastPsnpLookupHitCount uint32 `protobuf:"varint,2,opt,name=fast_psnp_lookup_hit_count,json=fastPsnpLookupHitCount,proto3" json:"fast_psnp_lookup_hit_count,omitempty"`
	// Fast-CSNP cache lookups
	FastCsnpLookupCount uint32 `protobuf:"varint,3,opt,name=fast_csnp_lookup_count,json=fastCsnpLookupCount,proto3" json:"fast_csnp_lookup_count,omitempty"`
	// Fast-CSNP cache hits
	FastCsnpLookupHitCount uint32 `protobuf:"varint,4,opt,name=fast_csnp_lookup_hit_count,json=fastCsnpLookupHitCount,proto3" json:"fast_csnp_lookup_hit_count,omitempty"`
	// Fast-CSNP cache updates
	FastCsnpCacheUpdateCount uint32 `protobuf:"varint,5,opt,name=fast_csnp_cache_update_count,json=fastCsnpCacheUpdateCount,proto3" json:"fast_csnp_cache_update_count,omitempty"`
	// LSPs received with holdtime 0
	ZeroHoldtimeLspCount uint32 `protobuf:"varint,6,opt,name=zero_holdtime_lsp_count,json=zeroHoldtimeLspCount,proto3" json:"zero_holdtime_lsp_count,omitempty"`
	// LSPs received with invalid checksum
	InvalidChecksumLspCount uint32 `protobuf:"varint,7,opt,name=invalid_checksum_lsp_count,json=invalidChecksumLspCount,proto3" json:"invalid_checksum_lsp_count,omitempty"`
	// IIHs dropped - Not Used
	IihDroppedCount uint32 `protobuf:"varint,8,opt,name=iih_dropped_count,json=iihDroppedCount,proto3" json:"iih_dropped_count,omitempty"`
	// LSPs dropped
	LspDroppedCount uint32 `protobuf:"varint,9,opt,name=lsp_dropped_count,json=lspDroppedCount,proto3" json:"lsp_dropped_count,omitempty"`
	// SNPs dropped
	SnpDroppedCount uint32 `protobuf:"varint,10,opt,name=snp_dropped_count,json=snpDroppedCount,proto3" json:"snp_dropped_count,omitempty"`
	// Maximum IIH queue length - Not Used
	MaximumIihQueueLength uint32 `protobuf:"varint,11,opt,name=maximum_iih_queue_length,json=maximumIihQueueLength,proto3" json:"maximum_iih_queue_length,omitempty"`
	// Maximum update PDU queue length
	MaximumPduQueueLength uint32 `protobuf:"varint,12,opt,name=maximum_pdu_queue_length,json=maximumPduQueueLength,proto3" json:"maximum_pdu_queue_length,omitempty"`
	// Average hello process time
	AvgHelloProcessTime *IsisShTimestampType `protobuf:"bytes,13,opt,name=avg_hello_process_time,json=avgHelloProcessTime,proto3" json:"avg_hello_process_time,omitempty"`
	// Average hello receive rate in packets per second
	AvgHelloRecvRate uint32 `protobuf:"varint,14,opt,name=avg_hello_recv_rate,json=avgHelloRecvRate,proto3" json:"avg_hello_recv_rate,omitempty"`
	// Average CSNP process time
	AvgCsnpProcessTime *IsisShTimestampType `protobuf:"bytes,15,opt,name=avg_csnp_process_time,json=avgCsnpProcessTime,proto3" json:"avg_csnp_process_time,omitempty"`
	// Average csnp receive rate in packets per second
	AvgCsnpRecvRate uint32 `protobuf:"varint,16,opt,name=avg_csnp_recv_rate,json=avgCsnpRecvRate,proto3" json:"avg_csnp_recv_rate,omitempty"`
	// Average PSNP process time
	AvgPsnpProcessTime *IsisShTimestampType `protobuf:"bytes,17,opt,name=avg_psnp_process_time,json=avgPsnpProcessTime,proto3" json:"avg_psnp_process_time,omitempty"`
	// Average psnp receive rate in packets per second
	AvgPsnpRecvRate uint32 `protobuf:"varint,18,opt,name=avg_psnp_recv_rate,json=avgPsnpRecvRate,proto3" json:"avg_psnp_recv_rate,omitempty"`
	// Average LSP process time
	AvgLspProcessTime *IsisShTimestampType `protobuf:"bytes,19,opt,name=avg_lsp_process_time,json=avgLspProcessTime,proto3" json:"avg_lsp_process_time,omitempty"`
	// Average LSP receive rate in packets per second
	AvgLspRecvRate uint32 `protobuf:"varint,20,opt,name=avg_lsp_recv_rate,json=avgLspRecvRate,proto3" json:"avg_lsp_recv_rate,omitempty"`
	// Average hello transmit time
	AvgHelloTransmitTime *IsisShTimestampType `protobuf:"bytes,21,opt,name=avg_hello_transmit_time,json=avgHelloTransmitTime,proto3" json:"avg_hello_transmit_time,omitempty"`
	// Average hello send rate in packets per second
	AvgHelloSendRate uint32 `protobuf:"varint,22,opt,name=avg_hello_send_rate,json=avgHelloSendRate,proto3" json:"avg_hello_send_rate,omitempty"`
	// Average CSNP transmit time
	AvgCsnpTransmitTime *IsisShTimestampType `protobuf:"bytes,23,opt,name=avg_csnp_transmit_time,json=avgCsnpTransmitTime,proto3" json:"avg_csnp_transmit_time,omitempty"`
	// Average csnp send rate in packets per second
	AvgCsnpSendRate uint32 `protobuf:"varint,24,opt,name=avg_csnp_send_rate,json=avgCsnpSendRate,proto3" json:"avg_csnp_send_rate,omitempty"`
	// Average PSNP transmit time
	AvgPsnpTransmitTime *IsisShTimestampType `protobuf:"bytes,25,opt,name=avg_psnp_transmit_time,json=avgPsnpTransmitTime,proto3" json:"avg_psnp_transmit_time,omitempty"`
	// Average psnp send rate in packets per second
	AvgPsnpSendRate uint32 `protobuf:"varint,26,opt,name=avg_psnp_send_rate,json=avgPsnpSendRate,proto3" json:"avg_psnp_send_rate,omitempty"`
	// Average LSP transmit time
	AvgLspTransmitTime *IsisShTimestampType `protobuf:"bytes,27,opt,name=avg_lsp_transmit_time,json=avgLspTransmitTime,proto3" json:"avg_lsp_transmit_time,omitempty"`
	// Average LSP send rate in packets per second
	AvgLspSendRate uint32 `protobuf:"varint,28,opt,name=avg_lsp_send_rate,json=avgLspSendRate,proto3" json:"avg_lsp_send_rate,omitempty"`
}

func (x *IsisTrafficGlobalType) Reset() {
	*x = IsisTrafficGlobalType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTrafficGlobalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTrafficGlobalType) ProtoMessage() {}

func (x *IsisTrafficGlobalType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTrafficGlobalType.ProtoReflect.Descriptor instead.
func (*IsisTrafficGlobalType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP(), []int{8}
}

func (x *IsisTrafficGlobalType) GetFastPsnpLookupCount() uint32 {
	if x != nil {
		return x.FastPsnpLookupCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetFastPsnpLookupHitCount() uint32 {
	if x != nil {
		return x.FastPsnpLookupHitCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetFastCsnpLookupCount() uint32 {
	if x != nil {
		return x.FastCsnpLookupCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetFastCsnpLookupHitCount() uint32 {
	if x != nil {
		return x.FastCsnpLookupHitCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetFastCsnpCacheUpdateCount() uint32 {
	if x != nil {
		return x.FastCsnpCacheUpdateCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetZeroHoldtimeLspCount() uint32 {
	if x != nil {
		return x.ZeroHoldtimeLspCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetInvalidChecksumLspCount() uint32 {
	if x != nil {
		return x.InvalidChecksumLspCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetIihDroppedCount() uint32 {
	if x != nil {
		return x.IihDroppedCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetLspDroppedCount() uint32 {
	if x != nil {
		return x.LspDroppedCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetSnpDroppedCount() uint32 {
	if x != nil {
		return x.SnpDroppedCount
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetMaximumIihQueueLength() uint32 {
	if x != nil {
		return x.MaximumIihQueueLength
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetMaximumPduQueueLength() uint32 {
	if x != nil {
		return x.MaximumPduQueueLength
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgHelloProcessTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgHelloProcessTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgHelloRecvRate() uint32 {
	if x != nil {
		return x.AvgHelloRecvRate
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgCsnpProcessTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgCsnpProcessTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgCsnpRecvRate() uint32 {
	if x != nil {
		return x.AvgCsnpRecvRate
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgPsnpProcessTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgPsnpProcessTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgPsnpRecvRate() uint32 {
	if x != nil {
		return x.AvgPsnpRecvRate
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgLspProcessTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgLspProcessTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgLspRecvRate() uint32 {
	if x != nil {
		return x.AvgLspRecvRate
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgHelloTransmitTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgHelloTransmitTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgHelloSendRate() uint32 {
	if x != nil {
		return x.AvgHelloSendRate
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgCsnpTransmitTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgCsnpTransmitTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgCsnpSendRate() uint32 {
	if x != nil {
		return x.AvgCsnpSendRate
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgPsnpTransmitTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgPsnpTransmitTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgPsnpSendRate() uint32 {
	if x != nil {
		return x.AvgPsnpSendRate
	}
	return 0
}

func (x *IsisTrafficGlobalType) GetAvgLspTransmitTime() *IsisShTimestampType {
	if x != nil {
		return x.AvgLspTransmitTime
	}
	return nil
}

func (x *IsisTrafficGlobalType) GetAvgLspSendRate() uint32 {
	if x != nil {
		return x.AvgLspSendRate
	}
	return 0
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDesc = []byte{
	0x0a, 0x62, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x42, 0x0a, 0x1b, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x9a, 0x02, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x7f, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x7f, 0x0a, 0x0d, 0x70,
	0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x33, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a,
	0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xdb, 0x01,
	0x0a, 0x19, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x70, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x70, 0x66, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x70, 0x66, 0x52, 0x75, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x68, 0x63, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x68,
	0x63, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x63,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x70, 0x72, 0x63, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x19,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x12, 0x68, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x73, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x73,
	0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x02,
	0x0a, 0x14, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x7b, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x70, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0xae, 0x11, 0x0a, 0x18, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x73,
	0x6e, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x61, 0x73, 0x74, 0x50, 0x73, 0x6e, 0x70, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x68,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x66, 0x61, 0x73, 0x74, 0x50, 0x73, 0x6e, 0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x73, 0x6e, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x61, 0x73, 0x74, 0x43, 0x73, 0x6e, 0x70,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f,
	0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x66, 0x61, 0x73, 0x74, 0x43, 0x73, 0x6e, 0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x73, 0x6e, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x66,
	0x61, 0x73, 0x74, 0x43, 0x73, 0x6e, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x7a, 0x65, 0x72, 0x6f, 0x5f,
	0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x7a, 0x65, 0x72, 0x6f, 0x48, 0x6f,
	0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x69, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x69, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x73, 0x70, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x73, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6e, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x6e, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x69, 0x68, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x69, 0x68, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x64, 0x75, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x61, 0x76, 0x67, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x13, 0x61, 0x76, 0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x76, 0x67, 0x5f, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76, 0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x73,
	0x6e, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x61, 0x76, 0x67, 0x43, 0x73, 0x6e, 0x70, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x76, 0x67, 0x5f,
	0x63, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x43, 0x73, 0x6e, 0x70, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x73,
	0x6e, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x61, 0x76, 0x67, 0x50, 0x73, 0x6e, 0x70, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x76, 0x67, 0x5f,
	0x70, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x50, 0x73, 0x6e, 0x70, 0x52, 0x65, 0x63,
	0x76, 0x52, 0x61, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x73,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x76, 0x67, 0x4c, 0x73, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x73,
	0x70, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x4c, 0x73, 0x70, 0x52, 0x65, 0x63, 0x76, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x61, 0x76, 0x67, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x61, 0x76, 0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x76, 0x67, 0x5f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76, 0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x61, 0x76, 0x67, 0x5f,
	0x63, 0x73, 0x6e, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x61, 0x76, 0x67, 0x43, 0x73, 0x6e, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x61, 0x76, 0x67, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x43, 0x73, 0x6e,
	0x70, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x61, 0x76,
	0x67, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x61, 0x76, 0x67, 0x50, 0x73,
	0x6e, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x50,
	0x73, 0x6e, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x15,
	0x61, 0x76, 0x67, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x61, 0x76, 0x67, 0x4c,
	0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x4c, 0x73,
	0x70, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_goTypes = []interface{}{
	(*IsisShTrafficGlobal_KEYS)(nil), // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_global_KEYS
	(*IsisShTrafficGlobal)(nil),      // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_global
	(*IsisTopoIdType)(nil),           // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_topo_id_type
	(*IsisShTimestampType)(nil),      // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	(*IsisAreaTopoStatsType)(nil),    // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_area_topo_stats_type
	(*IsisShTrafficAreaTopo)(nil),    // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area_topo
	(*IsisAreaStatsType)(nil),        // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_area_stats_type
	(*IsisShTrafficArea)(nil),        // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area
	(*IsisTrafficGlobalType)(nil),    // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_depIdxs = []int32{
	8,  // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_global.statistics:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type
	7,  // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_global.per_area_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area
	2,  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area_topo.id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_topo_id_type
	4,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area_topo.statistics:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_area_topo_stats_type
	6,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area.statistics:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_area_stats_type
	5,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area.per_topology_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_traffic_area_topo
	3,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_hello_process_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	3,  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_csnp_process_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	3,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_psnp_process_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	3,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_lsp_process_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	3,  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_hello_transmit_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	3,  // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_csnp_transmit_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	3,  // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_psnp_transmit_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	3,  // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_traffic_global_type.avg_lsp_transmit_time:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.statistics_global.isis_sh_timestamp_type
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTrafficGlobal_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTrafficGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTopoIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTimestampType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisAreaTopoStatsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTrafficAreaTopo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisAreaStatsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTrafficArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTrafficGlobalType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_statistics_global_isis_sh_traffic_global_proto_depIdxs = nil
}
