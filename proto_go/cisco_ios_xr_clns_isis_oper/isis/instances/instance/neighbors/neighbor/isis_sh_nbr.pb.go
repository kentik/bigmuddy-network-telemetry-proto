// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/neighbors/neighbor/isis_sh_nbr.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// A neighbor IS
type IsisShNbr_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	SystemId      string `protobuf:"bytes,2,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *IsisShNbr_KEYS) Reset() {
	*x = IsisShNbr_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShNbr_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShNbr_KEYS) ProtoMessage() {}

func (x *IsisShNbr_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShNbr_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShNbr_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShNbr_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShNbr_KEYS) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *IsisShNbr_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type IsisShNbr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Neighbor system ID
	NeighborSystemId string `protobuf:"bytes,50,opt,name=neighbor_system_id,json=neighborSystemId,proto3" json:"neighbor_system_id,omitempty"`
	// Neighbor SNPA
	NeighborSnpa string `protobuf:"bytes,51,opt,name=neighbor_snpa,json=neighborSnpa,proto3" json:"neighbor_snpa,omitempty"`
	// Local interface
	LocalInterface string `protobuf:"bytes,52,opt,name=local_interface,json=localInterface,proto3" json:"local_interface,omitempty"`
	// Neighbor (adjacency) state
	NeighborState string `protobuf:"bytes,53,opt,name=neighbor_state,json=neighborState,proto3" json:"neighbor_state,omitempty"`
	// Circuit type
	NeighborCircuitType string `protobuf:"bytes,54,opt,name=neighbor_circuit_type,json=neighborCircuitType,proto3" json:"neighbor_circuit_type,omitempty"`
	// TRUE if neighbor is IETF-NSF capable
	NeighborIetfNsfCapableFlag uint32 `protobuf:"varint,55,opt,name=neighbor_ietf_nsf_capable_flag,json=neighborIetfNsfCapableFlag,proto3" json:"neighbor_ietf_nsf_capable_flag,omitempty"`
	// Link media type
	NeighborMediaType string `protobuf:"bytes,56,opt,name=neighbor_media_type,json=neighborMediaType,proto3" json:"neighbor_media_type,omitempty"`
	// Time (s) until neighbor declared down if no IIH received
	NeighborHoldtime uint32 `protobuf:"varint,57,opt,name=neighbor_holdtime,json=neighborHoldtime,proto3" json:"neighbor_holdtime,omitempty"`
	// Active area addresses
	NeighborActiveAreaAddresses []*OsiAreaAddressType `protobuf:"bytes,58,rep,name=neighbor_active_area_addresses,json=neighborActiveAreaAddresses,proto3" json:"neighbor_active_area_addresses,omitempty"`
	// TRUE if NeighborUptime is set
	NeighborUptimeValidFlag bool `protobuf:"varint,59,opt,name=neighbor_uptime_valid_flag,json=neighborUptimeValidFlag,proto3" json:"neighbor_uptime_valid_flag,omitempty"`
	// How long the neighbor has been up (s)
	NeighborUptime uint32 `protobuf:"varint,60,opt,name=neighbor_uptime,json=neighborUptime,proto3" json:"neighbor_uptime,omitempty"`
	// Topologies supported by both neighbor and local system
	TopologiesSupported []*IsisTopoIdType `protobuf:"bytes,61,rep,name=topologies_supported,json=topologiesSupported,proto3" json:"topologies_supported,omitempty"`
	// Per address-family data
	NeighborPerAddressFamilyData []*IsisShAdjAf `protobuf:"bytes,62,rep,name=neighbor_per_address_family_data,json=neighborPerAddressFamilyData,proto3" json:"neighbor_per_address_family_data,omitempty"`
	// ISIS NSR STANDBY
	NsrStandby bool `protobuf:"varint,63,opt,name=nsr_standby,json=nsrStandby,proto3" json:"nsr_standby,omitempty"`
}

func (x *IsisShNbr) Reset() {
	*x = IsisShNbr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShNbr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShNbr) ProtoMessage() {}

func (x *IsisShNbr) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShNbr.ProtoReflect.Descriptor instead.
func (*IsisShNbr) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShNbr) GetNeighborSystemId() string {
	if x != nil {
		return x.NeighborSystemId
	}
	return ""
}

func (x *IsisShNbr) GetNeighborSnpa() string {
	if x != nil {
		return x.NeighborSnpa
	}
	return ""
}

func (x *IsisShNbr) GetLocalInterface() string {
	if x != nil {
		return x.LocalInterface
	}
	return ""
}

func (x *IsisShNbr) GetNeighborState() string {
	if x != nil {
		return x.NeighborState
	}
	return ""
}

func (x *IsisShNbr) GetNeighborCircuitType() string {
	if x != nil {
		return x.NeighborCircuitType
	}
	return ""
}

func (x *IsisShNbr) GetNeighborIetfNsfCapableFlag() uint32 {
	if x != nil {
		return x.NeighborIetfNsfCapableFlag
	}
	return 0
}

func (x *IsisShNbr) GetNeighborMediaType() string {
	if x != nil {
		return x.NeighborMediaType
	}
	return ""
}

func (x *IsisShNbr) GetNeighborHoldtime() uint32 {
	if x != nil {
		return x.NeighborHoldtime
	}
	return 0
}

func (x *IsisShNbr) GetNeighborActiveAreaAddresses() []*OsiAreaAddressType {
	if x != nil {
		return x.NeighborActiveAreaAddresses
	}
	return nil
}

func (x *IsisShNbr) GetNeighborUptimeValidFlag() bool {
	if x != nil {
		return x.NeighborUptimeValidFlag
	}
	return false
}

func (x *IsisShNbr) GetNeighborUptime() uint32 {
	if x != nil {
		return x.NeighborUptime
	}
	return 0
}

func (x *IsisShNbr) GetTopologiesSupported() []*IsisTopoIdType {
	if x != nil {
		return x.TopologiesSupported
	}
	return nil
}

func (x *IsisShNbr) GetNeighborPerAddressFamilyData() []*IsisShAdjAf {
	if x != nil {
		return x.NeighborPerAddressFamilyData
	}
	return nil
}

func (x *IsisShNbr) GetNsrStandby() bool {
	if x != nil {
		return x.NsrStandby
	}
	return false
}

type IsisIpv6AddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisIpv6AddressType) Reset() {
	*x = IsisIpv6AddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv6AddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv6AddressType) ProtoMessage() {}

func (x *IsisIpv6AddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv6AddressType.ProtoReflect.Descriptor instead.
func (*IsisIpv6AddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{2}
}

func (x *IsisIpv6AddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *IsisTopoIdType) Reset() {
	*x = IsisTopoIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTopoIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTopoIdType) ProtoMessage() {}

func (x *IsisTopoIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTopoIdType.ProtoReflect.Descriptor instead.
func (*IsisTopoIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{3}
}

func (x *IsisTopoIdType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisTopoIdType) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisTopoIdType) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *IsisTopoIdType) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

type OsiAreaAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OsiAreaAddressType) Reset() {
	*x = OsiAreaAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsiAreaAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsiAreaAddressType) ProtoMessage() {}

func (x *OsiAreaAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsiAreaAddressType.ProtoReflect.Descriptor instead.
func (*OsiAreaAddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{4}
}

func (x *OsiAreaAddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPv4 Adjacency SID backup information
type IsisIpv4AdjSidBackupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of labels in the backup path label stack
	BackupLabelStackSize uint32 `protobuf:"varint,1,opt,name=backup_label_stack_size,json=backupLabelStackSize,proto3" json:"backup_label_stack_size,omitempty"`
	// Backup path label stack
	BackupLabelStack []uint32 `protobuf:"varint,2,rep,packed,name=backup_label_stack,json=backupLabelStack,proto3" json:"backup_label_stack,omitempty"`
	// Neighbor address used as adjacency backup target
	BackupNodeAddress string `protobuf:"bytes,3,opt,name=backup_node_address,json=backupNodeAddress,proto3" json:"backup_node_address,omitempty"`
	// Backup path nexthop address
	BackupNexthop string `protobuf:"bytes,4,opt,name=backup_nexthop,json=backupNexthop,proto3" json:"backup_nexthop,omitempty"`
	// Backup path interface
	BackupInterface string `protobuf:"bytes,5,opt,name=backup_interface,json=backupInterface,proto3" json:"backup_interface,omitempty"`
}

func (x *IsisIpv4AdjSidBackupInfo) Reset() {
	*x = IsisIpv4AdjSidBackupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv4AdjSidBackupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv4AdjSidBackupInfo) ProtoMessage() {}

func (x *IsisIpv4AdjSidBackupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv4AdjSidBackupInfo.ProtoReflect.Descriptor instead.
func (*IsisIpv4AdjSidBackupInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{5}
}

func (x *IsisIpv4AdjSidBackupInfo) GetBackupLabelStackSize() uint32 {
	if x != nil {
		return x.BackupLabelStackSize
	}
	return 0
}

func (x *IsisIpv4AdjSidBackupInfo) GetBackupLabelStack() []uint32 {
	if x != nil {
		return x.BackupLabelStack
	}
	return nil
}

func (x *IsisIpv4AdjSidBackupInfo) GetBackupNodeAddress() string {
	if x != nil {
		return x.BackupNodeAddress
	}
	return ""
}

func (x *IsisIpv4AdjSidBackupInfo) GetBackupNexthop() string {
	if x != nil {
		return x.BackupNexthop
	}
	return ""
}

func (x *IsisIpv4AdjSidBackupInfo) GetBackupInterface() string {
	if x != nil {
		return x.BackupInterface
	}
	return ""
}

// IPv4 Adjacency SID
type IsisIpv4AdjSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adjacency SID value
	AdjacencySidValue uint32 `protobuf:"varint,1,opt,name=adjacency_sid_value,json=adjacencySidValue,proto3" json:"adjacency_sid_value,omitempty"`
	// Adjacency SID Backup Info
	AdjacencySidBackup *IsisIpv4AdjSidBackupInfo `protobuf:"bytes,2,opt,name=adjacency_sid_backup,json=adjacencySidBackup,proto3" json:"adjacency_sid_backup,omitempty"`
}

func (x *IsisIpv4AdjSid) Reset() {
	*x = IsisIpv4AdjSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv4AdjSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv4AdjSid) ProtoMessage() {}

func (x *IsisIpv4AdjSid) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv4AdjSid.ProtoReflect.Descriptor instead.
func (*IsisIpv4AdjSid) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{6}
}

func (x *IsisIpv4AdjSid) GetAdjacencySidValue() uint32 {
	if x != nil {
		return x.AdjacencySidValue
	}
	return 0
}

func (x *IsisIpv4AdjSid) GetAdjacencySidBackup() *IsisIpv4AdjSidBackupInfo {
	if x != nil {
		return x.AdjacencySidBackup
	}
	return nil
}

// IPv4 Adjacency SID backup information
type IsisIpv6AdjSidBackupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of labels in the backup path label stack
	BackupLabelStackSize uint32 `protobuf:"varint,1,opt,name=backup_label_stack_size,json=backupLabelStackSize,proto3" json:"backup_label_stack_size,omitempty"`
	// Backup path label stack
	BackupLabelStack []uint32 `protobuf:"varint,2,rep,packed,name=backup_label_stack,json=backupLabelStack,proto3" json:"backup_label_stack,omitempty"`
	// Neighbor address used as adjacency backup target
	BackupNodeAddress string `protobuf:"bytes,3,opt,name=backup_node_address,json=backupNodeAddress,proto3" json:"backup_node_address,omitempty"`
	// Backup path nexthop address
	BackupNexthop string `protobuf:"bytes,4,opt,name=backup_nexthop,json=backupNexthop,proto3" json:"backup_nexthop,omitempty"`
	// Backup path interface
	BackupInterface string `protobuf:"bytes,5,opt,name=backup_interface,json=backupInterface,proto3" json:"backup_interface,omitempty"`
}

func (x *IsisIpv6AdjSidBackupInfo) Reset() {
	*x = IsisIpv6AdjSidBackupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv6AdjSidBackupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv6AdjSidBackupInfo) ProtoMessage() {}

func (x *IsisIpv6AdjSidBackupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv6AdjSidBackupInfo.ProtoReflect.Descriptor instead.
func (*IsisIpv6AdjSidBackupInfo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{7}
}

func (x *IsisIpv6AdjSidBackupInfo) GetBackupLabelStackSize() uint32 {
	if x != nil {
		return x.BackupLabelStackSize
	}
	return 0
}

func (x *IsisIpv6AdjSidBackupInfo) GetBackupLabelStack() []uint32 {
	if x != nil {
		return x.BackupLabelStack
	}
	return nil
}

func (x *IsisIpv6AdjSidBackupInfo) GetBackupNodeAddress() string {
	if x != nil {
		return x.BackupNodeAddress
	}
	return ""
}

func (x *IsisIpv6AdjSidBackupInfo) GetBackupNexthop() string {
	if x != nil {
		return x.BackupNexthop
	}
	return ""
}

func (x *IsisIpv6AdjSidBackupInfo) GetBackupInterface() string {
	if x != nil {
		return x.BackupInterface
	}
	return ""
}

// IPv6 Adjacency SID
type IsisIpv6AdjSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adjacency SID value
	AdjacencySidValue uint32 `protobuf:"varint,1,opt,name=adjacency_sid_value,json=adjacencySidValue,proto3" json:"adjacency_sid_value,omitempty"`
	// Adjacency SID Backup Info
	AdjacencySidBackup *IsisIpv6AdjSidBackupInfo `protobuf:"bytes,2,opt,name=adjacency_sid_backup,json=adjacencySidBackup,proto3" json:"adjacency_sid_backup,omitempty"`
}

func (x *IsisIpv6AdjSid) Reset() {
	*x = IsisIpv6AdjSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv6AdjSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv6AdjSid) ProtoMessage() {}

func (x *IsisIpv6AdjSid) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv6AdjSid.ProtoReflect.Descriptor instead.
func (*IsisIpv6AdjSid) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{8}
}

func (x *IsisIpv6AdjSid) GetAdjacencySidValue() uint32 {
	if x != nil {
		return x.AdjacencySidValue
	}
	return 0
}

func (x *IsisIpv6AdjSid) GetAdjacencySidBackup() *IsisIpv6AdjSidBackupInfo {
	if x != nil {
		return x.AdjacencySidBackup
	}
	return nil
}

// IPv4 Specific Per-Adjacency Data
type IsisShAdjIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adjacency next hop
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	// Adjacency interface addresses
	InterfaceAddresses [][]byte `protobuf:"bytes,2,rep,name=interface_addresses,json=interfaceAddresses,proto3" json:"interface_addresses,omitempty"`
	// Adjacency SID
	AdjacencySid *IsisIpv4AdjSid `protobuf:"bytes,3,opt,name=adjacency_sid,json=adjacencySid,proto3" json:"adjacency_sid,omitempty"`
	// Adjacency SID not eligible for FRR protection
	NonFrrAdjacencySid *IsisIpv4AdjSid `protobuf:"bytes,4,opt,name=non_frr_adjacency_sid,json=nonFrrAdjacencySid,proto3" json:"non_frr_adjacency_sid,omitempty"`
	// Underlying interface list for bundle interfaces
	UnderlyingInterfaceList []string `protobuf:"bytes,5,rep,name=underlying_interface_list,json=underlyingInterfaceList,proto3" json:"underlying_interface_list,omitempty"`
	// Per bundle member Adjacency sid
	UnderlyingAdjacencySidList []uint32 `protobuf:"varint,6,rep,packed,name=underlying_adjacency_sid_list,json=underlyingAdjacencySidList,proto3" json:"underlying_adjacency_sid_list,omitempty"`
}

func (x *IsisShAdjIpv4) Reset() {
	*x = IsisShAdjIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShAdjIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShAdjIpv4) ProtoMessage() {}

func (x *IsisShAdjIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShAdjIpv4.ProtoReflect.Descriptor instead.
func (*IsisShAdjIpv4) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{9}
}

func (x *IsisShAdjIpv4) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *IsisShAdjIpv4) GetInterfaceAddresses() [][]byte {
	if x != nil {
		return x.InterfaceAddresses
	}
	return nil
}

func (x *IsisShAdjIpv4) GetAdjacencySid() *IsisIpv4AdjSid {
	if x != nil {
		return x.AdjacencySid
	}
	return nil
}

func (x *IsisShAdjIpv4) GetNonFrrAdjacencySid() *IsisIpv4AdjSid {
	if x != nil {
		return x.NonFrrAdjacencySid
	}
	return nil
}

func (x *IsisShAdjIpv4) GetUnderlyingInterfaceList() []string {
	if x != nil {
		return x.UnderlyingInterfaceList
	}
	return nil
}

func (x *IsisShAdjIpv4) GetUnderlyingAdjacencySidList() []uint32 {
	if x != nil {
		return x.UnderlyingAdjacencySidList
	}
	return nil
}

// IPv6 Specific Per-Adjacency Data
type IsisShAdjIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adjacency next hop
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	// Adjacency interface addresses
	InterfaceAddresses []*IsisIpv6AddressType `protobuf:"bytes,2,rep,name=interface_addresses,json=interfaceAddresses,proto3" json:"interface_addresses,omitempty"`
	// Adjacency SID
	AdjacencySid *IsisIpv6AdjSid `protobuf:"bytes,3,opt,name=adjacency_sid,json=adjacencySid,proto3" json:"adjacency_sid,omitempty"`
	// Adjacency SID not eligible for FRR protection
	NonFrrAdjacencySid *IsisIpv6AdjSid `protobuf:"bytes,4,opt,name=non_frr_adjacency_sid,json=nonFrrAdjacencySid,proto3" json:"non_frr_adjacency_sid,omitempty"`
	// Underlying interface list for bundle interfaces
	UnderlyingInterfaceList []string `protobuf:"bytes,5,rep,name=underlying_interface_list,json=underlyingInterfaceList,proto3" json:"underlying_interface_list,omitempty"`
	// Per bundle member Adjacency sid
	UnderlyingAdjacencySidList []uint32 `protobuf:"varint,6,rep,packed,name=underlying_adjacency_sid_list,json=underlyingAdjacencySidList,proto3" json:"underlying_adjacency_sid_list,omitempty"`
}

func (x *IsisShAdjIpv6) Reset() {
	*x = IsisShAdjIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShAdjIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShAdjIpv6) ProtoMessage() {}

func (x *IsisShAdjIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShAdjIpv6.ProtoReflect.Descriptor instead.
func (*IsisShAdjIpv6) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{10}
}

func (x *IsisShAdjIpv6) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *IsisShAdjIpv6) GetInterfaceAddresses() []*IsisIpv6AddressType {
	if x != nil {
		return x.InterfaceAddresses
	}
	return nil
}

func (x *IsisShAdjIpv6) GetAdjacencySid() *IsisIpv6AdjSid {
	if x != nil {
		return x.AdjacencySid
	}
	return nil
}

func (x *IsisShAdjIpv6) GetNonFrrAdjacencySid() *IsisIpv6AdjSid {
	if x != nil {
		return x.NonFrrAdjacencySid
	}
	return nil
}

func (x *IsisShAdjIpv6) GetUnderlyingInterfaceList() []string {
	if x != nil {
		return x.UnderlyingInterfaceList
	}
	return nil
}

func (x *IsisShAdjIpv6) GetUnderlyingAdjacencySidList() []uint32 {
	if x != nil {
		return x.UnderlyingAdjacencySidList
	}
	return nil
}

type IsisShAdjAf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// IPV4 neighbor info
	Ipv4 *IsisShAdjIpv4 `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPV6 neighbor info
	Ipv6 *IsisShAdjIpv6 `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *IsisShAdjAf) Reset() {
	*x = IsisShAdjAf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShAdjAf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShAdjAf) ProtoMessage() {}

func (x *IsisShAdjAf) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShAdjAf.ProtoReflect.Descriptor instead.
func (*IsisShAdjAf) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP(), []int{11}
}

func (x *IsisShAdjAf) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisShAdjAf) GetIpv4() *IsisShAdjIpv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *IsisShAdjAf) GetIpv6() *IsisShAdjIpv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDesc = []byte{
	0x0a, 0x58, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x6e, 0x62, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x46, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x22, 0x7b, 0x0a, 0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x62,
	0x72, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xe1, 0x07, 0x0a, 0x0b, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x62, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x6e,
	0x70, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x69, 0x65, 0x74, 0x66, 0x5f, 0x6e, 0x73, 0x66, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x65, 0x74, 0x66, 0x4e, 0x73, 0x66, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x48,
	0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x1e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x6f, 0x73, 0x69, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x1b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x55, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x13, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x9e, 0x01, 0x0a, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64,
	0x6a, 0x5f, 0x61, 0x66, 0x52, 0x1c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62,
	0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x73, 0x72, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x22, 0x2e, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a,
	0x15, 0x6f, 0x73, 0x69, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x02, 0x0a,
	0x1d, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73,
	0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x14,
	0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64,
	0x6a, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x86, 0x02, 0x0a, 0x1d, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xdd,
	0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x6a,
	0x5f, 0x73, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0xec,
	0x03, 0x0a, 0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x2f,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x7e, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69,
	0x64, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x8c, 0x01, 0x0a, 0x15, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x61, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x46,
	0x72, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x17, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x1a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x04,
	0x0a, 0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x8f, 0x01,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x7e, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69,
	0x64, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x12,
	0x8c, 0x01, 0x0a, 0x15, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x61, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x69, 0x64, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x46,
	0x72, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x17, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x1a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x02,
	0x0a, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x61, 0x66,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x6c, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x52,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_goTypes = []interface{}{
	(*IsisShNbr_KEYS)(nil),           // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_nbr_KEYS
	(*IsisShNbr)(nil),                // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_nbr
	(*IsisIpv6AddressType)(nil),      // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_address_type
	(*IsisTopoIdType)(nil),           // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_topo_id_type
	(*OsiAreaAddressType)(nil),       // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.osi_area_address_type
	(*IsisIpv4AdjSidBackupInfo)(nil), // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv4_adj_sid_backup_info
	(*IsisIpv4AdjSid)(nil),           // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv4_adj_sid
	(*IsisIpv6AdjSidBackupInfo)(nil), // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_adj_sid_backup_info
	(*IsisIpv6AdjSid)(nil),           // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_adj_sid
	(*IsisShAdjIpv4)(nil),            // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv4
	(*IsisShAdjIpv6)(nil),            // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv6
	(*IsisShAdjAf)(nil),              // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_af
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_depIdxs = []int32{
	4,  // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_nbr.neighbor_active_area_addresses:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.osi_area_address_type
	3,  // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_nbr.topologies_supported:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_topo_id_type
	11, // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_nbr.neighbor_per_address_family_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_af
	5,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv4_adj_sid.adjacency_sid_backup:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv4_adj_sid_backup_info
	7,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_adj_sid.adjacency_sid_backup:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_adj_sid_backup_info
	6,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv4.adjacency_sid:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv4_adj_sid
	6,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv4.non_frr_adjacency_sid:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv4_adj_sid
	2,  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv6.interface_addresses:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_address_type
	8,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv6.adjacency_sid:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_adj_sid
	8,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv6.non_frr_adjacency_sid:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_ipv6_adj_sid
	9,  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_af.ipv4:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv4
	10, // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_af.ipv6:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor.isis_sh_adj_ipv6
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShNbr_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShNbr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv6AddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTopoIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsiAreaAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv4AdjSidBackupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv4AdjSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv6AdjSidBackupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv6AdjSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShAdjIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShAdjIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShAdjAf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_neighbors_neighbor_isis_sh_nbr_proto_depIdxs = nil
}
