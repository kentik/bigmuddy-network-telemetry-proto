// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/interfaces/interface/isis_sh_if.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// All the Information of an IS-IS interface
type IsisShIf_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *IsisShIf_KEYS) Reset() {
	*x = IsisShIf_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIf_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIf_KEYS) ProtoMessage() {}

func (x *IsisShIf_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIf_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShIf_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShIf_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShIf_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type IsisShIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configured circuit type for the interface
	ConfiguredCircuitType string `protobuf:"bytes,50,opt,name=configured_circuit_type,json=configuredCircuitType,proto3" json:"configured_circuit_type,omitempty"`
	// Configured interface status
	ConfiguredStatus *IsisShIfCfgStatus `protobuf:"bytes,51,opt,name=configured_status,json=configuredStatus,proto3" json:"configured_status,omitempty"`
	// Interface mesh group
	MeshGroup uint32 `protobuf:"varint,52,opt,name=mesh_group,json=meshGroup,proto3" json:"mesh_group,omitempty"`
	// IS-type of the router
	IsType string `protobuf:"bytes,53,opt,name=is_type,json=isType,proto3" json:"is_type,omitempty"`
	// Information about the interface status and its data
	InterfaceStatusAndData *IsisShIfStatus `protobuf:"bytes,54,opt,name=interface_status_and_data,json=interfaceStatusAndData,proto3" json:"interface_status_and_data,omitempty"`
	// ISIS NSR Interface
	NsrIntf bool `protobuf:"varint,55,opt,name=nsr_intf,json=nsrIntf,proto3" json:"nsr_intf,omitempty"`
}

func (x *IsisShIf) Reset() {
	*x = IsisShIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIf) ProtoMessage() {}

func (x *IsisShIf) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIf.ProtoReflect.Descriptor instead.
func (*IsisShIf) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShIf) GetConfiguredCircuitType() string {
	if x != nil {
		return x.ConfiguredCircuitType
	}
	return ""
}

func (x *IsisShIf) GetConfiguredStatus() *IsisShIfCfgStatus {
	if x != nil {
		return x.ConfiguredStatus
	}
	return nil
}

func (x *IsisShIf) GetMeshGroup() uint32 {
	if x != nil {
		return x.MeshGroup
	}
	return 0
}

func (x *IsisShIf) GetIsType() string {
	if x != nil {
		return x.IsType
	}
	return ""
}

func (x *IsisShIf) GetInterfaceStatusAndData() *IsisShIfStatus {
	if x != nil {
		return x.InterfaceStatusAndData
	}
	return nil
}

func (x *IsisShIf) GetNsrIntf() bool {
	if x != nil {
		return x.NsrIntf
	}
	return false
}

type IsisIpv6AddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisIpv6AddressType) Reset() {
	*x = IsisIpv6AddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv6AddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv6AddressType) ProtoMessage() {}

func (x *IsisIpv6AddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv6AddressType.ProtoReflect.Descriptor instead.
func (*IsisIpv6AddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{2}
}

func (x *IsisIpv6AddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// IPv4 address and prefix length
type IsisIpv4PrefixType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *IsisIpv4PrefixType) Reset() {
	*x = IsisIpv4PrefixType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv4PrefixType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv4PrefixType) ProtoMessage() {}

func (x *IsisIpv4PrefixType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv4PrefixType.ProtoReflect.Descriptor instead.
func (*IsisIpv4PrefixType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{3}
}

func (x *IsisIpv4PrefixType) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IsisIpv4PrefixType) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

// IPv4 address and prefix length
type IsisIpv6PrefixType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
}

func (x *IsisIpv6PrefixType) Reset() {
	*x = IsisIpv6PrefixType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv6PrefixType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv6PrefixType) ProtoMessage() {}

func (x *IsisIpv6PrefixType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv6PrefixType.ProtoReflect.Descriptor instead.
func (*IsisIpv6PrefixType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{4}
}

func (x *IsisIpv6PrefixType) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *IsisIpv6PrefixType) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type IsisIpAddrType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// IPV4 address type
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPV6 address type
	Ipv6 *IsisIpv6AddressType `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *IsisIpAddrType) Reset() {
	*x = IsisIpAddrType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpAddrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpAddrType) ProtoMessage() {}

func (x *IsisIpAddrType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpAddrType.ProtoReflect.Descriptor instead.
func (*IsisIpAddrType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{5}
}

func (x *IsisIpAddrType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisIpAddrType) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *IsisIpAddrType) GetIpv6() *IsisIpv6AddressType {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

type IsisIpPrefixType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfName string              `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	Ipv4   *IsisIpv4PrefixType `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6   *IsisIpv6PrefixType `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *IsisIpPrefixType) Reset() {
	*x = IsisIpPrefixType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpPrefixType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpPrefixType) ProtoMessage() {}

func (x *IsisIpPrefixType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpPrefixType.ProtoReflect.Descriptor instead.
func (*IsisIpPrefixType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{6}
}

func (x *IsisIpPrefixType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisIpPrefixType) GetIpv4() *IsisIpv4PrefixType {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *IsisIpPrefixType) GetIpv6() *IsisIpv6PrefixType {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *IsisTopoIdType) Reset() {
	*x = IsisTopoIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTopoIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTopoIdType) ProtoMessage() {}

func (x *IsisTopoIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTopoIdType.ProtoReflect.Descriptor instead.
func (*IsisTopoIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{7}
}

func (x *IsisTopoIdType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisTopoIdType) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisTopoIdType) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *IsisTopoIdType) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

// Disabled interface info
type IsisShIfDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the interface is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfDisabled) Reset() {
	*x = IsisShIfDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfDisabled) ProtoMessage() {}

func (x *IsisShIfDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfDisabled.ProtoReflect.Descriptor instead.
func (*IsisShIfDisabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{8}
}

func (x *IsisShIfDisabled) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

// Interface info when adjacency formation is disabled
type IsisShIfAdjFormDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the interface is not able to form adjacencies
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfAdjFormDisabled) Reset() {
	*x = IsisShIfAdjFormDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAdjFormDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAdjFormDisabled) ProtoMessage() {}

func (x *IsisShIfAdjFormDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAdjFormDisabled.ProtoReflect.Descriptor instead.
func (*IsisShIfAdjFormDisabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{9}
}

func (x *IsisShIfAdjFormDisabled) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfAdjFormStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disabled info for the adjacency formation status
	Disabled *IsisShIfAdjFormDisabled `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *IsisShIfAdjFormStatus) Reset() {
	*x = IsisShIfAdjFormStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAdjFormStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAdjFormStatus) ProtoMessage() {}

func (x *IsisShIfAdjFormStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAdjFormStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfAdjFormStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{10}
}

func (x *IsisShIfAdjFormStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfAdjFormStatus) GetDisabled() *IsisShIfAdjFormDisabled {
	if x != nil {
		return x.Disabled
	}
	return nil
}

// Interface info when prefix advertisement is disabled
type IsisShIfAdvPrefixDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the interface is not able to advertise prefixes
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfAdvPrefixDisabled) Reset() {
	*x = IsisShIfAdvPrefixDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAdvPrefixDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAdvPrefixDisabled) ProtoMessage() {}

func (x *IsisShIfAdvPrefixDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAdvPrefixDisabled.ProtoReflect.Descriptor instead.
func (*IsisShIfAdvPrefixDisabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{11}
}

func (x *IsisShIfAdvPrefixDisabled) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfAdvPrefixStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disabled info for the prefix advertisement status
	Disabled *IsisShIfAdvPrefixDisabled `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *IsisShIfAdvPrefixStatus) Reset() {
	*x = IsisShIfAdvPrefixStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAdvPrefixStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAdvPrefixStatus) ProtoMessage() {}

func (x *IsisShIfAdvPrefixStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAdvPrefixStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfAdvPrefixStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{12}
}

func (x *IsisShIfAdvPrefixStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfAdvPrefixStatus) GetDisabled() *IsisShIfAdvPrefixDisabled {
	if x != nil {
		return x.Disabled
	}
	return nil
}

// Configured state of an interface
type IsisShIfCfgStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configured adjacency formation status
	AdjacencyFormStatus bool `protobuf:"varint,1,opt,name=adjacency_form_status,json=adjacencyFormStatus,proto3" json:"adjacency_form_status,omitempty"`
	// Configured prefix advertisement status
	AdvPrefixStatus bool `protobuf:"varint,2,opt,name=adv_prefix_status,json=advPrefixStatus,proto3" json:"adv_prefix_status,omitempty"`
}

func (x *IsisShIfCfgStatus) Reset() {
	*x = IsisShIfCfgStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfCfgStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfCfgStatus) ProtoMessage() {}

func (x *IsisShIfCfgStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfCfgStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfCfgStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{13}
}

func (x *IsisShIfCfgStatus) GetAdjacencyFormStatus() bool {
	if x != nil {
		return x.AdjacencyFormStatus
	}
	return false
}

func (x *IsisShIfCfgStatus) GetAdvPrefixStatus() bool {
	if x != nil {
		return x.AdvPrefixStatus
	}
	return false
}

// Interface info when CLNS is down
type IsisShIfClnsProtoDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why CLNS is down
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfClnsProtoDown) Reset() {
	*x = IsisShIfClnsProtoDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsProtoDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsProtoDown) ProtoMessage() {}

func (x *IsisShIfClnsProtoDown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsProtoDown.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsProtoDown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{14}
}

func (x *IsisShIfClnsProtoDown) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfClnsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// State describing why CLNS is down
	ClnsDownInfo *IsisShIfClnsProtoDown `protobuf:"bytes,2,opt,name=clns_down_info,json=clnsDownInfo,proto3" json:"clns_down_info,omitempty"`
}

func (x *IsisShIfClnsStatus) Reset() {
	*x = IsisShIfClnsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsStatus) ProtoMessage() {}

func (x *IsisShIfClnsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{15}
}

func (x *IsisShIfClnsStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfClnsStatus) GetClnsDownInfo() *IsisShIfClnsProtoDown {
	if x != nil {
		return x.ClnsDownInfo
	}
	return nil
}

// Interface info with invalid MTU
type IsisShIfClnsMtuInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the MTU is invalid
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfClnsMtuInvalid) Reset() {
	*x = IsisShIfClnsMtuInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsMtuInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsMtuInvalid) ProtoMessage() {}

func (x *IsisShIfClnsMtuInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsMtuInvalid.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsMtuInvalid) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{16}
}

func (x *IsisShIfClnsMtuInvalid) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfClnsMtuStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Information pertaining to the invalid CLNS MTU
	Invalid *IsisShIfClnsMtuInvalid `protobuf:"bytes,2,opt,name=invalid,proto3" json:"invalid,omitempty"`
	// Valid MTU
	Mtu uint32 `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *IsisShIfClnsMtuStatus) Reset() {
	*x = IsisShIfClnsMtuStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsMtuStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsMtuStatus) ProtoMessage() {}

func (x *IsisShIfClnsMtuStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsMtuStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsMtuStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{17}
}

func (x *IsisShIfClnsMtuStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfClnsMtuStatus) GetInvalid() *IsisShIfClnsMtuInvalid {
	if x != nil {
		return x.Invalid
	}
	return nil
}

func (x *IsisShIfClnsMtuStatus) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

// Interface info with CLNS SNPA unknown
type IsisShIfClnsSnpaUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the SNPA is unknown
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfClnsSnpaUnknown) Reset() {
	*x = IsisShIfClnsSnpaUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsSnpaUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsSnpaUnknown) ProtoMessage() {}

func (x *IsisShIfClnsSnpaUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsSnpaUnknown.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsSnpaUnknown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{18}
}

func (x *IsisShIfClnsSnpaUnknown) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

// CLNS SNPA info
type IsisShIfClnsSnpaKnown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Valid SNPA
	Snpa string `protobuf:"bytes,1,opt,name=snpa,proto3" json:"snpa,omitempty"`
}

func (x *IsisShIfClnsSnpaKnown) Reset() {
	*x = IsisShIfClnsSnpaKnown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsSnpaKnown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsSnpaKnown) ProtoMessage() {}

func (x *IsisShIfClnsSnpaKnown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsSnpaKnown.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsSnpaKnown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{19}
}

func (x *IsisShIfClnsSnpaKnown) GetSnpa() string {
	if x != nil {
		return x.Snpa
	}
	return ""
}

type IsisShIfClnsSnpaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Information pertaining to the unknown SNPA state
	Unknown *IsisShIfClnsSnpaUnknown `protobuf:"bytes,2,opt,name=unknown,proto3" json:"unknown,omitempty"`
	// Information pertaining to the known SNPA state
	Known *IsisShIfClnsSnpaKnown `protobuf:"bytes,3,opt,name=known,proto3" json:"known,omitempty"`
}

func (x *IsisShIfClnsSnpaStatus) Reset() {
	*x = IsisShIfClnsSnpaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsSnpaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsSnpaStatus) ProtoMessage() {}

func (x *IsisShIfClnsSnpaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsSnpaStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsSnpaStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{20}
}

func (x *IsisShIfClnsSnpaStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfClnsSnpaStatus) GetUnknown() *IsisShIfClnsSnpaUnknown {
	if x != nil {
		return x.Unknown
	}
	return nil
}

func (x *IsisShIfClnsSnpaStatus) GetKnown() *IsisShIfClnsSnpaKnown {
	if x != nil {
		return x.Known
	}
	return nil
}

// Invalid multicast info
type IsisShIfMcastInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the multicast status is invalid
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfMcastInvalid) Reset() {
	*x = IsisShIfMcastInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfMcastInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfMcastInvalid) ProtoMessage() {}

func (x *IsisShIfMcastInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfMcastInvalid.ProtoReflect.Descriptor instead.
func (*IsisShIfMcastInvalid) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{21}
}

func (x *IsisShIfMcastInvalid) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfMcastStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Information pertaining to the invalid multicast status
	Invalid *IsisShIfMcastInvalid `protobuf:"bytes,2,opt,name=invalid,proto3" json:"invalid,omitempty"`
}

func (x *IsisShIfMcastStatus) Reset() {
	*x = IsisShIfMcastStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfMcastStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfMcastStatus) ProtoMessage() {}

func (x *IsisShIfMcastStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfMcastStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfMcastStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{22}
}

func (x *IsisShIfMcastStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfMcastStatus) GetInvalid() *IsisShIfMcastInvalid {
	if x != nil {
		return x.Invalid
	}
	return nil
}

// Per interface per area CLNS state
type IsisShIfAreaClns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level of the area
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// Multicast group membership status
	MulticastStatus *IsisShIfMcastStatus `protobuf:"bytes,2,opt,name=multicast_status,json=multicastStatus,proto3" json:"multicast_status,omitempty"`
}

func (x *IsisShIfAreaClns) Reset() {
	*x = IsisShIfAreaClns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAreaClns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAreaClns) ProtoMessage() {}

func (x *IsisShIfAreaClns) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAreaClns.ProtoReflect.Descriptor instead.
func (*IsisShIfAreaClns) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{23}
}

func (x *IsisShIfAreaClns) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShIfAreaClns) GetMulticastStatus() *IsisShIfMcastStatus {
	if x != nil {
		return x.MulticastStatus
	}
	return nil
}

// LAN specific CLNS state
type IsisShIfClnsLan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of per area CLNS data
	PerAreaData []*IsisShIfAreaClns `protobuf:"bytes,1,rep,name=per_area_data,json=perAreaData,proto3" json:"per_area_data,omitempty"`
}

func (x *IsisShIfClnsLan) Reset() {
	*x = IsisShIfClnsLan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsLan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsLan) ProtoMessage() {}

func (x *IsisShIfClnsLan) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsLan.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsLan) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{24}
}

func (x *IsisShIfClnsLan) GetPerAreaData() []*IsisShIfAreaClns {
	if x != nil {
		return x.PerAreaData
	}
	return nil
}

// Point-to-point over LAN specific CLNS state
type IsisShIfClnsP2POverLan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast group membership status
	MulticastStatus *IsisShIfMcastStatus `protobuf:"bytes,1,opt,name=multicast_status,json=multicastStatus,proto3" json:"multicast_status,omitempty"`
}

func (x *IsisShIfClnsP2POverLan) Reset() {
	*x = IsisShIfClnsP2POverLan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsP2POverLan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsP2POverLan) ProtoMessage() {}

func (x *IsisShIfClnsP2POverLan) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsP2POverLan.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsP2POverLan) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{25}
}

func (x *IsisShIfClnsP2POverLan) GetMulticastStatus() *IsisShIfMcastStatus {
	if x != nil {
		return x.MulticastStatus
	}
	return nil
}

// Point-to-point CLNS state
type IsisShIfClnsP2P struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Point-to-point over LAN data
	P2POverLanData *IsisShIfClnsP2POverLan `protobuf:"bytes,1,opt,name=p2_p_over_lan_data,json=p2POverLanData,proto3" json:"p2_p_over_lan_data,omitempty"`
}

func (x *IsisShIfClnsP2P) Reset() {
	*x = IsisShIfClnsP2P{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsP2P) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsP2P) ProtoMessage() {}

func (x *IsisShIfClnsP2P) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsP2P.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsP2P) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{26}
}

func (x *IsisShIfClnsP2P) GetP2POverLanData() *IsisShIfClnsP2POverLan {
	if x != nil {
		return x.P2POverLanData
	}
	return nil
}

// Media Specific CLNS state
type IsisShIfClnsMediaSpecificStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClnsMediaType string `protobuf:"bytes,1,opt,name=clns_media_type,json=clnsMediaType,proto3" json:"clns_media_type,omitempty"`
	// LAN state
	ClnsLanData *IsisShIfClnsLan `protobuf:"bytes,2,opt,name=clns_lan_data,json=clnsLanData,proto3" json:"clns_lan_data,omitempty"`
	// Point-to-point state
	ClnsP2PData *IsisShIfClnsP2P `protobuf:"bytes,3,opt,name=clns_p2_p_data,json=clnsP2PData,proto3" json:"clns_p2_p_data,omitempty"`
}

func (x *IsisShIfClnsMediaSpecificStatus) Reset() {
	*x = IsisShIfClnsMediaSpecificStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClnsMediaSpecificStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClnsMediaSpecificStatus) ProtoMessage() {}

func (x *IsisShIfClnsMediaSpecificStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClnsMediaSpecificStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfClnsMediaSpecificStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{27}
}

func (x *IsisShIfClnsMediaSpecificStatus) GetClnsMediaType() string {
	if x != nil {
		return x.ClnsMediaType
	}
	return ""
}

func (x *IsisShIfClnsMediaSpecificStatus) GetClnsLanData() *IsisShIfClnsLan {
	if x != nil {
		return x.ClnsLanData
	}
	return nil
}

func (x *IsisShIfClnsMediaSpecificStatus) GetClnsP2PData() *IsisShIfClnsP2P {
	if x != nil {
		return x.ClnsP2PData
	}
	return nil
}

// CLNS I/O data for an interface
type IsisShIfClns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is CLNS protcol up or if not, the reason why it is not up
	ClnsStatus *IsisShIfClnsStatus `protobuf:"bytes,1,opt,name=clns_status,json=clnsStatus,proto3" json:"clns_status,omitempty"`
	// A valid MTU or the reason for the MTU being invalid
	MtuInfo *IsisShIfClnsMtuStatus `protobuf:"bytes,2,opt,name=mtu_info,json=mtuInfo,proto3" json:"mtu_info,omitempty"`
	// SNPA state
	SnpaState *IsisShIfClnsSnpaStatus `protobuf:"bytes,3,opt,name=snpa_state,json=snpaState,proto3" json:"snpa_state,omitempty"`
	// Media Specific CLNS state
	MediaSpecificState *IsisShIfClnsMediaSpecificStatus `protobuf:"bytes,4,opt,name=media_specific_state,json=mediaSpecificState,proto3" json:"media_specific_state,omitempty"`
	// Time until next LSP may be sent (ms)
	TimeUntilNextLsp uint32 `protobuf:"varint,5,opt,name=time_until_next_lsp,json=timeUntilNextLsp,proto3" json:"time_until_next_lsp,omitempty"`
	// TRUE if an LSP transmission has been requested
	LspTransmitRequestedFlag bool `protobuf:"varint,6,opt,name=lsp_transmit_requested_flag,json=lspTransmitRequestedFlag,proto3" json:"lsp_transmit_requested_flag,omitempty"`
	// TRUE if an LSP transmission has been sent, indicates LastLSPLevelTransmitted and LastLSP_IDTransmitted valid
	LspTransmittedFlag bool `protobuf:"varint,7,opt,name=lsp_transmitted_flag,json=lspTransmittedFlag,proto3" json:"lsp_transmitted_flag,omitempty"`
	// Number of LSPs that can be sent back to back in the current window without exceeding the pacing limit
	LspTxmitdB2BLimit uint32 `protobuf:"varint,8,opt,name=lsp_txmitd_b2_b_limit,json=lspTxmitdB2BLimit,proto3" json:"lsp_txmitd_b2_b_limit,omitempty"`
	// Time im msecs indicating the end of the window in which the 'back to back lsps to be sent' counter applies
	LspTxmtB2BMsecs uint32 `protobuf:"varint,9,opt,name=lsp_txmt_b2_b_msecs,json=lspTxmtB2BMsecs,proto3" json:"lsp_txmt_b2_b_msecs,omitempty"`
	// Level of the Last LSP Transmitted
	LastLspLevelTransmitted string `protobuf:"bytes,10,opt,name=last_lsp_level_transmitted,json=lastLspLevelTransmitted,proto3" json:"last_lsp_level_transmitted,omitempty"`
	// Last LSP ID Transmitted
	LastLspIdTransmitted string `protobuf:"bytes,11,opt,name=last_lsp_id_transmitted,json=lastLspIdTransmitted,proto3" json:"last_lsp_id_transmitted,omitempty"`
}

func (x *IsisShIfClns) Reset() {
	*x = IsisShIfClns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfClns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfClns) ProtoMessage() {}

func (x *IsisShIfClns) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfClns.ProtoReflect.Descriptor instead.
func (*IsisShIfClns) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{28}
}

func (x *IsisShIfClns) GetClnsStatus() *IsisShIfClnsStatus {
	if x != nil {
		return x.ClnsStatus
	}
	return nil
}

func (x *IsisShIfClns) GetMtuInfo() *IsisShIfClnsMtuStatus {
	if x != nil {
		return x.MtuInfo
	}
	return nil
}

func (x *IsisShIfClns) GetSnpaState() *IsisShIfClnsSnpaStatus {
	if x != nil {
		return x.SnpaState
	}
	return nil
}

func (x *IsisShIfClns) GetMediaSpecificState() *IsisShIfClnsMediaSpecificStatus {
	if x != nil {
		return x.MediaSpecificState
	}
	return nil
}

func (x *IsisShIfClns) GetTimeUntilNextLsp() uint32 {
	if x != nil {
		return x.TimeUntilNextLsp
	}
	return 0
}

func (x *IsisShIfClns) GetLspTransmitRequestedFlag() bool {
	if x != nil {
		return x.LspTransmitRequestedFlag
	}
	return false
}

func (x *IsisShIfClns) GetLspTransmittedFlag() bool {
	if x != nil {
		return x.LspTransmittedFlag
	}
	return false
}

func (x *IsisShIfClns) GetLspTxmitdB2BLimit() uint32 {
	if x != nil {
		return x.LspTxmitdB2BLimit
	}
	return 0
}

func (x *IsisShIfClns) GetLspTxmtB2BMsecs() uint32 {
	if x != nil {
		return x.LspTxmtB2BMsecs
	}
	return 0
}

func (x *IsisShIfClns) GetLastLspLevelTransmitted() string {
	if x != nil {
		return x.LastLspLevelTransmitted
	}
	return ""
}

func (x *IsisShIfClns) GetLastLspIdTransmitted() string {
	if x != nil {
		return x.LastLspIdTransmitted
	}
	return ""
}

// Per-interface, per-area data for active LAN interface
type IsisShIfAreaActiveLan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Circuit LAN ID
	CircuitLanId []byte `protobuf:"bytes,1,opt,name=circuit_lan_id,json=circuitLanId,proto3" json:"circuit_lan_id,omitempty"`
	// Time (ms) until next IIH
	TimeUntilNextIih uint32 `protobuf:"varint,2,opt,name=time_until_next_iih,json=timeUntilNextIih,proto3" json:"time_until_next_iih,omitempty"`
	// Interface's DIS-election priority
	InterfacePriority uint32 `protobuf:"varint,3,opt,name=interface_priority,json=interfacePriority,proto3" json:"interface_priority,omitempty"`
	// Priority of current DIS on this LAN
	DisPriority uint32 `protobuf:"varint,4,opt,name=dis_priority,json=disPriority,proto3" json:"dis_priority,omitempty"`
	// Flag indicating if this LAN circuit is the DIS
	AreWeDis bool `protobuf:"varint,5,opt,name=are_we_dis,json=areWeDis,proto3" json:"are_we_dis,omitempty"`
}

func (x *IsisShIfAreaActiveLan) Reset() {
	*x = IsisShIfAreaActiveLan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAreaActiveLan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAreaActiveLan) ProtoMessage() {}

func (x *IsisShIfAreaActiveLan) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAreaActiveLan.ProtoReflect.Descriptor instead.
func (*IsisShIfAreaActiveLan) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{29}
}

func (x *IsisShIfAreaActiveLan) GetCircuitLanId() []byte {
	if x != nil {
		return x.CircuitLanId
	}
	return nil
}

func (x *IsisShIfAreaActiveLan) GetTimeUntilNextIih() uint32 {
	if x != nil {
		return x.TimeUntilNextIih
	}
	return 0
}

func (x *IsisShIfAreaActiveLan) GetInterfacePriority() uint32 {
	if x != nil {
		return x.InterfacePriority
	}
	return 0
}

func (x *IsisShIfAreaActiveLan) GetDisPriority() uint32 {
	if x != nil {
		return x.DisPriority
	}
	return 0
}

func (x *IsisShIfAreaActiveLan) GetAreWeDis() bool {
	if x != nil {
		return x.AreWeDis
	}
	return false
}

// Per-area data for an interface
type IsisShIfAreaActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Level of the area
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// Number of adjacencies
	AdjacencyCount uint32 `protobuf:"varint,2,opt,name=adjacency_count,json=adjacencyCount,proto3" json:"adjacency_count,omitempty"`
	// LSP pacing time period (ms)
	LspPacingInterval uint32 `protobuf:"varint,3,opt,name=lsp_pacing_interval,json=lspPacingInterval,proto3" json:"lsp_pacing_interval,omitempty"`
	// No. of SNP entries queued to be transmitted
	PsnpTransmitQueueSize uint32 `protobuf:"varint,4,opt,name=psnp_transmit_queue_size,json=psnpTransmitQueueSize,proto3" json:"psnp_transmit_queue_size,omitempty"`
	// LAN data, NULL iff interface has non-LAN media type
	LanData *IsisShIfAreaActiveLan `protobuf:"bytes,5,opt,name=lan_data,json=lanData,proto3" json:"lan_data,omitempty"`
}

func (x *IsisShIfAreaActive) Reset() {
	*x = IsisShIfAreaActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAreaActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAreaActive) ProtoMessage() {}

func (x *IsisShIfAreaActive) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAreaActive.ProtoReflect.Descriptor instead.
func (*IsisShIfAreaActive) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{30}
}

func (x *IsisShIfAreaActive) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShIfAreaActive) GetAdjacencyCount() uint32 {
	if x != nil {
		return x.AdjacencyCount
	}
	return 0
}

func (x *IsisShIfAreaActive) GetLspPacingInterval() uint32 {
	if x != nil {
		return x.LspPacingInterval
	}
	return 0
}

func (x *IsisShIfAreaActive) GetPsnpTransmitQueueSize() uint32 {
	if x != nil {
		return x.PsnpTransmitQueueSize
	}
	return 0
}

func (x *IsisShIfAreaActive) GetLanData() *IsisShIfAreaActiveLan {
	if x != nil {
		return x.LanData
	}
	return nil
}

// Topology info when adjacency formation is disabled
type IsisShIfTopoAdjFormDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the adjacency formation status of a topology is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfTopoAdjFormDisabled) Reset() {
	*x = IsisShIfTopoAdjFormDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopoAdjFormDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopoAdjFormDisabled) ProtoMessage() {}

func (x *IsisShIfTopoAdjFormDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopoAdjFormDisabled.ProtoReflect.Descriptor instead.
func (*IsisShIfTopoAdjFormDisabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{31}
}

func (x *IsisShIfTopoAdjFormDisabled) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfTopoAdjFormStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disabled state for the adjacency formation status of a topology
	Disabled *IsisShIfTopoAdjFormDisabled `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *IsisShIfTopoAdjFormStatus) Reset() {
	*x = IsisShIfTopoAdjFormStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopoAdjFormStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopoAdjFormStatus) ProtoMessage() {}

func (x *IsisShIfTopoAdjFormStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopoAdjFormStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfTopoAdjFormStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{32}
}

func (x *IsisShIfTopoAdjFormStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfTopoAdjFormStatus) GetDisabled() *IsisShIfTopoAdjFormDisabled {
	if x != nil {
		return x.Disabled
	}
	return nil
}

// Topology info when prefix advertisement is disabled
type IsisShIfTopoAdvPrefixDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the prefix advertisement status of a topology is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfTopoAdvPrefixDisabled) Reset() {
	*x = IsisShIfTopoAdvPrefixDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopoAdvPrefixDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopoAdvPrefixDisabled) ProtoMessage() {}

func (x *IsisShIfTopoAdvPrefixDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopoAdvPrefixDisabled.ProtoReflect.Descriptor instead.
func (*IsisShIfTopoAdvPrefixDisabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{33}
}

func (x *IsisShIfTopoAdvPrefixDisabled) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfTopoAdvPrefixStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disabled state for the prefix advertisement status of a topology
	Disabled *IsisShIfTopoAdvPrefixDisabled `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *IsisShIfTopoAdvPrefixStatus) Reset() {
	*x = IsisShIfTopoAdvPrefixStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopoAdvPrefixStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopoAdvPrefixStatus) ProtoMessage() {}

func (x *IsisShIfTopoAdvPrefixStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopoAdvPrefixStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfTopoAdvPrefixStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{34}
}

func (x *IsisShIfTopoAdvPrefixStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfTopoAdvPrefixStatus) GetDisabled() *IsisShIfTopoAdvPrefixDisabled {
	if x != nil {
		return x.Disabled
	}
	return nil
}

// Enabled topology info of an interface
type IsisShIfTopoEnabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adjacency formation status of a topology
	AdjacencyFormStatus *IsisShIfTopoAdjFormStatus `protobuf:"bytes,1,opt,name=adjacency_form_status,json=adjacencyFormStatus,proto3" json:"adjacency_form_status,omitempty"`
	// Prefix advertisement status of a topology
	AdvPrefixStatus *IsisShIfTopoAdvPrefixStatus `protobuf:"bytes,2,opt,name=adv_prefix_status,json=advPrefixStatus,proto3" json:"adv_prefix_status,omitempty"`
	// L1 metric for this topology
	Level1Metric uint32 `protobuf:"varint,3,opt,name=level1_metric,json=level1Metric,proto3" json:"level1_metric,omitempty"`
	// L2 metric for this topology
	Level2Metric uint32 `protobuf:"varint,4,opt,name=level2_metric,json=level2Metric,proto3" json:"level2_metric,omitempty"`
	// L1 metric for this topology
	Level1Weight uint32 `protobuf:"varint,5,opt,name=level1_weight,json=level1Weight,proto3" json:"level1_weight,omitempty"`
	// L2 metric for this topology
	Level2Weight uint32 `protobuf:"varint,6,opt,name=level2_weight,json=level2Weight,proto3" json:"level2_weight,omitempty"`
	// MPLS maximum number of pri labels supported
	MaxLabelSupported uint32 `protobuf:"varint,7,opt,name=max_label_supported,json=maxLabelSupported,proto3" json:"max_label_supported,omitempty"`
	// MPLS maximum number of backup labels supported
	MaxBkpLabelSupported uint32 `protobuf:"varint,8,opt,name=max_bkp_label_supported,json=maxBkpLabelSupported,proto3" json:"max_bkp_label_supported,omitempty"`
	// MPLS maximum number of srte labels supported
	MaxSrteLabelSupported uint32 `protobuf:"varint,9,opt,name=max_srte_label_supported,json=maxSrteLabelSupported,proto3" json:"max_srte_label_supported,omitempty"`
	// MPLS LDP sync enabled status for L1
	Level1LdpSyncEnabled bool `protobuf:"varint,10,opt,name=level1_ldp_sync_enabled,json=level1LdpSyncEnabled,proto3" json:"level1_ldp_sync_enabled,omitempty"`
	// MPLS LDP sync enabled status for L2
	Level2LdpSyncEnabled bool `protobuf:"varint,11,opt,name=level2_ldp_sync_enabled,json=level2LdpSyncEnabled,proto3" json:"level2_ldp_sync_enabled,omitempty"`
	// Status of MPLS LDP synchronization
	LdpSyncStatus bool `protobuf:"varint,12,opt,name=ldp_sync_status,json=ldpSyncStatus,proto3" json:"ldp_sync_status,omitempty"`
	// Status of MPLS LDPv6 synchronization
	LdPv6SyncStatus bool `protobuf:"varint,13,opt,name=ld_pv6_sync_status,json=ldPv6SyncStatus,proto3" json:"ld_pv6_sync_status,omitempty"`
	// L1 metric-offset for this topology
	Level1OffsetMetric uint32 `protobuf:"varint,14,opt,name=level1_offset_metric,json=level1OffsetMetric,proto3" json:"level1_offset_metric,omitempty"`
	// L2 metric-offset for this topology
	Level2OffsetMetric uint32 `protobuf:"varint,15,opt,name=level2_offset_metric,json=level2OffsetMetric,proto3" json:"level2_offset_metric,omitempty"`
	// Link-Group configure status for L1
	Level1LkgpConfigured bool `protobuf:"varint,16,opt,name=level1_lkgp_configured,json=level1LkgpConfigured,proto3" json:"level1_lkgp_configured,omitempty"`
	// Link-Group configure status for L2
	Level2LkgpConfigured bool `protobuf:"varint,17,opt,name=level2_lkgp_configured,json=level2LkgpConfigured,proto3" json:"level2_lkgp_configured,omitempty"`
	// L1 PP-metric for this topology
	Level1PpMetric uint32 `protobuf:"varint,18,opt,name=level1_pp_metric,json=level1PpMetric,proto3" json:"level1_pp_metric,omitempty"`
	// L2 PP-metric for this topology
	Level2PpMetric uint32 `protobuf:"varint,19,opt,name=level2_pp_metric,json=level2PpMetric,proto3" json:"level2_pp_metric,omitempty"`
	// PP configure status for L1
	Level1PpConfigured bool `protobuf:"varint,20,opt,name=level1_pp_configured,json=level1PpConfigured,proto3" json:"level1_pp_configured,omitempty"`
	// PP configure status for L2
	Level2PpConfigured bool `protobuf:"varint,21,opt,name=level2_pp_configured,json=level2PpConfigured,proto3" json:"level2_pp_configured,omitempty"`
}

func (x *IsisShIfTopoEnabled) Reset() {
	*x = IsisShIfTopoEnabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopoEnabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopoEnabled) ProtoMessage() {}

func (x *IsisShIfTopoEnabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopoEnabled.ProtoReflect.Descriptor instead.
func (*IsisShIfTopoEnabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{35}
}

func (x *IsisShIfTopoEnabled) GetAdjacencyFormStatus() *IsisShIfTopoAdjFormStatus {
	if x != nil {
		return x.AdjacencyFormStatus
	}
	return nil
}

func (x *IsisShIfTopoEnabled) GetAdvPrefixStatus() *IsisShIfTopoAdvPrefixStatus {
	if x != nil {
		return x.AdvPrefixStatus
	}
	return nil
}

func (x *IsisShIfTopoEnabled) GetLevel1Metric() uint32 {
	if x != nil {
		return x.Level1Metric
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel2Metric() uint32 {
	if x != nil {
		return x.Level2Metric
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel1Weight() uint32 {
	if x != nil {
		return x.Level1Weight
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel2Weight() uint32 {
	if x != nil {
		return x.Level2Weight
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetMaxLabelSupported() uint32 {
	if x != nil {
		return x.MaxLabelSupported
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetMaxBkpLabelSupported() uint32 {
	if x != nil {
		return x.MaxBkpLabelSupported
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetMaxSrteLabelSupported() uint32 {
	if x != nil {
		return x.MaxSrteLabelSupported
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel1LdpSyncEnabled() bool {
	if x != nil {
		return x.Level1LdpSyncEnabled
	}
	return false
}

func (x *IsisShIfTopoEnabled) GetLevel2LdpSyncEnabled() bool {
	if x != nil {
		return x.Level2LdpSyncEnabled
	}
	return false
}

func (x *IsisShIfTopoEnabled) GetLdpSyncStatus() bool {
	if x != nil {
		return x.LdpSyncStatus
	}
	return false
}

func (x *IsisShIfTopoEnabled) GetLdPv6SyncStatus() bool {
	if x != nil {
		return x.LdPv6SyncStatus
	}
	return false
}

func (x *IsisShIfTopoEnabled) GetLevel1OffsetMetric() uint32 {
	if x != nil {
		return x.Level1OffsetMetric
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel2OffsetMetric() uint32 {
	if x != nil {
		return x.Level2OffsetMetric
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel1LkgpConfigured() bool {
	if x != nil {
		return x.Level1LkgpConfigured
	}
	return false
}

func (x *IsisShIfTopoEnabled) GetLevel2LkgpConfigured() bool {
	if x != nil {
		return x.Level2LkgpConfigured
	}
	return false
}

func (x *IsisShIfTopoEnabled) GetLevel1PpMetric() uint32 {
	if x != nil {
		return x.Level1PpMetric
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel2PpMetric() uint32 {
	if x != nil {
		return x.Level2PpMetric
	}
	return 0
}

func (x *IsisShIfTopoEnabled) GetLevel1PpConfigured() bool {
	if x != nil {
		return x.Level1PpConfigured
	}
	return false
}

func (x *IsisShIfTopoEnabled) GetLevel2PpConfigured() bool {
	if x != nil {
		return x.Level2PpConfigured
	}
	return false
}

// Disabled topology info of an interface
type IsisShIfTopoDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the topology is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfTopoDisabled) Reset() {
	*x = IsisShIfTopoDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopoDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopoDisabled) ProtoMessage() {}

func (x *IsisShIfTopoDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopoDisabled.ProtoReflect.Descriptor instead.
func (*IsisShIfTopoDisabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{36}
}

func (x *IsisShIfTopoDisabled) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfTopoStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disabled information of a topology
	Disabled *IsisShIfTopoDisabled `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Enabled information of a topology
	Enabled *IsisShIfTopoEnabled `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *IsisShIfTopoStatus) Reset() {
	*x = IsisShIfTopoStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopoStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopoStatus) ProtoMessage() {}

func (x *IsisShIfTopoStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopoStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfTopoStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{37}
}

func (x *IsisShIfTopoStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfTopoStatus) GetDisabled() *IsisShIfTopoDisabled {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *IsisShIfTopoStatus) GetEnabled() *IsisShIfTopoEnabled {
	if x != nil {
		return x.Enabled
	}
	return nil
}

// Per topology info of an interface
type IsisShIfTopo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topology identifier
	TopologyId *IsisTopoIdType `protobuf:"bytes,1,opt,name=topology_id,json=topologyId,proto3" json:"topology_id,omitempty"`
	// Status of the topology
	Status *IsisShIfTopoStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IsisShIfTopo) Reset() {
	*x = IsisShIfTopo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfTopo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfTopo) ProtoMessage() {}

func (x *IsisShIfTopo) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfTopo.ProtoReflect.Descriptor instead.
func (*IsisShIfTopo) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{38}
}

func (x *IsisShIfTopo) GetTopologyId() *IsisTopoIdType {
	if x != nil {
		return x.TopologyId
	}
	return nil
}

func (x *IsisShIfTopo) GetStatus() *IsisShIfTopoStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Address prefix unknown info
type IsisShIfAfPrefixUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the global prefix(es) is(are) unknown
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfAfPrefixUnknown) Reset() {
	*x = IsisShIfAfPrefixUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfPrefixUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfPrefixUnknown) ProtoMessage() {}

func (x *IsisShIfAfPrefixUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfPrefixUnknown.ProtoReflect.Descriptor instead.
func (*IsisShIfAfPrefixUnknown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{39}
}

func (x *IsisShIfAfPrefixUnknown) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

// Address prefix info
type IsisShIfAfPrefixData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of global prefixes
	Prefix []*IsisIpPrefixType `protobuf:"bytes,1,rep,name=prefix,proto3" json:"prefix,omitempty"`
	// Is the interface unnumbered
	IsUnnumbered bool `protobuf:"varint,2,opt,name=is_unnumbered,json=isUnnumbered,proto3" json:"is_unnumbered,omitempty"`
}

func (x *IsisShIfAfPrefixData) Reset() {
	*x = IsisShIfAfPrefixData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfPrefixData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfPrefixData) ProtoMessage() {}

func (x *IsisShIfAfPrefixData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfPrefixData.ProtoReflect.Descriptor instead.
func (*IsisShIfAfPrefixData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{40}
}

func (x *IsisShIfAfPrefixData) GetPrefix() []*IsisIpPrefixType {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *IsisShIfAfPrefixData) GetIsUnnumbered() bool {
	if x != nil {
		return x.IsUnnumbered
	}
	return false
}

type IsisShIfAfPrefixStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Unknown state for the global prefixes
	Unknown *IsisShIfAfPrefixUnknown `protobuf:"bytes,2,opt,name=unknown,proto3" json:"unknown,omitempty"`
	// Global prefix data for the Address Family
	PrefixData *IsisShIfAfPrefixData `protobuf:"bytes,3,opt,name=prefix_data,json=prefixData,proto3" json:"prefix_data,omitempty"`
}

func (x *IsisShIfAfPrefixStatus) Reset() {
	*x = IsisShIfAfPrefixStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfPrefixStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfPrefixStatus) ProtoMessage() {}

func (x *IsisShIfAfPrefixStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfPrefixStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfAfPrefixStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{41}
}

func (x *IsisShIfAfPrefixStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfAfPrefixStatus) GetUnknown() *IsisShIfAfPrefixUnknown {
	if x != nil {
		return x.Unknown
	}
	return nil
}

func (x *IsisShIfAfPrefixStatus) GetPrefixData() *IsisShIfAfPrefixData {
	if x != nil {
		return x.PrefixData
	}
	return nil
}

// Address-family forwarding address data
type IsisShIfAfFwdAddrData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of forwarding addresses
	ForwardingAddress []*IsisIpAddrType `protobuf:"bytes,1,rep,name=forwarding_address,json=forwardingAddress,proto3" json:"forwarding_address,omitempty"`
	// If the interface is unnumbered, then its name, else NULL
	UnnumberedInterfaceName string `protobuf:"bytes,2,opt,name=unnumbered_interface_name,json=unnumberedInterfaceName,proto3" json:"unnumbered_interface_name,omitempty"`
}

func (x *IsisShIfAfFwdAddrData) Reset() {
	*x = IsisShIfAfFwdAddrData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfFwdAddrData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfFwdAddrData) ProtoMessage() {}

func (x *IsisShIfAfFwdAddrData) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfFwdAddrData.ProtoReflect.Descriptor instead.
func (*IsisShIfAfFwdAddrData) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{42}
}

func (x *IsisShIfAfFwdAddrData) GetForwardingAddress() []*IsisIpAddrType {
	if x != nil {
		return x.ForwardingAddress
	}
	return nil
}

func (x *IsisShIfAfFwdAddrData) GetUnnumberedInterfaceName() string {
	if x != nil {
		return x.UnnumberedInterfaceName
	}
	return ""
}

// Forwarding address unknown data
type IsisShIfAfFwdAddrUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the forwarding address(es) of an AF is(are) unknown
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfAfFwdAddrUnknown) Reset() {
	*x = IsisShIfAfFwdAddrUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfFwdAddrUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfFwdAddrUnknown) ProtoMessage() {}

func (x *IsisShIfAfFwdAddrUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfFwdAddrUnknown.ProtoReflect.Descriptor instead.
func (*IsisShIfAfFwdAddrUnknown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{43}
}

func (x *IsisShIfAfFwdAddrUnknown) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfAfFwdAddrStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Unknown forwarding address data
	Unknown *IsisShIfAfFwdAddrUnknown `protobuf:"bytes,2,opt,name=unknown,proto3" json:"unknown,omitempty"`
	// Known Forwarding address data
	ForwardingAddressData *IsisShIfAfFwdAddrData `protobuf:"bytes,3,opt,name=forwarding_address_data,json=forwardingAddressData,proto3" json:"forwarding_address_data,omitempty"`
}

func (x *IsisShIfAfFwdAddrStatus) Reset() {
	*x = IsisShIfAfFwdAddrStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfFwdAddrStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfFwdAddrStatus) ProtoMessage() {}

func (x *IsisShIfAfFwdAddrStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfFwdAddrStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfAfFwdAddrStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{44}
}

func (x *IsisShIfAfFwdAddrStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfAfFwdAddrStatus) GetUnknown() *IsisShIfAfFwdAddrUnknown {
	if x != nil {
		return x.Unknown
	}
	return nil
}

func (x *IsisShIfAfFwdAddrStatus) GetForwardingAddressData() *IsisShIfAfFwdAddrData {
	if x != nil {
		return x.ForwardingAddressData
	}
	return nil
}

// Address family protocol down info
type IsisShIfAfProtoDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the Address Family protocol status is down
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfAfProtoDown) Reset() {
	*x = IsisShIfAfProtoDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfProtoDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfProtoDown) ProtoMessage() {}

func (x *IsisShIfAfProtoDown) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfProtoDown.ProtoReflect.Descriptor instead.
func (*IsisShIfAfProtoDown) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{45}
}

func (x *IsisShIfAfProtoDown) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type IsisShIfAfProtoStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disabled state of the Address Family protocol
	Disabled *IsisShIfAfProtoDown `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *IsisShIfAfProtoStatus) Reset() {
	*x = IsisShIfAfProtoStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfProtoStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfProtoStatus) ProtoMessage() {}

func (x *IsisShIfAfProtoStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfProtoStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfAfProtoStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{46}
}

func (x *IsisShIfAfProtoStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfAfProtoStatus) GetDisabled() *IsisShIfAfProtoDown {
	if x != nil {
		return x.Disabled
	}
	return nil
}

// Address family disabled info
type IsisShIfAfDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason why the Address Family is disabled
	ReasonCode string `protobuf:"bytes,1,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *IsisShIfAfDisabled) Reset() {
	*x = IsisShIfAfDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfDisabled) ProtoMessage() {}

func (x *IsisShIfAfDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfDisabled.ProtoReflect.Descriptor instead.
func (*IsisShIfAfDisabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{47}
}

func (x *IsisShIfAfDisabled) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

// Enabled address-family info of an interface
type IsisShIfAfEnabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol status of the AF
	ProtocolStatus *IsisShIfAfProtoStatus `protobuf:"bytes,1,opt,name=protocol_status,json=protocolStatus,proto3" json:"protocol_status,omitempty"`
	// Forwarding status of the AF
	ForwardingAddressStatus *IsisShIfAfFwdAddrStatus `protobuf:"bytes,2,opt,name=forwarding_address_status,json=forwardingAddressStatus,proto3" json:"forwarding_address_status,omitempty"`
	// Prefix status of the AF
	PrefixStatus *IsisShIfAfPrefixStatus `protobuf:"bytes,3,opt,name=prefix_status,json=prefixStatus,proto3" json:"prefix_status,omitempty"`
}

func (x *IsisShIfAfEnabled) Reset() {
	*x = IsisShIfAfEnabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfEnabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfEnabled) ProtoMessage() {}

func (x *IsisShIfAfEnabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfEnabled.ProtoReflect.Descriptor instead.
func (*IsisShIfAfEnabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{48}
}

func (x *IsisShIfAfEnabled) GetProtocolStatus() *IsisShIfAfProtoStatus {
	if x != nil {
		return x.ProtocolStatus
	}
	return nil
}

func (x *IsisShIfAfEnabled) GetForwardingAddressStatus() *IsisShIfAfFwdAddrStatus {
	if x != nil {
		return x.ForwardingAddressStatus
	}
	return nil
}

func (x *IsisShIfAfEnabled) GetPrefixStatus() *IsisShIfAfPrefixStatus {
	if x != nil {
		return x.PrefixStatus
	}
	return nil
}

type IsisShIfAfStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disabled info for the AF of an interface
	Disabled *IsisShIfAfDisabled `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Enabled data for the AF of an interface
	AfData *IsisShIfAfEnabled `protobuf:"bytes,3,opt,name=af_data,json=afData,proto3" json:"af_data,omitempty"`
}

func (x *IsisShIfAfStatus) Reset() {
	*x = IsisShIfAfStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAfStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAfStatus) ProtoMessage() {}

func (x *IsisShIfAfStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAfStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfAfStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{49}
}

func (x *IsisShIfAfStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfAfStatus) GetDisabled() *IsisShIfAfDisabled {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *IsisShIfAfStatus) GetAfData() *IsisShIfAfEnabled {
	if x != nil {
		return x.AfData
	}
	return nil
}

// Per Address family info
type IsisShIfAf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address Family Identifier of the interface
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// Address Family status of the interface
	AfStatus *IsisShIfAfStatus `protobuf:"bytes,2,opt,name=af_status,json=afStatus,proto3" json:"af_status,omitempty"`
}

func (x *IsisShIfAf) Reset() {
	*x = IsisShIfAf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfAf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfAf) ProtoMessage() {}

func (x *IsisShIfAf) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfAf.ProtoReflect.Descriptor instead.
func (*IsisShIfAf) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{50}
}

func (x *IsisShIfAf) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisShIfAf) GetAfStatus() *IsisShIfAfStatus {
	if x != nil {
		return x.AfStatus
	}
	return nil
}

// Per-interface data
type IsisShIfActiveP2P struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in ms before the next IIH can be sent
	TimeUntilNextIih uint32 `protobuf:"varint,1,opt,name=time_until_next_iih,json=timeUntilNextIih,proto3" json:"time_until_next_iih,omitempty"`
	// No. of LSPs queued to be retransmitted
	RetransmitLspQueueSize uint32 `protobuf:"varint,2,opt,name=retransmit_lsp_queue_size,json=retransmitLspQueueSize,proto3" json:"retransmit_lsp_queue_size,omitempty"`
	// Time in ms until the next scheduled LSP is retransmitted
	RetransmitLspInterval uint32 `protobuf:"varint,3,opt,name=retransmit_lsp_interval,json=retransmitLspInterval,proto3" json:"retransmit_lsp_interval,omitempty"`
	// Extended Circuit Number valid for a P2P interface
	ExtendedCircuitNumber uint32 `protobuf:"varint,4,opt,name=extended_circuit_number,json=extendedCircuitNumber,proto3" json:"extended_circuit_number,omitempty"`
}

func (x *IsisShIfActiveP2P) Reset() {
	*x = IsisShIfActiveP2P{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfActiveP2P) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfActiveP2P) ProtoMessage() {}

func (x *IsisShIfActiveP2P) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfActiveP2P.ProtoReflect.Descriptor instead.
func (*IsisShIfActiveP2P) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{51}
}

func (x *IsisShIfActiveP2P) GetTimeUntilNextIih() uint32 {
	if x != nil {
		return x.TimeUntilNextIih
	}
	return 0
}

func (x *IsisShIfActiveP2P) GetRetransmitLspQueueSize() uint32 {
	if x != nil {
		return x.RetransmitLspQueueSize
	}
	return 0
}

func (x *IsisShIfActiveP2P) GetRetransmitLspInterval() uint32 {
	if x != nil {
		return x.RetransmitLspInterval
	}
	return 0
}

func (x *IsisShIfActiveP2P) GetExtendedCircuitNumber() uint32 {
	if x != nil {
		return x.ExtendedCircuitNumber
	}
	return 0
}

// Per-interface BFD data
type IsisShIfBfdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 BFD enabled status
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// IPv6 BFD enabled status
	Ipv6Enabled bool `protobuf:"varint,2,opt,name=ipv6_enabled,json=ipv6Enabled,proto3" json:"ipv6_enabled,omitempty"`
	// BFD hello minimum interval in milliseconds
	Interval uint32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	// BFD hello multiplier
	Multiplier uint32 `protobuf:"varint,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *IsisShIfBfdType) Reset() {
	*x = IsisShIfBfdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfBfdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfBfdType) ProtoMessage() {}

func (x *IsisShIfBfdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfBfdType.ProtoReflect.Descriptor instead.
func (*IsisShIfBfdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{52}
}

func (x *IsisShIfBfdType) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *IsisShIfBfdType) GetIpv6Enabled() bool {
	if x != nil {
		return x.Ipv6Enabled
	}
	return false
}

func (x *IsisShIfBfdType) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *IsisShIfBfdType) GetMultiplier() uint32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

// State of an enabled interface
type IsisShIfEnabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface's Adjacency Formation status
	AdjacencyFormStatus *IsisShIfAdjFormStatus `protobuf:"bytes,1,opt,name=adjacency_form_status,json=adjacencyFormStatus,proto3" json:"adjacency_form_status,omitempty"`
	// Interface's Prefix Advertisement status
	AdvPrefixStatus *IsisShIfAdvPrefixStatus `protobuf:"bytes,2,opt,name=adv_prefix_status,json=advPrefixStatus,proto3" json:"adv_prefix_status,omitempty"`
	// Media type of the interface
	InterfaceMediaType string `protobuf:"bytes,3,opt,name=interface_media_type,json=interfaceMediaType,proto3" json:"interface_media_type,omitempty"`
	// Enabled Circuit type of the interface
	EnabledCircuitType string `protobuf:"bytes,4,opt,name=enabled_circuit_type,json=enabledCircuitType,proto3" json:"enabled_circuit_type,omitempty"`
	// Local Circuit Number of the interface
	LocalCircuitNumber uint32 `protobuf:"varint,5,opt,name=local_circuit_number,json=localCircuitNumber,proto3" json:"local_circuit_number,omitempty"`
	// Data for an active P2P interface, NULL if not active or P2P
	P2PData *IsisShIfActiveP2P `protobuf:"bytes,6,opt,name=p2_p_data,json=p2PData,proto3" json:"p2_p_data,omitempty"`
	// The BFD data for the given interface
	BfdData *IsisShIfBfdType `protobuf:"bytes,7,opt,name=bfd_data,json=bfdData,proto3" json:"bfd_data,omitempty"`
	// Rsi Srlg Registered
	RsiSrlgRegistered bool `protobuf:"varint,8,opt,name=rsi_srlg_registered,json=rsiSrlgRegistered,proto3" json:"rsi_srlg_registered,omitempty"`
	// Interface data specific to CLNS I/O services
	ClnsData *IsisShIfClns `protobuf:"bytes,9,opt,name=clns_data,json=clnsData,proto3" json:"clns_data,omitempty"`
	// Underlying interface list for bundle interfaces
	UnderlyingInterfaceList []string `protobuf:"bytes,10,rep,name=underlying_interface_list,json=underlyingInterfaceList,proto3" json:"underlying_interface_list,omitempty"`
	// Array of area information for an active interface
	PerAreaData []*IsisShIfAreaActive `protobuf:"bytes,11,rep,name=per_area_data,json=perAreaData,proto3" json:"per_area_data,omitempty"`
	// Array of topology information
	PerTopologyData []*IsisShIfTopo `protobuf:"bytes,12,rep,name=per_topology_data,json=perTopologyData,proto3" json:"per_topology_data,omitempty"`
	// Array of address family information
	PerAddressFamilyData []*IsisShIfAf `protobuf:"bytes,13,rep,name=per_address_family_data,json=perAddressFamilyData,proto3" json:"per_address_family_data,omitempty"`
}

func (x *IsisShIfEnabled) Reset() {
	*x = IsisShIfEnabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfEnabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfEnabled) ProtoMessage() {}

func (x *IsisShIfEnabled) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfEnabled.ProtoReflect.Descriptor instead.
func (*IsisShIfEnabled) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{53}
}

func (x *IsisShIfEnabled) GetAdjacencyFormStatus() *IsisShIfAdjFormStatus {
	if x != nil {
		return x.AdjacencyFormStatus
	}
	return nil
}

func (x *IsisShIfEnabled) GetAdvPrefixStatus() *IsisShIfAdvPrefixStatus {
	if x != nil {
		return x.AdvPrefixStatus
	}
	return nil
}

func (x *IsisShIfEnabled) GetInterfaceMediaType() string {
	if x != nil {
		return x.InterfaceMediaType
	}
	return ""
}

func (x *IsisShIfEnabled) GetEnabledCircuitType() string {
	if x != nil {
		return x.EnabledCircuitType
	}
	return ""
}

func (x *IsisShIfEnabled) GetLocalCircuitNumber() uint32 {
	if x != nil {
		return x.LocalCircuitNumber
	}
	return 0
}

func (x *IsisShIfEnabled) GetP2PData() *IsisShIfActiveP2P {
	if x != nil {
		return x.P2PData
	}
	return nil
}

func (x *IsisShIfEnabled) GetBfdData() *IsisShIfBfdType {
	if x != nil {
		return x.BfdData
	}
	return nil
}

func (x *IsisShIfEnabled) GetRsiSrlgRegistered() bool {
	if x != nil {
		return x.RsiSrlgRegistered
	}
	return false
}

func (x *IsisShIfEnabled) GetClnsData() *IsisShIfClns {
	if x != nil {
		return x.ClnsData
	}
	return nil
}

func (x *IsisShIfEnabled) GetUnderlyingInterfaceList() []string {
	if x != nil {
		return x.UnderlyingInterfaceList
	}
	return nil
}

func (x *IsisShIfEnabled) GetPerAreaData() []*IsisShIfAreaActive {
	if x != nil {
		return x.PerAreaData
	}
	return nil
}

func (x *IsisShIfEnabled) GetPerTopologyData() []*IsisShIfTopo {
	if x != nil {
		return x.PerTopologyData
	}
	return nil
}

func (x *IsisShIfEnabled) GetPerAddressFamilyData() []*IsisShIfAf {
	if x != nil {
		return x.PerAddressFamilyData
	}
	return nil
}

type IsisShIfStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The interface state if disabled
	Disabled *IsisShIfDisabled `protobuf:"bytes,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// The interface state if enabled
	Enabled *IsisShIfEnabled `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *IsisShIfStatus) Reset() {
	*x = IsisShIfStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShIfStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShIfStatus) ProtoMessage() {}

func (x *IsisShIfStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShIfStatus.ProtoReflect.Descriptor instead.
func (*IsisShIfStatus) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP(), []int{54}
}

func (x *IsisShIfStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsisShIfStatus) GetDisabled() *IsisShIfDisabled {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *IsisShIfStatus) GetEnabled() *IsisShIfEnabled {
	if x != nil {
		return x.Enabled
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDesc = []byte{
	0x0a, 0x59, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x69, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x0a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x66,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x73, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e,
	0x73, 0x72, 0x49, 0x6e, 0x74, 0x66, 0x22, 0x2e, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x54, 0x0a, 0x15,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x74, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x22, 0x98, 0x02, 0x0a, 0x13,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x12, 0x73, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x36, 0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1a, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x1e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x61, 0x64, 0x76, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3d, 0x0a, 0x1a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xbd, 0x01, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x0c, 0x63, 0x6c, 0x6e, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x3e, 0x0a, 0x1b, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x6d, 0x74, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xc7, 0x01, 0x0a, 0x1a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x6d, 0x74, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7f, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x6d, 0x74, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x3f, 0x0a, 0x1c, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x73, 0x6e,
	0x70, 0x61, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x73,
	0x6e, 0x70, 0x61, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x70,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x70, 0x61, 0x22, 0xb4, 0x02,
	0x0a, 0x1b, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x7a, 0x0a, 0x05, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x73, 0x6e, 0x70, 0x61, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x05, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x3b, 0x0a, 0x18, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0xad,
	0x01, 0x0a, 0x1c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x12,
	0x8c, 0x01, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaa,
	0x01, 0x0a, 0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x70, 0x32, 0x5f, 0x70, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x70,
	0x32, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x52, 0x0e, 0x70, 0x32, 0x50,
	0x4f, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x02, 0x0a, 0x25,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x0d, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x63, 0x6c, 0x6e, 0x73, 0x4c, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x70, 0x32, 0x5f, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x6e, 0x73, 0x50,
	0x32, 0x50, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x07, 0x0a, 0x0f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x60, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x63, 0x6c, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7f,
	0x0a, 0x08, 0x6d, 0x74, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x6d, 0x74, 0x75, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x6d, 0x74, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x84, 0x01, 0x0a, 0x0a, 0x73, 0x6e, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x73, 0x6e, 0x70, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x6e, 0x70,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x73,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x73, 0x70,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x6c, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x73, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x15, 0x6c, 0x73,
	0x70, 0x5f, 0x74, 0x78, 0x6d, 0x69, 0x74, 0x64, 0x5f, 0x62, 0x32, 0x5f, 0x62, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x73, 0x70, 0x54, 0x78,
	0x6d, 0x69, 0x74, 0x64, 0x42, 0x32, 0x42, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x13,
	0x6c, 0x73, 0x70, 0x5f, 0x74, 0x78, 0x6d, 0x74, 0x5f, 0x62, 0x32, 0x5f, 0x62, 0x5f, 0x6d, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x73, 0x70, 0x54, 0x78,
	0x6d, 0x74, 0x42, 0x32, 0x42, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x73, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x73,
	0x70, 0x49, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0xe1,
	0x01, 0x0a, 0x1a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x69, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x49,
	0x69, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x65, 0x57, 0x65, 0x44,
	0x69, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x73, 0x70, 0x50, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x73, 0x6e, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x70, 0x73, 0x6e, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x7f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x6c,
	0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x21, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc3, 0x01, 0x0a,
	0x1f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x46, 0x0a, 0x23, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x21, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61,
	0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0xd2, 0x09, 0x0a, 0x17, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x9d, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x69, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x61, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x97, 0x01, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x31, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x31, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6b, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x6d, 0x61, 0x78, 0x42, 0x6b, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x72, 0x74,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x53, 0x72, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x6c, 0x64, 0x70, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4c, 0x64, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f,
	0x6c, 0x64, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4c, 0x64,
	0x70, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x64, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x64, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x64, 0x5f, 0x70, 0x76, 0x36, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6c, 0x64, 0x50, 0x76, 0x36, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f,
	0x6c, 0x6b, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4c, 0x6b, 0x67,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x6c, 0x6b, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x4c, 0x6b, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x70, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x31, 0x50, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x70, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x50, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f,
	0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x50, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x5f, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x50, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x18, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7e, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69,
	0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7b, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x12, 0x7c, 0x0a, 0x0b, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x75, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75,
	0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x22, 0xbf, 0x02,
	0x0a, 0x1b, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xe6, 0x01, 0x0a, 0x1b, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61,
	0x66, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x8a, 0x01, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x1e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x1d,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x66, 0x77,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66,
	0x5f, 0x66, 0x77, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x9d, 0x01, 0x0a, 0x17, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x18, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7e,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x62, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x39,
	0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x03, 0x0a, 0x15, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x19, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66,
	0x5f, 0x66, 0x77, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x17, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x14, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f,
	0x61, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x06, 0x61, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xa5, 0x01, 0x0a, 0x0d, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61,
	0x66, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x09, 0x61, 0x66,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x61,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x32,
	0x70, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x69, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x69, 0x68,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4c,
	0x73, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4c, 0x73, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x13,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xd5, 0x0a, 0x0a,
	0x12, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x61, 0x64, 0x6a, 0x61, 0x63,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x09, 0x70, 0x32, 0x5f,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x32, 0x70, 0x52, 0x07, 0x70,
	0x32, 0x50, 0x44, 0x61, 0x74, 0x61, 0x12, 0x78, 0x0a, 0x08, 0x62, 0x66, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x62,
	0x66, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x66, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x73, 0x69, 0x5f, 0x73, 0x72, 0x6c, 0x67, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72,
	0x73, 0x69, 0x53, 0x72, 0x6c, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x76, 0x0a, 0x09, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x52, 0x08,
	0x63, 0x6c, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f,
	0x69, 0x66, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x85, 0x01, 0x0a, 0x11,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x66, 0x52, 0x14,
	0x70, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x02, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x69, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x79, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x76, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_goTypes = []interface{}{
	(*IsisShIf_KEYS)(nil),                   // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_KEYS
	(*IsisShIf)(nil),                        // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if
	(*IsisIpv6AddressType)(nil),             // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv6_address_type
	(*IsisIpv4PrefixType)(nil),              // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv4_prefix_type
	(*IsisIpv6PrefixType)(nil),              // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv6_prefix_type
	(*IsisIpAddrType)(nil),                  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_addr_type
	(*IsisIpPrefixType)(nil),                // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_prefix_type
	(*IsisTopoIdType)(nil),                  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_topo_id_type
	(*IsisShIfDisabled)(nil),                // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_disabled
	(*IsisShIfAdjFormDisabled)(nil),         // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adj_form_disabled
	(*IsisShIfAdjFormStatus)(nil),           // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adj_form_status
	(*IsisShIfAdvPrefixDisabled)(nil),       // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adv_prefix_disabled
	(*IsisShIfAdvPrefixStatus)(nil),         // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adv_prefix_status
	(*IsisShIfCfgStatus)(nil),               // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_cfg_status
	(*IsisShIfClnsProtoDown)(nil),           // 14: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_proto_down
	(*IsisShIfClnsStatus)(nil),              // 15: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_status
	(*IsisShIfClnsMtuInvalid)(nil),          // 16: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_mtu_invalid
	(*IsisShIfClnsMtuStatus)(nil),           // 17: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_mtu_status
	(*IsisShIfClnsSnpaUnknown)(nil),         // 18: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_unknown
	(*IsisShIfClnsSnpaKnown)(nil),           // 19: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_known
	(*IsisShIfClnsSnpaStatus)(nil),          // 20: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_status
	(*IsisShIfMcastInvalid)(nil),            // 21: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_invalid
	(*IsisShIfMcastStatus)(nil),             // 22: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_status
	(*IsisShIfAreaClns)(nil),                // 23: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_clns
	(*IsisShIfClnsLan)(nil),                 // 24: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_lan
	(*IsisShIfClnsP2POverLan)(nil),          // 25: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p_over_lan
	(*IsisShIfClnsP2P)(nil),                 // 26: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p
	(*IsisShIfClnsMediaSpecificStatus)(nil), // 27: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_media_specific_status
	(*IsisShIfClns)(nil),                    // 28: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns
	(*IsisShIfAreaActiveLan)(nil),           // 29: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_active_lan
	(*IsisShIfAreaActive)(nil),              // 30: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_active
	(*IsisShIfTopoAdjFormDisabled)(nil),     // 31: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adj_form_disabled
	(*IsisShIfTopoAdjFormStatus)(nil),       // 32: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adj_form_status
	(*IsisShIfTopoAdvPrefixDisabled)(nil),   // 33: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adv_prefix_disabled
	(*IsisShIfTopoAdvPrefixStatus)(nil),     // 34: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adv_prefix_status
	(*IsisShIfTopoEnabled)(nil),             // 35: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_enabled
	(*IsisShIfTopoDisabled)(nil),            // 36: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_disabled
	(*IsisShIfTopoStatus)(nil),              // 37: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_status
	(*IsisShIfTopo)(nil),                    // 38: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo
	(*IsisShIfAfPrefixUnknown)(nil),         // 39: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_unknown
	(*IsisShIfAfPrefixData)(nil),            // 40: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_data
	(*IsisShIfAfPrefixStatus)(nil),          // 41: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_status
	(*IsisShIfAfFwdAddrData)(nil),           // 42: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_data
	(*IsisShIfAfFwdAddrUnknown)(nil),        // 43: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_unknown
	(*IsisShIfAfFwdAddrStatus)(nil),         // 44: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_status
	(*IsisShIfAfProtoDown)(nil),             // 45: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_proto_down
	(*IsisShIfAfProtoStatus)(nil),           // 46: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_proto_status
	(*IsisShIfAfDisabled)(nil),              // 47: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_disabled
	(*IsisShIfAfEnabled)(nil),               // 48: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_enabled
	(*IsisShIfAfStatus)(nil),                // 49: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_status
	(*IsisShIfAf)(nil),                      // 50: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af
	(*IsisShIfActiveP2P)(nil),               // 51: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_active_p2p
	(*IsisShIfBfdType)(nil),                 // 52: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_bfd_type
	(*IsisShIfEnabled)(nil),                 // 53: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled
	(*IsisShIfStatus)(nil),                  // 54: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_status
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_depIdxs = []int32{
	13, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if.configured_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_cfg_status
	54, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if.interface_status_and_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_status
	2,  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_addr_type.ipv6:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv6_address_type
	3,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_prefix_type.ipv4:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv4_prefix_type
	4,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_prefix_type.ipv6:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ipv6_prefix_type
	9,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adj_form_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adj_form_disabled
	11, // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adv_prefix_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adv_prefix_disabled
	14, // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_status.clns_down_info:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_proto_down
	16, // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_mtu_status.invalid:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_mtu_invalid
	18, // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_status.unknown:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_unknown
	19, // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_status.known:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_known
	21, // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_status.invalid:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_invalid
	22, // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_clns.multicast_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_status
	23, // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_lan.per_area_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_clns
	22, // 14: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p_over_lan.multicast_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_mcast_status
	25, // 15: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p.p2_p_over_lan_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p_over_lan
	24, // 16: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_media_specific_status.clns_lan_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_lan
	26, // 17: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_media_specific_status.clns_p2_p_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_p2p
	15, // 18: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns.clns_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_status
	17, // 19: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns.mtu_info:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_mtu_status
	20, // 20: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns.snpa_state:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_snpa_status
	27, // 21: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns.media_specific_state:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns_media_specific_status
	29, // 22: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_active.lan_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_active_lan
	31, // 23: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adj_form_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adj_form_disabled
	33, // 24: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adv_prefix_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adv_prefix_disabled
	32, // 25: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_enabled.adjacency_form_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adj_form_status
	34, // 26: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_enabled.adv_prefix_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_adv_prefix_status
	36, // 27: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_disabled
	35, // 28: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_status.enabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_enabled
	7,  // 29: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo.topology_id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_topo_id_type
	37, // 30: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo.status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo_status
	6,  // 31: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_data.prefix:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_prefix_type
	39, // 32: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_status.unknown:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_unknown
	40, // 33: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_status.prefix_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_data
	5,  // 34: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_data.forwarding_address:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_ip_addr_type
	43, // 35: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_status.unknown:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_unknown
	42, // 36: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_status.forwarding_address_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_data
	45, // 37: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_proto_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_proto_down
	46, // 38: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_enabled.protocol_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_proto_status
	44, // 39: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_enabled.forwarding_address_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_fwd_addr_status
	41, // 40: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_enabled.prefix_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_prefix_status
	47, // 41: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_disabled
	48, // 42: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_status.af_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_enabled
	49, // 43: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af.af_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af_status
	10, // 44: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.adjacency_form_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adj_form_status
	12, // 45: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.adv_prefix_status:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_adv_prefix_status
	51, // 46: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.p2_p_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_active_p2p
	52, // 47: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.bfd_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_bfd_type
	28, // 48: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.clns_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_clns
	30, // 49: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.per_area_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_area_active
	38, // 50: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.per_topology_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_topo
	50, // 51: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled.per_address_family_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_af
	8,  // 52: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_status.disabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_disabled
	53, // 53: cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_status.enabled:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.interfaces.interface.isis_sh_if_enabled
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIf_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv6AddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv4PrefixType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv6PrefixType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpAddrType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpPrefixType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTopoIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAdjFormDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAdjFormStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAdvPrefixDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAdvPrefixStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfCfgStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsProtoDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsMtuInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsMtuStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsSnpaUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsSnpaKnown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsSnpaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfMcastInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfMcastStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAreaClns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsLan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsP2POverLan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsP2P); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClnsMediaSpecificStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfClns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAreaActiveLan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAreaActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopoAdjFormDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopoAdjFormStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopoAdvPrefixDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopoAdvPrefixStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopoEnabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopoDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopoStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfTopo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfPrefixUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfPrefixData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfPrefixStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfFwdAddrData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfFwdAddrUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfFwdAddrStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfProtoDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfProtoStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfEnabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAfStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfAf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfActiveP2P); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfBfdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfEnabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShIfStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_interfaces_interface_isis_sh_if_proto_depIdxs = nil
}
