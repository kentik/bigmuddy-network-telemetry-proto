// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/nsr_status/isis_sh_nsr_status_global.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IS-IS process NSR status
type IsisShNsrStatusGlobal_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (x *IsisShNsrStatusGlobal_KEYS) Reset() {
	*x = IsisShNsrStatusGlobal_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShNsrStatusGlobal_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShNsrStatusGlobal_KEYS) ProtoMessage() {}

func (x *IsisShNsrStatusGlobal_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShNsrStatusGlobal_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShNsrStatusGlobal_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShNsrStatusGlobal_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type IsisShNsrStatusGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISIS VM STATE
	IsisVmState uint32 `protobuf:"varint,50,opt,name=isis_vm_state,json=isisVmState,proto3" json:"isis_vm_state,omitempty"`
	// ISIS NSR PEER STATUS
	IsisNsrPeer *NsrStatusGblType `protobuf:"bytes,51,opt,name=isis_nsr_peer,json=isisNsrPeer,proto3" json:"isis_nsr_peer,omitempty"`
	// ISIS NSR Infra
	IsisNsrInfra *NsrStatusInfraType `protobuf:"bytes,52,opt,name=isis_nsr_infra,json=isisNsrInfra,proto3" json:"isis_nsr_infra,omitempty"`
}

func (x *IsisShNsrStatusGlobal) Reset() {
	*x = IsisShNsrStatusGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShNsrStatusGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShNsrStatusGlobal) ProtoMessage() {}

func (x *IsisShNsrStatusGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShNsrStatusGlobal.ProtoReflect.Descriptor instead.
func (*IsisShNsrStatusGlobal) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShNsrStatusGlobal) GetIsisVmState() uint32 {
	if x != nil {
		return x.IsisVmState
	}
	return 0
}

func (x *IsisShNsrStatusGlobal) GetIsisNsrPeer() *NsrStatusGblType {
	if x != nil {
		return x.IsisNsrPeer
	}
	return nil
}

func (x *IsisShNsrStatusGlobal) GetIsisNsrInfra() *NsrStatusInfraType {
	if x != nil {
		return x.IsisNsrInfra
	}
	return nil
}

// Timestamp for an event
type IsisShTimestampType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds,proto3" json:"nano_seconds,omitempty"`
}

func (x *IsisShTimestampType) Reset() {
	*x = IsisShTimestampType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTimestampType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTimestampType) ProtoMessage() {}

func (x *IsisShTimestampType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTimestampType.ProtoReflect.Descriptor instead.
func (*IsisShTimestampType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{2}
}

func (x *IsisShTimestampType) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *IsisShTimestampType) GetNanoSeconds() uint32 {
	if x != nil {
		return x.NanoSeconds
	}
	return 0
}

type NsrStatusGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyNodeid       uint32 `protobuf:"varint,1,opt,name=my_nodeid,json=myNodeid,proto3" json:"my_nodeid,omitempty"`
	MyProcessId    uint32 `protobuf:"varint,2,opt,name=my_process_id,json=myProcessId,proto3" json:"my_process_id,omitempty"`
	PmIssuRole     uint32 `protobuf:"varint,3,opt,name=pm_issu_role,json=pmIssuRole,proto3" json:"pm_issu_role,omitempty"`
	PmHaRole       uint32 `protobuf:"varint,4,opt,name=pm_ha_role,json=pmHaRole,proto3" json:"pm_ha_role,omitempty"`
	SysmgrHaRole   uint32 `protobuf:"varint,5,opt,name=sysmgr_ha_role,json=sysmgrHaRole,proto3" json:"sysmgr_ha_role,omitempty"`
	NsrSendReady   uint32 `protobuf:"varint,6,opt,name=nsr_send_ready,json=nsrSendReady,proto3" json:"nsr_send_ready,omitempty"`
	NsrSendUnready uint32 `protobuf:"varint,7,opt,name=nsr_send_unready,json=nsrSendUnready,proto3" json:"nsr_send_unready,omitempty"`
	NsrSendErr     uint32 `protobuf:"varint,8,opt,name=nsr_send_err,json=nsrSendErr,proto3" json:"nsr_send_err,omitempty"`
	NsrRecvErr     uint32 `protobuf:"varint,9,opt,name=nsr_recv_err,json=nsrRecvErr,proto3" json:"nsr_recv_err,omitempty"`
	RetryFlag      uint32 `protobuf:"varint,10,opt,name=retry_flag,json=retryFlag,proto3" json:"retry_flag,omitempty"`
	NsrEnabled     bool   `protobuf:"varint,11,opt,name=nsr_enabled,json=nsrEnabled,proto3" json:"nsr_enabled,omitempty"`
	NsrConfigured  bool   `protobuf:"varint,12,opt,name=nsr_configured,json=nsrConfigured,proto3" json:"nsr_configured,omitempty"`
	NsfConfigured  bool   `protobuf:"varint,13,opt,name=nsf_configured,json=nsfConfigured,proto3" json:"nsf_configured,omitempty"`
	Failover       bool   `protobuf:"varint,14,opt,name=failover,proto3" json:"failover,omitempty"`
	LanidReqNeeded bool   `protobuf:"varint,15,opt,name=lanid_req_needed,json=lanidReqNeeded,proto3" json:"lanid_req_needed,omitempty"`
}

func (x *NsrStatusGen) Reset() {
	*x = NsrStatusGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusGen) ProtoMessage() {}

func (x *NsrStatusGen) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusGen.ProtoReflect.Descriptor instead.
func (*NsrStatusGen) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{3}
}

func (x *NsrStatusGen) GetMyNodeid() uint32 {
	if x != nil {
		return x.MyNodeid
	}
	return 0
}

func (x *NsrStatusGen) GetMyProcessId() uint32 {
	if x != nil {
		return x.MyProcessId
	}
	return 0
}

func (x *NsrStatusGen) GetPmIssuRole() uint32 {
	if x != nil {
		return x.PmIssuRole
	}
	return 0
}

func (x *NsrStatusGen) GetPmHaRole() uint32 {
	if x != nil {
		return x.PmHaRole
	}
	return 0
}

func (x *NsrStatusGen) GetSysmgrHaRole() uint32 {
	if x != nil {
		return x.SysmgrHaRole
	}
	return 0
}

func (x *NsrStatusGen) GetNsrSendReady() uint32 {
	if x != nil {
		return x.NsrSendReady
	}
	return 0
}

func (x *NsrStatusGen) GetNsrSendUnready() uint32 {
	if x != nil {
		return x.NsrSendUnready
	}
	return 0
}

func (x *NsrStatusGen) GetNsrSendErr() uint32 {
	if x != nil {
		return x.NsrSendErr
	}
	return 0
}

func (x *NsrStatusGen) GetNsrRecvErr() uint32 {
	if x != nil {
		return x.NsrRecvErr
	}
	return 0
}

func (x *NsrStatusGen) GetRetryFlag() uint32 {
	if x != nil {
		return x.RetryFlag
	}
	return 0
}

func (x *NsrStatusGen) GetNsrEnabled() bool {
	if x != nil {
		return x.NsrEnabled
	}
	return false
}

func (x *NsrStatusGen) GetNsrConfigured() bool {
	if x != nil {
		return x.NsrConfigured
	}
	return false
}

func (x *NsrStatusGen) GetNsfConfigured() bool {
	if x != nil {
		return x.NsfConfigured
	}
	return false
}

func (x *NsrStatusGen) GetFailover() bool {
	if x != nil {
		return x.Failover
	}
	return false
}

func (x *NsrStatusGen) GetLanidReqNeeded() bool {
	if x != nil {
		return x.LanidReqNeeded
	}
	return false
}

type NsrStatusNcd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmIdx      uint32 `protobuf:"varint,1,opt,name=vm_idx,json=vmIdx,proto3" json:"vm_idx,omitempty"`
	ConnUp     bool   `protobuf:"varint,2,opt,name=conn_up,json=connUp,proto3" json:"conn_up,omitempty"`
	EndpHdl    uint32 `protobuf:"varint,3,opt,name=endp_hdl,json=endpHdl,proto3" json:"endp_hdl,omitempty"`
	Chksum     uint32 `protobuf:"varint,4,opt,name=chksum,proto3" json:"chksum,omitempty"`
	SendSeqnum uint32 `protobuf:"varint,5,opt,name=send_seqnum,json=sendSeqnum,proto3" json:"send_seqnum,omitempty"`
	RecvCnt    uint32 `protobuf:"varint,6,opt,name=recv_cnt,json=recvCnt,proto3" json:"recv_cnt,omitempty"`
}

func (x *NsrStatusNcd) Reset() {
	*x = NsrStatusNcd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusNcd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusNcd) ProtoMessage() {}

func (x *NsrStatusNcd) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusNcd.ProtoReflect.Descriptor instead.
func (*NsrStatusNcd) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{4}
}

func (x *NsrStatusNcd) GetVmIdx() uint32 {
	if x != nil {
		return x.VmIdx
	}
	return 0
}

func (x *NsrStatusNcd) GetConnUp() bool {
	if x != nil {
		return x.ConnUp
	}
	return false
}

func (x *NsrStatusNcd) GetEndpHdl() uint32 {
	if x != nil {
		return x.EndpHdl
	}
	return 0
}

func (x *NsrStatusNcd) GetChksum() uint32 {
	if x != nil {
		return x.Chksum
	}
	return 0
}

func (x *NsrStatusNcd) GetSendSeqnum() uint32 {
	if x != nil {
		return x.SendSeqnum
	}
	return 0
}

func (x *NsrStatusNcd) GetRecvCnt() uint32 {
	if x != nil {
		return x.RecvCnt
	}
	return 0
}

type NsrStatusPm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reg        uint32 `protobuf:"varint,1,opt,name=reg,proto3" json:"reg,omitempty"`
	ConnCb     uint32 `protobuf:"varint,2,opt,name=conn_cb,json=connCb,proto3" json:"conn_cb,omitempty"`
	DisconnCb  uint32 `protobuf:"varint,3,opt,name=disconn_cb,json=disconnCb,proto3" json:"disconn_cb,omitempty"`
	ConnStatus bool   `protobuf:"varint,4,opt,name=conn_status,json=connStatus,proto3" json:"conn_status,omitempty"`
}

func (x *NsrStatusPm) Reset() {
	*x = NsrStatusPm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusPm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusPm) ProtoMessage() {}

func (x *NsrStatusPm) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusPm.ProtoReflect.Descriptor instead.
func (*NsrStatusPm) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{5}
}

func (x *NsrStatusPm) GetReg() uint32 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *NsrStatusPm) GetConnCb() uint32 {
	if x != nil {
		return x.ConnCb
	}
	return 0
}

func (x *NsrStatusPm) GetDisconnCb() uint32 {
	if x != nil {
		return x.DisconnCb
	}
	return 0
}

func (x *NsrStatusPm) GetConnStatus() bool {
	if x != nil {
		return x.ConnStatus
	}
	return false
}

type NsrStatusIsm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn       uint32 `protobuf:"varint,1,opt,name=conn,proto3" json:"conn,omitempty"`
	ConnCb     uint32 `protobuf:"varint,2,opt,name=conn_cb,json=connCb,proto3" json:"conn_cb,omitempty"`
	Disconn    uint32 `protobuf:"varint,3,opt,name=disconn,proto3" json:"disconn,omitempty"`
	DisconnCb  uint32 `protobuf:"varint,4,opt,name=disconn_cb,json=disconnCb,proto3" json:"disconn_cb,omitempty"`
	HaOpt      uint32 `protobuf:"varint,5,opt,name=ha_opt,json=haOpt,proto3" json:"ha_opt,omitempty"`
	HaOptCb    uint32 `protobuf:"varint,6,opt,name=ha_opt_cb,json=haOptCb,proto3" json:"ha_opt_cb,omitempty"`
	WaitReady  uint32 `protobuf:"varint,7,opt,name=wait_ready,json=waitReady,proto3" json:"wait_ready,omitempty"`
	SendReady  uint32 `protobuf:"varint,8,opt,name=send_ready,json=sendReady,proto3" json:"send_ready,omitempty"`
	EvtRspCb   uint32 `protobuf:"varint,9,opt,name=evt_rsp_cb,json=evtRspCb,proto3" json:"evt_rsp_cb,omitempty"`
	RegRspCb   uint32 `protobuf:"varint,10,opt,name=reg_rsp_cb,json=regRspCb,proto3" json:"reg_rsp_cb,omitempty"`
	ConnStatus bool   `protobuf:"varint,11,opt,name=conn_status,json=connStatus,proto3" json:"conn_status,omitempty"`
}

func (x *NsrStatusIsm) Reset() {
	*x = NsrStatusIsm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusIsm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusIsm) ProtoMessage() {}

func (x *NsrStatusIsm) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusIsm.ProtoReflect.Descriptor instead.
func (*NsrStatusIsm) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{6}
}

func (x *NsrStatusIsm) GetConn() uint32 {
	if x != nil {
		return x.Conn
	}
	return 0
}

func (x *NsrStatusIsm) GetConnCb() uint32 {
	if x != nil {
		return x.ConnCb
	}
	return 0
}

func (x *NsrStatusIsm) GetDisconn() uint32 {
	if x != nil {
		return x.Disconn
	}
	return 0
}

func (x *NsrStatusIsm) GetDisconnCb() uint32 {
	if x != nil {
		return x.DisconnCb
	}
	return 0
}

func (x *NsrStatusIsm) GetHaOpt() uint32 {
	if x != nil {
		return x.HaOpt
	}
	return 0
}

func (x *NsrStatusIsm) GetHaOptCb() uint32 {
	if x != nil {
		return x.HaOptCb
	}
	return 0
}

func (x *NsrStatusIsm) GetWaitReady() uint32 {
	if x != nil {
		return x.WaitReady
	}
	return 0
}

func (x *NsrStatusIsm) GetSendReady() uint32 {
	if x != nil {
		return x.SendReady
	}
	return 0
}

func (x *NsrStatusIsm) GetEvtRspCb() uint32 {
	if x != nil {
		return x.EvtRspCb
	}
	return 0
}

func (x *NsrStatusIsm) GetRegRspCb() uint32 {
	if x != nil {
		return x.RegRspCb
	}
	return 0
}

func (x *NsrStatusIsm) GetConnStatus() bool {
	if x != nil {
		return x.ConnStatus
	}
	return false
}

type NsrStatusDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conn         uint32                 `protobuf:"varint,1,opt,name=conn,proto3" json:"conn,omitempty"`
	ConnTs       *IsisShTimestampType   `protobuf:"bytes,2,opt,name=conn_ts,json=connTs,proto3" json:"conn_ts,omitempty"`
	ConnCb       uint32                 `protobuf:"varint,3,opt,name=conn_cb,json=connCb,proto3" json:"conn_cb,omitempty"`
	ConnCbTs     *IsisShTimestampType   `protobuf:"bytes,4,opt,name=conn_cb_ts,json=connCbTs,proto3" json:"conn_cb_ts,omitempty"`
	Pub          uint32                 `protobuf:"varint,5,opt,name=pub,proto3" json:"pub,omitempty"`
	PubTs        *IsisShTimestampType   `protobuf:"bytes,6,opt,name=pub_ts,json=pubTs,proto3" json:"pub_ts,omitempty"`
	PubCb        uint32                 `protobuf:"varint,7,opt,name=pub_cb,json=pubCb,proto3" json:"pub_cb,omitempty"`
	PubCbTs      *IsisShTimestampType   `protobuf:"bytes,8,opt,name=pub_cb_ts,json=pubCbTs,proto3" json:"pub_cb_ts,omitempty"`
	Reg          uint32                 `protobuf:"varint,9,opt,name=reg,proto3" json:"reg,omitempty"`
	RegTs        *IsisShTimestampType   `protobuf:"bytes,10,opt,name=reg_ts,json=regTs,proto3" json:"reg_ts,omitempty"`
	RegCb        uint32                 `protobuf:"varint,11,opt,name=reg_cb,json=regCb,proto3" json:"reg_cb,omitempty"`
	RegCbTs      *IsisShTimestampType   `protobuf:"bytes,12,opt,name=reg_cb_ts,json=regCbTs,proto3" json:"reg_cb_ts,omitempty"`
	Unreg        uint32                 `protobuf:"varint,13,opt,name=unreg,proto3" json:"unreg,omitempty"`
	UnregTs      *IsisShTimestampType   `protobuf:"bytes,14,opt,name=unreg_ts,json=unregTs,proto3" json:"unreg_ts,omitempty"`
	UnregCb      uint32                 `protobuf:"varint,15,opt,name=unreg_cb,json=unregCb,proto3" json:"unreg_cb,omitempty"`
	UnregCbTs    *IsisShTimestampType   `protobuf:"bytes,16,opt,name=unreg_cb_ts,json=unregCbTs,proto3" json:"unreg_cb_ts,omitempty"`
	DisconnCb    uint32                 `protobuf:"varint,17,opt,name=disconn_cb,json=disconnCb,proto3" json:"disconn_cb,omitempty"`
	DisconnCbTs  *IsisShTimestampType   `protobuf:"bytes,18,opt,name=disconn_cb_ts,json=disconnCbTs,proto3" json:"disconn_cb_ts,omitempty"`
	NotifyCb     uint32                 `protobuf:"varint,19,opt,name=notify_cb,json=notifyCb,proto3" json:"notify_cb,omitempty"`
	NotifyCbTs   *IsisShTimestampType   `protobuf:"bytes,20,opt,name=notify_cb_ts,json=notifyCbTs,proto3" json:"notify_cb_ts,omitempty"`
	NotifyPeer   []byte                 `protobuf:"bytes,21,opt,name=notify_peer,json=notifyPeer,proto3" json:"notify_peer,omitempty"`
	NotifyPeerTs []*IsisShTimestampType `protobuf:"bytes,22,rep,name=notify_peer_ts,json=notifyPeerTs,proto3" json:"notify_peer_ts,omitempty"`
	DelCb        uint32                 `protobuf:"varint,23,opt,name=del_cb,json=delCb,proto3" json:"del_cb,omitempty"`
	DelCbTs      *IsisShTimestampType   `protobuf:"bytes,24,opt,name=del_cb_ts,json=delCbTs,proto3" json:"del_cb_ts,omitempty"`
	RemoveSrv    uint32                 `protobuf:"varint,25,opt,name=remove_srv,json=removeSrv,proto3" json:"remove_srv,omitempty"`
	RemoveSrvTs  *IsisShTimestampType   `protobuf:"bytes,26,opt,name=remove_srv_ts,json=removeSrvTs,proto3" json:"remove_srv_ts,omitempty"`
	ConnStatus   bool                   `protobuf:"varint,27,opt,name=conn_status,json=connStatus,proto3" json:"conn_status,omitempty"`
	ConnStatusTs *IsisShTimestampType   `protobuf:"bytes,28,opt,name=conn_status_ts,json=connStatusTs,proto3" json:"conn_status_ts,omitempty"`
}

func (x *NsrStatusDs) Reset() {
	*x = NsrStatusDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusDs) ProtoMessage() {}

func (x *NsrStatusDs) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusDs.ProtoReflect.Descriptor instead.
func (*NsrStatusDs) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{7}
}

func (x *NsrStatusDs) GetConn() uint32 {
	if x != nil {
		return x.Conn
	}
	return 0
}

func (x *NsrStatusDs) GetConnTs() *IsisShTimestampType {
	if x != nil {
		return x.ConnTs
	}
	return nil
}

func (x *NsrStatusDs) GetConnCb() uint32 {
	if x != nil {
		return x.ConnCb
	}
	return 0
}

func (x *NsrStatusDs) GetConnCbTs() *IsisShTimestampType {
	if x != nil {
		return x.ConnCbTs
	}
	return nil
}

func (x *NsrStatusDs) GetPub() uint32 {
	if x != nil {
		return x.Pub
	}
	return 0
}

func (x *NsrStatusDs) GetPubTs() *IsisShTimestampType {
	if x != nil {
		return x.PubTs
	}
	return nil
}

func (x *NsrStatusDs) GetPubCb() uint32 {
	if x != nil {
		return x.PubCb
	}
	return 0
}

func (x *NsrStatusDs) GetPubCbTs() *IsisShTimestampType {
	if x != nil {
		return x.PubCbTs
	}
	return nil
}

func (x *NsrStatusDs) GetReg() uint32 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *NsrStatusDs) GetRegTs() *IsisShTimestampType {
	if x != nil {
		return x.RegTs
	}
	return nil
}

func (x *NsrStatusDs) GetRegCb() uint32 {
	if x != nil {
		return x.RegCb
	}
	return 0
}

func (x *NsrStatusDs) GetRegCbTs() *IsisShTimestampType {
	if x != nil {
		return x.RegCbTs
	}
	return nil
}

func (x *NsrStatusDs) GetUnreg() uint32 {
	if x != nil {
		return x.Unreg
	}
	return 0
}

func (x *NsrStatusDs) GetUnregTs() *IsisShTimestampType {
	if x != nil {
		return x.UnregTs
	}
	return nil
}

func (x *NsrStatusDs) GetUnregCb() uint32 {
	if x != nil {
		return x.UnregCb
	}
	return 0
}

func (x *NsrStatusDs) GetUnregCbTs() *IsisShTimestampType {
	if x != nil {
		return x.UnregCbTs
	}
	return nil
}

func (x *NsrStatusDs) GetDisconnCb() uint32 {
	if x != nil {
		return x.DisconnCb
	}
	return 0
}

func (x *NsrStatusDs) GetDisconnCbTs() *IsisShTimestampType {
	if x != nil {
		return x.DisconnCbTs
	}
	return nil
}

func (x *NsrStatusDs) GetNotifyCb() uint32 {
	if x != nil {
		return x.NotifyCb
	}
	return 0
}

func (x *NsrStatusDs) GetNotifyCbTs() *IsisShTimestampType {
	if x != nil {
		return x.NotifyCbTs
	}
	return nil
}

func (x *NsrStatusDs) GetNotifyPeer() []byte {
	if x != nil {
		return x.NotifyPeer
	}
	return nil
}

func (x *NsrStatusDs) GetNotifyPeerTs() []*IsisShTimestampType {
	if x != nil {
		return x.NotifyPeerTs
	}
	return nil
}

func (x *NsrStatusDs) GetDelCb() uint32 {
	if x != nil {
		return x.DelCb
	}
	return 0
}

func (x *NsrStatusDs) GetDelCbTs() *IsisShTimestampType {
	if x != nil {
		return x.DelCbTs
	}
	return nil
}

func (x *NsrStatusDs) GetRemoveSrv() uint32 {
	if x != nil {
		return x.RemoveSrv
	}
	return 0
}

func (x *NsrStatusDs) GetRemoveSrvTs() *IsisShTimestampType {
	if x != nil {
		return x.RemoveSrvTs
	}
	return nil
}

func (x *NsrStatusDs) GetConnStatus() bool {
	if x != nil {
		return x.ConnStatus
	}
	return false
}

func (x *NsrStatusDs) GetConnStatusTs() *IsisShTimestampType {
	if x != nil {
		return x.ConnStatusTs
	}
	return nil
}

type NsrStatusNiiIntf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist      bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
	BroughtUp  bool `protobuf:"varint,2,opt,name=brought_up,json=broughtUp,proto3" json:"brought_up,omitempty"`
	RetryTimer bool `protobuf:"varint,3,opt,name=retry_timer,json=retryTimer,proto3" json:"retry_timer,omitempty"`
	Running    bool `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	HasAdj     bool `protobuf:"varint,5,opt,name=has_adj,json=hasAdj,proto3" json:"has_adj,omitempty"`
}

func (x *NsrStatusNiiIntf) Reset() {
	*x = NsrStatusNiiIntf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusNiiIntf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusNiiIntf) ProtoMessage() {}

func (x *NsrStatusNiiIntf) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusNiiIntf.ProtoReflect.Descriptor instead.
func (*NsrStatusNiiIntf) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{8}
}

func (x *NsrStatusNiiIntf) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *NsrStatusNiiIntf) GetBroughtUp() bool {
	if x != nil {
		return x.BroughtUp
	}
	return false
}

func (x *NsrStatusNiiIntf) GetRetryTimer() bool {
	if x != nil {
		return x.RetryTimer
	}
	return false
}

func (x *NsrStatusNiiIntf) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *NsrStatusNiiIntf) GetHasAdj() bool {
	if x != nil {
		return x.HasAdj
	}
	return false
}

type NsrStatusTe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           uint32 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ConnUp            uint32 `protobuf:"varint,2,opt,name=conn_up,json=connUp,proto3" json:"conn_up,omitempty"`
	TeLinkCb          uint32 `protobuf:"varint,3,opt,name=te_link_cb,json=teLinkCb,proto3" json:"te_link_cb,omitempty"`
	TeTunnelCb        uint32 `protobuf:"varint,4,opt,name=te_tunnel_cb,json=teTunnelCb,proto3" json:"te_tunnel_cb,omitempty"`
	AdvSyncData       uint32 `protobuf:"varint,5,opt,name=adv_sync_data,json=advSyncData,proto3" json:"adv_sync_data,omitempty"`
	LinkPurgeTimeOn   uint32 `protobuf:"varint,6,opt,name=link_purge_time_on,json=linkPurgeTimeOn,proto3" json:"link_purge_time_on,omitempty"`
	TunnelPurgeTimeOn uint32 `protobuf:"varint,7,opt,name=tunnel_purge_time_on,json=tunnelPurgeTimeOn,proto3" json:"tunnel_purge_time_on,omitempty"`
	HasInfoFromTe     uint32 `protobuf:"varint,8,opt,name=has_info_from_te,json=hasInfoFromTe,proto3" json:"has_info_from_te,omitempty"`
}

func (x *NsrStatusTe) Reset() {
	*x = NsrStatusTe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusTe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusTe) ProtoMessage() {}

func (x *NsrStatusTe) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusTe.ProtoReflect.Descriptor instead.
func (*NsrStatusTe) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{9}
}

func (x *NsrStatusTe) GetEnabled() uint32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *NsrStatusTe) GetConnUp() uint32 {
	if x != nil {
		return x.ConnUp
	}
	return 0
}

func (x *NsrStatusTe) GetTeLinkCb() uint32 {
	if x != nil {
		return x.TeLinkCb
	}
	return 0
}

func (x *NsrStatusTe) GetTeTunnelCb() uint32 {
	if x != nil {
		return x.TeTunnelCb
	}
	return 0
}

func (x *NsrStatusTe) GetAdvSyncData() uint32 {
	if x != nil {
		return x.AdvSyncData
	}
	return 0
}

func (x *NsrStatusTe) GetLinkPurgeTimeOn() uint32 {
	if x != nil {
		return x.LinkPurgeTimeOn
	}
	return 0
}

func (x *NsrStatusTe) GetTunnelPurgeTimeOn() uint32 {
	if x != nil {
		return x.TunnelPurgeTimeOn
	}
	return 0
}

func (x *NsrStatusTe) GetHasInfoFromTe() uint32 {
	if x != nil {
		return x.HasInfoFromTe
	}
	return 0
}

type NsrStatusInfraType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gen    *NsrStatusGen       `protobuf:"bytes,1,opt,name=gen,proto3" json:"gen,omitempty"`
	Ncd    []*NsrStatusNcd     `protobuf:"bytes,2,rep,name=ncd,proto3" json:"ncd,omitempty"`
	Pm     *NsrStatusPm        `protobuf:"bytes,3,opt,name=pm,proto3" json:"pm,omitempty"`
	Ism    *NsrStatusIsm       `protobuf:"bytes,4,opt,name=ism,proto3" json:"ism,omitempty"`
	Ds     *NsrStatusDs        `protobuf:"bytes,5,opt,name=ds,proto3" json:"ds,omitempty"`
	Te     *NsrStatusTe        `protobuf:"bytes,6,opt,name=te,proto3" json:"te,omitempty"`
	NiiIdb []*NsrStatusNiiIntf `protobuf:"bytes,7,rep,name=nii_idb,json=niiIdb,proto3" json:"nii_idb,omitempty"`
}

func (x *NsrStatusInfraType) Reset() {
	*x = NsrStatusInfraType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusInfraType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusInfraType) ProtoMessage() {}

func (x *NsrStatusInfraType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusInfraType.ProtoReflect.Descriptor instead.
func (*NsrStatusInfraType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{10}
}

func (x *NsrStatusInfraType) GetGen() *NsrStatusGen {
	if x != nil {
		return x.Gen
	}
	return nil
}

func (x *NsrStatusInfraType) GetNcd() []*NsrStatusNcd {
	if x != nil {
		return x.Ncd
	}
	return nil
}

func (x *NsrStatusInfraType) GetPm() *NsrStatusPm {
	if x != nil {
		return x.Pm
	}
	return nil
}

func (x *NsrStatusInfraType) GetIsm() *NsrStatusIsm {
	if x != nil {
		return x.Ism
	}
	return nil
}

func (x *NsrStatusInfraType) GetDs() *NsrStatusDs {
	if x != nil {
		return x.Ds
	}
	return nil
}

func (x *NsrStatusInfraType) GetTe() *NsrStatusTe {
	if x != nil {
		return x.Te
	}
	return nil
}

func (x *NsrStatusInfraType) GetNiiIdb() []*NsrStatusNiiIntf {
	if x != nil {
		return x.NiiIdb
	}
	return nil
}

type NsrStatusGblType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullSyncAchieved []uint32 `protobuf:"varint,1,rep,packed,name=full_sync_achieved,json=fullSyncAchieved,proto3" json:"full_sync_achieved,omitempty"`
	ManSyncCount     []uint32 `protobuf:"varint,2,rep,packed,name=man_sync_count,json=manSyncCount,proto3" json:"man_sync_count,omitempty"`
	NsrChgCount      []uint32 `protobuf:"varint,3,rep,packed,name=nsr_chg_count,json=nsrChgCount,proto3" json:"nsr_chg_count,omitempty"`
	UptimeValid      []bool   `protobuf:"varint,4,rep,packed,name=uptime_valid,json=uptimeValid,proto3" json:"uptime_valid,omitempty"`
	Uptime           []uint32 `protobuf:"varint,5,rep,packed,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *NsrStatusGblType) Reset() {
	*x = NsrStatusGblType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NsrStatusGblType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NsrStatusGblType) ProtoMessage() {}

func (x *NsrStatusGblType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NsrStatusGblType.ProtoReflect.Descriptor instead.
func (*NsrStatusGblType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP(), []int{11}
}

func (x *NsrStatusGblType) GetFullSyncAchieved() []uint32 {
	if x != nil {
		return x.FullSyncAchieved
	}
	return nil
}

func (x *NsrStatusGblType) GetManSyncCount() []uint32 {
	if x != nil {
		return x.ManSyncCount
	}
	return nil
}

func (x *NsrStatusGblType) GetNsrChgCount() []uint32 {
	if x != nil {
		return x.NsrChgCount
	}
	return nil
}

func (x *NsrStatusGblType) GetUptimeValid() []bool {
	if x != nil {
		return x.UptimeValid
	}
	return nil
}

func (x *NsrStatusGblType) GetUptime() []uint32 {
	if x != nil {
		return x.Uptime
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDesc = []byte{
	0x0a, 0x5e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x3e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x45, 0x0a, 0x1e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x73, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x19, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x76, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x73,
	0x69, 0x73, 0x56, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x0d, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6e, 0x73, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x62, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x69, 0x73, 0x4e, 0x73, 0x72, 0x50, 0x65,
	0x65, 0x72, 0x12, 0x7b, 0x0a, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x73, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x69, 0x73, 0x69, 0x73, 0x4e, 0x73, 0x72, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x22,
	0x55, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x9f, 0x04, 0x0a, 0x0e, 0x6e, 0x73, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x79, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6d,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x6d, 0x49, 0x73, 0x73, 0x75, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x6d, 0x5f, 0x68, 0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6d, 0x48, 0x61, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x79,
	0x73, 0x6d, 0x67, 0x72, 0x5f, 0x68, 0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x6d, 0x67, 0x72, 0x48, 0x61, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x73, 0x72, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6e, 0x73, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x73, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x45,
	0x72, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x73, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x65,
	0x72, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x73, 0x72, 0x52, 0x65, 0x63,
	0x76, 0x45, 0x72, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x73, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x73, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x73,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x73, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x73, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x6e, 0x73, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x63, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76,
	0x6d, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x6d, 0x49,
	0x64, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x55, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x5f, 0x68, 0x64, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x70, 0x48, 0x64, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x68, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x76, 0x43, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x0d, 0x6e, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x65, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x63, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x5f, 0x63, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x43, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0e, 0x6e, 0x73, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x73, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x63, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x63, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x62, 0x12,
	0x15, 0x0a, 0x06, 0x68, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x68, 0x61, 0x4f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x68, 0x61, 0x5f, 0x6f, 0x70, 0x74,
	0x5f, 0x63, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x61, 0x4f, 0x70, 0x74,
	0x43, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x76, 0x74, 0x5f, 0x72, 0x73, 0x70, 0x5f, 0x63, 0x62, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x76, 0x74, 0x52, 0x73, 0x70, 0x43, 0x62, 0x12, 0x1c,
	0x0a, 0x0a, 0x72, 0x65, 0x67, 0x5f, 0x72, 0x73, 0x70, 0x5f, 0x63, 0x62, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x52, 0x73, 0x70, 0x43, 0x62, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x0f,
	0x0a, 0x0d, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x6e, 0x12, 0x6f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x6e, 0x54, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x63, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x62, 0x12, 0x74, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x63, 0x62, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x43,
	0x62, 0x54, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x75, 0x62, 0x12, 0x6d, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x5f, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70,
	0x75, 0x62, 0x54, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x5f, 0x63, 0x62, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x75, 0x62, 0x43, 0x62, 0x12, 0x72, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x5f, 0x63, 0x62, 0x5f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c,
	0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x75, 0x62, 0x43, 0x62, 0x54, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x65,
	0x67, 0x12, 0x6d, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x72, 0x65, 0x67, 0x54, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x5f, 0x63, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x65, 0x67, 0x43, 0x62, 0x12, 0x72, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x5f, 0x63,
	0x62, 0x5f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x67, 0x43, 0x62, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x72, 0x65, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6e, 0x72, 0x65,
	0x67, 0x12, 0x71, 0x0a, 0x08, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x75, 0x6e, 0x72,
	0x65, 0x67, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x5f, 0x63, 0x62,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x43, 0x62, 0x12,
	0x76, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x5f, 0x63, 0x62, 0x5f, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x6e,
	0x72, 0x65, 0x67, 0x43, 0x62, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x5f, 0x63, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x62, 0x12, 0x7a, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x5f, 0x63, 0x62, 0x5f, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x43, 0x62,
	0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x62, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x62, 0x12,
	0x78, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x62, 0x5f, 0x74, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x62, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x0e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x50, 0x65, 0x65, 0x72, 0x54, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x5f,
	0x63, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x43, 0x62, 0x12,
	0x72, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x62, 0x5f, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x43,
	0x62, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x72,
	0x76, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x72, 0x76, 0x12, 0x7a, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x72, 0x76,
	0x5f, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x72, 0x76, 0x54, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x7c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x13, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x69, 0x69,
	0x5f, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x55, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x6a,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x41, 0x64, 0x6a, 0x22, 0xad,
	0x02, 0x0a, 0x0d, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x6e, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x6e, 0x55, 0x70, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x62, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64, 0x76, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x22, 0xc8,
	0x05, 0x0a, 0x15, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x67, 0x65, 0x6e, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x60, 0x0a, 0x03, 0x6e, 0x63,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6e, 0x63, 0x64, 0x52, 0x03, 0x6e, 0x63, 0x64, 0x12, 0x5d, 0x0a, 0x02,
	0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e,
	0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x6d, 0x52, 0x02, 0x70, 0x6d, 0x12, 0x60, 0x0a, 0x03, 0x69,
	0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e,
	0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x73, 0x6d, 0x52, 0x03, 0x69, 0x73, 0x6d, 0x12, 0x5d, 0x0a,
	0x02, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x73, 0x52, 0x02, 0x64, 0x73, 0x12, 0x5d, 0x0a, 0x02,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e,
	0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x52, 0x02, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x6e,
	0x69, 0x69, 0x5f, 0x69, 0x64, 0x62, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73,
	0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x6e, 0x73, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x6e, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x69, 0x69, 0x5f, 0x69, 0x6e, 0x74,
	0x66, 0x52, 0x06, 0x6e, 0x69, 0x69, 0x49, 0x64, 0x62, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x6e, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x62, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x66,
	0x75, 0x6c, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x73, 0x72, 0x5f, 0x63, 0x68, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x73,
	0x72, 0x43, 0x68, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x0b, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_goTypes = []interface{}{
	(*IsisShNsrStatusGlobal_KEYS)(nil), // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global_KEYS
	(*IsisShNsrStatusGlobal)(nil),      // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global
	(*IsisShTimestampType)(nil),        // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	(*NsrStatusGen)(nil),               // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gen
	(*NsrStatusNcd)(nil),               // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ncd
	(*NsrStatusPm)(nil),                // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_pm
	(*NsrStatusIsm)(nil),               // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ism
	(*NsrStatusDs)(nil),                // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds
	(*NsrStatusNiiIntf)(nil),           // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_nii_intf
	(*NsrStatusTe)(nil),                // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_te
	(*NsrStatusInfraType)(nil),         // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type
	(*NsrStatusGblType)(nil),           // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gbl_type
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_depIdxs = []int32{
	11, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global.isis_nsr_peer:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gbl_type
	10, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global.isis_nsr_infra:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type
	2,  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.conn_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.conn_cb_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.pub_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.pub_cb_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.reg_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.reg_cb_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.unreg_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.unreg_cb_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 10: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.disconn_cb_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 11: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.notify_cb_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 12: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.notify_peer_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 13: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.del_cb_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 14: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.remove_srv_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	2,  // 15: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds.conn_status_ts:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type
	3,  // 16: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type.gen:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gen
	4,  // 17: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type.ncd:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ncd
	5,  // 18: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type.pm:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_pm
	6,  // 19: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type.ism:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ism
	7,  // 20: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type.ds:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds
	9,  // 21: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type.te:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_te
	8,  // 22: cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type.nii_idb:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_nii_intf
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShNsrStatusGlobal_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShNsrStatusGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTimestampType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusNcd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusPm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusIsm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusNiiIntf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusTe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusInfraType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NsrStatusGblType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status_isis_sh_nsr_status_global_proto_depIdxs = nil
}
