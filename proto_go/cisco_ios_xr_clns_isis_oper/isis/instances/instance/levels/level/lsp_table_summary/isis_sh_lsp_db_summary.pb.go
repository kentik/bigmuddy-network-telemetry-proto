// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/levels/level/lsp_table_summary/isis_sh_lsp_db_summary.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Summary Statistics for an IS-IS LSP Database
type IsisShLspDbSummary_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Level        string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *IsisShLspDbSummary_KEYS) Reset() {
	*x = IsisShLspDbSummary_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShLspDbSummary_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShLspDbSummary_KEYS) ProtoMessage() {}

func (x *IsisShLspDbSummary_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShLspDbSummary_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShLspDbSummary_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShLspDbSummary_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShLspDbSummary_KEYS) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type IsisShLspDbSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statistics for fragment 0 LSPs
	Fragment0LspStats *IsisShLspDbSummaryFragment_0Stats `protobuf:"bytes,50,opt,name=fragment0_lsp_stats,json=fragment0LspStats,proto3" json:"fragment0_lsp_stats,omitempty"`
	// Statistics for all LSP fragments
	AllFragmentLspStats *IsisShLspDbSummaryAllFragmentsStats `protobuf:"bytes,51,opt,name=all_fragment_lsp_stats,json=allFragmentLspStats,proto3" json:"all_fragment_lsp_stats,omitempty"`
}

func (x *IsisShLspDbSummary) Reset() {
	*x = IsisShLspDbSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShLspDbSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShLspDbSummary) ProtoMessage() {}

func (x *IsisShLspDbSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShLspDbSummary.ProtoReflect.Descriptor instead.
func (*IsisShLspDbSummary) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShLspDbSummary) GetFragment0LspStats() *IsisShLspDbSummaryFragment_0Stats {
	if x != nil {
		return x.Fragment0LspStats
	}
	return nil
}

func (x *IsisShLspDbSummary) GetAllFragmentLspStats() *IsisShLspDbSummaryAllFragmentsStats {
	if x != nil {
		return x.AllFragmentLspStats
	}
	return nil
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *IsisTopoIdType) Reset() {
	*x = IsisTopoIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTopoIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTopoIdType) ProtoMessage() {}

func (x *IsisTopoIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTopoIdType.ProtoReflect.Descriptor instead.
func (*IsisTopoIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{2}
}

func (x *IsisTopoIdType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisTopoIdType) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisTopoIdType) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *IsisTopoIdType) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

// LSP status counters
type IsisShLspDbSummaryStatusClassCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of active LSPs
	ActiveLspCount uint32 `protobuf:"varint,1,opt,name=active_lsp_count,json=activeLspCount,proto3" json:"active_lsp_count,omitempty"`
	// Number of purged LSPs
	PurgedLspCount uint32 `protobuf:"varint,2,opt,name=purged_lsp_count,json=purgedLspCount,proto3" json:"purged_lsp_count,omitempty"`
}

func (x *IsisShLspDbSummaryStatusClassCounters) Reset() {
	*x = IsisShLspDbSummaryStatusClassCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShLspDbSummaryStatusClassCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShLspDbSummaryStatusClassCounters) ProtoMessage() {}

func (x *IsisShLspDbSummaryStatusClassCounters) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShLspDbSummaryStatusClassCounters.ProtoReflect.Descriptor instead.
func (*IsisShLspDbSummaryStatusClassCounters) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{3}
}

func (x *IsisShLspDbSummaryStatusClassCounters) GetActiveLspCount() uint32 {
	if x != nil {
		return x.ActiveLspCount
	}
	return 0
}

func (x *IsisShLspDbSummaryStatusClassCounters) GetPurgedLspCount() uint32 {
	if x != nil {
		return x.PurgedLspCount
	}
	return 0
}

// LSP node type counters
type IsisShLspDbSummaryNodeClassCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Router LSPs
	RouteLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,1,opt,name=route_lsp_count,json=routeLspCount,proto3" json:"route_lsp_count,omitempty"`
	// Pseudonode LSPs
	PseudoNodeLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,2,opt,name=pseudo_node_lsp_count,json=pseudoNodeLspCount,proto3" json:"pseudo_node_lsp_count,omitempty"`
}

func (x *IsisShLspDbSummaryNodeClassCounters) Reset() {
	*x = IsisShLspDbSummaryNodeClassCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShLspDbSummaryNodeClassCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShLspDbSummaryNodeClassCounters) ProtoMessage() {}

func (x *IsisShLspDbSummaryNodeClassCounters) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShLspDbSummaryNodeClassCounters.ProtoReflect.Descriptor instead.
func (*IsisShLspDbSummaryNodeClassCounters) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{4}
}

func (x *IsisShLspDbSummaryNodeClassCounters) GetRouteLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if x != nil {
		return x.RouteLspCount
	}
	return nil
}

func (x *IsisShLspDbSummaryNodeClassCounters) GetPseudoNodeLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if x != nil {
		return x.PseudoNodeLspCount
	}
	return nil
}

// Per-topology related info
type IsisShLspDbSummaryTopoClassCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topology ID
	Id *IsisTopoIdType `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Number of LSPs with their per-topology overload bit set
	OverloadedLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,2,opt,name=overloaded_lsp_count,json=overloadedLspCount,proto3" json:"overloaded_lsp_count,omitempty"`
	// Number of LSPs with their per-topology attached bit set
	AttachedLspCount *IsisShLspDbSummaryStatusClassCounters `protobuf:"bytes,3,opt,name=attached_lsp_count,json=attachedLspCount,proto3" json:"attached_lsp_count,omitempty"`
}

func (x *IsisShLspDbSummaryTopoClassCounters) Reset() {
	*x = IsisShLspDbSummaryTopoClassCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShLspDbSummaryTopoClassCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShLspDbSummaryTopoClassCounters) ProtoMessage() {}

func (x *IsisShLspDbSummaryTopoClassCounters) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShLspDbSummaryTopoClassCounters.ProtoReflect.Descriptor instead.
func (*IsisShLspDbSummaryTopoClassCounters) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{5}
}

func (x *IsisShLspDbSummaryTopoClassCounters) GetId() *IsisTopoIdType {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IsisShLspDbSummaryTopoClassCounters) GetOverloadedLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if x != nil {
		return x.OverloadedLspCount
	}
	return nil
}

func (x *IsisShLspDbSummaryTopoClassCounters) GetAttachedLspCount() *IsisShLspDbSummaryStatusClassCounters {
	if x != nil {
		return x.AttachedLspCount
	}
	return nil
}

// Fragment-0 counters
type IsisShLspDbSummaryFragment_0Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary by class of node
	NodeCounters *IsisShLspDbSummaryNodeClassCounters `protobuf:"bytes,1,opt,name=node_counters,json=nodeCounters,proto3" json:"node_counters,omitempty"`
	// Per topology counters
	PerTopologyCounters []*IsisShLspDbSummaryTopoClassCounters `protobuf:"bytes,2,rep,name=per_topology_counters,json=perTopologyCounters,proto3" json:"per_topology_counters,omitempty"`
}

func (x *IsisShLspDbSummaryFragment_0Stats) Reset() {
	*x = IsisShLspDbSummaryFragment_0Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShLspDbSummaryFragment_0Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShLspDbSummaryFragment_0Stats) ProtoMessage() {}

func (x *IsisShLspDbSummaryFragment_0Stats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShLspDbSummaryFragment_0Stats.ProtoReflect.Descriptor instead.
func (*IsisShLspDbSummaryFragment_0Stats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{6}
}

func (x *IsisShLspDbSummaryFragment_0Stats) GetNodeCounters() *IsisShLspDbSummaryNodeClassCounters {
	if x != nil {
		return x.NodeCounters
	}
	return nil
}

func (x *IsisShLspDbSummaryFragment_0Stats) GetPerTopologyCounters() []*IsisShLspDbSummaryTopoClassCounters {
	if x != nil {
		return x.PerTopologyCounters
	}
	return nil
}

// All fragment counters
type IsisShLspDbSummaryAllFragmentsStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary by class of node
	NodeCounters *IsisShLspDbSummaryNodeClassCounters `protobuf:"bytes,1,opt,name=node_counters,json=nodeCounters,proto3" json:"node_counters,omitempty"`
}

func (x *IsisShLspDbSummaryAllFragmentsStats) Reset() {
	*x = IsisShLspDbSummaryAllFragmentsStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShLspDbSummaryAllFragmentsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShLspDbSummaryAllFragmentsStats) ProtoMessage() {}

func (x *IsisShLspDbSummaryAllFragmentsStats) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShLspDbSummaryAllFragmentsStats.ProtoReflect.Descriptor instead.
func (*IsisShLspDbSummaryAllFragmentsStats) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP(), []int{7}
}

func (x *IsisShLspDbSummaryAllFragmentsStats) GetNodeCounters() *IsisShLspDbSummaryNodeClassCounters {
	if x != nil {
		return x.NodeCounters
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDesc = []byte{
	0x0a, 0x6f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2f, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x52, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f,
	0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x58, 0x0a, 0x1b, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0xfc, 0x02, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f,
	0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0xab, 0x01, 0x0a, 0x13, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x30, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x30, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x30,
	0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x16, 0x61, 0x6c, 0x6c,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x2c, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x73, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x6c, 0x73,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70,
	0x75, 0x72, 0x67, 0x65, 0x64, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x03,
	0x0a, 0x2a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa9, 0x01, 0x0a,
	0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x15, 0x70, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x70, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x8b, 0x04, 0x0a, 0x2a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f,
	0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x75,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73,
	0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f,
	0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x12,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x73, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x03,
	0x0a, 0x27, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x30, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0xb2, 0x01, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x13, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x2a, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x6c,
	0x73, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x62, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_goTypes = []interface{}{
	(*IsisShLspDbSummary_KEYS)(nil),               // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_KEYS
	(*IsisShLspDbSummary)(nil),                    // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary
	(*IsisTopoIdType)(nil),                        // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_topo_id_type
	(*IsisShLspDbSummaryStatusClassCounters)(nil), // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_status_class_counters
	(*IsisShLspDbSummaryNodeClassCounters)(nil),   // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_node_class_counters
	(*IsisShLspDbSummaryTopoClassCounters)(nil),   // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_topo_class_counters
	(*IsisShLspDbSummaryFragment_0Stats)(nil),     // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_fragment_0_stats
	(*IsisShLspDbSummaryAllFragmentsStats)(nil),   // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_all_fragments_stats
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_depIdxs = []int32{
	6,  // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary.fragment0_lsp_stats:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_fragment_0_stats
	7,  // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary.all_fragment_lsp_stats:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_all_fragments_stats
	3,  // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_node_class_counters.route_lsp_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_status_class_counters
	3,  // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_node_class_counters.pseudo_node_lsp_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_status_class_counters
	2,  // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_topo_class_counters.id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_topo_id_type
	3,  // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_topo_class_counters.overloaded_lsp_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_status_class_counters
	3,  // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_topo_class_counters.attached_lsp_count:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_status_class_counters
	4,  // 7: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_fragment_0_stats.node_counters:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_node_class_counters
	5,  // 8: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_fragment_0_stats.per_topology_counters:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_topo_class_counters
	4,  // 9: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_all_fragments_stats.node_counters:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.lsp_table_summary.isis_sh_lsp_db_summary_node_class_counters
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShLspDbSummary_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShLspDbSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTopoIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShLspDbSummaryStatusClassCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShLspDbSummaryNodeClassCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShLspDbSummaryTopoClassCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShLspDbSummaryFragment_0Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShLspDbSummaryAllFragmentsStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_lsp_table_summary_isis_sh_lsp_db_summary_proto_depIdxs = nil
}
