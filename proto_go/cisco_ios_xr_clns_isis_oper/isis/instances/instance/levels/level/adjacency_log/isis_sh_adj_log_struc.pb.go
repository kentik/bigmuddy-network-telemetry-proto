// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/levels/level/adjacency_log/isis_sh_adj_log_struc.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Adjacency log structure
type IsisShAdjLogStruc_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Level        string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *IsisShAdjLogStruc_KEYS) Reset() {
	*x = IsisShAdjLogStruc_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShAdjLogStruc_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShAdjLogStruc_KEYS) ProtoMessage() {}

func (x *IsisShAdjLogStruc_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShAdjLogStruc_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShAdjLogStruc_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShAdjLogStruc_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShAdjLogStruc_KEYS) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type IsisShAdjLogStruc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Adjacency Log entries
	LogEntry []*IsisShAdjLogEnt `protobuf:"bytes,50,rep,name=log_entry,json=logEntry,proto3" json:"log_entry,omitempty"`
}

func (x *IsisShAdjLogStruc) Reset() {
	*x = IsisShAdjLogStruc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShAdjLogStruc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShAdjLogStruc) ProtoMessage() {}

func (x *IsisShAdjLogStruc) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShAdjLogStruc.ProtoReflect.Descriptor instead.
func (*IsisShAdjLogStruc) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShAdjLogStruc) GetLogEntry() []*IsisShAdjLogEnt {
	if x != nil {
		return x.LogEntry
	}
	return nil
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName,proto3" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
}

func (x *IsisTopoIdType) Reset() {
	*x = IsisTopoIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisTopoIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisTopoIdType) ProtoMessage() {}

func (x *IsisTopoIdType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisTopoIdType.ProtoReflect.Descriptor instead.
func (*IsisTopoIdType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP(), []int{2}
}

func (x *IsisTopoIdType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisTopoIdType) GetSafName() string {
	if x != nil {
		return x.SafName
	}
	return ""
}

func (x *IsisTopoIdType) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *IsisTopoIdType) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

// Per-topology per-adjacency log data
type IsisAdjLogTopoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topology ID
	Id *IsisTopoIdType `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Change
	Change string `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *IsisAdjLogTopoType) Reset() {
	*x = IsisAdjLogTopoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisAdjLogTopoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisAdjLogTopoType) ProtoMessage() {}

func (x *IsisAdjLogTopoType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisAdjLogTopoType.ProtoReflect.Descriptor instead.
func (*IsisAdjLogTopoType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP(), []int{3}
}

func (x *IsisAdjLogTopoType) GetId() *IsisTopoIdType {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IsisAdjLogTopoType) GetChange() string {
	if x != nil {
		return x.Change
	}
	return ""
}

// Timestamp for an event
type IsisShTimestampType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds,proto3" json:"nano_seconds,omitempty"`
}

func (x *IsisShTimestampType) Reset() {
	*x = IsisShTimestampType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShTimestampType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShTimestampType) ProtoMessage() {}

func (x *IsisShTimestampType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShTimestampType.ProtoReflect.Descriptor instead.
func (*IsisShTimestampType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP(), []int{4}
}

func (x *IsisShTimestampType) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *IsisShTimestampType) GetNanoSeconds() uint32 {
	if x != nil {
		return x.NanoSeconds
	}
	return 0
}

// Generic portion of a log entry
type IsisShGenericLogEnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in UTC relative to Jan 1st, 1970
	Timestamp *IsisShTimestampType `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *IsisShGenericLogEnt) Reset() {
	*x = IsisShGenericLogEnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShGenericLogEnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShGenericLogEnt) ProtoMessage() {}

func (x *IsisShGenericLogEnt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShGenericLogEnt.ProtoReflect.Descriptor instead.
func (*IsisShGenericLogEnt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP(), []int{5}
}

func (x *IsisShGenericLogEnt) GetTimestamp() *IsisShTimestampType {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// An adjacency log entry
type IsisShAdjLogEnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generic entry data
	GenericData *IsisShGenericLogEnt `protobuf:"bytes,1,opt,name=generic_data,json=genericData,proto3" json:"generic_data,omitempty"`
	// Neighbor system ID
	AdjLogNeighborSystemId string `protobuf:"bytes,2,opt,name=adj_log_neighbor_system_id,json=adjLogNeighborSystemId,proto3" json:"adj_log_neighbor_system_id,omitempty"`
	// Interface name
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Previous adjacency state
	PrevAdjState string `protobuf:"bytes,4,opt,name=prev_adj_state,json=prevAdjState,proto3" json:"prev_adj_state,omitempty"`
	// Current adjacency state
	CurAdjState string `protobuf:"bytes,5,opt,name=cur_adj_state,json=curAdjState,proto3" json:"cur_adj_state,omitempty"`
	// Reason adjacency changed state
	StateReason string `protobuf:"bytes,6,opt,name=state_reason,json=stateReason,proto3" json:"state_reason,omitempty"`
	// Per-topology changes
	AdjacencyPerTopologyChanges []*IsisAdjLogTopoType `protobuf:"bytes,7,rep,name=adjacency_per_topology_changes,json=adjacencyPerTopologyChanges,proto3" json:"adjacency_per_topology_changes,omitempty"`
}

func (x *IsisShAdjLogEnt) Reset() {
	*x = IsisShAdjLogEnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShAdjLogEnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShAdjLogEnt) ProtoMessage() {}

func (x *IsisShAdjLogEnt) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShAdjLogEnt.ProtoReflect.Descriptor instead.
func (*IsisShAdjLogEnt) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP(), []int{6}
}

func (x *IsisShAdjLogEnt) GetGenericData() *IsisShGenericLogEnt {
	if x != nil {
		return x.GenericData
	}
	return nil
}

func (x *IsisShAdjLogEnt) GetAdjLogNeighborSystemId() string {
	if x != nil {
		return x.AdjLogNeighborSystemId
	}
	return ""
}

func (x *IsisShAdjLogEnt) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *IsisShAdjLogEnt) GetPrevAdjState() string {
	if x != nil {
		return x.PrevAdjState
	}
	return ""
}

func (x *IsisShAdjLogEnt) GetCurAdjState() string {
	if x != nil {
		return x.CurAdjState
	}
	return ""
}

func (x *IsisShAdjLogEnt) GetStateReason() string {
	if x != nil {
		return x.StateReason
	}
	return ""
}

func (x *IsisShAdjLogEnt) GetAdjacencyPerTopologyChanges() []*IsisAdjLogTopoType {
	if x != nil {
		return x.AdjacencyPerTopologyChanges
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDesc = []byte{
	0x0a, 0x6a, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x2f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x67,
	0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x22, 0x57, 0x0a, 0x1a,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x12,
	0x80, 0x01, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x32, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x55, 0x0a, 0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6e, 0x6f, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x61,
	0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x65, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa0, 0x04, 0x0a,
	0x13, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x6a, 0x4c, 0x6f, 0x67, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x6a,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x41, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x41, 0x64, 0x6a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0xab, 0x01, 0x0a, 0x1e, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x1b, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_goTypes = []interface{}{
	(*IsisShAdjLogStruc_KEYS)(nil), // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_adj_log_struc_KEYS
	(*IsisShAdjLogStruc)(nil),      // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_adj_log_struc
	(*IsisTopoIdType)(nil),         // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_topo_id_type
	(*IsisAdjLogTopoType)(nil),     // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_adj_log_topo_type
	(*IsisShTimestampType)(nil),    // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_timestamp_type
	(*IsisShGenericLogEnt)(nil),    // 5: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_generic_log_ent
	(*IsisShAdjLogEnt)(nil),        // 6: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_adj_log_ent
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_depIdxs = []int32{
	6, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_adj_log_struc.log_entry:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_adj_log_ent
	2, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_adj_log_topo_type.id:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_topo_id_type
	4, // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_generic_log_ent.timestamp:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_timestamp_type
	5, // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_adj_log_ent.generic_data:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_generic_log_ent
	3, // 4: cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_sh_adj_log_ent.adjacency_per_topology_changes:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacency_log.isis_adj_log_topo_type
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShAdjLogStruc_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShAdjLogStruc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisTopoIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisAdjLogTopoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShTimestampType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShGenericLogEnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShAdjLogEnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacency_log_isis_sh_adj_log_struc_proto_depIdxs = nil
}
