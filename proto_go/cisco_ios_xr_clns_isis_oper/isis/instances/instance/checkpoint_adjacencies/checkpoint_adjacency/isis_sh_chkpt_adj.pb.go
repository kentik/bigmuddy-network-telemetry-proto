// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: cisco_ios_xr_clns_isis_oper/isis/instances/instance/checkpoint_adjacencies/checkpoint_adjacency/isis_sh_chkpt_adj.proto

package cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Checkpointed adjacency
type IsisShChkptAdj_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Level         string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	SystemId      string `protobuf:"bytes,3,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	InterfaceName string `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *IsisShChkptAdj_KEYS) Reset() {
	*x = IsisShChkptAdj_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShChkptAdj_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShChkptAdj_KEYS) ProtoMessage() {}

func (x *IsisShChkptAdj_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShChkptAdj_KEYS.ProtoReflect.Descriptor instead.
func (*IsisShChkptAdj_KEYS) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescGZIP(), []int{0}
}

func (x *IsisShChkptAdj_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *IsisShChkptAdj_KEYS) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *IsisShChkptAdj_KEYS) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *IsisShChkptAdj_KEYS) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type IsisShChkptAdj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Checkpoint object ID
	CheckpointAdjacencyObjectId uint32 `protobuf:"varint,50,opt,name=checkpoint_adjacency_object_id,json=checkpointAdjacencyObjectId,proto3" json:"checkpoint_adjacency_object_id,omitempty"`
	// Neighbor system ID
	CheckpointAdjacencySystemId string `protobuf:"bytes,51,opt,name=checkpoint_adjacency_system_id,json=checkpointAdjacencySystemId,proto3" json:"checkpoint_adjacency_system_id,omitempty"`
	// Neighbor SNPA
	CheckpointAdjacencySnpa string `protobuf:"bytes,52,opt,name=checkpoint_adjacency_snpa,json=checkpointAdjacencySnpa,proto3" json:"checkpoint_adjacency_snpa,omitempty"`
	// Local interface
	CheckpointAdjacencyInterface string `protobuf:"bytes,53,opt,name=checkpoint_adjacency_interface,json=checkpointAdjacencyInterface,proto3" json:"checkpoint_adjacency_interface,omitempty"`
	// Adjacency level
	CheckpointAdjacencyLevel string `protobuf:"bytes,54,opt,name=checkpoint_adjacency_level,json=checkpointAdjacencyLevel,proto3" json:"checkpoint_adjacency_level,omitempty"`
	// Adjacency holdtime (s)
	CheckpointAdjacencyHoldtime uint32 `protobuf:"varint,55,opt,name=checkpoint_adjacency_holdtime,json=checkpointAdjacencyHoldtime,proto3" json:"checkpoint_adjacency_holdtime,omitempty"`
	// Adjacency LAN priority
	CheckpointAdjacencyLanPriority uint32 `protobuf:"varint,56,opt,name=checkpoint_adjacency_lan_priority,json=checkpointAdjacencyLanPriority,proto3" json:"checkpoint_adjacency_lan_priority,omitempty"`
	// Neighbor circuit number
	CheckpointAdjacencyCircuitNumber uint32 `protobuf:"varint,57,opt,name=checkpoint_adjacency_circuit_number,json=checkpointAdjacencyCircuitNumber,proto3" json:"checkpoint_adjacency_circuit_number,omitempty"`
	// Per address family next hops
	CheckpointAdjacencyPerAddressFamilyNextHop []*IsisIpAddrType `protobuf:"bytes,58,rep,name=checkpoint_adjacency_per_address_family_next_hop,json=checkpointAdjacencyPerAddressFamilyNextHop,proto3" json:"checkpoint_adjacency_per_address_family_next_hop,omitempty"`
}

func (x *IsisShChkptAdj) Reset() {
	*x = IsisShChkptAdj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisShChkptAdj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisShChkptAdj) ProtoMessage() {}

func (x *IsisShChkptAdj) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisShChkptAdj.ProtoReflect.Descriptor instead.
func (*IsisShChkptAdj) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescGZIP(), []int{1}
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencyObjectId() uint32 {
	if x != nil {
		return x.CheckpointAdjacencyObjectId
	}
	return 0
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencySystemId() string {
	if x != nil {
		return x.CheckpointAdjacencySystemId
	}
	return ""
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencySnpa() string {
	if x != nil {
		return x.CheckpointAdjacencySnpa
	}
	return ""
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencyInterface() string {
	if x != nil {
		return x.CheckpointAdjacencyInterface
	}
	return ""
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencyLevel() string {
	if x != nil {
		return x.CheckpointAdjacencyLevel
	}
	return ""
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencyHoldtime() uint32 {
	if x != nil {
		return x.CheckpointAdjacencyHoldtime
	}
	return 0
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencyLanPriority() uint32 {
	if x != nil {
		return x.CheckpointAdjacencyLanPriority
	}
	return 0
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencyCircuitNumber() uint32 {
	if x != nil {
		return x.CheckpointAdjacencyCircuitNumber
	}
	return 0
}

func (x *IsisShChkptAdj) GetCheckpointAdjacencyPerAddressFamilyNextHop() []*IsisIpAddrType {
	if x != nil {
		return x.CheckpointAdjacencyPerAddressFamilyNextHop
	}
	return nil
}

type IsisIpv6AddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IsisIpv6AddressType) Reset() {
	*x = IsisIpv6AddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpv6AddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpv6AddressType) ProtoMessage() {}

func (x *IsisIpv6AddressType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpv6AddressType.ProtoReflect.Descriptor instead.
func (*IsisIpv6AddressType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescGZIP(), []int{2}
}

func (x *IsisIpv6AddressType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IsisIpAddrType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	// IPV4 address type
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPV6 address type
	Ipv6 *IsisIpv6AddressType `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *IsisIpAddrType) Reset() {
	*x = IsisIpAddrType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisIpAddrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisIpAddrType) ProtoMessage() {}

func (x *IsisIpAddrType) ProtoReflect() protoreflect.Message {
	mi := &file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisIpAddrType.ProtoReflect.Descriptor instead.
func (*IsisIpAddrType) Descriptor() ([]byte, []int) {
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescGZIP(), []int{3}
}

func (x *IsisIpAddrType) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *IsisIpAddrType) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *IsisIpAddrType) GetIpv6() *IsisIpv6AddressType {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

var File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto protoreflect.FileDescriptor

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDesc = []byte{
	0x0a, 0x77, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x73,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x6b, 0x70, 0x74, 0x5f,
	0x61, 0x64, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5f, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x5f, 0x63, 0x68, 0x6b, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x6a,
	0x5f, 0x4b, 0x45, 0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x06, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x5f, 0x63, 0x68, 0x6b, 0x70, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x1e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6e, 0x70,
	0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6e, 0x70, 0x61,
	0x12, 0x44, 0x0a, 0x1e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x48, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x23, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x61,
	0x63, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0xd8, 0x01, 0x0a, 0x30, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63, 0x6c, 0x6e,
	0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x2a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x2e, 0x0a,
	0x16, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce, 0x01,
	0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34,
	0x12, 0x8b, 0x01, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x77, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x63,
	0x6c, 0x6e, 0x73, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x73,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescOnce sync.Once
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescData = file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDesc
)

func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescGZIP() []byte {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescOnce.Do(func() {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescData = protoimpl.X.CompressGZIP(file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescData)
	})
	return file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDescData
}

var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_goTypes = []interface{}{
	(*IsisShChkptAdj_KEYS)(nil), // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_sh_chkpt_adj_KEYS
	(*IsisShChkptAdj)(nil),      // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_sh_chkpt_adj
	(*IsisIpv6AddressType)(nil), // 2: cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ipv6_address_type
	(*IsisIpAddrType)(nil),      // 3: cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ip_addr_type
}
var file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_depIdxs = []int32{
	3, // 0: cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_sh_chkpt_adj.checkpoint_adjacency_per_address_family_next_hop:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ip_addr_type
	2, // 1: cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ip_addr_type.ipv6:type_name -> cisco_ios_xr_clns_isis_oper.isis.instances.instance.checkpoint_adjacencies.checkpoint_adjacency.isis_ipv6_address_type
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() {
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_init()
}
func file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_init() {
	if File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShChkptAdj_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisShChkptAdj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpv6AddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisIpAddrType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_goTypes,
		DependencyIndexes: file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_depIdxs,
		MessageInfos:      file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_msgTypes,
	}.Build()
	File_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto = out.File
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_rawDesc = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_goTypes = nil
	file_cisco_ios_xr_clns_isis_oper_isis_instances_instance_checkpoint_adjacencies_checkpoint_adjacency_isis_sh_chkpt_adj_proto_depIdxs = nil
}
